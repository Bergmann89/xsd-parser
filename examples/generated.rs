pub mod xs {
    use super::*;
    #[derive(Debug, Clone)]
    pub enum AnyType {}
    impl gml::AbstractObjectTrait for AnyType {}
    impl gml::AbstractValueTrait for AnyType {}
    impl xsd_parser::AsAny for AnyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    pub type NcnameType = String;
    pub type IntegerType = i32;
    pub type DoubleType = f64;
}
pub mod aixm {
    use super::*;
    pub type Abandoned = CodeYesNoType;
    #[derive(Debug, Clone)]
    pub struct CodeYesNoType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeYesNoBaseType,
    }
    #[derive(Debug, Clone)]
    pub enum CodeYesNoBaseType {
        Yes,
        No,
        String(String),
    }
    pub type AbsorbType = CodeArrestingGearEnergyAbsorbType;
    #[derive(Debug, Clone)]
    pub struct CodeArrestingGearEnergyAbsorbType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeArrestingGearEnergyAbsorbBaseType,
    }
    #[derive(Debug, Clone)]
    pub enum CodeArrestingGearEnergyAbsorbBaseType {
        Rotary1300,
        Rotary2800,
        Rotary34B1A,
        Rotary34B1B,
        Rotary34B1C,
        Rotary34D1F,
        Rotary44B2C,
        Rotary44B2D,
        Rotary44B2E,
        Rotary44B2F,
        Rotary44B2H,
        Rotary44B2I,
        Rotary44B2L,
        Rotary44B3A,
        Rotary44B3H,
        Rotary44B3L,
        Rotary44B4C,
        Rotary44B4E,
        Rotary44B4H,
        Rotary500S,
        Rotary500S4,
        Rotary500S6,
        Rotary500S8,
        Rotarytrans500S8,
        RotaryAae64,
        RotaryBak12A,
        RotaryBak12B,
        RotaryBak13,
        LinearBak6,
        RotaryBak9,
        DiskBefab123,
        DiskBefab204,
        DiskBefab212,
        DiskBefab244,
        DiskBefab562,
        DiskBefab63,
        DiskBefab602,
        DiskBefab83,
        ChainChag,
        RotaryDualBak12,
        RotaryE15,
        RotaryE27,
        RotaryE28,
        ChainE5,
        ChainE51,
        ChainE52,
        ChainE53,
        ChainE6,
        RotaryChainJetstop,
        MobilrotaryM21,
        MobilrotaryMaas,
        MobilrotaryMagI,
        MobilrotaryMagIi,
        MobilrotaryMagIii,
        MobilrotaryMagIv,
        MobilrotaryMagIx,
        MobilrotaryMagVi,
        MobilrotaryMagVii,
        MobilrotaryMagViii,
        MobilrotaryMagX,
        TextileMb100,
        TextileMb60,
        MobilrotaryHydraulicWater,
        RotaryPuagMk21,
        DiskRafMk12A,
        DiskRafMk6,
        RafPortableAgear,
        DiskRafTypeaBefab63,
        DiskRafTypebBefab123,
        RotaryRhagMk1,
        RotaryHydraulicWater,
        BarrierDiskSafeland,
        LinearSpragMk1,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAIXMFeature(pub Box<dyn AbstractAIXMFeatureTrait>);
    pub trait AbstractAIXMFeatureTrait: gml::AbstractFeatureTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractAirportHeliportProtectionAreaType {
        pub id: String,
        pub content: Vec<AbstractAirportHeliportProtectionAreaTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractAirportHeliportProtectionAreaTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
    }
    impl AbstractAIXMFeatureTrait for AbstractAirportHeliportProtectionAreaType {}
    impl gml::AbstractFeatureTrait for AbstractAirportHeliportProtectionAreaType {}
    impl gml::AbstractGMLTrait for AbstractAirportHeliportProtectionAreaType {}
    impl gml::AbstractObjectTrait for AbstractAirportHeliportProtectionAreaType {}
    impl xsd_parser::AsAny for AbstractAirportHeliportProtectionAreaType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayProtectAreaType {
        pub id: String,
        pub content: Vec<RunwayProtectAreaTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayProtectAreaTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(RunwayProtectAreaTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for RunwayProtectAreaType {}
    impl AbstractAirportHeliportProtectionAreaTrait for RunwayProtectAreaType {}
    impl gml::AbstractFeatureTrait for RunwayProtectAreaType {}
    impl gml::AbstractGMLTrait for RunwayProtectAreaType {}
    impl gml::AbstractObjectTrait for RunwayProtectAreaType {}
    impl xsd_parser::AsAny for RunwayProtectAreaType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayDirectionType {
        pub id: String,
        pub content: Vec<RunwayDirectionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayDirectionTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(RunwayDirectionTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for RunwayDirectionType {}
    impl gml::AbstractFeatureTrait for RunwayDirectionType {}
    impl gml::AbstractGMLTrait for RunwayDirectionType {}
    impl gml::AbstractObjectTrait for RunwayDirectionType {}
    impl xsd_parser::AsAny for RunwayDirectionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayCentrelinePointType {
        pub id: String,
        pub content: Vec<RunwayCentrelinePointTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayCentrelinePointTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(RunwayCentrelinePointTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for RunwayCentrelinePointType {}
    impl gml::AbstractFeatureTrait for RunwayCentrelinePointType {}
    impl gml::AbstractGMLTrait for RunwayCentrelinePointType {}
    impl gml::AbstractObjectTrait for RunwayCentrelinePointType {}
    impl xsd_parser::AsAny for RunwayCentrelinePointType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayType {
        pub id: String,
        pub content: Vec<RunwayTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(RunwayTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for RunwayType {}
    impl gml::AbstractFeatureTrait for RunwayType {}
    impl gml::AbstractGMLTrait for RunwayType {}
    impl gml::AbstractObjectTrait for RunwayType {}
    impl xsd_parser::AsAny for RunwayType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ArrestingGearType {
        pub id: String,
        pub content: Vec<ArrestingGearTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ArrestingGearTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(ArrestingGearTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for ArrestingGearType {}
    impl gml::AbstractFeatureTrait for ArrestingGearType {}
    impl gml::AbstractGMLTrait for ArrestingGearType {}
    impl gml::AbstractObjectTrait for ArrestingGearType {}
    impl xsd_parser::AsAny for ArrestingGearType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayElementType {
        pub id: String,
        pub content: Vec<RunwayElementTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayElementTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(RunwayElementTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for RunwayElementType {}
    impl gml::AbstractFeatureTrait for RunwayElementType {}
    impl gml::AbstractGMLTrait for RunwayElementType {}
    impl gml::AbstractObjectTrait for RunwayElementType {}
    impl xsd_parser::AsAny for RunwayElementType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractGroundLightSystemType {
        pub id: String,
        pub content: Vec<AbstractGroundLightSystemTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractGroundLightSystemTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
    }
    impl AbstractAIXMFeatureTrait for AbstractGroundLightSystemType {}
    impl gml::AbstractFeatureTrait for AbstractGroundLightSystemType {}
    impl gml::AbstractGMLTrait for AbstractGroundLightSystemType {}
    impl gml::AbstractObjectTrait for AbstractGroundLightSystemType {}
    impl xsd_parser::AsAny for AbstractGroundLightSystemType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct VisualGlideSlopeIndicatorType {
        pub id: String,
        pub content: Vec<VisualGlideSlopeIndicatorTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum VisualGlideSlopeIndicatorTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(VisualGlideSlopeIndicatorTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for VisualGlideSlopeIndicatorType {}
    impl AbstractGroundLightSystemTrait for VisualGlideSlopeIndicatorType {}
    impl gml::AbstractFeatureTrait for VisualGlideSlopeIndicatorType {}
    impl gml::AbstractGMLTrait for VisualGlideSlopeIndicatorType {}
    impl gml::AbstractObjectTrait for VisualGlideSlopeIndicatorType {}
    impl xsd_parser::AsAny for VisualGlideSlopeIndicatorType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayVisualRangeType {
        pub id: String,
        pub content: Vec<RunwayVisualRangeTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayVisualRangeTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(RunwayVisualRangeTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for RunwayVisualRangeType {}
    impl gml::AbstractFeatureTrait for RunwayVisualRangeType {}
    impl gml::AbstractGMLTrait for RunwayVisualRangeType {}
    impl gml::AbstractObjectTrait for RunwayVisualRangeType {}
    impl xsd_parser::AsAny for RunwayVisualRangeType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayBlastPadType {
        pub id: String,
        pub content: Vec<RunwayBlastPadTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayBlastPadTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(RunwayBlastPadTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for RunwayBlastPadType {}
    impl gml::AbstractFeatureTrait for RunwayBlastPadType {}
    impl gml::AbstractGMLTrait for RunwayBlastPadType {}
    impl gml::AbstractObjectTrait for RunwayBlastPadType {}
    impl xsd_parser::AsAny for RunwayBlastPadType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiHoldingPositionType {
        pub id: String,
        pub content: Vec<TaxiHoldingPositionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiHoldingPositionTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(TaxiHoldingPositionTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for TaxiHoldingPositionType {}
    impl gml::AbstractFeatureTrait for TaxiHoldingPositionType {}
    impl gml::AbstractGMLTrait for TaxiHoldingPositionType {}
    impl gml::AbstractObjectTrait for TaxiHoldingPositionType {}
    impl xsd_parser::AsAny for TaxiHoldingPositionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiwayType {
        pub id: String,
        pub content: Vec<TaxiwayTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(TaxiwayTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for TaxiwayType {}
    impl gml::AbstractFeatureTrait for TaxiwayType {}
    impl gml::AbstractGMLTrait for TaxiwayType {}
    impl gml::AbstractObjectTrait for TaxiwayType {}
    impl xsd_parser::AsAny for TaxiwayType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiwayElementType {
        pub id: String,
        pub content: Vec<TaxiwayElementTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayElementTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(TaxiwayElementTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for TaxiwayElementType {}
    impl gml::AbstractFeatureTrait for TaxiwayElementType {}
    impl gml::AbstractGMLTrait for TaxiwayElementType {}
    impl gml::AbstractObjectTrait for TaxiwayElementType {}
    impl xsd_parser::AsAny for TaxiwayElementType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GuidanceLineType {
        pub id: String,
        pub content: Vec<GuidanceLineTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GuidanceLineTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(GuidanceLineTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for GuidanceLineType {}
    impl gml::AbstractFeatureTrait for GuidanceLineType {}
    impl gml::AbstractGMLTrait for GuidanceLineType {}
    impl gml::AbstractObjectTrait for GuidanceLineType {}
    impl xsd_parser::AsAny for GuidanceLineType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ApronType {
        pub id: String,
        pub content: Vec<ApronTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ApronTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(ApronTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for ApronType {}
    impl gml::AbstractFeatureTrait for ApronType {}
    impl gml::AbstractGMLTrait for ApronType {}
    impl gml::AbstractObjectTrait for ApronType {}
    impl xsd_parser::AsAny for ApronType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ApronElementType {
        pub id: String,
        pub content: Vec<ApronElementTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ApronElementTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(ApronElementTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for ApronElementType {}
    impl gml::AbstractFeatureTrait for ApronElementType {}
    impl gml::AbstractGMLTrait for ApronElementType {}
    impl gml::AbstractObjectTrait for ApronElementType {}
    impl xsd_parser::AsAny for ApronElementType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AircraftStandType {
        pub id: String,
        pub content: Vec<AircraftStandTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AircraftStandTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(AircraftStandTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for AircraftStandType {}
    impl gml::AbstractFeatureTrait for AircraftStandType {}
    impl gml::AbstractGMLTrait for AircraftStandType {}
    impl gml::AbstractObjectTrait for AircraftStandType {}
    impl xsd_parser::AsAny for AircraftStandType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RoadType {
        pub id: String,
        pub content: Vec<RoadTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RoadTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(RoadTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for RoadType {}
    impl gml::AbstractFeatureTrait for RoadType {}
    impl gml::AbstractGMLTrait for RoadType {}
    impl gml::AbstractObjectTrait for RoadType {}
    impl xsd_parser::AsAny for RoadType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DeicingAreaType {
        pub id: String,
        pub content: Vec<DeicingAreaTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DeicingAreaTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(DeicingAreaTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for DeicingAreaType {}
    impl gml::AbstractFeatureTrait for DeicingAreaType {}
    impl gml::AbstractGMLTrait for DeicingAreaType {}
    impl gml::AbstractObjectTrait for DeicingAreaType {}
    impl xsd_parser::AsAny for DeicingAreaType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct PassengerLoadingBridgeType {
        pub id: String,
        pub content: Vec<PassengerLoadingBridgeTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PassengerLoadingBridgeTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(PassengerLoadingBridgeTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for PassengerLoadingBridgeType {}
    impl gml::AbstractFeatureTrait for PassengerLoadingBridgeType {}
    impl gml::AbstractGMLTrait for PassengerLoadingBridgeType {}
    impl gml::AbstractObjectTrait for PassengerLoadingBridgeType {}
    impl xsd_parser::AsAny for PassengerLoadingBridgeType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TouchDownLiftOffSafeAreaType {
        pub id: String,
        pub content: Vec<TouchDownLiftOffSafeAreaTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffSafeAreaTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(TouchDownLiftOffSafeAreaTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for TouchDownLiftOffSafeAreaType {}
    impl AbstractAirportHeliportProtectionAreaTrait for TouchDownLiftOffSafeAreaType {}
    impl gml::AbstractFeatureTrait for TouchDownLiftOffSafeAreaType {}
    impl gml::AbstractGMLTrait for TouchDownLiftOffSafeAreaType {}
    impl gml::AbstractObjectTrait for TouchDownLiftOffSafeAreaType {}
    impl xsd_parser::AsAny for TouchDownLiftOffSafeAreaType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TouchDownLiftOffType {
        pub id: String,
        pub content: Vec<TouchDownLiftOffTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(TouchDownLiftOffTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for TouchDownLiftOffType {}
    impl gml::AbstractFeatureTrait for TouchDownLiftOffType {}
    impl gml::AbstractGMLTrait for TouchDownLiftOffType {}
    impl gml::AbstractObjectTrait for TouchDownLiftOffType {}
    impl xsd_parser::AsAny for TouchDownLiftOffType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ApronLightSystemType {
        pub id: String,
        pub content: Vec<ApronLightSystemTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ApronLightSystemTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(ApronLightSystemTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for ApronLightSystemType {}
    impl AbstractGroundLightSystemTrait for ApronLightSystemType {}
    impl gml::AbstractFeatureTrait for ApronLightSystemType {}
    impl gml::AbstractGMLTrait for ApronLightSystemType {}
    impl gml::AbstractObjectTrait for ApronLightSystemType {}
    impl xsd_parser::AsAny for ApronLightSystemType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiwayLightSystemType {
        pub id: String,
        pub content: Vec<TaxiwayLightSystemTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayLightSystemTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(TaxiwayLightSystemTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for TaxiwayLightSystemType {}
    impl AbstractGroundLightSystemTrait for TaxiwayLightSystemType {}
    impl gml::AbstractFeatureTrait for TaxiwayLightSystemType {}
    impl gml::AbstractGMLTrait for TaxiwayLightSystemType {}
    impl gml::AbstractObjectTrait for TaxiwayLightSystemType {}
    impl xsd_parser::AsAny for TaxiwayLightSystemType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayDirectionLightSystemType {
        pub id: String,
        pub content: Vec<RunwayDirectionLightSystemTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayDirectionLightSystemTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(RunwayDirectionLightSystemTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for RunwayDirectionLightSystemType {}
    impl AbstractGroundLightSystemTrait for RunwayDirectionLightSystemType {}
    impl gml::AbstractFeatureTrait for RunwayDirectionLightSystemType {}
    impl gml::AbstractGMLTrait for RunwayDirectionLightSystemType {}
    impl gml::AbstractObjectTrait for RunwayDirectionLightSystemType {}
    impl xsd_parser::AsAny for RunwayDirectionLightSystemType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TouchDownLiftOffLightSystemType {
        pub id: String,
        pub content: Vec<TouchDownLiftOffLightSystemTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffLightSystemTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(TouchDownLiftOffLightSystemTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for TouchDownLiftOffLightSystemType {}
    impl AbstractGroundLightSystemTrait for TouchDownLiftOffLightSystemType {}
    impl gml::AbstractFeatureTrait for TouchDownLiftOffLightSystemType {}
    impl gml::AbstractGMLTrait for TouchDownLiftOffLightSystemType {}
    impl gml::AbstractObjectTrait for TouchDownLiftOffLightSystemType {}
    impl xsd_parser::AsAny for TouchDownLiftOffLightSystemType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GuidanceLineLightSystemType {
        pub id: String,
        pub content: Vec<GuidanceLineLightSystemTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GuidanceLineLightSystemTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(GuidanceLineLightSystemTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for GuidanceLineLightSystemType {}
    impl AbstractGroundLightSystemTrait for GuidanceLineLightSystemType {}
    impl gml::AbstractFeatureTrait for GuidanceLineLightSystemType {}
    impl gml::AbstractGMLTrait for GuidanceLineLightSystemType {}
    impl gml::AbstractObjectTrait for GuidanceLineLightSystemType {}
    impl xsd_parser::AsAny for GuidanceLineLightSystemType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayProtectAreaLightSystemType {
        pub id: String,
        pub content: Vec<RunwayProtectAreaLightSystemTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayProtectAreaLightSystemTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(RunwayProtectAreaLightSystemTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for RunwayProtectAreaLightSystemType {}
    impl AbstractGroundLightSystemTrait for RunwayProtectAreaLightSystemType {}
    impl gml::AbstractFeatureTrait for RunwayProtectAreaLightSystemType {}
    impl gml::AbstractGMLTrait for RunwayProtectAreaLightSystemType {}
    impl gml::AbstractObjectTrait for RunwayProtectAreaLightSystemType {}
    impl xsd_parser::AsAny for RunwayProtectAreaLightSystemType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiHoldingPositionLightSystemType {
        pub id: String,
        pub content: Vec<TaxiHoldingPositionLightSystemTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiHoldingPositionLightSystemTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(TaxiHoldingPositionLightSystemTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for TaxiHoldingPositionLightSystemType {}
    impl AbstractGroundLightSystemTrait for TaxiHoldingPositionLightSystemType {}
    impl gml::AbstractFeatureTrait for TaxiHoldingPositionLightSystemType {}
    impl gml::AbstractGMLTrait for TaxiHoldingPositionLightSystemType {}
    impl gml::AbstractObjectTrait for TaxiHoldingPositionLightSystemType {}
    impl xsd_parser::AsAny for TaxiHoldingPositionLightSystemType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ApproachLightingSystemType {
        pub id: String,
        pub content: Vec<ApproachLightingSystemTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ApproachLightingSystemTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(ApproachLightingSystemTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for ApproachLightingSystemType {}
    impl AbstractGroundLightSystemTrait for ApproachLightingSystemType {}
    impl gml::AbstractFeatureTrait for ApproachLightingSystemType {}
    impl gml::AbstractGMLTrait for ApproachLightingSystemType {}
    impl gml::AbstractObjectTrait for ApproachLightingSystemType {}
    impl xsd_parser::AsAny for ApproachLightingSystemType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractMarkingType {
        pub id: String,
        pub content: Vec<AbstractMarkingTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractMarkingTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
    }
    impl AbstractAIXMFeatureTrait for AbstractMarkingType {}
    impl gml::AbstractFeatureTrait for AbstractMarkingType {}
    impl gml::AbstractGMLTrait for AbstractMarkingType {}
    impl gml::AbstractObjectTrait for AbstractMarkingType {}
    impl xsd_parser::AsAny for AbstractMarkingType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiwayMarkingType {
        pub id: String,
        pub content: Vec<TaxiwayMarkingTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayMarkingTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(TaxiwayMarkingTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for TaxiwayMarkingType {}
    impl AbstractMarkingTrait for TaxiwayMarkingType {}
    impl gml::AbstractFeatureTrait for TaxiwayMarkingType {}
    impl gml::AbstractGMLTrait for TaxiwayMarkingType {}
    impl gml::AbstractObjectTrait for TaxiwayMarkingType {}
    impl xsd_parser::AsAny for TaxiwayMarkingType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ApronMarkingType {
        pub id: String,
        pub content: Vec<ApronMarkingTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ApronMarkingTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(ApronMarkingTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for ApronMarkingType {}
    impl AbstractMarkingTrait for ApronMarkingType {}
    impl gml::AbstractFeatureTrait for ApronMarkingType {}
    impl gml::AbstractGMLTrait for ApronMarkingType {}
    impl gml::AbstractObjectTrait for ApronMarkingType {}
    impl xsd_parser::AsAny for ApronMarkingType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportProtectionAreaMarkingType {
        pub id: String,
        pub content: Vec<AirportProtectionAreaMarkingTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirportProtectionAreaMarkingTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(AirportProtectionAreaMarkingTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for AirportProtectionAreaMarkingType {}
    impl AbstractMarkingTrait for AirportProtectionAreaMarkingType {}
    impl gml::AbstractFeatureTrait for AirportProtectionAreaMarkingType {}
    impl gml::AbstractGMLTrait for AirportProtectionAreaMarkingType {}
    impl gml::AbstractObjectTrait for AirportProtectionAreaMarkingType {}
    impl xsd_parser::AsAny for AirportProtectionAreaMarkingType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TouchDownLiftOffMarkingType {
        pub id: String,
        pub content: Vec<TouchDownLiftOffMarkingTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffMarkingTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(TouchDownLiftOffMarkingTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for TouchDownLiftOffMarkingType {}
    impl AbstractMarkingTrait for TouchDownLiftOffMarkingType {}
    impl gml::AbstractFeatureTrait for TouchDownLiftOffMarkingType {}
    impl gml::AbstractGMLTrait for TouchDownLiftOffMarkingType {}
    impl gml::AbstractObjectTrait for TouchDownLiftOffMarkingType {}
    impl xsd_parser::AsAny for TouchDownLiftOffMarkingType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayMarkingType {
        pub id: String,
        pub content: Vec<RunwayMarkingTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayMarkingTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(RunwayMarkingTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for RunwayMarkingType {}
    impl AbstractMarkingTrait for RunwayMarkingType {}
    impl gml::AbstractFeatureTrait for RunwayMarkingType {}
    impl gml::AbstractGMLTrait for RunwayMarkingType {}
    impl gml::AbstractObjectTrait for RunwayMarkingType {}
    impl xsd_parser::AsAny for RunwayMarkingType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GuidanceLineMarkingType {
        pub id: String,
        pub content: Vec<GuidanceLineMarkingTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GuidanceLineMarkingTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(GuidanceLineMarkingTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for GuidanceLineMarkingType {}
    impl AbstractMarkingTrait for GuidanceLineMarkingType {}
    impl gml::AbstractFeatureTrait for GuidanceLineMarkingType {}
    impl gml::AbstractGMLTrait for GuidanceLineMarkingType {}
    impl gml::AbstractObjectTrait for GuidanceLineMarkingType {}
    impl xsd_parser::AsAny for GuidanceLineMarkingType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DeicingAreaMarkingType {
        pub id: String,
        pub content: Vec<DeicingAreaMarkingTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DeicingAreaMarkingTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(DeicingAreaMarkingTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for DeicingAreaMarkingType {}
    impl AbstractMarkingTrait for DeicingAreaMarkingType {}
    impl gml::AbstractFeatureTrait for DeicingAreaMarkingType {}
    impl gml::AbstractGMLTrait for DeicingAreaMarkingType {}
    impl gml::AbstractObjectTrait for DeicingAreaMarkingType {}
    impl xsd_parser::AsAny for DeicingAreaMarkingType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiHoldingPositionMarkingType {
        pub id: String,
        pub content: Vec<TaxiHoldingPositionMarkingTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiHoldingPositionMarkingTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(TaxiHoldingPositionMarkingTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for TaxiHoldingPositionMarkingType {}
    impl AbstractMarkingTrait for TaxiHoldingPositionMarkingType {}
    impl gml::AbstractFeatureTrait for TaxiHoldingPositionMarkingType {}
    impl gml::AbstractGMLTrait for TaxiHoldingPositionMarkingType {}
    impl gml::AbstractObjectTrait for TaxiHoldingPositionMarkingType {}
    impl xsd_parser::AsAny for TaxiHoldingPositionMarkingType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct StandMarkingType {
        pub id: String,
        pub content: Vec<StandMarkingTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum StandMarkingTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(StandMarkingTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for StandMarkingType {}
    impl AbstractMarkingTrait for StandMarkingType {}
    impl gml::AbstractFeatureTrait for StandMarkingType {}
    impl gml::AbstractGMLTrait for StandMarkingType {}
    impl gml::AbstractObjectTrait for StandMarkingType {}
    impl xsd_parser::AsAny for StandMarkingType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct FloatingDockSiteType {
        pub id: String,
        pub content: Vec<FloatingDockSiteTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FloatingDockSiteTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(FloatingDockSiteTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for FloatingDockSiteType {}
    impl gml::AbstractFeatureTrait for FloatingDockSiteType {}
    impl gml::AbstractGMLTrait for FloatingDockSiteType {}
    impl gml::AbstractObjectTrait for FloatingDockSiteType {}
    impl xsd_parser::AsAny for FloatingDockSiteType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MarkingBuoyType {
        pub id: String,
        pub content: Vec<MarkingBuoyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MarkingBuoyTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(MarkingBuoyTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for MarkingBuoyType {}
    impl gml::AbstractFeatureTrait for MarkingBuoyType {}
    impl gml::AbstractGMLTrait for MarkingBuoyType {}
    impl gml::AbstractObjectTrait for MarkingBuoyType {}
    impl xsd_parser::AsAny for MarkingBuoyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SeaplaneLandingAreaType {
        pub id: String,
        pub content: Vec<SeaplaneLandingAreaTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SeaplaneLandingAreaTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(SeaplaneLandingAreaTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for SeaplaneLandingAreaType {}
    impl gml::AbstractFeatureTrait for SeaplaneLandingAreaType {}
    impl gml::AbstractGMLTrait for SeaplaneLandingAreaType {}
    impl gml::AbstractObjectTrait for SeaplaneLandingAreaType {}
    impl xsd_parser::AsAny for SeaplaneLandingAreaType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SeaplaneRampSiteType {
        pub id: String,
        pub content: Vec<SeaplaneRampSiteTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SeaplaneRampSiteTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(SeaplaneRampSiteTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for SeaplaneRampSiteType {}
    impl gml::AbstractFeatureTrait for SeaplaneRampSiteType {}
    impl gml::AbstractGMLTrait for SeaplaneRampSiteType {}
    impl gml::AbstractObjectTrait for SeaplaneRampSiteType {}
    impl xsd_parser::AsAny for SeaplaneRampSiteType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct WorkAreaType {
        pub id: String,
        pub content: Vec<WorkAreaTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum WorkAreaTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(WorkAreaTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for WorkAreaType {}
    impl gml::AbstractFeatureTrait for WorkAreaType {}
    impl gml::AbstractGMLTrait for WorkAreaType {}
    impl gml::AbstractObjectTrait for WorkAreaType {}
    impl xsd_parser::AsAny for WorkAreaType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SurveyControlPointType {
        pub id: String,
        pub content: Vec<SurveyControlPointTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SurveyControlPointTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(SurveyControlPointTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for SurveyControlPointType {}
    impl gml::AbstractFeatureTrait for SurveyControlPointType {}
    impl gml::AbstractGMLTrait for SurveyControlPointType {}
    impl gml::AbstractObjectTrait for SurveyControlPointType {}
    impl xsd_parser::AsAny for SurveyControlPointType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct NonMovementAreaType {
        pub id: String,
        pub content: Vec<NonMovementAreaTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NonMovementAreaTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(NonMovementAreaTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for NonMovementAreaType {}
    impl gml::AbstractFeatureTrait for NonMovementAreaType {}
    impl gml::AbstractGMLTrait for NonMovementAreaType {}
    impl gml::AbstractObjectTrait for NonMovementAreaType {}
    impl xsd_parser::AsAny for NonMovementAreaType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportHeliportCollocationType {
        pub id: String,
        pub content: Vec<AirportHeliportCollocationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportCollocationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(AirportHeliportCollocationTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for AirportHeliportCollocationType {}
    impl gml::AbstractFeatureTrait for AirportHeliportCollocationType {}
    impl gml::AbstractGMLTrait for AirportHeliportCollocationType {}
    impl gml::AbstractObjectTrait for AirportHeliportCollocationType {}
    impl xsd_parser::AsAny for AirportHeliportCollocationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportHeliportType {
        pub id: String,
        pub content: Vec<AirportHeliportTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(AirportHeliportTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for AirportHeliportType {}
    impl gml::AbstractFeatureTrait for AirportHeliportType {}
    impl gml::AbstractGMLTrait for AirportHeliportType {}
    impl gml::AbstractObjectTrait for AirportHeliportType {}
    impl xsd_parser::AsAny for AirportHeliportType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportHotSpotType {
        pub id: String,
        pub content: Vec<AirportHotSpotTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHotSpotTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(AirportHotSpotTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for AirportHotSpotType {}
    impl gml::AbstractFeatureTrait for AirportHotSpotType {}
    impl gml::AbstractGMLTrait for AirportHotSpotType {}
    impl gml::AbstractObjectTrait for AirportHotSpotType {}
    impl xsd_parser::AsAny for AirportHotSpotType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AuthorityForAirspaceType {
        pub id: String,
        pub content: Vec<AuthorityForAirspaceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AuthorityForAirspaceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(AuthorityForAirspaceTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for AuthorityForAirspaceType {}
    impl gml::AbstractFeatureTrait for AuthorityForAirspaceType {}
    impl gml::AbstractGMLTrait for AuthorityForAirspaceType {}
    impl gml::AbstractObjectTrait for AuthorityForAirspaceType {}
    impl xsd_parser::AsAny for AuthorityForAirspaceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceType {
        pub id: String,
        pub content: Vec<AirspaceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(AirspaceTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for AirspaceType {}
    impl gml::AbstractFeatureTrait for AirspaceType {}
    impl gml::AbstractGMLTrait for AirspaceType {}
    impl gml::AbstractObjectTrait for AirspaceType {}
    impl xsd_parser::AsAny for AirspaceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GeoBorderType {
        pub id: String,
        pub content: Vec<GeoBorderTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GeoBorderTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(GeoBorderTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for GeoBorderType {}
    impl gml::AbstractFeatureTrait for GeoBorderType {}
    impl gml::AbstractGMLTrait for GeoBorderType {}
    impl gml::AbstractObjectTrait for GeoBorderType {}
    impl xsd_parser::AsAny for GeoBorderType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRadarEquipmentType {
        pub id: String,
        pub content: Vec<AbstractRadarEquipmentTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractRadarEquipmentTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
    }
    impl AbstractAIXMFeatureTrait for AbstractRadarEquipmentType {}
    impl gml::AbstractFeatureTrait for AbstractRadarEquipmentType {}
    impl gml::AbstractGMLTrait for AbstractRadarEquipmentType {}
    impl gml::AbstractObjectTrait for AbstractRadarEquipmentType {}
    impl xsd_parser::AsAny for AbstractRadarEquipmentType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct PrecisionApproachRadarType {
        pub id: String,
        pub content: Vec<PrecisionApproachRadarTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PrecisionApproachRadarTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(PrecisionApproachRadarTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for PrecisionApproachRadarType {}
    impl AbstractRadarEquipmentTrait for PrecisionApproachRadarType {}
    impl gml::AbstractFeatureTrait for PrecisionApproachRadarType {}
    impl gml::AbstractGMLTrait for PrecisionApproachRadarType {}
    impl gml::AbstractObjectTrait for PrecisionApproachRadarType {}
    impl xsd_parser::AsAny for PrecisionApproachRadarType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSurveillanceRadarType {
        pub id: String,
        pub content: Vec<AbstractSurveillanceRadarTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractSurveillanceRadarTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
    }
    impl AbstractAIXMFeatureTrait for AbstractSurveillanceRadarType {}
    impl AbstractRadarEquipmentTrait for AbstractSurveillanceRadarType {}
    impl gml::AbstractFeatureTrait for AbstractSurveillanceRadarType {}
    impl gml::AbstractGMLTrait for AbstractSurveillanceRadarType {}
    impl gml::AbstractObjectTrait for AbstractSurveillanceRadarType {}
    impl xsd_parser::AsAny for AbstractSurveillanceRadarType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct PrimarySurveillanceRadarType {
        pub id: String,
        pub content: Vec<PrimarySurveillanceRadarTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PrimarySurveillanceRadarTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(PrimarySurveillanceRadarTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for PrimarySurveillanceRadarType {}
    impl AbstractRadarEquipmentTrait for PrimarySurveillanceRadarType {}
    impl AbstractSurveillanceRadarTrait for PrimarySurveillanceRadarType {}
    impl gml::AbstractFeatureTrait for PrimarySurveillanceRadarType {}
    impl gml::AbstractGMLTrait for PrimarySurveillanceRadarType {}
    impl gml::AbstractObjectTrait for PrimarySurveillanceRadarType {}
    impl xsd_parser::AsAny for PrimarySurveillanceRadarType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RadarSystemType {
        pub id: String,
        pub content: Vec<RadarSystemTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RadarSystemTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(RadarSystemTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for RadarSystemType {}
    impl gml::AbstractFeatureTrait for RadarSystemType {}
    impl gml::AbstractGMLTrait for RadarSystemType {}
    impl gml::AbstractObjectTrait for RadarSystemType {}
    impl xsd_parser::AsAny for RadarSystemType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SecondarySurveillanceRadarType {
        pub id: String,
        pub content: Vec<SecondarySurveillanceRadarTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SecondarySurveillanceRadarTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(SecondarySurveillanceRadarTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for SecondarySurveillanceRadarType {}
    impl AbstractRadarEquipmentTrait for SecondarySurveillanceRadarType {}
    impl AbstractSurveillanceRadarTrait for SecondarySurveillanceRadarType {}
    impl gml::AbstractFeatureTrait for SecondarySurveillanceRadarType {}
    impl gml::AbstractGMLTrait for SecondarySurveillanceRadarType {}
    impl gml::AbstractObjectTrait for SecondarySurveillanceRadarType {}
    impl xsd_parser::AsAny for SecondarySurveillanceRadarType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct HoldingAssessmentType {
        pub id: String,
        pub content: Vec<HoldingAssessmentTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum HoldingAssessmentTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(HoldingAssessmentTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for HoldingAssessmentType {}
    impl gml::AbstractFeatureTrait for HoldingAssessmentType {}
    impl gml::AbstractGMLTrait for HoldingAssessmentType {}
    impl gml::AbstractObjectTrait for HoldingAssessmentType {}
    impl xsd_parser::AsAny for HoldingAssessmentType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct StandardLevelTableType {
        pub id: String,
        pub content: Vec<StandardLevelTableTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum StandardLevelTableTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(StandardLevelTableTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for StandardLevelTableType {}
    impl gml::AbstractFeatureTrait for StandardLevelTableType {}
    impl gml::AbstractGMLTrait for StandardLevelTableType {}
    impl gml::AbstractObjectTrait for StandardLevelTableType {}
    impl xsd_parser::AsAny for StandardLevelTableType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct StandardLevelSectorType {
        pub id: String,
        pub content: Vec<StandardLevelSectorTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum StandardLevelSectorTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(StandardLevelSectorTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for StandardLevelSectorType {}
    impl gml::AbstractFeatureTrait for StandardLevelSectorType {}
    impl gml::AbstractGMLTrait for StandardLevelSectorType {}
    impl gml::AbstractObjectTrait for StandardLevelSectorType {}
    impl xsd_parser::AsAny for StandardLevelSectorType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct StandardLevelColumnType {
        pub id: String,
        pub content: Vec<StandardLevelColumnTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum StandardLevelColumnTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(StandardLevelColumnTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for StandardLevelColumnType {}
    impl gml::AbstractFeatureTrait for StandardLevelColumnType {}
    impl gml::AbstractGMLTrait for StandardLevelColumnType {}
    impl gml::AbstractObjectTrait for StandardLevelColumnType {}
    impl xsd_parser::AsAny for StandardLevelColumnType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RadioFrequencyAreaType {
        pub id: String,
        pub content: Vec<RadioFrequencyAreaTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RadioFrequencyAreaTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(RadioFrequencyAreaTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for RadioFrequencyAreaType {}
    impl gml::AbstractFeatureTrait for RadioFrequencyAreaType {}
    impl gml::AbstractGMLTrait for RadioFrequencyAreaType {}
    impl gml::AbstractObjectTrait for RadioFrequencyAreaType {}
    impl xsd_parser::AsAny for RadioFrequencyAreaType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SpecialDateType {
        pub id: String,
        pub content: Vec<SpecialDateTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SpecialDateTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(SpecialDateTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for SpecialDateType {}
    impl gml::AbstractFeatureTrait for SpecialDateType {}
    impl gml::AbstractGMLTrait for SpecialDateType {}
    impl gml::AbstractObjectTrait for SpecialDateType {}
    impl xsd_parser::AsAny for SpecialDateType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractServiceType {
        pub id: String,
        pub content: Vec<AbstractServiceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractServiceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
    }
    impl AbstractAIXMFeatureTrait for AbstractServiceType {}
    impl gml::AbstractFeatureTrait for AbstractServiceType {}
    impl gml::AbstractGMLTrait for AbstractServiceType {}
    impl gml::AbstractObjectTrait for AbstractServiceType {}
    impl xsd_parser::AsAny for AbstractServiceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RadioCommunicationChannelType {
        pub id: String,
        pub content: Vec<RadioCommunicationChannelTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RadioCommunicationChannelTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(RadioCommunicationChannelTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for RadioCommunicationChannelType {}
    impl gml::AbstractFeatureTrait for RadioCommunicationChannelType {}
    impl gml::AbstractGMLTrait for RadioCommunicationChannelType {}
    impl gml::AbstractObjectTrait for RadioCommunicationChannelType {}
    impl xsd_parser::AsAny for RadioCommunicationChannelType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct PilotControlledLightingType {
        pub id: String,
        pub content: Vec<PilotControlledLightingTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PilotControlledLightingTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(PilotControlledLightingTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for PilotControlledLightingType {}
    impl gml::AbstractFeatureTrait for PilotControlledLightingType {}
    impl gml::AbstractGMLTrait for PilotControlledLightingType {}
    impl gml::AbstractObjectTrait for PilotControlledLightingType {}
    impl xsd_parser::AsAny for PilotControlledLightingType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct InformationServiceType {
        pub id: String,
        pub content: Vec<InformationServiceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum InformationServiceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(InformationServiceTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for InformationServiceType {}
    impl AbstractServiceTrait for InformationServiceType {}
    impl gml::AbstractFeatureTrait for InformationServiceType {}
    impl gml::AbstractGMLTrait for InformationServiceType {}
    impl gml::AbstractObjectTrait for InformationServiceType {}
    impl xsd_parser::AsAny for InformationServiceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTrafficSeparationServiceType {
        pub id: String,
        pub content: Vec<AbstractTrafficSeparationServiceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractTrafficSeparationServiceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
    }
    impl AbstractAIXMFeatureTrait for AbstractTrafficSeparationServiceType {}
    impl AbstractServiceTrait for AbstractTrafficSeparationServiceType {}
    impl gml::AbstractFeatureTrait for AbstractTrafficSeparationServiceType {}
    impl gml::AbstractGMLTrait for AbstractTrafficSeparationServiceType {}
    impl gml::AbstractObjectTrait for AbstractTrafficSeparationServiceType {}
    impl xsd_parser::AsAny for AbstractTrafficSeparationServiceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GroundTrafficControlServiceType {
        pub id: String,
        pub content: Vec<GroundTrafficControlServiceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GroundTrafficControlServiceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(GroundTrafficControlServiceTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for GroundTrafficControlServiceType {}
    impl AbstractServiceTrait for GroundTrafficControlServiceType {}
    impl AbstractTrafficSeparationServiceTrait for GroundTrafficControlServiceType {}
    impl gml::AbstractFeatureTrait for GroundTrafficControlServiceType {}
    impl gml::AbstractGMLTrait for GroundTrafficControlServiceType {}
    impl gml::AbstractObjectTrait for GroundTrafficControlServiceType {}
    impl xsd_parser::AsAny for GroundTrafficControlServiceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirTrafficControlServiceType {
        pub id: String,
        pub content: Vec<AirTrafficControlServiceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirTrafficControlServiceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(AirTrafficControlServiceTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for AirTrafficControlServiceType {}
    impl AbstractServiceTrait for AirTrafficControlServiceType {}
    impl AbstractTrafficSeparationServiceTrait for AirTrafficControlServiceType {}
    impl gml::AbstractFeatureTrait for AirTrafficControlServiceType {}
    impl gml::AbstractGMLTrait for AirTrafficControlServiceType {}
    impl gml::AbstractObjectTrait for AirTrafficControlServiceType {}
    impl xsd_parser::AsAny for AirTrafficControlServiceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirTrafficManagementServiceType {
        pub id: String,
        pub content: Vec<AirTrafficManagementServiceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirTrafficManagementServiceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(AirTrafficManagementServiceTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for AirTrafficManagementServiceType {}
    impl AbstractServiceTrait for AirTrafficManagementServiceType {}
    impl gml::AbstractFeatureTrait for AirTrafficManagementServiceType {}
    impl gml::AbstractGMLTrait for AirTrafficManagementServiceType {}
    impl gml::AbstractObjectTrait for AirTrafficManagementServiceType {}
    impl xsd_parser::AsAny for AirTrafficManagementServiceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SearchRescueServiceType {
        pub id: String,
        pub content: Vec<SearchRescueServiceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SearchRescueServiceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(SearchRescueServiceTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for SearchRescueServiceType {}
    impl AbstractServiceTrait for SearchRescueServiceType {}
    impl gml::AbstractFeatureTrait for SearchRescueServiceType {}
    impl gml::AbstractGMLTrait for SearchRescueServiceType {}
    impl gml::AbstractObjectTrait for SearchRescueServiceType {}
    impl xsd_parser::AsAny for SearchRescueServiceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAirportGroundServiceType {
        pub id: String,
        pub content: Vec<AbstractAirportGroundServiceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractAirportGroundServiceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
    }
    impl AbstractAIXMFeatureTrait for AbstractAirportGroundServiceType {}
    impl AbstractServiceTrait for AbstractAirportGroundServiceType {}
    impl gml::AbstractFeatureTrait for AbstractAirportGroundServiceType {}
    impl gml::AbstractGMLTrait for AbstractAirportGroundServiceType {}
    impl gml::AbstractObjectTrait for AbstractAirportGroundServiceType {}
    impl xsd_parser::AsAny for AbstractAirportGroundServiceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct PassengerServiceType {
        pub id: String,
        pub content: Vec<PassengerServiceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PassengerServiceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(PassengerServiceTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for PassengerServiceType {}
    impl AbstractAirportGroundServiceTrait for PassengerServiceType {}
    impl AbstractServiceTrait for PassengerServiceType {}
    impl gml::AbstractFeatureTrait for PassengerServiceType {}
    impl gml::AbstractGMLTrait for PassengerServiceType {}
    impl gml::AbstractObjectTrait for PassengerServiceType {}
    impl xsd_parser::AsAny for PassengerServiceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AircraftGroundServiceType {
        pub id: String,
        pub content: Vec<AircraftGroundServiceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AircraftGroundServiceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(AircraftGroundServiceTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for AircraftGroundServiceType {}
    impl AbstractAirportGroundServiceTrait for AircraftGroundServiceType {}
    impl AbstractServiceTrait for AircraftGroundServiceType {}
    impl gml::AbstractFeatureTrait for AircraftGroundServiceType {}
    impl gml::AbstractGMLTrait for AircraftGroundServiceType {}
    impl gml::AbstractObjectTrait for AircraftGroundServiceType {}
    impl xsd_parser::AsAny for AircraftGroundServiceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct FireFightingServiceType {
        pub id: String,
        pub content: Vec<FireFightingServiceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FireFightingServiceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(FireFightingServiceTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for FireFightingServiceType {}
    impl AbstractAirportGroundServiceTrait for FireFightingServiceType {}
    impl AbstractServiceTrait for FireFightingServiceType {}
    impl gml::AbstractFeatureTrait for FireFightingServiceType {}
    impl gml::AbstractGMLTrait for FireFightingServiceType {}
    impl gml::AbstractObjectTrait for FireFightingServiceType {}
    impl xsd_parser::AsAny for FireFightingServiceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportClearanceServiceType {
        pub id: String,
        pub content: Vec<AirportClearanceServiceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirportClearanceServiceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(AirportClearanceServiceTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for AirportClearanceServiceType {}
    impl AbstractAirportGroundServiceTrait for AirportClearanceServiceType {}
    impl AbstractServiceTrait for AirportClearanceServiceType {}
    impl gml::AbstractFeatureTrait for AirportClearanceServiceType {}
    impl gml::AbstractGMLTrait for AirportClearanceServiceType {}
    impl gml::AbstractObjectTrait for AirportClearanceServiceType {}
    impl xsd_parser::AsAny for AirportClearanceServiceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportSuppliesServiceType {
        pub id: String,
        pub content: Vec<AirportSuppliesServiceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirportSuppliesServiceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(AirportSuppliesServiceTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for AirportSuppliesServiceType {}
    impl AbstractAirportGroundServiceTrait for AirportSuppliesServiceType {}
    impl AbstractServiceTrait for AirportSuppliesServiceType {}
    impl gml::AbstractFeatureTrait for AirportSuppliesServiceType {}
    impl gml::AbstractGMLTrait for AirportSuppliesServiceType {}
    impl gml::AbstractObjectTrait for AirportSuppliesServiceType {}
    impl xsd_parser::AsAny for AirportSuppliesServiceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AngleIndicationType {
        pub id: String,
        pub content: Vec<AngleIndicationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AngleIndicationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(AngleIndicationTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for AngleIndicationType {}
    impl gml::AbstractFeatureTrait for AngleIndicationType {}
    impl gml::AbstractGMLTrait for AngleIndicationType {}
    impl gml::AbstractObjectTrait for AngleIndicationType {}
    impl xsd_parser::AsAny for AngleIndicationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DistanceIndicationType {
        pub id: String,
        pub content: Vec<DistanceIndicationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DistanceIndicationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(DistanceIndicationTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for DistanceIndicationType {}
    impl gml::AbstractFeatureTrait for DistanceIndicationType {}
    impl gml::AbstractGMLTrait for DistanceIndicationType {}
    impl gml::AbstractObjectTrait for DistanceIndicationType {}
    impl xsd_parser::AsAny for DistanceIndicationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractNavaidEquipmentType {
        pub id: String,
        pub content: Vec<AbstractNavaidEquipmentTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractNavaidEquipmentTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
    }
    impl AbstractAIXMFeatureTrait for AbstractNavaidEquipmentType {}
    impl gml::AbstractFeatureTrait for AbstractNavaidEquipmentType {}
    impl gml::AbstractGMLTrait for AbstractNavaidEquipmentType {}
    impl gml::AbstractObjectTrait for AbstractNavaidEquipmentType {}
    impl xsd_parser::AsAny for AbstractNavaidEquipmentType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AzimuthType {
        pub id: String,
        pub content: Vec<AzimuthTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AzimuthTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(AzimuthTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for AzimuthType {}
    impl AbstractNavaidEquipmentTrait for AzimuthType {}
    impl gml::AbstractFeatureTrait for AzimuthType {}
    impl gml::AbstractGMLTrait for AzimuthType {}
    impl gml::AbstractObjectTrait for AzimuthType {}
    impl xsd_parser::AsAny for AzimuthType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractNavigationSystemCheckpointType {
        pub id: String,
        pub content: Vec<AbstractNavigationSystemCheckpointTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractNavigationSystemCheckpointTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
    }
    impl AbstractAIXMFeatureTrait for AbstractNavigationSystemCheckpointType {}
    impl gml::AbstractFeatureTrait for AbstractNavigationSystemCheckpointType {}
    impl gml::AbstractGMLTrait for AbstractNavigationSystemCheckpointType {}
    impl gml::AbstractObjectTrait for AbstractNavigationSystemCheckpointType {}
    impl xsd_parser::AsAny for AbstractNavigationSystemCheckpointType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CheckpointINSType {
        pub id: String,
        pub content: Vec<CheckpointINSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CheckpointINSTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(CheckpointINSTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for CheckpointINSType {}
    impl AbstractNavigationSystemCheckpointTrait for CheckpointINSType {}
    impl gml::AbstractFeatureTrait for CheckpointINSType {}
    impl gml::AbstractGMLTrait for CheckpointINSType {}
    impl gml::AbstractObjectTrait for CheckpointINSType {}
    impl xsd_parser::AsAny for CheckpointINSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CheckpointVORType {
        pub id: String,
        pub content: Vec<CheckpointVORTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CheckpointVORTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(CheckpointVORTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for CheckpointVORType {}
    impl AbstractNavigationSystemCheckpointTrait for CheckpointVORType {}
    impl gml::AbstractFeatureTrait for CheckpointVORType {}
    impl gml::AbstractGMLTrait for CheckpointVORType {}
    impl gml::AbstractObjectTrait for CheckpointVORType {}
    impl xsd_parser::AsAny for CheckpointVORType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct Dmetype {
        pub id: String,
        pub content: Vec<DmetypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DmetypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(DmetimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for Dmetype {}
    impl AbstractNavaidEquipmentTrait for Dmetype {}
    impl gml::AbstractFeatureTrait for Dmetype {}
    impl gml::AbstractGMLTrait for Dmetype {}
    impl gml::AbstractObjectTrait for Dmetype {}
    impl xsd_parser::AsAny for Dmetype {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GlidepathType {
        pub id: String,
        pub content: Vec<GlidepathTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GlidepathTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(GlidepathTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for GlidepathType {}
    impl AbstractNavaidEquipmentTrait for GlidepathType {}
    impl gml::AbstractFeatureTrait for GlidepathType {}
    impl gml::AbstractGMLTrait for GlidepathType {}
    impl gml::AbstractObjectTrait for GlidepathType {}
    impl xsd_parser::AsAny for GlidepathType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct LocalizerType {
        pub id: String,
        pub content: Vec<LocalizerTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum LocalizerTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(LocalizerTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for LocalizerType {}
    impl AbstractNavaidEquipmentTrait for LocalizerType {}
    impl gml::AbstractFeatureTrait for LocalizerType {}
    impl gml::AbstractGMLTrait for LocalizerType {}
    impl gml::AbstractObjectTrait for LocalizerType {}
    impl xsd_parser::AsAny for LocalizerType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MarkerBeaconType {
        pub id: String,
        pub content: Vec<MarkerBeaconTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MarkerBeaconTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(MarkerBeaconTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for MarkerBeaconType {}
    impl AbstractNavaidEquipmentTrait for MarkerBeaconType {}
    impl gml::AbstractFeatureTrait for MarkerBeaconType {}
    impl gml::AbstractGMLTrait for MarkerBeaconType {}
    impl gml::AbstractObjectTrait for MarkerBeaconType {}
    impl xsd_parser::AsAny for MarkerBeaconType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct NavaidType {
        pub id: String,
        pub content: Vec<NavaidTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NavaidTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(NavaidTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for NavaidType {}
    impl gml::AbstractFeatureTrait for NavaidType {}
    impl gml::AbstractGMLTrait for NavaidType {}
    impl gml::AbstractObjectTrait for NavaidType {}
    impl xsd_parser::AsAny for NavaidType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct Sdftype {
        pub id: String,
        pub content: Vec<SdftypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SdftypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(SdftimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for Sdftype {}
    impl AbstractNavaidEquipmentTrait for Sdftype {}
    impl gml::AbstractFeatureTrait for Sdftype {}
    impl gml::AbstractGMLTrait for Sdftype {}
    impl gml::AbstractObjectTrait for Sdftype {}
    impl xsd_parser::AsAny for Sdftype {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct Ndbtype {
        pub id: String,
        pub content: Vec<NdbtypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NdbtypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(NdbtimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for Ndbtype {}
    impl AbstractNavaidEquipmentTrait for Ndbtype {}
    impl gml::AbstractFeatureTrait for Ndbtype {}
    impl gml::AbstractGMLTrait for Ndbtype {}
    impl gml::AbstractObjectTrait for Ndbtype {}
    impl xsd_parser::AsAny for Ndbtype {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SpecialNavigationStationType {
        pub id: String,
        pub content: Vec<SpecialNavigationStationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SpecialNavigationStationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(SpecialNavigationStationTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for SpecialNavigationStationType {}
    impl gml::AbstractFeatureTrait for SpecialNavigationStationType {}
    impl gml::AbstractGMLTrait for SpecialNavigationStationType {}
    impl gml::AbstractObjectTrait for SpecialNavigationStationType {}
    impl xsd_parser::AsAny for SpecialNavigationStationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct Vortype {
        pub id: String,
        pub content: Vec<VortypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum VortypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(VortimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for Vortype {}
    impl AbstractNavaidEquipmentTrait for Vortype {}
    impl gml::AbstractFeatureTrait for Vortype {}
    impl gml::AbstractGMLTrait for Vortype {}
    impl gml::AbstractObjectTrait for Vortype {}
    impl xsd_parser::AsAny for Vortype {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct Tacantype {
        pub id: String,
        pub content: Vec<TacantypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TacantypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(TacantimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for Tacantype {}
    impl AbstractNavaidEquipmentTrait for Tacantype {}
    impl gml::AbstractFeatureTrait for Tacantype {}
    impl gml::AbstractGMLTrait for Tacantype {}
    impl gml::AbstractObjectTrait for Tacantype {}
    impl xsd_parser::AsAny for Tacantype {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SpecialNavigationSystemType {
        pub id: String,
        pub content: Vec<SpecialNavigationSystemTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SpecialNavigationSystemTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(SpecialNavigationSystemTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for SpecialNavigationSystemType {}
    impl gml::AbstractFeatureTrait for SpecialNavigationSystemType {}
    impl gml::AbstractGMLTrait for SpecialNavigationSystemType {}
    impl gml::AbstractObjectTrait for SpecialNavigationSystemType {}
    impl xsd_parser::AsAny for SpecialNavigationSystemType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DirectionFinderType {
        pub id: String,
        pub content: Vec<DirectionFinderTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DirectionFinderTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(DirectionFinderTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for DirectionFinderType {}
    impl AbstractNavaidEquipmentTrait for DirectionFinderType {}
    impl gml::AbstractFeatureTrait for DirectionFinderType {}
    impl gml::AbstractGMLTrait for DirectionFinderType {}
    impl gml::AbstractObjectTrait for DirectionFinderType {}
    impl xsd_parser::AsAny for DirectionFinderType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DesignatedPointType {
        pub id: String,
        pub content: Vec<DesignatedPointTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DesignatedPointTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(DesignatedPointTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for DesignatedPointType {}
    impl gml::AbstractFeatureTrait for DesignatedPointType {}
    impl gml::AbstractGMLTrait for DesignatedPointType {}
    impl gml::AbstractObjectTrait for DesignatedPointType {}
    impl xsd_parser::AsAny for DesignatedPointType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SignificantPointInAirspaceType {
        pub id: String,
        pub content: Vec<SignificantPointInAirspaceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SignificantPointInAirspaceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(SignificantPointInAirspaceTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for SignificantPointInAirspaceType {}
    impl gml::AbstractFeatureTrait for SignificantPointInAirspaceType {}
    impl gml::AbstractGMLTrait for SignificantPointInAirspaceType {}
    impl gml::AbstractObjectTrait for SignificantPointInAirspaceType {}
    impl xsd_parser::AsAny for SignificantPointInAirspaceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AeronauticalGroundLightType {
        pub id: String,
        pub content: Vec<AeronauticalGroundLightTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AeronauticalGroundLightTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(AeronauticalGroundLightTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for AeronauticalGroundLightType {}
    impl gml::AbstractFeatureTrait for AeronauticalGroundLightType {}
    impl gml::AbstractGMLTrait for AeronauticalGroundLightType {}
    impl gml::AbstractObjectTrait for AeronauticalGroundLightType {}
    impl xsd_parser::AsAny for AeronauticalGroundLightType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct OrganisationAuthorityType {
        pub id: String,
        pub content: Vec<OrganisationAuthorityTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum OrganisationAuthorityTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(OrganisationAuthorityTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for OrganisationAuthorityType {}
    impl gml::AbstractFeatureTrait for OrganisationAuthorityType {}
    impl gml::AbstractGMLTrait for OrganisationAuthorityType {}
    impl gml::AbstractObjectTrait for OrganisationAuthorityType {}
    impl xsd_parser::AsAny for OrganisationAuthorityType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct UnitType {
        pub id: String,
        pub content: Vec<UnitTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum UnitTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(UnitTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for UnitType {}
    impl gml::AbstractFeatureTrait for UnitType {}
    impl gml::AbstractGMLTrait for UnitType {}
    impl gml::AbstractObjectTrait for UnitType {}
    impl xsd_parser::AsAny for UnitType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ObstacleAreaType {
        pub id: String,
        pub content: Vec<ObstacleAreaTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ObstacleAreaTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(ObstacleAreaTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for ObstacleAreaType {}
    impl gml::AbstractFeatureTrait for ObstacleAreaType {}
    impl gml::AbstractGMLTrait for ObstacleAreaType {}
    impl gml::AbstractObjectTrait for ObstacleAreaType {}
    impl xsd_parser::AsAny for ObstacleAreaType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct VerticalStructureType {
        pub id: String,
        pub content: Vec<VerticalStructureTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum VerticalStructureTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(VerticalStructureTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for VerticalStructureType {}
    impl gml::AbstractFeatureTrait for VerticalStructureType {}
    impl gml::AbstractGMLTrait for VerticalStructureType {}
    impl gml::AbstractObjectTrait for VerticalStructureType {}
    impl xsd_parser::AsAny for VerticalStructureType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CirclingAreaType {
        pub id: String,
        pub content: Vec<CirclingAreaTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CirclingAreaTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(CirclingAreaTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for CirclingAreaType {}
    impl gml::AbstractFeatureTrait for CirclingAreaType {}
    impl gml::AbstractGMLTrait for CirclingAreaType {}
    impl gml::AbstractObjectTrait for CirclingAreaType {}
    impl xsd_parser::AsAny for CirclingAreaType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TerminalArrivalAreaType {
        pub id: String,
        pub content: Vec<TerminalArrivalAreaTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TerminalArrivalAreaTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(TerminalArrivalAreaTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for TerminalArrivalAreaType {}
    impl gml::AbstractFeatureTrait for TerminalArrivalAreaType {}
    impl gml::AbstractGMLTrait for TerminalArrivalAreaType {}
    impl gml::AbstractObjectTrait for TerminalArrivalAreaType {}
    impl xsd_parser::AsAny for TerminalArrivalAreaType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractProcedureType {
        pub id: String,
        pub content: Vec<AbstractProcedureTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractProcedureTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
    }
    impl AbstractAIXMFeatureTrait for AbstractProcedureType {}
    impl gml::AbstractFeatureTrait for AbstractProcedureType {}
    impl gml::AbstractGMLTrait for AbstractProcedureType {}
    impl gml::AbstractObjectTrait for AbstractProcedureType {}
    impl xsd_parser::AsAny for AbstractProcedureType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct InstrumentApproachProcedureType {
        pub id: String,
        pub content: Vec<InstrumentApproachProcedureTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum InstrumentApproachProcedureTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(InstrumentApproachProcedureTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for InstrumentApproachProcedureType {}
    impl AbstractProcedureTrait for InstrumentApproachProcedureType {}
    impl gml::AbstractFeatureTrait for InstrumentApproachProcedureType {}
    impl gml::AbstractGMLTrait for InstrumentApproachProcedureType {}
    impl gml::AbstractObjectTrait for InstrumentApproachProcedureType {}
    impl xsd_parser::AsAny for InstrumentApproachProcedureType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct StandardInstrumentDepartureType {
        pub id: String,
        pub content: Vec<StandardInstrumentDepartureTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum StandardInstrumentDepartureTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(StandardInstrumentDepartureTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for StandardInstrumentDepartureType {}
    impl AbstractProcedureTrait for StandardInstrumentDepartureType {}
    impl gml::AbstractFeatureTrait for StandardInstrumentDepartureType {}
    impl gml::AbstractGMLTrait for StandardInstrumentDepartureType {}
    impl gml::AbstractObjectTrait for StandardInstrumentDepartureType {}
    impl xsd_parser::AsAny for StandardInstrumentDepartureType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct NavigationAreaType {
        pub id: String,
        pub content: Vec<NavigationAreaTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NavigationAreaTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(NavigationAreaTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for NavigationAreaType {}
    impl gml::AbstractFeatureTrait for NavigationAreaType {}
    impl gml::AbstractGMLTrait for NavigationAreaType {}
    impl gml::AbstractObjectTrait for NavigationAreaType {}
    impl xsd_parser::AsAny for NavigationAreaType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct StandardInstrumentArrivalType {
        pub id: String,
        pub content: Vec<StandardInstrumentArrivalTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum StandardInstrumentArrivalTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(StandardInstrumentArrivalTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for StandardInstrumentArrivalType {}
    impl AbstractProcedureTrait for StandardInstrumentArrivalType {}
    impl gml::AbstractFeatureTrait for StandardInstrumentArrivalType {}
    impl gml::AbstractGMLTrait for StandardInstrumentArrivalType {}
    impl gml::AbstractObjectTrait for StandardInstrumentArrivalType {}
    impl xsd_parser::AsAny for StandardInstrumentArrivalType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct NavigationAreaRestrictionType {
        pub id: String,
        pub content: Vec<NavigationAreaRestrictionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NavigationAreaRestrictionTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(NavigationAreaRestrictionTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for NavigationAreaRestrictionType {}
    impl gml::AbstractFeatureTrait for NavigationAreaRestrictionType {}
    impl gml::AbstractGMLTrait for NavigationAreaRestrictionType {}
    impl gml::AbstractObjectTrait for NavigationAreaRestrictionType {}
    impl xsd_parser::AsAny for NavigationAreaRestrictionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSegmentLegType {
        pub id: String,
        pub content: Vec<AbstractSegmentLegTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractSegmentLegTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
    }
    impl AbstractAIXMFeatureTrait for AbstractSegmentLegType {}
    impl gml::AbstractFeatureTrait for AbstractSegmentLegType {}
    impl gml::AbstractGMLTrait for AbstractSegmentLegType {}
    impl gml::AbstractObjectTrait for AbstractSegmentLegType {}
    impl xsd_parser::AsAny for AbstractSegmentLegType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractApproachLegType {
        pub id: String,
        pub content: Vec<AbstractApproachLegTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractApproachLegTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
    }
    impl AbstractAIXMFeatureTrait for AbstractApproachLegType {}
    impl AbstractSegmentLegTrait for AbstractApproachLegType {}
    impl gml::AbstractFeatureTrait for AbstractApproachLegType {}
    impl gml::AbstractGMLTrait for AbstractApproachLegType {}
    impl gml::AbstractObjectTrait for AbstractApproachLegType {}
    impl xsd_parser::AsAny for AbstractApproachLegType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ArrivalFeederLegType {
        pub id: String,
        pub content: Vec<ArrivalFeederLegTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ArrivalFeederLegTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(ArrivalFeederLegTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for ArrivalFeederLegType {}
    impl AbstractApproachLegTrait for ArrivalFeederLegType {}
    impl AbstractSegmentLegTrait for ArrivalFeederLegType {}
    impl gml::AbstractFeatureTrait for ArrivalFeederLegType {}
    impl gml::AbstractGMLTrait for ArrivalFeederLegType {}
    impl gml::AbstractObjectTrait for ArrivalFeederLegType {}
    impl xsd_parser::AsAny for ArrivalFeederLegType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ArrivalLegType {
        pub id: String,
        pub content: Vec<ArrivalLegTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ArrivalLegTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(ArrivalLegTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for ArrivalLegType {}
    impl AbstractSegmentLegTrait for ArrivalLegType {}
    impl gml::AbstractFeatureTrait for ArrivalLegType {}
    impl gml::AbstractGMLTrait for ArrivalLegType {}
    impl gml::AbstractObjectTrait for ArrivalLegType {}
    impl xsd_parser::AsAny for ArrivalLegType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DepartureLegType {
        pub id: String,
        pub content: Vec<DepartureLegTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DepartureLegTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(DepartureLegTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for DepartureLegType {}
    impl AbstractSegmentLegTrait for DepartureLegType {}
    impl gml::AbstractFeatureTrait for DepartureLegType {}
    impl gml::AbstractGMLTrait for DepartureLegType {}
    impl gml::AbstractObjectTrait for DepartureLegType {}
    impl xsd_parser::AsAny for DepartureLegType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct FinalLegType {
        pub id: String,
        pub content: Vec<FinalLegTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FinalLegTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(FinalLegTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for FinalLegType {}
    impl AbstractApproachLegTrait for FinalLegType {}
    impl AbstractSegmentLegTrait for FinalLegType {}
    impl gml::AbstractFeatureTrait for FinalLegType {}
    impl gml::AbstractGMLTrait for FinalLegType {}
    impl gml::AbstractObjectTrait for FinalLegType {}
    impl xsd_parser::AsAny for FinalLegType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct InitialLegType {
        pub id: String,
        pub content: Vec<InitialLegTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum InitialLegTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(InitialLegTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for InitialLegType {}
    impl AbstractApproachLegTrait for InitialLegType {}
    impl AbstractSegmentLegTrait for InitialLegType {}
    impl gml::AbstractFeatureTrait for InitialLegType {}
    impl gml::AbstractGMLTrait for InitialLegType {}
    impl gml::AbstractObjectTrait for InitialLegType {}
    impl xsd_parser::AsAny for InitialLegType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct IntermediateLegType {
        pub id: String,
        pub content: Vec<IntermediateLegTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum IntermediateLegTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(IntermediateLegTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for IntermediateLegType {}
    impl AbstractApproachLegTrait for IntermediateLegType {}
    impl AbstractSegmentLegTrait for IntermediateLegType {}
    impl gml::AbstractFeatureTrait for IntermediateLegType {}
    impl gml::AbstractGMLTrait for IntermediateLegType {}
    impl gml::AbstractObjectTrait for IntermediateLegType {}
    impl xsd_parser::AsAny for IntermediateLegType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MissedApproachLegType {
        pub id: String,
        pub content: Vec<MissedApproachLegTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MissedApproachLegTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(MissedApproachLegTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for MissedApproachLegType {}
    impl AbstractApproachLegTrait for MissedApproachLegType {}
    impl AbstractSegmentLegTrait for MissedApproachLegType {}
    impl gml::AbstractFeatureTrait for MissedApproachLegType {}
    impl gml::AbstractGMLTrait for MissedApproachLegType {}
    impl gml::AbstractObjectTrait for MissedApproachLegType {}
    impl xsd_parser::AsAny for MissedApproachLegType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ProcedureDMEType {
        pub id: String,
        pub content: Vec<ProcedureDMETypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ProcedureDMETypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(ProcedureDMETimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for ProcedureDMEType {}
    impl gml::AbstractFeatureTrait for ProcedureDMEType {}
    impl gml::AbstractGMLTrait for ProcedureDMEType {}
    impl gml::AbstractObjectTrait for ProcedureDMEType {}
    impl xsd_parser::AsAny for ProcedureDMEType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SafeAltitudeAreaType {
        pub id: String,
        pub content: Vec<SafeAltitudeAreaTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SafeAltitudeAreaTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(SafeAltitudeAreaTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for SafeAltitudeAreaType {}
    impl gml::AbstractFeatureTrait for SafeAltitudeAreaType {}
    impl gml::AbstractGMLTrait for SafeAltitudeAreaType {}
    impl gml::AbstractObjectTrait for SafeAltitudeAreaType {}
    impl xsd_parser::AsAny for SafeAltitudeAreaType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct HoldingPatternType {
        pub id: String,
        pub content: Vec<HoldingPatternTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum HoldingPatternTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(HoldingPatternTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for HoldingPatternType {}
    impl gml::AbstractFeatureTrait for HoldingPatternType {}
    impl gml::AbstractGMLTrait for HoldingPatternType {}
    impl gml::AbstractObjectTrait for HoldingPatternType {}
    impl xsd_parser::AsAny for HoldingPatternType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceBorderCrossingType {
        pub id: String,
        pub content: Vec<AirspaceBorderCrossingTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceBorderCrossingTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(AirspaceBorderCrossingTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for AirspaceBorderCrossingType {}
    impl gml::AbstractFeatureTrait for AirspaceBorderCrossingType {}
    impl gml::AbstractGMLTrait for AirspaceBorderCrossingType {}
    impl gml::AbstractObjectTrait for AirspaceBorderCrossingType {}
    impl xsd_parser::AsAny for AirspaceBorderCrossingType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct FlightRestrictionType {
        pub id: String,
        pub content: Vec<FlightRestrictionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FlightRestrictionTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(FlightRestrictionTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for FlightRestrictionType {}
    impl gml::AbstractFeatureTrait for FlightRestrictionType {}
    impl gml::AbstractGMLTrait for FlightRestrictionType {}
    impl gml::AbstractObjectTrait for FlightRestrictionType {}
    impl xsd_parser::AsAny for FlightRestrictionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RouteSegmentType {
        pub id: String,
        pub content: Vec<RouteSegmentTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RouteSegmentTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(RouteSegmentTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for RouteSegmentType {}
    impl gml::AbstractFeatureTrait for RouteSegmentType {}
    impl gml::AbstractGMLTrait for RouteSegmentType {}
    impl gml::AbstractObjectTrait for RouteSegmentType {}
    impl xsd_parser::AsAny for RouteSegmentType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RouteDMEType {
        pub id: String,
        pub content: Vec<RouteDMETypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RouteDMETypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(RouteDMETimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for RouteDMEType {}
    impl gml::AbstractFeatureTrait for RouteDMEType {}
    impl gml::AbstractGMLTrait for RouteDMEType {}
    impl gml::AbstractObjectTrait for RouteDMEType {}
    impl xsd_parser::AsAny for RouteDMEType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RouteType {
        pub id: String,
        pub content: Vec<RouteTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RouteTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(RouteTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for RouteType {}
    impl gml::AbstractFeatureTrait for RouteType {}
    impl gml::AbstractGMLTrait for RouteType {}
    impl gml::AbstractObjectTrait for RouteType {}
    impl xsd_parser::AsAny for RouteType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ChangeOverPointType {
        pub id: String,
        pub content: Vec<ChangeOverPointTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ChangeOverPointTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(ChangeOverPointTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for ChangeOverPointType {}
    impl gml::AbstractFeatureTrait for ChangeOverPointType {}
    impl gml::AbstractGMLTrait for ChangeOverPointType {}
    impl gml::AbstractObjectTrait for ChangeOverPointType {}
    impl xsd_parser::AsAny for ChangeOverPointType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AerialRefuellingType {
        pub id: String,
        pub content: Vec<AerialRefuellingTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AerialRefuellingTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(AerialRefuellingTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for AerialRefuellingType {}
    impl gml::AbstractFeatureTrait for AerialRefuellingType {}
    impl gml::AbstractGMLTrait for AerialRefuellingType {}
    impl gml::AbstractObjectTrait for AerialRefuellingType {}
    impl xsd_parser::AsAny for AerialRefuellingType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RulesProceduresType {
        pub id: String,
        pub content: Vec<RulesProceduresTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RulesProceduresTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
        TimeSlice(RulesProceduresTimeSlicePropertyType),
    }
    impl AbstractAIXMFeatureTrait for RulesProceduresType {}
    impl gml::AbstractFeatureTrait for RulesProceduresType {}
    impl gml::AbstractGMLTrait for RulesProceduresType {}
    impl gml::AbstractObjectTrait for RulesProceduresType {}
    impl xsd_parser::AsAny for RulesProceduresType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAIXMFeatureType {
        pub id: String,
        pub content: Vec<AbstractAIXMFeatureTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractAIXMFeatureTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content10(AbstractAIXMFeatureBaseContent10Type),
        Content12(AbstractAIXMFeatureBaseContent12Type),
        FeatureMetadata(FeatureMetadataPropertyType),
    }
    impl gml::AbstractFeatureTrait for AbstractAIXMFeatureType {}
    impl gml::AbstractGMLTrait for AbstractAIXMFeatureType {}
    impl gml::AbstractObjectTrait for AbstractAIXMFeatureType {}
    impl xsd_parser::AsAny for AbstractAIXMFeatureType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum AbstractAIXMFeatureBaseContent10Type {
        Content11(AbstractAIXMFeatureBaseContent11Type),
    }
    #[derive(Debug, Clone)]
    pub enum AbstractAIXMFeatureBaseContent12Type {
        BoundedBy(gml::BoundingShapeType),
    }
    #[derive(Debug, Clone)]
    pub struct FeatureMetadataPropertyType {
        pub owns: bool,
        pub content: Option<FeatureMetadataPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FeatureMetadataPropertyTypeContent {
        MdMetadata(gmd::MdMetadataType),
    }
    impl FeatureMetadataPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayProtectAreaTimeSlicePropertyType {
        pub owns: bool,
        pub content: RunwayProtectAreaTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayProtectAreaTimeSlicePropertyTypeContent {
        RunwayProtectAreaTimeSlice(RunwayProtectAreaTimeSliceType),
    }
    impl RunwayProtectAreaTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAirportHeliportProtectionArea(
        pub Box<dyn AbstractAirportHeliportProtectionAreaTrait>,
    );
    pub trait AbstractAirportHeliportProtectionAreaTrait: AbstractAIXMFeatureTrait {}
    #[derive(Debug, Clone)]
    pub struct RunwayDirectionTimeSlicePropertyType {
        pub owns: bool,
        pub content: RunwayDirectionTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayDirectionTimeSlicePropertyTypeContent {
        RunwayDirectionTimeSlice(RunwayDirectionTimeSliceType),
    }
    impl RunwayDirectionTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayCentrelinePointTimeSlicePropertyType {
        pub owns: bool,
        pub content: RunwayCentrelinePointTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayCentrelinePointTimeSlicePropertyTypeContent {
        RunwayCentrelinePointTimeSlice(RunwayCentrelinePointTimeSliceType),
    }
    impl RunwayCentrelinePointTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayTimeSlicePropertyType {
        pub owns: bool,
        pub content: RunwayTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayTimeSlicePropertyTypeContent {
        RunwayTimeSlice(RunwayTimeSliceType),
    }
    impl RunwayTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct ArrestingGearTimeSlicePropertyType {
        pub owns: bool,
        pub content: ArrestingGearTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ArrestingGearTimeSlicePropertyTypeContent {
        ArrestingGearTimeSlice(ArrestingGearTimeSliceType),
    }
    impl ArrestingGearTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayElementTimeSlicePropertyType {
        pub owns: bool,
        pub content: RunwayElementTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayElementTimeSlicePropertyTypeContent {
        RunwayElementTimeSlice(RunwayElementTimeSliceType),
    }
    impl RunwayElementTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct VisualGlideSlopeIndicatorTimeSlicePropertyType {
        pub owns: bool,
        pub content: VisualGlideSlopeIndicatorTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum VisualGlideSlopeIndicatorTimeSlicePropertyTypeContent {
        VisualGlideSlopeIndicatorTimeSlice(VisualGlideSlopeIndicatorTimeSliceType),
    }
    impl VisualGlideSlopeIndicatorTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractGroundLightSystem(pub Box<dyn AbstractGroundLightSystemTrait>);
    pub trait AbstractGroundLightSystemTrait: AbstractAIXMFeatureTrait {}
    #[derive(Debug, Clone)]
    pub struct RunwayVisualRangeTimeSlicePropertyType {
        pub owns: bool,
        pub content: RunwayVisualRangeTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayVisualRangeTimeSlicePropertyTypeContent {
        RunwayVisualRangeTimeSlice(RunwayVisualRangeTimeSliceType),
    }
    impl RunwayVisualRangeTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayBlastPadTimeSlicePropertyType {
        pub owns: bool,
        pub content: RunwayBlastPadTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayBlastPadTimeSlicePropertyTypeContent {
        RunwayBlastPadTimeSlice(RunwayBlastPadTimeSliceType),
    }
    impl RunwayBlastPadTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiHoldingPositionTimeSlicePropertyType {
        pub owns: bool,
        pub content: TaxiHoldingPositionTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiHoldingPositionTimeSlicePropertyTypeContent {
        TaxiHoldingPositionTimeSlice(TaxiHoldingPositionTimeSliceType),
    }
    impl TaxiHoldingPositionTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiwayTimeSlicePropertyType {
        pub owns: bool,
        pub content: TaxiwayTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayTimeSlicePropertyTypeContent {
        TaxiwayTimeSlice(TaxiwayTimeSliceType),
    }
    impl TaxiwayTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiwayElementTimeSlicePropertyType {
        pub owns: bool,
        pub content: TaxiwayElementTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayElementTimeSlicePropertyTypeContent {
        TaxiwayElementTimeSlice(TaxiwayElementTimeSliceType),
    }
    impl TaxiwayElementTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct GuidanceLineTimeSlicePropertyType {
        pub owns: bool,
        pub content: GuidanceLineTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum GuidanceLineTimeSlicePropertyTypeContent {
        GuidanceLineTimeSlice(GuidanceLineTimeSliceType),
    }
    impl GuidanceLineTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct ApronTimeSlicePropertyType {
        pub owns: bool,
        pub content: ApronTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ApronTimeSlicePropertyTypeContent {
        ApronTimeSlice(ApronTimeSliceType),
    }
    impl ApronTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct ApronElementTimeSlicePropertyType {
        pub owns: bool,
        pub content: ApronElementTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ApronElementTimeSlicePropertyTypeContent {
        ApronElementTimeSlice(ApronElementTimeSliceType),
    }
    impl ApronElementTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AircraftStandTimeSlicePropertyType {
        pub owns: bool,
        pub content: AircraftStandTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AircraftStandTimeSlicePropertyTypeContent {
        AircraftStandTimeSlice(AircraftStandTimeSliceType),
    }
    impl AircraftStandTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RoadTimeSlicePropertyType {
        pub owns: bool,
        pub content: RoadTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RoadTimeSlicePropertyTypeContent {
        RoadTimeSlice(RoadTimeSliceType),
    }
    impl RoadTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct DeicingAreaTimeSlicePropertyType {
        pub owns: bool,
        pub content: DeicingAreaTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum DeicingAreaTimeSlicePropertyTypeContent {
        DeicingAreaTimeSlice(DeicingAreaTimeSliceType),
    }
    impl DeicingAreaTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct PassengerLoadingBridgeTimeSlicePropertyType {
        pub owns: bool,
        pub content: PassengerLoadingBridgeTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum PassengerLoadingBridgeTimeSlicePropertyTypeContent {
        PassengerLoadingBridgeTimeSlice(PassengerLoadingBridgeTimeSliceType),
    }
    impl PassengerLoadingBridgeTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TouchDownLiftOffSafeAreaTimeSlicePropertyType {
        pub owns: bool,
        pub content: TouchDownLiftOffSafeAreaTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffSafeAreaTimeSlicePropertyTypeContent {
        TouchDownLiftOffSafeAreaTimeSlice(TouchDownLiftOffSafeAreaTimeSliceType),
    }
    impl TouchDownLiftOffSafeAreaTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TouchDownLiftOffTimeSlicePropertyType {
        pub owns: bool,
        pub content: TouchDownLiftOffTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffTimeSlicePropertyTypeContent {
        TouchDownLiftOffTimeSlice(TouchDownLiftOffTimeSliceType),
    }
    impl TouchDownLiftOffTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct ApronLightSystemTimeSlicePropertyType {
        pub owns: bool,
        pub content: ApronLightSystemTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ApronLightSystemTimeSlicePropertyTypeContent {
        ApronLightSystemTimeSlice(ApronLightSystemTimeSliceType),
    }
    impl ApronLightSystemTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiwayLightSystemTimeSlicePropertyType {
        pub owns: bool,
        pub content: TaxiwayLightSystemTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayLightSystemTimeSlicePropertyTypeContent {
        TaxiwayLightSystemTimeSlice(TaxiwayLightSystemTimeSliceType),
    }
    impl TaxiwayLightSystemTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayDirectionLightSystemTimeSlicePropertyType {
        pub owns: bool,
        pub content: RunwayDirectionLightSystemTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayDirectionLightSystemTimeSlicePropertyTypeContent {
        RunwayDirectionLightSystemTimeSlice(RunwayDirectionLightSystemTimeSliceType),
    }
    impl RunwayDirectionLightSystemTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TouchDownLiftOffLightSystemTimeSlicePropertyType {
        pub owns: bool,
        pub content: TouchDownLiftOffLightSystemTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffLightSystemTimeSlicePropertyTypeContent {
        TouchDownLiftOffLightSystemTimeSlice(TouchDownLiftOffLightSystemTimeSliceType),
    }
    impl TouchDownLiftOffLightSystemTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct GuidanceLineLightSystemTimeSlicePropertyType {
        pub owns: bool,
        pub content: GuidanceLineLightSystemTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum GuidanceLineLightSystemTimeSlicePropertyTypeContent {
        GuidanceLineLightSystemTimeSlice(GuidanceLineLightSystemTimeSliceType),
    }
    impl GuidanceLineLightSystemTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayProtectAreaLightSystemTimeSlicePropertyType {
        pub owns: bool,
        pub content: RunwayProtectAreaLightSystemTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayProtectAreaLightSystemTimeSlicePropertyTypeContent {
        RunwayProtectAreaLightSystemTimeSlice(RunwayProtectAreaLightSystemTimeSliceType),
    }
    impl RunwayProtectAreaLightSystemTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiHoldingPositionLightSystemTimeSlicePropertyType {
        pub owns: bool,
        pub content: TaxiHoldingPositionLightSystemTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiHoldingPositionLightSystemTimeSlicePropertyTypeContent {
        TaxiHoldingPositionLightSystemTimeSlice(TaxiHoldingPositionLightSystemTimeSliceType),
    }
    impl TaxiHoldingPositionLightSystemTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct ApproachLightingSystemTimeSlicePropertyType {
        pub owns: bool,
        pub content: ApproachLightingSystemTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ApproachLightingSystemTimeSlicePropertyTypeContent {
        ApproachLightingSystemTimeSlice(ApproachLightingSystemTimeSliceType),
    }
    impl ApproachLightingSystemTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiwayMarkingTimeSlicePropertyType {
        pub owns: bool,
        pub content: TaxiwayMarkingTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayMarkingTimeSlicePropertyTypeContent {
        TaxiwayMarkingTimeSlice(TaxiwayMarkingTimeSliceType),
    }
    impl TaxiwayMarkingTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractMarking(pub Box<dyn AbstractMarkingTrait>);
    pub trait AbstractMarkingTrait: AbstractAIXMFeatureTrait {}
    #[derive(Debug, Clone)]
    pub struct ApronMarkingTimeSlicePropertyType {
        pub owns: bool,
        pub content: ApronMarkingTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ApronMarkingTimeSlicePropertyTypeContent {
        ApronMarkingTimeSlice(ApronMarkingTimeSliceType),
    }
    impl ApronMarkingTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportProtectionAreaMarkingTimeSlicePropertyType {
        pub owns: bool,
        pub content: AirportProtectionAreaMarkingTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirportProtectionAreaMarkingTimeSlicePropertyTypeContent {
        AirportProtectionAreaMarkingTimeSlice(AirportProtectionAreaMarkingTimeSliceType),
    }
    impl AirportProtectionAreaMarkingTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TouchDownLiftOffMarkingTimeSlicePropertyType {
        pub owns: bool,
        pub content: TouchDownLiftOffMarkingTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffMarkingTimeSlicePropertyTypeContent {
        TouchDownLiftOffMarkingTimeSlice(TouchDownLiftOffMarkingTimeSliceType),
    }
    impl TouchDownLiftOffMarkingTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayMarkingTimeSlicePropertyType {
        pub owns: bool,
        pub content: RunwayMarkingTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayMarkingTimeSlicePropertyTypeContent {
        RunwayMarkingTimeSlice(RunwayMarkingTimeSliceType),
    }
    impl RunwayMarkingTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct GuidanceLineMarkingTimeSlicePropertyType {
        pub owns: bool,
        pub content: GuidanceLineMarkingTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum GuidanceLineMarkingTimeSlicePropertyTypeContent {
        GuidanceLineMarkingTimeSlice(GuidanceLineMarkingTimeSliceType),
    }
    impl GuidanceLineMarkingTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct DeicingAreaMarkingTimeSlicePropertyType {
        pub owns: bool,
        pub content: DeicingAreaMarkingTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum DeicingAreaMarkingTimeSlicePropertyTypeContent {
        DeicingAreaMarkingTimeSlice(DeicingAreaMarkingTimeSliceType),
    }
    impl DeicingAreaMarkingTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiHoldingPositionMarkingTimeSlicePropertyType {
        pub owns: bool,
        pub content: TaxiHoldingPositionMarkingTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiHoldingPositionMarkingTimeSlicePropertyTypeContent {
        TaxiHoldingPositionMarkingTimeSlice(TaxiHoldingPositionMarkingTimeSliceType),
    }
    impl TaxiHoldingPositionMarkingTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct StandMarkingTimeSlicePropertyType {
        pub owns: bool,
        pub content: StandMarkingTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum StandMarkingTimeSlicePropertyTypeContent {
        StandMarkingTimeSlice(StandMarkingTimeSliceType),
    }
    impl StandMarkingTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct FloatingDockSiteTimeSlicePropertyType {
        pub owns: bool,
        pub content: FloatingDockSiteTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FloatingDockSiteTimeSlicePropertyTypeContent {
        FloatingDockSiteTimeSlice(FloatingDockSiteTimeSliceType),
    }
    impl FloatingDockSiteTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct MarkingBuoyTimeSlicePropertyType {
        pub owns: bool,
        pub content: MarkingBuoyTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum MarkingBuoyTimeSlicePropertyTypeContent {
        MarkingBuoyTimeSlice(MarkingBuoyTimeSliceType),
    }
    impl MarkingBuoyTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct SeaplaneLandingAreaTimeSlicePropertyType {
        pub owns: bool,
        pub content: SeaplaneLandingAreaTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SeaplaneLandingAreaTimeSlicePropertyTypeContent {
        SeaplaneLandingAreaTimeSlice(SeaplaneLandingAreaTimeSliceType),
    }
    impl SeaplaneLandingAreaTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct SeaplaneRampSiteTimeSlicePropertyType {
        pub owns: bool,
        pub content: SeaplaneRampSiteTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SeaplaneRampSiteTimeSlicePropertyTypeContent {
        SeaplaneRampSiteTimeSlice(SeaplaneRampSiteTimeSliceType),
    }
    impl SeaplaneRampSiteTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct WorkAreaTimeSlicePropertyType {
        pub owns: bool,
        pub content: WorkAreaTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum WorkAreaTimeSlicePropertyTypeContent {
        WorkAreaTimeSlice(WorkAreaTimeSliceType),
    }
    impl WorkAreaTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct SurveyControlPointTimeSlicePropertyType {
        pub owns: bool,
        pub content: SurveyControlPointTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SurveyControlPointTimeSlicePropertyTypeContent {
        SurveyControlPointTimeSlice(SurveyControlPointTimeSliceType),
    }
    impl SurveyControlPointTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct NonMovementAreaTimeSlicePropertyType {
        pub owns: bool,
        pub content: NonMovementAreaTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NonMovementAreaTimeSlicePropertyTypeContent {
        NonMovementAreaTimeSlice(NonMovementAreaTimeSliceType),
    }
    impl NonMovementAreaTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportHeliportCollocationTimeSlicePropertyType {
        pub owns: bool,
        pub content: AirportHeliportCollocationTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportCollocationTimeSlicePropertyTypeContent {
        AirportHeliportCollocationTimeSlice(AirportHeliportCollocationTimeSliceType),
    }
    impl AirportHeliportCollocationTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportHeliportTimeSlicePropertyType {
        pub owns: bool,
        pub content: AirportHeliportTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportTimeSlicePropertyTypeContent {
        AirportHeliportTimeSlice(AirportHeliportTimeSliceType),
    }
    impl AirportHeliportTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportHotSpotTimeSlicePropertyType {
        pub owns: bool,
        pub content: AirportHotSpotTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHotSpotTimeSlicePropertyTypeContent {
        AirportHotSpotTimeSlice(AirportHotSpotTimeSliceType),
    }
    impl AirportHotSpotTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AuthorityForAirspaceTimeSlicePropertyType {
        pub owns: bool,
        pub content: AuthorityForAirspaceTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AuthorityForAirspaceTimeSlicePropertyTypeContent {
        AuthorityForAirspaceTimeSlice(AuthorityForAirspaceTimeSliceType),
    }
    impl AuthorityForAirspaceTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceTimeSlicePropertyType {
        pub owns: bool,
        pub content: AirspaceTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceTimeSlicePropertyTypeContent {
        AirspaceTimeSlice(AirspaceTimeSliceType),
    }
    impl AirspaceTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct GeoBorderTimeSlicePropertyType {
        pub owns: bool,
        pub content: GeoBorderTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum GeoBorderTimeSlicePropertyTypeContent {
        GeoBorderTimeSlice(GeoBorderTimeSliceType),
    }
    impl GeoBorderTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct PrecisionApproachRadarTimeSlicePropertyType {
        pub owns: bool,
        pub content: PrecisionApproachRadarTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum PrecisionApproachRadarTimeSlicePropertyTypeContent {
        PrecisionApproachRadarTimeSlice(PrecisionApproachRadarTimeSliceType),
    }
    impl PrecisionApproachRadarTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRadarEquipment(pub Box<dyn AbstractRadarEquipmentTrait>);
    pub trait AbstractRadarEquipmentTrait: AbstractAIXMFeatureTrait {}
    #[derive(Debug, Clone)]
    pub struct PrimarySurveillanceRadarTimeSlicePropertyType {
        pub owns: bool,
        pub content: PrimarySurveillanceRadarTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum PrimarySurveillanceRadarTimeSlicePropertyTypeContent {
        PrimarySurveillanceRadarTimeSlice(PrimarySurveillanceRadarTimeSliceType),
    }
    impl PrimarySurveillanceRadarTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSurveillanceRadar(pub Box<dyn AbstractSurveillanceRadarTrait>);
    pub trait AbstractSurveillanceRadarTrait: AbstractRadarEquipmentTrait {}
    #[derive(Debug, Clone)]
    pub struct RadarSystemTimeSlicePropertyType {
        pub owns: bool,
        pub content: RadarSystemTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RadarSystemTimeSlicePropertyTypeContent {
        RadarSystemTimeSlice(RadarSystemTimeSliceType),
    }
    impl RadarSystemTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct SecondarySurveillanceRadarTimeSlicePropertyType {
        pub owns: bool,
        pub content: SecondarySurveillanceRadarTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SecondarySurveillanceRadarTimeSlicePropertyTypeContent {
        SecondarySurveillanceRadarTimeSlice(SecondarySurveillanceRadarTimeSliceType),
    }
    impl SecondarySurveillanceRadarTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct HoldingAssessmentTimeSlicePropertyType {
        pub owns: bool,
        pub content: HoldingAssessmentTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum HoldingAssessmentTimeSlicePropertyTypeContent {
        HoldingAssessmentTimeSlice(HoldingAssessmentTimeSliceType),
    }
    impl HoldingAssessmentTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct StandardLevelTableTimeSlicePropertyType {
        pub owns: bool,
        pub content: StandardLevelTableTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum StandardLevelTableTimeSlicePropertyTypeContent {
        StandardLevelTableTimeSlice(StandardLevelTableTimeSliceType),
    }
    impl StandardLevelTableTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct StandardLevelSectorTimeSlicePropertyType {
        pub owns: bool,
        pub content: StandardLevelSectorTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum StandardLevelSectorTimeSlicePropertyTypeContent {
        StandardLevelSectorTimeSlice(StandardLevelSectorTimeSliceType),
    }
    impl StandardLevelSectorTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct StandardLevelColumnTimeSlicePropertyType {
        pub owns: bool,
        pub content: StandardLevelColumnTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum StandardLevelColumnTimeSlicePropertyTypeContent {
        StandardLevelColumnTimeSlice(StandardLevelColumnTimeSliceType),
    }
    impl StandardLevelColumnTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RadioFrequencyAreaTimeSlicePropertyType {
        pub owns: bool,
        pub content: RadioFrequencyAreaTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RadioFrequencyAreaTimeSlicePropertyTypeContent {
        RadioFrequencyAreaTimeSlice(RadioFrequencyAreaTimeSliceType),
    }
    impl RadioFrequencyAreaTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct SpecialDateTimeSlicePropertyType {
        pub owns: bool,
        pub content: SpecialDateTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SpecialDateTimeSlicePropertyTypeContent {
        SpecialDateTimeSlice(SpecialDateTimeSliceType),
    }
    impl SpecialDateTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RadioCommunicationChannelTimeSlicePropertyType {
        pub owns: bool,
        pub content: RadioCommunicationChannelTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RadioCommunicationChannelTimeSlicePropertyTypeContent {
        RadioCommunicationChannelTimeSlice(RadioCommunicationChannelTimeSliceType),
    }
    impl RadioCommunicationChannelTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct PilotControlledLightingTimeSlicePropertyType {
        pub owns: bool,
        pub content: PilotControlledLightingTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum PilotControlledLightingTimeSlicePropertyTypeContent {
        PilotControlledLightingTimeSlice(PilotControlledLightingTimeSliceType),
    }
    impl PilotControlledLightingTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct InformationServiceTimeSlicePropertyType {
        pub owns: bool,
        pub content: InformationServiceTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum InformationServiceTimeSlicePropertyTypeContent {
        InformationServiceTimeSlice(InformationServiceTimeSliceType),
    }
    impl InformationServiceTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractService(pub Box<dyn AbstractServiceTrait>);
    pub trait AbstractServiceTrait: AbstractAIXMFeatureTrait {}
    #[derive(Debug, Clone)]
    pub struct GroundTrafficControlServiceTimeSlicePropertyType {
        pub owns: bool,
        pub content: GroundTrafficControlServiceTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum GroundTrafficControlServiceTimeSlicePropertyTypeContent {
        GroundTrafficControlServiceTimeSlice(GroundTrafficControlServiceTimeSliceType),
    }
    impl GroundTrafficControlServiceTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTrafficSeparationService(pub Box<dyn AbstractTrafficSeparationServiceTrait>);
    pub trait AbstractTrafficSeparationServiceTrait: AbstractServiceTrait {}
    #[derive(Debug, Clone)]
    pub struct AirTrafficControlServiceTimeSlicePropertyType {
        pub owns: bool,
        pub content: AirTrafficControlServiceTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirTrafficControlServiceTimeSlicePropertyTypeContent {
        AirTrafficControlServiceTimeSlice(AirTrafficControlServiceTimeSliceType),
    }
    impl AirTrafficControlServiceTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirTrafficManagementServiceTimeSlicePropertyType {
        pub owns: bool,
        pub content: AirTrafficManagementServiceTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirTrafficManagementServiceTimeSlicePropertyTypeContent {
        AirTrafficManagementServiceTimeSlice(AirTrafficManagementServiceTimeSliceType),
    }
    impl AirTrafficManagementServiceTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct SearchRescueServiceTimeSlicePropertyType {
        pub owns: bool,
        pub content: SearchRescueServiceTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SearchRescueServiceTimeSlicePropertyTypeContent {
        SearchRescueServiceTimeSlice(SearchRescueServiceTimeSliceType),
    }
    impl SearchRescueServiceTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct PassengerServiceTimeSlicePropertyType {
        pub owns: bool,
        pub content: PassengerServiceTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum PassengerServiceTimeSlicePropertyTypeContent {
        PassengerServiceTimeSlice(PassengerServiceTimeSliceType),
    }
    impl PassengerServiceTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAirportGroundService(pub Box<dyn AbstractAirportGroundServiceTrait>);
    pub trait AbstractAirportGroundServiceTrait: AbstractServiceTrait {}
    #[derive(Debug, Clone)]
    pub struct AircraftGroundServiceTimeSlicePropertyType {
        pub owns: bool,
        pub content: AircraftGroundServiceTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AircraftGroundServiceTimeSlicePropertyTypeContent {
        AircraftGroundServiceTimeSlice(AircraftGroundServiceTimeSliceType),
    }
    impl AircraftGroundServiceTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct FireFightingServiceTimeSlicePropertyType {
        pub owns: bool,
        pub content: FireFightingServiceTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FireFightingServiceTimeSlicePropertyTypeContent {
        FireFightingServiceTimeSlice(FireFightingServiceTimeSliceType),
    }
    impl FireFightingServiceTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportClearanceServiceTimeSlicePropertyType {
        pub owns: bool,
        pub content: AirportClearanceServiceTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirportClearanceServiceTimeSlicePropertyTypeContent {
        AirportClearanceServiceTimeSlice(AirportClearanceServiceTimeSliceType),
    }
    impl AirportClearanceServiceTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportSuppliesServiceTimeSlicePropertyType {
        pub owns: bool,
        pub content: AirportSuppliesServiceTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirportSuppliesServiceTimeSlicePropertyTypeContent {
        AirportSuppliesServiceTimeSlice(AirportSuppliesServiceTimeSliceType),
    }
    impl AirportSuppliesServiceTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AngleIndicationTimeSlicePropertyType {
        pub owns: bool,
        pub content: AngleIndicationTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AngleIndicationTimeSlicePropertyTypeContent {
        AngleIndicationTimeSlice(AngleIndicationTimeSliceType),
    }
    impl AngleIndicationTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct DistanceIndicationTimeSlicePropertyType {
        pub owns: bool,
        pub content: DistanceIndicationTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum DistanceIndicationTimeSlicePropertyTypeContent {
        DistanceIndicationTimeSlice(DistanceIndicationTimeSliceType),
    }
    impl DistanceIndicationTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AzimuthTimeSlicePropertyType {
        pub owns: bool,
        pub content: AzimuthTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AzimuthTimeSlicePropertyTypeContent {
        AzimuthTimeSlice(AzimuthTimeSliceType),
    }
    impl AzimuthTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractNavaidEquipment(pub Box<dyn AbstractNavaidEquipmentTrait>);
    pub trait AbstractNavaidEquipmentTrait: AbstractAIXMFeatureTrait {}
    #[derive(Debug, Clone)]
    pub struct CheckpointINSTimeSlicePropertyType {
        pub owns: bool,
        pub content: CheckpointINSTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum CheckpointINSTimeSlicePropertyTypeContent {
        CheckpointINSTimeSlice(CheckpointINSTimeSliceType),
    }
    impl CheckpointINSTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractNavigationSystemCheckpoint(
        pub Box<dyn AbstractNavigationSystemCheckpointTrait>,
    );
    pub trait AbstractNavigationSystemCheckpointTrait: AbstractAIXMFeatureTrait {}
    #[derive(Debug, Clone)]
    pub struct CheckpointVORTimeSlicePropertyType {
        pub owns: bool,
        pub content: CheckpointVORTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum CheckpointVORTimeSlicePropertyTypeContent {
        CheckpointVORTimeSlice(CheckpointVORTimeSliceType),
    }
    impl CheckpointVORTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct DmetimeSlicePropertyType {
        pub owns: bool,
        pub content: DmetimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum DmetimeSlicePropertyTypeContent {
        DmetimeSlice(DmetimeSliceType),
    }
    impl DmetimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct GlidepathTimeSlicePropertyType {
        pub owns: bool,
        pub content: GlidepathTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum GlidepathTimeSlicePropertyTypeContent {
        GlidepathTimeSlice(GlidepathTimeSliceType),
    }
    impl GlidepathTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct LocalizerTimeSlicePropertyType {
        pub owns: bool,
        pub content: LocalizerTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum LocalizerTimeSlicePropertyTypeContent {
        LocalizerTimeSlice(LocalizerTimeSliceType),
    }
    impl LocalizerTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct MarkerBeaconTimeSlicePropertyType {
        pub owns: bool,
        pub content: MarkerBeaconTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum MarkerBeaconTimeSlicePropertyTypeContent {
        MarkerBeaconTimeSlice(MarkerBeaconTimeSliceType),
    }
    impl MarkerBeaconTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct NavaidTimeSlicePropertyType {
        pub owns: bool,
        pub content: NavaidTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NavaidTimeSlicePropertyTypeContent {
        NavaidTimeSlice(NavaidTimeSliceType),
    }
    impl NavaidTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct SdftimeSlicePropertyType {
        pub owns: bool,
        pub content: SdftimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SdftimeSlicePropertyTypeContent {
        SdftimeSlice(SdftimeSliceType),
    }
    impl SdftimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct NdbtimeSlicePropertyType {
        pub owns: bool,
        pub content: NdbtimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NdbtimeSlicePropertyTypeContent {
        NdbtimeSlice(NdbtimeSliceType),
    }
    impl NdbtimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct SpecialNavigationStationTimeSlicePropertyType {
        pub owns: bool,
        pub content: SpecialNavigationStationTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SpecialNavigationStationTimeSlicePropertyTypeContent {
        SpecialNavigationStationTimeSlice(SpecialNavigationStationTimeSliceType),
    }
    impl SpecialNavigationStationTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct VortimeSlicePropertyType {
        pub owns: bool,
        pub content: VortimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum VortimeSlicePropertyTypeContent {
        VortimeSlice(VortimeSliceType),
    }
    impl VortimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TacantimeSlicePropertyType {
        pub owns: bool,
        pub content: TacantimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TacantimeSlicePropertyTypeContent {
        TacantimeSlice(TacantimeSliceType),
    }
    impl TacantimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct SpecialNavigationSystemTimeSlicePropertyType {
        pub owns: bool,
        pub content: SpecialNavigationSystemTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SpecialNavigationSystemTimeSlicePropertyTypeContent {
        SpecialNavigationSystemTimeSlice(SpecialNavigationSystemTimeSliceType),
    }
    impl SpecialNavigationSystemTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct DirectionFinderTimeSlicePropertyType {
        pub owns: bool,
        pub content: DirectionFinderTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum DirectionFinderTimeSlicePropertyTypeContent {
        DirectionFinderTimeSlice(DirectionFinderTimeSliceType),
    }
    impl DirectionFinderTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct DesignatedPointTimeSlicePropertyType {
        pub owns: bool,
        pub content: DesignatedPointTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum DesignatedPointTimeSlicePropertyTypeContent {
        DesignatedPointTimeSlice(DesignatedPointTimeSliceType),
    }
    impl DesignatedPointTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct SignificantPointInAirspaceTimeSlicePropertyType {
        pub owns: bool,
        pub content: SignificantPointInAirspaceTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SignificantPointInAirspaceTimeSlicePropertyTypeContent {
        SignificantPointInAirspaceTimeSlice(SignificantPointInAirspaceTimeSliceType),
    }
    impl SignificantPointInAirspaceTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AeronauticalGroundLightTimeSlicePropertyType {
        pub owns: bool,
        pub content: AeronauticalGroundLightTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AeronauticalGroundLightTimeSlicePropertyTypeContent {
        AeronauticalGroundLightTimeSlice(AeronauticalGroundLightTimeSliceType),
    }
    impl AeronauticalGroundLightTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct OrganisationAuthorityTimeSlicePropertyType {
        pub owns: bool,
        pub content: OrganisationAuthorityTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum OrganisationAuthorityTimeSlicePropertyTypeContent {
        OrganisationAuthorityTimeSlice(OrganisationAuthorityTimeSliceType),
    }
    impl OrganisationAuthorityTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct UnitTimeSlicePropertyType {
        pub owns: bool,
        pub content: UnitTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum UnitTimeSlicePropertyTypeContent {
        UnitTimeSlice(UnitTimeSliceType),
    }
    impl UnitTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct ObstacleAreaTimeSlicePropertyType {
        pub owns: bool,
        pub content: ObstacleAreaTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ObstacleAreaTimeSlicePropertyTypeContent {
        ObstacleAreaTimeSlice(ObstacleAreaTimeSliceType),
    }
    impl ObstacleAreaTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct VerticalStructureTimeSlicePropertyType {
        pub owns: bool,
        pub content: VerticalStructureTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum VerticalStructureTimeSlicePropertyTypeContent {
        VerticalStructureTimeSlice(VerticalStructureTimeSliceType),
    }
    impl VerticalStructureTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct CirclingAreaTimeSlicePropertyType {
        pub owns: bool,
        pub content: CirclingAreaTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum CirclingAreaTimeSlicePropertyTypeContent {
        CirclingAreaTimeSlice(CirclingAreaTimeSliceType),
    }
    impl CirclingAreaTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TerminalArrivalAreaTimeSlicePropertyType {
        pub owns: bool,
        pub content: TerminalArrivalAreaTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TerminalArrivalAreaTimeSlicePropertyTypeContent {
        TerminalArrivalAreaTimeSlice(TerminalArrivalAreaTimeSliceType),
    }
    impl TerminalArrivalAreaTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct InstrumentApproachProcedureTimeSlicePropertyType {
        pub owns: bool,
        pub content: InstrumentApproachProcedureTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum InstrumentApproachProcedureTimeSlicePropertyTypeContent {
        InstrumentApproachProcedureTimeSlice(InstrumentApproachProcedureTimeSliceType),
    }
    impl InstrumentApproachProcedureTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractProcedure(pub Box<dyn AbstractProcedureTrait>);
    pub trait AbstractProcedureTrait: AbstractAIXMFeatureTrait {}
    #[derive(Debug, Clone)]
    pub struct StandardInstrumentDepartureTimeSlicePropertyType {
        pub owns: bool,
        pub content: StandardInstrumentDepartureTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum StandardInstrumentDepartureTimeSlicePropertyTypeContent {
        StandardInstrumentDepartureTimeSlice(StandardInstrumentDepartureTimeSliceType),
    }
    impl StandardInstrumentDepartureTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct NavigationAreaTimeSlicePropertyType {
        pub owns: bool,
        pub content: NavigationAreaTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NavigationAreaTimeSlicePropertyTypeContent {
        NavigationAreaTimeSlice(NavigationAreaTimeSliceType),
    }
    impl NavigationAreaTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct StandardInstrumentArrivalTimeSlicePropertyType {
        pub owns: bool,
        pub content: StandardInstrumentArrivalTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum StandardInstrumentArrivalTimeSlicePropertyTypeContent {
        StandardInstrumentArrivalTimeSlice(StandardInstrumentArrivalTimeSliceType),
    }
    impl StandardInstrumentArrivalTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct NavigationAreaRestrictionTimeSlicePropertyType {
        pub owns: bool,
        pub content: NavigationAreaRestrictionTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NavigationAreaRestrictionTimeSlicePropertyTypeContent {
        NavigationAreaRestrictionTimeSlice(NavigationAreaRestrictionTimeSliceType),
    }
    impl NavigationAreaRestrictionTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSegmentLeg(pub Box<dyn AbstractSegmentLegTrait>);
    pub trait AbstractSegmentLegTrait: AbstractAIXMFeatureTrait {}
    #[derive(Debug, Clone)]
    pub struct ArrivalFeederLegTimeSlicePropertyType {
        pub owns: bool,
        pub content: ArrivalFeederLegTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ArrivalFeederLegTimeSlicePropertyTypeContent {
        ArrivalFeederLegTimeSlice(ArrivalFeederLegTimeSliceType),
    }
    impl ArrivalFeederLegTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractApproachLeg(pub Box<dyn AbstractApproachLegTrait>);
    pub trait AbstractApproachLegTrait: AbstractSegmentLegTrait {}
    #[derive(Debug, Clone)]
    pub struct ArrivalLegTimeSlicePropertyType {
        pub owns: bool,
        pub content: ArrivalLegTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ArrivalLegTimeSlicePropertyTypeContent {
        ArrivalLegTimeSlice(ArrivalLegTimeSliceType),
    }
    impl ArrivalLegTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct DepartureLegTimeSlicePropertyType {
        pub owns: bool,
        pub content: DepartureLegTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum DepartureLegTimeSlicePropertyTypeContent {
        DepartureLegTimeSlice(DepartureLegTimeSliceType),
    }
    impl DepartureLegTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct FinalLegTimeSlicePropertyType {
        pub owns: bool,
        pub content: FinalLegTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FinalLegTimeSlicePropertyTypeContent {
        FinalLegTimeSlice(FinalLegTimeSliceType),
    }
    impl FinalLegTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct InitialLegTimeSlicePropertyType {
        pub owns: bool,
        pub content: InitialLegTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum InitialLegTimeSlicePropertyTypeContent {
        InitialLegTimeSlice(InitialLegTimeSliceType),
    }
    impl InitialLegTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct IntermediateLegTimeSlicePropertyType {
        pub owns: bool,
        pub content: IntermediateLegTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum IntermediateLegTimeSlicePropertyTypeContent {
        IntermediateLegTimeSlice(IntermediateLegTimeSliceType),
    }
    impl IntermediateLegTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct MissedApproachLegTimeSlicePropertyType {
        pub owns: bool,
        pub content: MissedApproachLegTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum MissedApproachLegTimeSlicePropertyTypeContent {
        MissedApproachLegTimeSlice(MissedApproachLegTimeSliceType),
    }
    impl MissedApproachLegTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct ProcedureDMETimeSlicePropertyType {
        pub owns: bool,
        pub content: ProcedureDMETimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ProcedureDMETimeSlicePropertyTypeContent {
        ProcedureDMETimeSlice(ProcedureDMETimeSliceType),
    }
    impl ProcedureDMETimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct SafeAltitudeAreaTimeSlicePropertyType {
        pub owns: bool,
        pub content: SafeAltitudeAreaTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SafeAltitudeAreaTimeSlicePropertyTypeContent {
        SafeAltitudeAreaTimeSlice(SafeAltitudeAreaTimeSliceType),
    }
    impl SafeAltitudeAreaTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct HoldingPatternTimeSlicePropertyType {
        pub owns: bool,
        pub content: HoldingPatternTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum HoldingPatternTimeSlicePropertyTypeContent {
        HoldingPatternTimeSlice(HoldingPatternTimeSliceType),
    }
    impl HoldingPatternTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceBorderCrossingTimeSlicePropertyType {
        pub owns: bool,
        pub content: AirspaceBorderCrossingTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceBorderCrossingTimeSlicePropertyTypeContent {
        AirspaceBorderCrossingTimeSlice(AirspaceBorderCrossingTimeSliceType),
    }
    impl AirspaceBorderCrossingTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct FlightRestrictionTimeSlicePropertyType {
        pub owns: bool,
        pub content: FlightRestrictionTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FlightRestrictionTimeSlicePropertyTypeContent {
        FlightRestrictionTimeSlice(FlightRestrictionTimeSliceType),
    }
    impl FlightRestrictionTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RouteSegmentTimeSlicePropertyType {
        pub owns: bool,
        pub content: RouteSegmentTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RouteSegmentTimeSlicePropertyTypeContent {
        RouteSegmentTimeSlice(RouteSegmentTimeSliceType),
    }
    impl RouteSegmentTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RouteDMETimeSlicePropertyType {
        pub owns: bool,
        pub content: RouteDMETimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RouteDMETimeSlicePropertyTypeContent {
        RouteDMETimeSlice(RouteDMETimeSliceType),
    }
    impl RouteDMETimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RouteTimeSlicePropertyType {
        pub owns: bool,
        pub content: RouteTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RouteTimeSlicePropertyTypeContent {
        RouteTimeSlice(RouteTimeSliceType),
    }
    impl RouteTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct ChangeOverPointTimeSlicePropertyType {
        pub owns: bool,
        pub content: ChangeOverPointTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ChangeOverPointTimeSlicePropertyTypeContent {
        ChangeOverPointTimeSlice(ChangeOverPointTimeSliceType),
    }
    impl ChangeOverPointTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AerialRefuellingTimeSlicePropertyType {
        pub owns: bool,
        pub content: AerialRefuellingTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AerialRefuellingTimeSlicePropertyTypeContent {
        AerialRefuellingTimeSlice(AerialRefuellingTimeSliceType),
    }
    impl AerialRefuellingTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RulesProceduresTimeSlicePropertyType {
        pub owns: bool,
        pub content: RulesProceduresTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RulesProceduresTimeSlicePropertyTypeContent {
        RulesProceduresTimeSlice(RulesProceduresTimeSliceType),
    }
    impl RulesProceduresTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayProtectAreaTimeSliceType {
        pub id: String,
        pub content: Vec<RunwayProtectAreaTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayProtectAreaTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content32(RunwayProtectAreaTimeSliceContent32Type),
        Extension(RunwayProtectAreaTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for RunwayProtectAreaTimeSliceType {}
    impl gml::AbstractObjectTrait for RunwayProtectAreaTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for RunwayProtectAreaTimeSliceType {}
    impl xsd_parser::AsAny for RunwayProtectAreaTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayDirectionTimeSliceType {
        pub id: String,
        pub content: Vec<RunwayDirectionTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayDirectionTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content52(RunwayDirectionTimeSliceContent52Type),
        Extension(RunwayDirectionTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for RunwayDirectionTimeSliceType {}
    impl gml::AbstractObjectTrait for RunwayDirectionTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for RunwayDirectionTimeSliceType {}
    impl xsd_parser::AsAny for RunwayDirectionTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayCentrelinePointTimeSliceType {
        pub id: String,
        pub content: Vec<RunwayCentrelinePointTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayCentrelinePointTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content77(RunwayCentrelinePointTimeSliceContent77Type),
        Extension(RunwayCentrelinePointTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for RunwayCentrelinePointTimeSliceType {}
    impl gml::AbstractObjectTrait for RunwayCentrelinePointTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for RunwayCentrelinePointTimeSliceType {}
    impl xsd_parser::AsAny for RunwayCentrelinePointTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayTimeSliceType {
        pub id: String,
        pub content: Vec<RunwayTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content93(RunwayTimeSliceContent93Type),
        Extension(RunwayTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for RunwayTimeSliceType {}
    impl gml::AbstractObjectTrait for RunwayTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for RunwayTimeSliceType {}
    impl xsd_parser::AsAny for RunwayTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ArrestingGearTimeSliceType {
        pub id: String,
        pub content: Vec<ArrestingGearTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ArrestingGearTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content119(ArrestingGearTimeSliceContent119Type),
        Extension(ArrestingGearTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for ArrestingGearTimeSliceType {}
    impl gml::AbstractObjectTrait for ArrestingGearTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for ArrestingGearTimeSliceType {}
    impl xsd_parser::AsAny for ArrestingGearTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayElementTimeSliceType {
        pub id: String,
        pub content: Vec<RunwayElementTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayElementTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content142(RunwayElementTimeSliceContent142Type),
        Extension(RunwayElementTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for RunwayElementTimeSliceType {}
    impl gml::AbstractObjectTrait for RunwayElementTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for RunwayElementTimeSliceType {}
    impl xsd_parser::AsAny for RunwayElementTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct VisualGlideSlopeIndicatorTimeSliceType {
        pub id: String,
        pub content: Vec<VisualGlideSlopeIndicatorTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum VisualGlideSlopeIndicatorTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content161(VisualGlideSlopeIndicatorTimeSliceContent161Type),
        Extension(VisualGlideSlopeIndicatorTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for VisualGlideSlopeIndicatorTimeSliceType {}
    impl gml::AbstractObjectTrait for VisualGlideSlopeIndicatorTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for VisualGlideSlopeIndicatorTimeSliceType {}
    impl xsd_parser::AsAny for VisualGlideSlopeIndicatorTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayVisualRangeTimeSliceType {
        pub id: String,
        pub content: Vec<RunwayVisualRangeTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayVisualRangeTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content184(RunwayVisualRangeTimeSliceContent184Type),
        Extension(RunwayVisualRangeTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for RunwayVisualRangeTimeSliceType {}
    impl gml::AbstractObjectTrait for RunwayVisualRangeTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for RunwayVisualRangeTimeSliceType {}
    impl xsd_parser::AsAny for RunwayVisualRangeTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayBlastPadTimeSliceType {
        pub id: String,
        pub content: Vec<RunwayBlastPadTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayBlastPadTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content197(RunwayBlastPadTimeSliceContent197Type),
        Extension(RunwayBlastPadTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for RunwayBlastPadTimeSliceType {}
    impl gml::AbstractObjectTrait for RunwayBlastPadTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for RunwayBlastPadTimeSliceType {}
    impl xsd_parser::AsAny for RunwayBlastPadTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiHoldingPositionTimeSliceType {
        pub id: String,
        pub content: Vec<TaxiHoldingPositionTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiHoldingPositionTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content276(TaxiHoldingPositionTimeSliceContent276Type),
        Extension(TaxiHoldingPositionTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for TaxiHoldingPositionTimeSliceType {}
    impl gml::AbstractObjectTrait for TaxiHoldingPositionTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for TaxiHoldingPositionTimeSliceType {}
    impl xsd_parser::AsAny for TaxiHoldingPositionTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiwayTimeSliceType {
        pub id: String,
        pub content: Vec<TaxiwayTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content291(TaxiwayTimeSliceContent291Type),
        Extension(TaxiwayTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for TaxiwayTimeSliceType {}
    impl gml::AbstractObjectTrait for TaxiwayTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for TaxiwayTimeSliceType {}
    impl xsd_parser::AsAny for TaxiwayTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiwayElementTimeSliceType {
        pub id: String,
        pub content: Vec<TaxiwayElementTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayElementTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content311(TaxiwayElementTimeSliceContent311Type),
        Extension(TaxiwayElementTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for TaxiwayElementTimeSliceType {}
    impl gml::AbstractObjectTrait for TaxiwayElementTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for TaxiwayElementTimeSliceType {}
    impl xsd_parser::AsAny for TaxiwayElementTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GuidanceLineTimeSliceType {
        pub id: String,
        pub content: Vec<GuidanceLineTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GuidanceLineTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content329(GuidanceLineTimeSliceContent329Type),
        Extension(GuidanceLineTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for GuidanceLineTimeSliceType {}
    impl gml::AbstractObjectTrait for GuidanceLineTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for GuidanceLineTimeSliceType {}
    impl xsd_parser::AsAny for GuidanceLineTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ApronTimeSliceType {
        pub id: String,
        pub content: Vec<ApronTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ApronTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content349(ApronTimeSliceContent349Type),
        Extension(ApronTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for ApronTimeSliceType {}
    impl gml::AbstractObjectTrait for ApronTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for ApronTimeSliceType {}
    impl xsd_parser::AsAny for ApronTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ApronElementTimeSliceType {
        pub id: String,
        pub content: Vec<ApronElementTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ApronElementTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content365(ApronElementTimeSliceContent365Type),
        Extension(ApronElementTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for ApronElementTimeSliceType {}
    impl gml::AbstractObjectTrait for ApronElementTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for ApronElementTimeSliceType {}
    impl xsd_parser::AsAny for ApronElementTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AircraftStandTimeSliceType {
        pub id: String,
        pub content: Vec<AircraftStandTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AircraftStandTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content387(AircraftStandTimeSliceContent387Type),
        Extension(AircraftStandTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for AircraftStandTimeSliceType {}
    impl gml::AbstractObjectTrait for AircraftStandTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for AircraftStandTimeSliceType {}
    impl xsd_parser::AsAny for AircraftStandTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RoadTimeSliceType {
        pub id: String,
        pub content: Vec<RoadTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RoadTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content406(RoadTimeSliceContent406Type),
        Extension(RoadTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for RoadTimeSliceType {}
    impl gml::AbstractObjectTrait for RoadTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for RoadTimeSliceType {}
    impl xsd_parser::AsAny for RoadTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DeicingAreaTimeSliceType {
        pub id: String,
        pub content: Vec<DeicingAreaTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DeicingAreaTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content449(DeicingAreaTimeSliceContent449Type),
        Extension(DeicingAreaTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for DeicingAreaTimeSliceType {}
    impl gml::AbstractObjectTrait for DeicingAreaTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for DeicingAreaTimeSliceType {}
    impl xsd_parser::AsAny for DeicingAreaTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct PassengerLoadingBridgeTimeSliceType {
        pub id: String,
        pub content: Vec<PassengerLoadingBridgeTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PassengerLoadingBridgeTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content465(PassengerLoadingBridgeTimeSliceContent465Type),
        Extension(PassengerLoadingBridgeTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for PassengerLoadingBridgeTimeSliceType {}
    impl gml::AbstractObjectTrait for PassengerLoadingBridgeTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for PassengerLoadingBridgeTimeSliceType {}
    impl xsd_parser::AsAny for PassengerLoadingBridgeTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TouchDownLiftOffSafeAreaTimeSliceType {
        pub id: String,
        pub content: Vec<TouchDownLiftOffSafeAreaTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffSafeAreaTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content478(TouchDownLiftOffSafeAreaTimeSliceContent478Type),
        Extension(TouchDownLiftOffSafeAreaTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for TouchDownLiftOffSafeAreaTimeSliceType {}
    impl gml::AbstractObjectTrait for TouchDownLiftOffSafeAreaTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for TouchDownLiftOffSafeAreaTimeSliceType {}
    impl xsd_parser::AsAny for TouchDownLiftOffSafeAreaTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TouchDownLiftOffTimeSliceType {
        pub id: String,
        pub content: Vec<TouchDownLiftOffTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content496(TouchDownLiftOffTimeSliceContent496Type),
        Extension(TouchDownLiftOffTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for TouchDownLiftOffTimeSliceType {}
    impl gml::AbstractObjectTrait for TouchDownLiftOffTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for TouchDownLiftOffTimeSliceType {}
    impl xsd_parser::AsAny for TouchDownLiftOffTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ApronLightSystemTimeSliceType {
        pub id: String,
        pub content: Vec<ApronLightSystemTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ApronLightSystemTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content519(ApronLightSystemTimeSliceContent519Type),
        Extension(ApronLightSystemTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for ApronLightSystemTimeSliceType {}
    impl gml::AbstractObjectTrait for ApronLightSystemTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for ApronLightSystemTimeSliceType {}
    impl xsd_parser::AsAny for ApronLightSystemTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiwayLightSystemTimeSliceType {
        pub id: String,
        pub content: Vec<TaxiwayLightSystemTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayLightSystemTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content537(TaxiwayLightSystemTimeSliceContent537Type),
        Extension(TaxiwayLightSystemTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for TaxiwayLightSystemTimeSliceType {}
    impl gml::AbstractObjectTrait for TaxiwayLightSystemTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for TaxiwayLightSystemTimeSliceType {}
    impl xsd_parser::AsAny for TaxiwayLightSystemTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayDirectionLightSystemTimeSliceType {
        pub id: String,
        pub content: Vec<RunwayDirectionLightSystemTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayDirectionLightSystemTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content555(RunwayDirectionLightSystemTimeSliceContent555Type),
        Extension(RunwayDirectionLightSystemTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for RunwayDirectionLightSystemTimeSliceType {}
    impl gml::AbstractObjectTrait for RunwayDirectionLightSystemTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for RunwayDirectionLightSystemTimeSliceType {}
    impl xsd_parser::AsAny for RunwayDirectionLightSystemTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TouchDownLiftOffLightSystemTimeSliceType {
        pub id: String,
        pub content: Vec<TouchDownLiftOffLightSystemTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffLightSystemTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content573(TouchDownLiftOffLightSystemTimeSliceContent573Type),
        Extension(TouchDownLiftOffLightSystemTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for TouchDownLiftOffLightSystemTimeSliceType {}
    impl gml::AbstractObjectTrait for TouchDownLiftOffLightSystemTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for TouchDownLiftOffLightSystemTimeSliceType {}
    impl xsd_parser::AsAny for TouchDownLiftOffLightSystemTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GuidanceLineLightSystemTimeSliceType {
        pub id: String,
        pub content: Vec<GuidanceLineLightSystemTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GuidanceLineLightSystemTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content591(GuidanceLineLightSystemTimeSliceContent591Type),
        Extension(GuidanceLineLightSystemTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for GuidanceLineLightSystemTimeSliceType {}
    impl gml::AbstractObjectTrait for GuidanceLineLightSystemTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for GuidanceLineLightSystemTimeSliceType {}
    impl xsd_parser::AsAny for GuidanceLineLightSystemTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayProtectAreaLightSystemTimeSliceType {
        pub id: String,
        pub content: Vec<RunwayProtectAreaLightSystemTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayProtectAreaLightSystemTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content608(RunwayProtectAreaLightSystemTimeSliceContent608Type),
        Extension(RunwayProtectAreaLightSystemTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for RunwayProtectAreaLightSystemTimeSliceType {}
    impl gml::AbstractObjectTrait for RunwayProtectAreaLightSystemTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for RunwayProtectAreaLightSystemTimeSliceType {}
    impl xsd_parser::AsAny for RunwayProtectAreaLightSystemTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiHoldingPositionLightSystemTimeSliceType {
        pub id: String,
        pub content: Vec<TaxiHoldingPositionLightSystemTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiHoldingPositionLightSystemTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content626(TaxiHoldingPositionLightSystemTimeSliceContent626Type),
        Extension(TaxiHoldingPositionLightSystemTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for TaxiHoldingPositionLightSystemTimeSliceType {}
    impl gml::AbstractObjectTrait for TaxiHoldingPositionLightSystemTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for TaxiHoldingPositionLightSystemTimeSliceType {}
    impl xsd_parser::AsAny for TaxiHoldingPositionLightSystemTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ApproachLightingSystemTimeSliceType {
        pub id: String,
        pub content: Vec<ApproachLightingSystemTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ApproachLightingSystemTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content665(ApproachLightingSystemTimeSliceContent665Type),
        Extension(ApproachLightingSystemTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for ApproachLightingSystemTimeSliceType {}
    impl gml::AbstractObjectTrait for ApproachLightingSystemTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for ApproachLightingSystemTimeSliceType {}
    impl xsd_parser::AsAny for ApproachLightingSystemTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiwayMarkingTimeSliceType {
        pub id: String,
        pub content: Vec<TaxiwayMarkingTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayMarkingTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content701(TaxiwayMarkingTimeSliceContent701Type),
        Extension(TaxiwayMarkingTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for TaxiwayMarkingTimeSliceType {}
    impl gml::AbstractObjectTrait for TaxiwayMarkingTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for TaxiwayMarkingTimeSliceType {}
    impl xsd_parser::AsAny for TaxiwayMarkingTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ApronMarkingTimeSliceType {
        pub id: String,
        pub content: Vec<ApronMarkingTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ApronMarkingTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content718(ApronMarkingTimeSliceContent718Type),
        Extension(ApronMarkingTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for ApronMarkingTimeSliceType {}
    impl gml::AbstractObjectTrait for ApronMarkingTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for ApronMarkingTimeSliceType {}
    impl xsd_parser::AsAny for ApronMarkingTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportProtectionAreaMarkingTimeSliceType {
        pub id: String,
        pub content: Vec<AirportProtectionAreaMarkingTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirportProtectionAreaMarkingTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content734(AirportProtectionAreaMarkingTimeSliceContent734Type),
        Extension(AirportProtectionAreaMarkingTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for AirportProtectionAreaMarkingTimeSliceType {}
    impl gml::AbstractObjectTrait for AirportProtectionAreaMarkingTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for AirportProtectionAreaMarkingTimeSliceType {}
    impl xsd_parser::AsAny for AirportProtectionAreaMarkingTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TouchDownLiftOffMarkingTimeSliceType {
        pub id: String,
        pub content: Vec<TouchDownLiftOffMarkingTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffMarkingTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content750(TouchDownLiftOffMarkingTimeSliceContent750Type),
        Extension(TouchDownLiftOffMarkingTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for TouchDownLiftOffMarkingTimeSliceType {}
    impl gml::AbstractObjectTrait for TouchDownLiftOffMarkingTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for TouchDownLiftOffMarkingTimeSliceType {}
    impl xsd_parser::AsAny for TouchDownLiftOffMarkingTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayMarkingTimeSliceType {
        pub id: String,
        pub content: Vec<RunwayMarkingTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayMarkingTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content766(RunwayMarkingTimeSliceContent766Type),
        Extension(RunwayMarkingTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for RunwayMarkingTimeSliceType {}
    impl gml::AbstractObjectTrait for RunwayMarkingTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for RunwayMarkingTimeSliceType {}
    impl xsd_parser::AsAny for RunwayMarkingTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GuidanceLineMarkingTimeSliceType {
        pub id: String,
        pub content: Vec<GuidanceLineMarkingTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GuidanceLineMarkingTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content782(GuidanceLineMarkingTimeSliceContent782Type),
        Extension(GuidanceLineMarkingTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for GuidanceLineMarkingTimeSliceType {}
    impl gml::AbstractObjectTrait for GuidanceLineMarkingTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for GuidanceLineMarkingTimeSliceType {}
    impl xsd_parser::AsAny for GuidanceLineMarkingTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DeicingAreaMarkingTimeSliceType {
        pub id: String,
        pub content: Vec<DeicingAreaMarkingTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DeicingAreaMarkingTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content797(DeicingAreaMarkingTimeSliceContent797Type),
        Extension(DeicingAreaMarkingTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for DeicingAreaMarkingTimeSliceType {}
    impl gml::AbstractObjectTrait for DeicingAreaMarkingTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for DeicingAreaMarkingTimeSliceType {}
    impl xsd_parser::AsAny for DeicingAreaMarkingTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TaxiHoldingPositionMarkingTimeSliceType {
        pub id: String,
        pub content: Vec<TaxiHoldingPositionMarkingTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiHoldingPositionMarkingTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content812(TaxiHoldingPositionMarkingTimeSliceContent812Type),
        Extension(TaxiHoldingPositionMarkingTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for TaxiHoldingPositionMarkingTimeSliceType {}
    impl gml::AbstractObjectTrait for TaxiHoldingPositionMarkingTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for TaxiHoldingPositionMarkingTimeSliceType {}
    impl xsd_parser::AsAny for TaxiHoldingPositionMarkingTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct StandMarkingTimeSliceType {
        pub id: String,
        pub content: Vec<StandMarkingTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum StandMarkingTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content827(StandMarkingTimeSliceContent827Type),
        Extension(StandMarkingTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for StandMarkingTimeSliceType {}
    impl gml::AbstractObjectTrait for StandMarkingTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for StandMarkingTimeSliceType {}
    impl xsd_parser::AsAny for StandMarkingTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct FloatingDockSiteTimeSliceType {
        pub id: String,
        pub content: Vec<FloatingDockSiteTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FloatingDockSiteTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1016(FloatingDockSiteTimeSliceContent1016Type),
        Extension(FloatingDockSiteTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for FloatingDockSiteTimeSliceType {}
    impl gml::AbstractObjectTrait for FloatingDockSiteTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for FloatingDockSiteTimeSliceType {}
    impl xsd_parser::AsAny for FloatingDockSiteTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MarkingBuoyTimeSliceType {
        pub id: String,
        pub content: Vec<MarkingBuoyTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MarkingBuoyTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1027(MarkingBuoyTimeSliceContent1027Type),
        Extension(MarkingBuoyTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for MarkingBuoyTimeSliceType {}
    impl gml::AbstractObjectTrait for MarkingBuoyTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for MarkingBuoyTimeSliceType {}
    impl xsd_parser::AsAny for MarkingBuoyTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SeaplaneLandingAreaTimeSliceType {
        pub id: String,
        pub content: Vec<SeaplaneLandingAreaTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SeaplaneLandingAreaTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1042(SeaplaneLandingAreaTimeSliceContent1042Type),
        Extension(SeaplaneLandingAreaTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for SeaplaneLandingAreaTimeSliceType {}
    impl gml::AbstractObjectTrait for SeaplaneLandingAreaTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for SeaplaneLandingAreaTimeSliceType {}
    impl xsd_parser::AsAny for SeaplaneLandingAreaTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SeaplaneRampSiteTimeSliceType {
        pub id: String,
        pub content: Vec<SeaplaneRampSiteTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SeaplaneRampSiteTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1056(SeaplaneRampSiteTimeSliceContent1056Type),
        Extension(SeaplaneRampSiteTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for SeaplaneRampSiteTimeSliceType {}
    impl gml::AbstractObjectTrait for SeaplaneRampSiteTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for SeaplaneRampSiteTimeSliceType {}
    impl xsd_parser::AsAny for SeaplaneRampSiteTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct WorkAreaTimeSliceType {
        pub id: String,
        pub content: Vec<WorkAreaTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum WorkAreaTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1068(WorkAreaTimeSliceContent1068Type),
        Extension(WorkAreaTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for WorkAreaTimeSliceType {}
    impl gml::AbstractObjectTrait for WorkAreaTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for WorkAreaTimeSliceType {}
    impl xsd_parser::AsAny for WorkAreaTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SurveyControlPointTimeSliceType {
        pub id: String,
        pub content: Vec<SurveyControlPointTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SurveyControlPointTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1083(SurveyControlPointTimeSliceContent1083Type),
        Extension(SurveyControlPointTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for SurveyControlPointTimeSliceType {}
    impl gml::AbstractObjectTrait for SurveyControlPointTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for SurveyControlPointTimeSliceType {}
    impl xsd_parser::AsAny for SurveyControlPointTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct NonMovementAreaTimeSliceType {
        pub id: String,
        pub content: Vec<NonMovementAreaTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NonMovementAreaTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1115(NonMovementAreaTimeSliceContent1115Type),
        Extension(NonMovementAreaTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for NonMovementAreaTimeSliceType {}
    impl gml::AbstractObjectTrait for NonMovementAreaTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for NonMovementAreaTimeSliceType {}
    impl xsd_parser::AsAny for NonMovementAreaTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportHeliportCollocationTimeSliceType {
        pub id: String,
        pub content: Vec<AirportHeliportCollocationTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportCollocationTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1136(AirportHeliportCollocationTimeSliceContent1136Type),
        Extension(AirportHeliportCollocationTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for AirportHeliportCollocationTimeSliceType {}
    impl gml::AbstractObjectTrait for AirportHeliportCollocationTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for AirportHeliportCollocationTimeSliceType {}
    impl xsd_parser::AsAny for AirportHeliportCollocationTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportHeliportTimeSliceType {
        pub id: String,
        pub content: Vec<AirportHeliportTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1149(AirportHeliportTimeSliceContent1149Type),
        Extension(AirportHeliportTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for AirportHeliportTimeSliceType {}
    impl gml::AbstractObjectTrait for AirportHeliportTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for AirportHeliportTimeSliceType {}
    impl xsd_parser::AsAny for AirportHeliportTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AltimeterSourceTimeSliceType {
        pub id: String,
        pub content: Vec<AltimeterSourceTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AltimeterSourceTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1193(AltimeterSourceTimeSliceContent1193Type),
        Extension(AltimeterSourceTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for AltimeterSourceTimeSliceType {}
    impl gml::AbstractObjectTrait for AltimeterSourceTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for AltimeterSourceTimeSliceType {}
    impl xsd_parser::AsAny for AltimeterSourceTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportHotSpotTimeSliceType {
        pub id: String,
        pub content: Vec<AirportHotSpotTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHotSpotTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1218(AirportHotSpotTimeSliceContent1218Type),
        Extension(AirportHotSpotTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for AirportHotSpotTimeSliceType {}
    impl gml::AbstractObjectTrait for AirportHotSpotTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for AirportHotSpotTimeSliceType {}
    impl xsd_parser::AsAny for AirportHotSpotTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AuthorityForAirspaceTimeSliceType {
        pub id: String,
        pub content: Vec<AuthorityForAirspaceTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AuthorityForAirspaceTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1295(AuthorityForAirspaceTimeSliceContent1295Type),
        Extension(AuthorityForAirspaceTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for AuthorityForAirspaceTimeSliceType {}
    impl gml::AbstractObjectTrait for AuthorityForAirspaceTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for AuthorityForAirspaceTimeSliceType {}
    impl xsd_parser::AsAny for AuthorityForAirspaceTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceTimeSliceType {
        pub id: String,
        pub content: Vec<AirspaceTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1308(AirspaceTimeSliceContent1308Type),
        Extension(AirspaceTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for AirspaceTimeSliceType {}
    impl gml::AbstractObjectTrait for AirspaceTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for AirspaceTimeSliceType {}
    impl xsd_parser::AsAny for AirspaceTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GeoBorderTimeSliceType {
        pub id: String,
        pub content: Vec<GeoBorderTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GeoBorderTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1385(GeoBorderTimeSliceContent1385Type),
        Extension(GeoBorderTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for GeoBorderTimeSliceType {}
    impl gml::AbstractObjectTrait for GeoBorderTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for GeoBorderTimeSliceType {}
    impl xsd_parser::AsAny for GeoBorderTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CurveType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<gml::NcnameListType>,
        pub uom_labels: Option<gml::NcnameListType>,
        pub content: [CurveTypeContent; 3usize],
    }
    #[derive(Debug, Clone)]
    pub enum CurveTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Segments(gml::CurveSegmentArrayPropertyType),
        Content1409(CurveContent1409Type),
    }
    impl CurveTrait for CurveType {}
    impl gml::AbstractCurveTrait for CurveType {}
    impl gml::AbstractGMLTrait for CurveType {}
    impl gml::AbstractGeometricPrimitiveTrait for CurveType {}
    impl gml::AbstractGeometryTrait for CurveType {}
    impl gml::AbstractObjectTrait for CurveType {}
    impl gml::CurveTrait for CurveType {}
    impl xsd_parser::AsAny for CurveType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ElevatedCurveType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<gml::NcnameListType>,
        pub uom_labels: Option<gml::NcnameListType>,
        pub content: Vec<ElevatedCurveTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ElevatedCurveTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Segments(gml::CurveSegmentArrayPropertyType),
        Content1409(CurveContent1409Type),
        Content1415(ElevatedCurveContent1415Type),
        Extension(ElevatedCurveTypeExtensionElementType),
    }
    impl CurveTrait for ElevatedCurveType {}
    impl gml::AbstractCurveTrait for ElevatedCurveType {}
    impl gml::AbstractGMLTrait for ElevatedCurveType {}
    impl gml::AbstractGeometricPrimitiveTrait for ElevatedCurveType {}
    impl gml::AbstractGeometryTrait for ElevatedCurveType {}
    impl gml::AbstractObjectTrait for ElevatedCurveType {}
    impl gml::CurveTrait for ElevatedCurveType {}
    impl xsd_parser::AsAny for ElevatedCurveType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct PointType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<gml::NcnameListType>,
        pub uom_labels: Option<gml::NcnameListType>,
        pub content: [PointTypeContent; 3usize],
    }
    #[derive(Debug, Clone)]
    pub enum PointTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1425(gml::PointContent1425Type),
        Content1428(PointContent1428Type),
    }
    impl PointTrait for PointType {}
    impl gml::AbstractGMLTrait for PointType {}
    impl gml::AbstractGeometricPrimitiveTrait for PointType {}
    impl gml::AbstractGeometryTrait for PointType {}
    impl gml::AbstractObjectTrait for PointType {}
    impl gml::PointTrait for PointType {}
    impl xsd_parser::AsAny for PointType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ElevatedPointType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<gml::NcnameListType>,
        pub uom_labels: Option<gml::NcnameListType>,
        pub content: Vec<ElevatedPointTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ElevatedPointTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1425(gml::PointContent1425Type),
        Content1428(PointContent1428Type),
        Content1433(ElevatedPointContent1433Type),
        Extension(ElevatedPointTypeExtensionElementType),
    }
    impl PointTrait for ElevatedPointType {}
    impl gml::AbstractGMLTrait for ElevatedPointType {}
    impl gml::AbstractGeometricPrimitiveTrait for ElevatedPointType {}
    impl gml::AbstractGeometryTrait for ElevatedPointType {}
    impl gml::AbstractObjectTrait for ElevatedPointType {}
    impl gml::PointTrait for ElevatedPointType {}
    impl xsd_parser::AsAny for ElevatedPointType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SurfaceType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<gml::NcnameListType>,
        pub uom_labels: Option<gml::NcnameListType>,
        pub content: [SurfaceTypeContent; 3usize],
    }
    #[derive(Debug, Clone)]
    pub enum SurfaceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Patches(gml::Patches),
        Content1446(SurfaceContent1446Type),
    }
    impl SurfaceTrait for SurfaceType {}
    impl gml::AbstractGMLTrait for SurfaceType {}
    impl gml::AbstractGeometricPrimitiveTrait for SurfaceType {}
    impl gml::AbstractGeometryTrait for SurfaceType {}
    impl gml::AbstractObjectTrait for SurfaceType {}
    impl gml::AbstractSurfaceTrait for SurfaceType {}
    impl gml::SurfaceTrait for SurfaceType {}
    impl xsd_parser::AsAny for SurfaceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ElevatedSurfaceType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<gml::NcnameListType>,
        pub uom_labels: Option<gml::NcnameListType>,
        pub content: Vec<ElevatedSurfaceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ElevatedSurfaceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Patches(gml::Patches),
        Content1446(SurfaceContent1446Type),
        Content1451(ElevatedSurfaceContent1451Type),
        Extension(ElevatedSurfaceTypeExtensionElementType),
    }
    impl SurfaceTrait for ElevatedSurfaceType {}
    impl gml::AbstractGMLTrait for ElevatedSurfaceType {}
    impl gml::AbstractGeometricPrimitiveTrait for ElevatedSurfaceType {}
    impl gml::AbstractGeometryTrait for ElevatedSurfaceType {}
    impl gml::AbstractObjectTrait for ElevatedSurfaceType {}
    impl gml::AbstractSurfaceTrait for ElevatedSurfaceType {}
    impl gml::SurfaceTrait for ElevatedSurfaceType {}
    impl xsd_parser::AsAny for ElevatedSurfaceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct PrecisionApproachRadarTimeSliceType {
        pub id: String,
        pub content: Vec<PrecisionApproachRadarTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PrecisionApproachRadarTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1467(PrecisionApproachRadarTimeSliceContent1467Type),
        Extension(PrecisionApproachRadarTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for PrecisionApproachRadarTimeSliceType {}
    impl gml::AbstractObjectTrait for PrecisionApproachRadarTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for PrecisionApproachRadarTimeSliceType {}
    impl xsd_parser::AsAny for PrecisionApproachRadarTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct PrimarySurveillanceRadarTimeSliceType {
        pub id: String,
        pub content: Vec<PrimarySurveillanceRadarTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PrimarySurveillanceRadarTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1499(PrimarySurveillanceRadarTimeSliceContent1499Type),
        Extension(PrimarySurveillanceRadarTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for PrimarySurveillanceRadarTimeSliceType {}
    impl gml::AbstractObjectTrait for PrimarySurveillanceRadarTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for PrimarySurveillanceRadarTimeSliceType {}
    impl xsd_parser::AsAny for PrimarySurveillanceRadarTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RadarSystemTimeSliceType {
        pub id: String,
        pub content: Vec<RadarSystemTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RadarSystemTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1544(RadarSystemTimeSliceContent1544Type),
        Extension(RadarSystemTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for RadarSystemTimeSliceType {}
    impl gml::AbstractObjectTrait for RadarSystemTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for RadarSystemTimeSliceType {}
    impl xsd_parser::AsAny for RadarSystemTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SecondarySurveillanceRadarTimeSliceType {
        pub id: String,
        pub content: Vec<SecondarySurveillanceRadarTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SecondarySurveillanceRadarTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1572(SecondarySurveillanceRadarTimeSliceContent1572Type),
        Extension(SecondarySurveillanceRadarTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for SecondarySurveillanceRadarTimeSliceType {}
    impl gml::AbstractObjectTrait for SecondarySurveillanceRadarTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for SecondarySurveillanceRadarTimeSliceType {}
    impl xsd_parser::AsAny for SecondarySurveillanceRadarTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct HoldingAssessmentTimeSliceType {
        pub id: String,
        pub content: Vec<HoldingAssessmentTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum HoldingAssessmentTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1665(HoldingAssessmentTimeSliceContent1665Type),
        Extension(HoldingAssessmentTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for HoldingAssessmentTimeSliceType {}
    impl gml::AbstractObjectTrait for HoldingAssessmentTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for HoldingAssessmentTimeSliceType {}
    impl xsd_parser::AsAny for HoldingAssessmentTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct StandardLevelTableTimeSliceType {
        pub id: String,
        pub content: Vec<StandardLevelTableTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum StandardLevelTableTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1699(StandardLevelTableTimeSliceContent1699Type),
        Extension(StandardLevelTableTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for StandardLevelTableTimeSliceType {}
    impl gml::AbstractObjectTrait for StandardLevelTableTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for StandardLevelTableTimeSliceType {}
    impl xsd_parser::AsAny for StandardLevelTableTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct StandardLevelSectorTimeSliceType {
        pub id: String,
        pub content: Vec<StandardLevelSectorTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum StandardLevelSectorTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1711(StandardLevelSectorTimeSliceContent1711Type),
        Extension(StandardLevelSectorTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for StandardLevelSectorTimeSliceType {}
    impl gml::AbstractObjectTrait for StandardLevelSectorTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for StandardLevelSectorTimeSliceType {}
    impl xsd_parser::AsAny for StandardLevelSectorTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct StandardLevelColumnTimeSliceType {
        pub id: String,
        pub content: Vec<StandardLevelColumnTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum StandardLevelColumnTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1727(StandardLevelColumnTimeSliceContent1727Type),
        Extension(StandardLevelColumnTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for StandardLevelColumnTimeSliceType {}
    impl gml::AbstractObjectTrait for StandardLevelColumnTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for StandardLevelColumnTimeSliceType {}
    impl xsd_parser::AsAny for StandardLevelColumnTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RadioFrequencyAreaTimeSliceType {
        pub id: String,
        pub content: Vec<RadioFrequencyAreaTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RadioFrequencyAreaTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1750(RadioFrequencyAreaTimeSliceContent1750Type),
        Extension(RadioFrequencyAreaTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for RadioFrequencyAreaTimeSliceType {}
    impl gml::AbstractObjectTrait for RadioFrequencyAreaTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for RadioFrequencyAreaTimeSliceType {}
    impl xsd_parser::AsAny for RadioFrequencyAreaTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SpecialDateTimeSliceType {
        pub id: String,
        pub content: Vec<SpecialDateTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SpecialDateTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1943(SpecialDateTimeSliceContent1943Type),
        Extension(SpecialDateTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for SpecialDateTimeSliceType {}
    impl gml::AbstractObjectTrait for SpecialDateTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for SpecialDateTimeSliceType {}
    impl xsd_parser::AsAny for SpecialDateTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RadioCommunicationChannelTimeSliceType {
        pub id: String,
        pub content: Vec<RadioCommunicationChannelTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RadioCommunicationChannelTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content1971(RadioCommunicationChannelTimeSliceContent1971Type),
        Extension(RadioCommunicationChannelTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for RadioCommunicationChannelTimeSliceType {}
    impl gml::AbstractObjectTrait for RadioCommunicationChannelTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for RadioCommunicationChannelTimeSliceType {}
    impl xsd_parser::AsAny for RadioCommunicationChannelTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct PilotControlledLightingTimeSliceType {
        pub id: String,
        pub content: Vec<PilotControlledLightingTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PilotControlledLightingTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2002(PilotControlledLightingTimeSliceContent2002Type),
        Extension(PilotControlledLightingTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for PilotControlledLightingTimeSliceType {}
    impl gml::AbstractObjectTrait for PilotControlledLightingTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for PilotControlledLightingTimeSliceType {}
    impl xsd_parser::AsAny for PilotControlledLightingTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct InformationServiceTimeSliceType {
        pub id: String,
        pub content: Vec<InformationServiceTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum InformationServiceTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2020(InformationServiceTimeSliceContent2020Type),
        Extension(InformationServiceTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for InformationServiceTimeSliceType {}
    impl gml::AbstractObjectTrait for InformationServiceTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for InformationServiceTimeSliceType {}
    impl xsd_parser::AsAny for InformationServiceTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GroundTrafficControlServiceTimeSliceType {
        pub id: String,
        pub content: Vec<GroundTrafficControlServiceTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GroundTrafficControlServiceTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2053(GroundTrafficControlServiceTimeSliceContent2053Type),
        Extension(GroundTrafficControlServiceTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for GroundTrafficControlServiceTimeSliceType {}
    impl gml::AbstractObjectTrait for GroundTrafficControlServiceTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for GroundTrafficControlServiceTimeSliceType {}
    impl xsd_parser::AsAny for GroundTrafficControlServiceTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirTrafficControlServiceTimeSliceType {
        pub id: String,
        pub content: Vec<AirTrafficControlServiceTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirTrafficControlServiceTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2080(AirTrafficControlServiceTimeSliceContent2080Type),
        Extension(AirTrafficControlServiceTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for AirTrafficControlServiceTimeSliceType {}
    impl gml::AbstractObjectTrait for AirTrafficControlServiceTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for AirTrafficControlServiceTimeSliceType {}
    impl xsd_parser::AsAny for AirTrafficControlServiceTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirTrafficManagementServiceTimeSliceType {
        pub id: String,
        pub content: Vec<AirTrafficManagementServiceTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirTrafficManagementServiceTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2113(AirTrafficManagementServiceTimeSliceContent2113Type),
        Extension(AirTrafficManagementServiceTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for AirTrafficManagementServiceTimeSliceType {}
    impl gml::AbstractObjectTrait for AirTrafficManagementServiceTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for AirTrafficManagementServiceTimeSliceType {}
    impl xsd_parser::AsAny for AirTrafficManagementServiceTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SearchRescueServiceTimeSliceType {
        pub id: String,
        pub content: Vec<SearchRescueServiceTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SearchRescueServiceTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2138(SearchRescueServiceTimeSliceContent2138Type),
        Extension(SearchRescueServiceTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for SearchRescueServiceTimeSliceType {}
    impl gml::AbstractObjectTrait for SearchRescueServiceTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for SearchRescueServiceTimeSliceType {}
    impl xsd_parser::AsAny for SearchRescueServiceTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct PassengerServiceTimeSliceType {
        pub id: String,
        pub content: Vec<PassengerServiceTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PassengerServiceTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2163(PassengerServiceTimeSliceContent2163Type),
        Extension(PassengerServiceTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for PassengerServiceTimeSliceType {}
    impl gml::AbstractObjectTrait for PassengerServiceTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for PassengerServiceTimeSliceType {}
    impl xsd_parser::AsAny for PassengerServiceTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AircraftGroundServiceTimeSliceType {
        pub id: String,
        pub content: Vec<AircraftGroundServiceTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AircraftGroundServiceTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2187(AircraftGroundServiceTimeSliceContent2187Type),
        Extension(AircraftGroundServiceTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for AircraftGroundServiceTimeSliceType {}
    impl gml::AbstractObjectTrait for AircraftGroundServiceTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for AircraftGroundServiceTimeSliceType {}
    impl xsd_parser::AsAny for AircraftGroundServiceTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct FireFightingServiceTimeSliceType {
        pub id: String,
        pub content: Vec<FireFightingServiceTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FireFightingServiceTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2211(FireFightingServiceTimeSliceContent2211Type),
        Extension(FireFightingServiceTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for FireFightingServiceTimeSliceType {}
    impl gml::AbstractObjectTrait for FireFightingServiceTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for FireFightingServiceTimeSliceType {}
    impl xsd_parser::AsAny for FireFightingServiceTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportClearanceServiceTimeSliceType {
        pub id: String,
        pub content: Vec<AirportClearanceServiceTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirportClearanceServiceTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2236(AirportClearanceServiceTimeSliceContent2236Type),
        Extension(AirportClearanceServiceTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for AirportClearanceServiceTimeSliceType {}
    impl gml::AbstractObjectTrait for AirportClearanceServiceTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for AirportClearanceServiceTimeSliceType {}
    impl xsd_parser::AsAny for AirportClearanceServiceTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportSuppliesServiceTimeSliceType {
        pub id: String,
        pub content: Vec<AirportSuppliesServiceTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirportSuppliesServiceTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2260(AirportSuppliesServiceTimeSliceContent2260Type),
        Extension(AirportSuppliesServiceTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for AirportSuppliesServiceTimeSliceType {}
    impl gml::AbstractObjectTrait for AirportSuppliesServiceTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for AirportSuppliesServiceTimeSliceType {}
    impl xsd_parser::AsAny for AirportSuppliesServiceTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AngleIndicationTimeSliceType {
        pub id: String,
        pub content: Vec<AngleIndicationTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AngleIndicationTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2408(AngleIndicationTimeSliceContent2408Type),
        Extension(AngleIndicationTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for AngleIndicationTimeSliceType {}
    impl gml::AbstractObjectTrait for AngleIndicationTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for AngleIndicationTimeSliceType {}
    impl xsd_parser::AsAny for AngleIndicationTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DistanceIndicationTimeSliceType {
        pub id: String,
        pub content: Vec<DistanceIndicationTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DistanceIndicationTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2432(DistanceIndicationTimeSliceContent2432Type),
        Extension(DistanceIndicationTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for DistanceIndicationTimeSliceType {}
    impl gml::AbstractObjectTrait for DistanceIndicationTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for DistanceIndicationTimeSliceType {}
    impl xsd_parser::AsAny for DistanceIndicationTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AzimuthTimeSliceType {
        pub id: String,
        pub content: Vec<AzimuthTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AzimuthTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2481(AzimuthTimeSliceContent2481Type),
        Extension(AzimuthTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for AzimuthTimeSliceType {}
    impl gml::AbstractObjectTrait for AzimuthTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for AzimuthTimeSliceType {}
    impl xsd_parser::AsAny for AzimuthTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CheckpointINSTimeSliceType {
        pub id: String,
        pub content: Vec<CheckpointINSTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CheckpointINSTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2514(CheckpointINSTimeSliceContent2514Type),
        Extension(CheckpointINSTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for CheckpointINSTimeSliceType {}
    impl gml::AbstractObjectTrait for CheckpointINSTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for CheckpointINSTimeSliceType {}
    impl xsd_parser::AsAny for CheckpointINSTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CheckpointVORTimeSliceType {
        pub id: String,
        pub content: Vec<CheckpointVORTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CheckpointVORTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2535(CheckpointVORTimeSliceContent2535Type),
        Extension(CheckpointVORTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for CheckpointVORTimeSliceType {}
    impl gml::AbstractObjectTrait for CheckpointVORTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for CheckpointVORTimeSliceType {}
    impl xsd_parser::AsAny for CheckpointVORTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DmetimeSliceType {
        pub id: String,
        pub content: Vec<DmetimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DmetimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2566(DmetimeSliceContent2566Type),
        Extension(DmetimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for DmetimeSliceType {}
    impl gml::AbstractObjectTrait for DmetimeSliceType {}
    impl gml::AbstractTimeSliceTrait for DmetimeSliceType {}
    impl xsd_parser::AsAny for DmetimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ElevationTimeSliceType {
        pub id: String,
        pub content: Vec<ElevationTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ElevationTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2593(ElevationTimeSliceContent2593Type),
        Extension(ElevationTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for ElevationTimeSliceType {}
    impl gml::AbstractObjectTrait for ElevationTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for ElevationTimeSliceType {}
    impl xsd_parser::AsAny for ElevationTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GlidepathTimeSliceType {
        pub id: String,
        pub content: Vec<GlidepathTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GlidepathTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2620(GlidepathTimeSliceContent2620Type),
        Extension(GlidepathTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for GlidepathTimeSliceType {}
    impl gml::AbstractObjectTrait for GlidepathTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for GlidepathTimeSliceType {}
    impl xsd_parser::AsAny for GlidepathTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct LocalizerTimeSliceType {
        pub id: String,
        pub content: Vec<LocalizerTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum LocalizerTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2648(LocalizerTimeSliceContent2648Type),
        Extension(LocalizerTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for LocalizerTimeSliceType {}
    impl gml::AbstractObjectTrait for LocalizerTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for LocalizerTimeSliceType {}
    impl xsd_parser::AsAny for LocalizerTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MarkerBeaconTimeSliceType {
        pub id: String,
        pub content: Vec<MarkerBeaconTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MarkerBeaconTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2680(MarkerBeaconTimeSliceContent2680Type),
        Extension(MarkerBeaconTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for MarkerBeaconTimeSliceType {}
    impl gml::AbstractObjectTrait for MarkerBeaconTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for MarkerBeaconTimeSliceType {}
    impl xsd_parser::AsAny for MarkerBeaconTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct NavaidTimeSliceType {
        pub id: String,
        pub content: Vec<NavaidTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NavaidTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2707(NavaidTimeSliceContent2707Type),
        Extension(NavaidTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for NavaidTimeSliceType {}
    impl gml::AbstractObjectTrait for NavaidTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for NavaidTimeSliceType {}
    impl xsd_parser::AsAny for NavaidTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SdftimeSliceType {
        pub id: String,
        pub content: Vec<SdftimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SdftimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2742(SdftimeSliceContent2742Type),
        Extension(SdftimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for SdftimeSliceType {}
    impl gml::AbstractObjectTrait for SdftimeSliceType {}
    impl gml::AbstractTimeSliceTrait for SdftimeSliceType {}
    impl xsd_parser::AsAny for SdftimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct NdbtimeSliceType {
        pub id: String,
        pub content: Vec<NdbtimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NdbtimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2768(NdbtimeSliceContent2768Type),
        Extension(NdbtimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for NdbtimeSliceType {}
    impl gml::AbstractObjectTrait for NdbtimeSliceType {}
    impl gml::AbstractTimeSliceTrait for NdbtimeSliceType {}
    impl xsd_parser::AsAny for NdbtimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SpecialNavigationStationTimeSliceType {
        pub id: String,
        pub content: Vec<SpecialNavigationStationTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SpecialNavigationStationTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2794(SpecialNavigationStationTimeSliceContent2794Type),
        Extension(SpecialNavigationStationTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for SpecialNavigationStationTimeSliceType {}
    impl gml::AbstractObjectTrait for SpecialNavigationStationTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for SpecialNavigationStationTimeSliceType {}
    impl xsd_parser::AsAny for SpecialNavigationStationTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct VortimeSliceType {
        pub id: String,
        pub content: Vec<VortimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum VortimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2812(VortimeSliceContent2812Type),
        Extension(VortimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for VortimeSliceType {}
    impl gml::AbstractObjectTrait for VortimeSliceType {}
    impl gml::AbstractTimeSliceTrait for VortimeSliceType {}
    impl xsd_parser::AsAny for VortimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TacantimeSliceType {
        pub id: String,
        pub content: Vec<TacantimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TacantimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2839(TacantimeSliceContent2839Type),
        Extension(TacantimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for TacantimeSliceType {}
    impl gml::AbstractObjectTrait for TacantimeSliceType {}
    impl gml::AbstractTimeSliceTrait for TacantimeSliceType {}
    impl xsd_parser::AsAny for TacantimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SpecialNavigationSystemTimeSliceType {
        pub id: String,
        pub content: Vec<SpecialNavigationSystemTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SpecialNavigationSystemTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2864(SpecialNavigationSystemTimeSliceContent2864Type),
        Extension(SpecialNavigationSystemTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for SpecialNavigationSystemTimeSliceType {}
    impl gml::AbstractObjectTrait for SpecialNavigationSystemTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for SpecialNavigationSystemTimeSliceType {}
    impl xsd_parser::AsAny for SpecialNavigationSystemTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DirectionFinderTimeSliceType {
        pub id: String,
        pub content: Vec<DirectionFinderTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DirectionFinderTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2912(DirectionFinderTimeSliceContent2912Type),
        Extension(DirectionFinderTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for DirectionFinderTimeSliceType {}
    impl gml::AbstractObjectTrait for DirectionFinderTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for DirectionFinderTimeSliceType {}
    impl xsd_parser::AsAny for DirectionFinderTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DesignatedPointTimeSliceType {
        pub id: String,
        pub content: Vec<DesignatedPointTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DesignatedPointTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2937(DesignatedPointTimeSliceContent2937Type),
        Extension(DesignatedPointTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for DesignatedPointTimeSliceType {}
    impl gml::AbstractObjectTrait for DesignatedPointTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for DesignatedPointTimeSliceType {}
    impl xsd_parser::AsAny for DesignatedPointTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SignificantPointInAirspaceTimeSliceType {
        pub id: String,
        pub content: Vec<SignificantPointInAirspaceTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SignificantPointInAirspaceTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2954(SignificantPointInAirspaceTimeSliceContent2954Type),
        Extension(SignificantPointInAirspaceTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for SignificantPointInAirspaceTimeSliceType {}
    impl gml::AbstractObjectTrait for SignificantPointInAirspaceTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for SignificantPointInAirspaceTimeSliceType {}
    impl xsd_parser::AsAny for SignificantPointInAirspaceTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AeronauticalGroundLightTimeSliceType {
        pub id: String,
        pub content: Vec<AeronauticalGroundLightTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AeronauticalGroundLightTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content2974(AeronauticalGroundLightTimeSliceContent2974Type),
        Extension(AeronauticalGroundLightTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for AeronauticalGroundLightTimeSliceType {}
    impl gml::AbstractObjectTrait for AeronauticalGroundLightTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for AeronauticalGroundLightTimeSliceType {}
    impl xsd_parser::AsAny for AeronauticalGroundLightTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct OrganisationAuthorityTimeSliceType {
        pub id: String,
        pub content: Vec<OrganisationAuthorityTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum OrganisationAuthorityTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3007(OrganisationAuthorityTimeSliceContent3007Type),
        Extension(OrganisationAuthorityTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for OrganisationAuthorityTimeSliceType {}
    impl gml::AbstractObjectTrait for OrganisationAuthorityTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for OrganisationAuthorityTimeSliceType {}
    impl xsd_parser::AsAny for OrganisationAuthorityTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct UnitTimeSliceType {
        pub id: String,
        pub content: Vec<UnitTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum UnitTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3032(UnitTimeSliceContent3032Type),
        Extension(UnitTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for UnitTimeSliceType {}
    impl gml::AbstractObjectTrait for UnitTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for UnitTimeSliceType {}
    impl xsd_parser::AsAny for UnitTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ObstacleAreaTimeSliceType {
        pub id: String,
        pub content: Vec<ObstacleAreaTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ObstacleAreaTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3099(ObstacleAreaTimeSliceContent3099Type),
        Extension(ObstacleAreaTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for ObstacleAreaTimeSliceType {}
    impl gml::AbstractObjectTrait for ObstacleAreaTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for ObstacleAreaTimeSliceType {}
    impl xsd_parser::AsAny for ObstacleAreaTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct VerticalStructureTimeSliceType {
        pub id: String,
        pub content: Vec<VerticalStructureTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum VerticalStructureTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3117(VerticalStructureTimeSliceContent3117Type),
        Extension(VerticalStructureTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for VerticalStructureTimeSliceType {}
    impl gml::AbstractObjectTrait for VerticalStructureTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for VerticalStructureTimeSliceType {}
    impl xsd_parser::AsAny for VerticalStructureTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CirclingAreaTimeSliceType {
        pub id: String,
        pub content: Vec<CirclingAreaTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CirclingAreaTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3170(CirclingAreaTimeSliceContent3170Type),
        Extension(CirclingAreaTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for CirclingAreaTimeSliceType {}
    impl gml::AbstractObjectTrait for CirclingAreaTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for CirclingAreaTimeSliceType {}
    impl xsd_parser::AsAny for CirclingAreaTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TerminalArrivalAreaTimeSliceType {
        pub id: String,
        pub content: Vec<TerminalArrivalAreaTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TerminalArrivalAreaTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3240(TerminalArrivalAreaTimeSliceContent3240Type),
        Extension(TerminalArrivalAreaTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for TerminalArrivalAreaTimeSliceType {}
    impl gml::AbstractObjectTrait for TerminalArrivalAreaTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for TerminalArrivalAreaTimeSliceType {}
    impl xsd_parser::AsAny for TerminalArrivalAreaTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct InstrumentApproachProcedureTimeSliceType {
        pub id: String,
        pub content: Vec<InstrumentApproachProcedureTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum InstrumentApproachProcedureTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3332(InstrumentApproachProcedureTimeSliceContent3332Type),
        Extension(InstrumentApproachProcedureTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for InstrumentApproachProcedureTimeSliceType {}
    impl gml::AbstractObjectTrait for InstrumentApproachProcedureTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for InstrumentApproachProcedureTimeSliceType {}
    impl xsd_parser::AsAny for InstrumentApproachProcedureTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct StandardInstrumentDepartureTimeSliceType {
        pub id: String,
        pub content: Vec<StandardInstrumentDepartureTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum StandardInstrumentDepartureTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3398(StandardInstrumentDepartureTimeSliceContent3398Type),
        Extension(StandardInstrumentDepartureTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for StandardInstrumentDepartureTimeSliceType {}
    impl gml::AbstractObjectTrait for StandardInstrumentDepartureTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for StandardInstrumentDepartureTimeSliceType {}
    impl xsd_parser::AsAny for StandardInstrumentDepartureTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct NavigationAreaTimeSliceType {
        pub id: String,
        pub content: Vec<NavigationAreaTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NavigationAreaTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3428(NavigationAreaTimeSliceContent3428Type),
        Extension(NavigationAreaTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for NavigationAreaTimeSliceType {}
    impl gml::AbstractObjectTrait for NavigationAreaTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for NavigationAreaTimeSliceType {}
    impl xsd_parser::AsAny for NavigationAreaTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct StandardInstrumentArrivalTimeSliceType {
        pub id: String,
        pub content: Vec<StandardInstrumentArrivalTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum StandardInstrumentArrivalTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3485(StandardInstrumentArrivalTimeSliceContent3485Type),
        Extension(StandardInstrumentArrivalTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for StandardInstrumentArrivalTimeSliceType {}
    impl gml::AbstractObjectTrait for StandardInstrumentArrivalTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for StandardInstrumentArrivalTimeSliceType {}
    impl xsd_parser::AsAny for StandardInstrumentArrivalTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct NavigationAreaRestrictionTimeSliceType {
        pub id: String,
        pub content: Vec<NavigationAreaRestrictionTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NavigationAreaRestrictionTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3525(NavigationAreaRestrictionTimeSliceContent3525Type),
        Extension(NavigationAreaRestrictionTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for NavigationAreaRestrictionTimeSliceType {}
    impl gml::AbstractObjectTrait for NavigationAreaRestrictionTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for NavigationAreaRestrictionTimeSliceType {}
    impl xsd_parser::AsAny for NavigationAreaRestrictionTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ArrivalFeederLegTimeSliceType {
        pub id: String,
        pub content: Vec<ArrivalFeederLegTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ArrivalFeederLegTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3567(ArrivalFeederLegTimeSliceContent3567Type),
        Extension(ArrivalFeederLegTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for ArrivalFeederLegTimeSliceType {}
    impl gml::AbstractObjectTrait for ArrivalFeederLegTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for ArrivalFeederLegTimeSliceType {}
    impl xsd_parser::AsAny for ArrivalFeederLegTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ArrivalLegTimeSliceType {
        pub id: String,
        pub content: Vec<ArrivalLegTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ArrivalLegTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3612(ArrivalLegTimeSliceContent3612Type),
        Extension(ArrivalLegTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for ArrivalLegTimeSliceType {}
    impl gml::AbstractObjectTrait for ArrivalLegTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for ArrivalLegTimeSliceType {}
    impl xsd_parser::AsAny for ArrivalLegTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DepartureLegTimeSliceType {
        pub id: String,
        pub content: Vec<DepartureLegTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DepartureLegTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3656(DepartureLegTimeSliceContent3656Type),
        Extension(DepartureLegTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for DepartureLegTimeSliceType {}
    impl gml::AbstractObjectTrait for DepartureLegTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for DepartureLegTimeSliceType {}
    impl xsd_parser::AsAny for DepartureLegTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct FinalLegTimeSliceType {
        pub id: String,
        pub content: Vec<FinalLegTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FinalLegTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3702(FinalLegTimeSliceContent3702Type),
        Extension(FinalLegTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for FinalLegTimeSliceType {}
    impl gml::AbstractObjectTrait for FinalLegTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for FinalLegTimeSliceType {}
    impl xsd_parser::AsAny for FinalLegTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct InitialLegTimeSliceType {
        pub id: String,
        pub content: Vec<InitialLegTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum InitialLegTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3765(InitialLegTimeSliceContent3765Type),
        Extension(InitialLegTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for InitialLegTimeSliceType {}
    impl gml::AbstractObjectTrait for InitialLegTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for InitialLegTimeSliceType {}
    impl xsd_parser::AsAny for InitialLegTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct IntermediateLegTimeSliceType {
        pub id: String,
        pub content: Vec<IntermediateLegTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum IntermediateLegTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3810(IntermediateLegTimeSliceContent3810Type),
        Extension(IntermediateLegTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for IntermediateLegTimeSliceType {}
    impl gml::AbstractObjectTrait for IntermediateLegTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for IntermediateLegTimeSliceType {}
    impl xsd_parser::AsAny for IntermediateLegTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MissedApproachLegTimeSliceType {
        pub id: String,
        pub content: Vec<MissedApproachLegTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MissedApproachLegTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3855(MissedApproachLegTimeSliceContent3855Type),
        Extension(MissedApproachLegTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for MissedApproachLegTimeSliceType {}
    impl gml::AbstractObjectTrait for MissedApproachLegTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for MissedApproachLegTimeSliceType {}
    impl xsd_parser::AsAny for MissedApproachLegTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ProcedureDMETimeSliceType {
        pub id: String,
        pub content: Vec<ProcedureDMETimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ProcedureDMETimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3922(ProcedureDMETimeSliceContent3922Type),
        Extension(ProcedureDMETimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for ProcedureDMETimeSliceType {}
    impl gml::AbstractObjectTrait for ProcedureDMETimeSliceType {}
    impl gml::AbstractTimeSliceTrait for ProcedureDMETimeSliceType {}
    impl xsd_parser::AsAny for ProcedureDMETimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SafeAltitudeAreaTimeSliceType {
        pub id: String,
        pub content: Vec<SafeAltitudeAreaTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SafeAltitudeAreaTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3936(SafeAltitudeAreaTimeSliceContent3936Type),
        Extension(SafeAltitudeAreaTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for SafeAltitudeAreaTimeSliceType {}
    impl gml::AbstractObjectTrait for SafeAltitudeAreaTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for SafeAltitudeAreaTimeSliceType {}
    impl xsd_parser::AsAny for SafeAltitudeAreaTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct HoldingPatternTimeSliceType {
        pub id: String,
        pub content: Vec<HoldingPatternTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum HoldingPatternTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3967(HoldingPatternTimeSliceContent3967Type),
        Extension(HoldingPatternTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for HoldingPatternTimeSliceType {}
    impl gml::AbstractObjectTrait for HoldingPatternTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for HoldingPatternTimeSliceType {}
    impl xsd_parser::AsAny for HoldingPatternTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct UnplannedHoldingTimeSliceType {
        pub id: String,
        pub content: Vec<UnplannedHoldingTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum UnplannedHoldingTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content3995(UnplannedHoldingTimeSliceContent3995Type),
        Extension(UnplannedHoldingTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for UnplannedHoldingTimeSliceType {}
    impl gml::AbstractObjectTrait for UnplannedHoldingTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for UnplannedHoldingTimeSliceType {}
    impl xsd_parser::AsAny for UnplannedHoldingTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceBorderCrossingTimeSliceType {
        pub id: String,
        pub content: Vec<AirspaceBorderCrossingTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceBorderCrossingTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content4026(AirspaceBorderCrossingTimeSliceContent4026Type),
        Extension(AirspaceBorderCrossingTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for AirspaceBorderCrossingTimeSliceType {}
    impl gml::AbstractObjectTrait for AirspaceBorderCrossingTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for AirspaceBorderCrossingTimeSliceType {}
    impl xsd_parser::AsAny for AirspaceBorderCrossingTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct FlightRestrictionTimeSliceType {
        pub id: String,
        pub content: Vec<FlightRestrictionTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FlightRestrictionTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content4104(FlightRestrictionTimeSliceContent4104Type),
        Extension(FlightRestrictionTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for FlightRestrictionTimeSliceType {}
    impl gml::AbstractObjectTrait for FlightRestrictionTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for FlightRestrictionTimeSliceType {}
    impl xsd_parser::AsAny for FlightRestrictionTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RouteSegmentTimeSliceType {
        pub id: String,
        pub content: Vec<RouteSegmentTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RouteSegmentTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content4187(RouteSegmentTimeSliceContent4187Type),
        Extension(RouteSegmentTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for RouteSegmentTimeSliceType {}
    impl gml::AbstractObjectTrait for RouteSegmentTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for RouteSegmentTimeSliceType {}
    impl xsd_parser::AsAny for RouteSegmentTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RouteDMETimeSliceType {
        pub id: String,
        pub content: Vec<RouteDMETimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RouteDMETimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content4270(RouteDMETimeSliceContent4270Type),
        Extension(RouteDMETimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for RouteDMETimeSliceType {}
    impl gml::AbstractObjectTrait for RouteDMETimeSliceType {}
    impl gml::AbstractTimeSliceTrait for RouteDMETimeSliceType {}
    impl xsd_parser::AsAny for RouteDMETimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RouteTimeSliceType {
        pub id: String,
        pub content: Vec<RouteTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RouteTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content4284(RouteTimeSliceContent4284Type),
        Extension(RouteTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for RouteTimeSliceType {}
    impl gml::AbstractObjectTrait for RouteTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for RouteTimeSliceType {}
    impl xsd_parser::AsAny for RouteTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ChangeOverPointTimeSliceType {
        pub id: String,
        pub content: Vec<ChangeOverPointTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ChangeOverPointTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content4306(ChangeOverPointTimeSliceContent4306Type),
        Extension(ChangeOverPointTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for ChangeOverPointTimeSliceType {}
    impl gml::AbstractObjectTrait for ChangeOverPointTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for ChangeOverPointTimeSliceType {}
    impl xsd_parser::AsAny for ChangeOverPointTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AerialRefuellingTimeSliceType {
        pub id: String,
        pub content: Vec<AerialRefuellingTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AerialRefuellingTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content4325(AerialRefuellingTimeSliceContent4325Type),
        Extension(AerialRefuellingTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for AerialRefuellingTimeSliceType {}
    impl gml::AbstractObjectTrait for AerialRefuellingTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for AerialRefuellingTimeSliceType {}
    impl xsd_parser::AsAny for AerialRefuellingTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RulesProceduresTimeSliceType {
        pub id: String,
        pub content: Vec<RulesProceduresTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RulesProceduresTimeSliceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        ValidTime(gml::TimePrimitivePropertyType),
        Content26(AbstractAIXMTimeSliceBaseContent26Type),
        Interpretation(InterpretationElementType),
        SequenceNumber(u32),
        CorrectionNumber(u32),
        TimeSliceMetadata(FeatureTimeSliceMetadataPropertyType),
        FeatureLifetime(gml::TimePrimitivePropertyType),
        Content4416(RulesProceduresTimeSliceContent4416Type),
        Extension(RulesProceduresTimeSliceTypeExtensionElementType),
    }
    impl gml::AbstractGMLTrait for RulesProceduresTimeSliceType {}
    impl gml::AbstractObjectTrait for RulesProceduresTimeSliceType {}
    impl gml::AbstractTimeSliceTrait for RulesProceduresTimeSliceType {}
    impl xsd_parser::AsAny for RulesProceduresTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum AbstractAIXMFeatureBaseContent11Type {
        Description(gml::StringOrRefType),
        Identifier(gml::CodeType),
        Name(gml::CodeType),
    }
    #[derive(Debug, Clone)]
    pub enum AbstractAIXMTimeSliceBaseContent26Type {
        ValidTime(gml::TimePrimitivePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum InterpretationElementType {
        Baseline,
        Snapshot,
        Tempdelta,
        Permdelta,
    }
    #[derive(Debug, Clone)]
    pub struct FeatureTimeSliceMetadataPropertyType {
        pub owns: bool,
        pub content: Option<FeatureTimeSliceMetadataPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FeatureTimeSliceMetadataPropertyTypeContent {
        MdMetadata(gmd::MdMetadataType),
    }
    impl FeatureTimeSliceMetadataPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RunwayProtectAreaTimeSliceContent32Type {
        Content33(RunwayProtectAreaTimeSliceContent33Type),
        Type(CodeRunwayProtectionAreaType),
        Status(CodeStatusOperationsType),
        ProtectedRunwayDirection(RunwayDirectionPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RunwayProtectAreaTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: RunwayProtectAreaTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayProtectAreaTimeSliceTypeExtensionElementTypeContent {
        AbstractRunwayProtectAreaExtension(AbstractRunwayProtectAreaExtension),
        AbstractAirportHeliportProtectionAreaExtension(
            AbstractAirportHeliportProtectionAreaExtension,
        ),
    }
    impl RunwayProtectAreaTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RunwayDirectionTimeSliceContent52Type {
        Designator(TextDesignatorType),
        TrueBearing(ValBearingType),
        TrueBearingAccuracy(ValAngleType),
        MagneticBearing(ValBearingType),
        PatternVFR(CodeDirectionTurnType),
        SlopeTDZ(ValSlopeType),
        ElevationTDZ(ValDistanceVerticalType),
        ElevationTDZAccuracy(ValDistanceType),
        ApproachMarkingType(CodeRunwayMarkingType),
        ApproachMarkingCondition(CodeMarkingConditionType),
        ClassLightingJAR(CodeLightingJARType),
        PrecisionApproachGuidance(CodeApproachGuidanceType),
        UsedRunway(RunwayPropertyType),
        StartingElement(RunwayElementPropertyType),
        Annotation(NotePropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RunwayDirectionTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: RunwayDirectionTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayDirectionTimeSliceTypeExtensionElementTypeContent {
        AbstractRunwayDirectionExtension(AbstractRunwayDirectionExtension),
    }
    impl RunwayDirectionTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RunwayCentrelinePointTimeSliceContent77Type {
        Role(CodeRunwayPointRoleType),
        Designator(TextDesignatorType),
        Location(ElevatedPointPropertyType),
        OnRunway(RunwayDirectionPropertyType),
        AssociatedDeclaredDistance(RunwayDeclaredDistancePropertyType),
        NavaidEquipment(NavaidEquipmentDistancePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RunwayCentrelinePointTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: RunwayCentrelinePointTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayCentrelinePointTimeSliceTypeExtensionElementTypeContent {
        AbstractRunwayCentrelinePointExtension(AbstractRunwayCentrelinePointExtension),
    }
    impl RunwayCentrelinePointTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RunwayTimeSliceContent93Type {
        Designator(TextDesignatorType),
        Type(CodeRunwayProtectionAreaType),
        NominalLength(ValDistanceType),
        LengthAccuracy(ValDistanceType),
        NominalWidth(ValDistanceType),
        WidthAccuracy(ValDistanceType),
        WidthShoulder(ValDistanceType),
        LengthStrip(ValDistanceType),
        WidthStrip(ValDistanceType),
        LengthOffset(ValDistanceSignedType),
        WidthOffset(ValDistanceSignedType),
        Abandoned(CodeYesNoType),
        SurfaceProperties(SurfaceCharacteristicsPropertyType),
        AssociatedAirportHeliport(AirportHeliportPropertyType),
        OverallContaminant(RunwayContaminationPropertyType),
        Annotation(NotePropertyType),
        AreaContaminant(RunwaySectionContaminationPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RunwayTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: RunwayTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayTimeSliceTypeExtensionElementTypeContent {
        AbstractRunwayExtension(AbstractRunwayExtension),
    }
    impl RunwayTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ArrestingGearTimeSliceContent119Type {
        Status(CodeStatusOperationsType),
        Length(ValDistanceType),
        Width(ValDistanceType),
        EngageDevice(CodeArrestingGearEngageDeviceType),
        AbsorbType(CodeArrestingGearEnergyAbsorbType),
        Bidirectional(CodeYesNoType),
        Location(ElevatedPointPropertyType),
        RunwayDirection(RunwayDirectionType),
        SurfaceProperties(SurfaceCharacteristicsPropertyType),
        Content129(ArrestingGearTimeSliceContent129Type),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ArrestingGearTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: ArrestingGearTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ArrestingGearTimeSliceTypeExtensionElementTypeContent {
        AbstractArrestingGearExtension(AbstractArrestingGearExtension),
    }
    impl ArrestingGearTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RunwayElementTimeSliceContent142Type {
        Type(CodeRunwayProtectionAreaType),
        Length(ValDistanceType),
        Width(ValDistanceType),
        GradeSeparation(CodeGradeSeparationType),
        SurfaceProperties(SurfaceCharacteristicsPropertyType),
        AssociatedRunway(RunwayPropertyType),
        Extent(ElevatedSurfacePropertyType),
        Annotation(NotePropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RunwayElementTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: RunwayElementTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayElementTimeSliceTypeExtensionElementTypeContent {
        AbstractRunwayElementExtension(AbstractRunwayElementExtension),
    }
    impl RunwayElementTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum VisualGlideSlopeIndicatorTimeSliceContent161Type {
        Content162(VisualGlideSlopeIndicatorTimeSliceContent162Type),
        Type(CodeRunwayProtectionAreaType),
        Position(CodeSideType),
        NumberBox(NoNumberType),
        Portable(CodeYesNoType),
        SlopeAngle(ValAngleType),
        MinimumEyeHeightOverThreshold(ValDistanceVerticalType),
        RunwayDirection(RunwayDirectionType),
    }
    #[derive(Debug, Clone)]
    pub struct VisualGlideSlopeIndicatorTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: VisualGlideSlopeIndicatorTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum VisualGlideSlopeIndicatorTimeSliceTypeExtensionElementTypeContent {
        AbstractVisualGlideSlopeIndicatorExtension(AbstractVisualGlideSlopeIndicatorExtension),
        AbstractGroundLightSystemExtension(AbstractGroundLightSystemExtension),
    }
    impl VisualGlideSlopeIndicatorTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RunwayVisualRangeTimeSliceContent184Type {
        ReadingPosition(CodeRVRReadingType),
        AssociatedRunwayDirection(RunwayDirectionPropertyType),
        Location(ElevatedPointPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RunwayVisualRangeTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: RunwayVisualRangeTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayVisualRangeTimeSliceTypeExtensionElementTypeContent {
        AbstractRunwayVisualRangeExtension(AbstractRunwayVisualRangeExtension),
    }
    impl RunwayVisualRangeTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RunwayBlastPadTimeSliceContent197Type {
        Length(ValDistanceType),
        Status(CodeStatusOperationsType),
        UsedRunwayDirection(RunwayDirectionPropertyType),
        Extent(ElevatedSurfacePropertyType),
        SurfaceProperties(SurfaceCharacteristicsPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RunwayBlastPadTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: RunwayBlastPadTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayBlastPadTimeSliceTypeExtensionElementTypeContent {
        AbstractRunwayBlastPadExtension(AbstractRunwayBlastPadExtension),
    }
    impl RunwayBlastPadTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum TaxiHoldingPositionTimeSliceContent276Type {
        LandingCategory(CodeHoldingCategoryType),
        Status(CodeStatusOperationsType),
        AssociatedGuidanceLine(GuidanceLinePropertyType),
        ProtectedRunway(RunwayPropertyType),
        Location(ElevatedPointPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TaxiHoldingPositionTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: TaxiHoldingPositionTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiHoldingPositionTimeSliceTypeExtensionElementTypeContent {
        AbstractTaxiHoldingPositionExtension(AbstractTaxiHoldingPositionExtension),
    }
    impl TaxiHoldingPositionTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayTimeSliceContent291Type {
        Designator(TextDesignatorType),
        Type(CodeRunwayProtectionAreaType),
        Width(ValDistanceType),
        WidthShoulder(ValDistanceType),
        Length(ValDistanceType),
        Abandoned(CodeYesNoType),
        SurfaceProperties(SurfaceCharacteristicsPropertyType),
        AssociatedAirportHeliport(AirportHeliportPropertyType),
        Contaminant(TaxiwayContaminationPropertyType),
        Annotation(NotePropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TaxiwayTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: TaxiwayTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayTimeSliceTypeExtensionElementTypeContent {
        AbstractTaxiwayExtension(AbstractTaxiwayExtension),
    }
    impl TaxiwayTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayElementTimeSliceContent311Type {
        Type(CodeRunwayProtectionAreaType),
        Length(ValDistanceType),
        Width(ValDistanceType),
        GradeSeparation(CodeGradeSeparationType),
        SurfaceProperties(SurfaceCharacteristicsPropertyType),
        AssociatedTaxiway(TaxiwayPropertyType),
        Extent(ElevatedSurfacePropertyType),
        Annotation(NotePropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TaxiwayElementTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: TaxiwayElementTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayElementTimeSliceTypeExtensionElementTypeContent {
        AbstractTaxiwayElementExtension(AbstractTaxiwayElementExtension),
    }
    impl TaxiwayElementTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum GuidanceLineTimeSliceContent329Type {
        Designator(TextDesignatorType),
        Type(CodeRunwayProtectionAreaType),
        MaxSpeed(ValSpeedType),
        UsageDirection(CodeDirectionType),
        ConnectedTouchDownLiftOff(TouchDownLiftOffPropertyType),
        ConnectedRunwayCentrelinePoint(RunwayCentrelinePointPropertyType),
        ConnectedApron(ApronPropertyType),
        ConnectedStand(AircraftStandPropertyType),
        Extent(ElevatedSurfacePropertyType),
        ConnectedTaxiway(TaxiwayPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct GuidanceLineTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: GuidanceLineTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum GuidanceLineTimeSliceTypeExtensionElementTypeContent {
        AbstractGuidanceLineExtension(AbstractGuidanceLineExtension),
    }
    impl GuidanceLineTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ApronTimeSliceContent349Type {
        Name(TextNameType),
        Abandoned(CodeYesNoType),
        SurfaceProperties(SurfaceCharacteristicsPropertyType),
        AssociatedAirportHeliport(AirportHeliportPropertyType),
        Contaminant(TaxiwayContaminationPropertyType),
        Annotation(NotePropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ApronTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: ApronTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ApronTimeSliceTypeExtensionElementTypeContent {
        AbstractApronExtension(AbstractApronExtension),
    }
    impl ApronTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ApronElementTimeSliceContent365Type {
        Type(CodeRunwayProtectionAreaType),
        JetwayAvailability(CodeYesNoType),
        TowingAvailability(CodeYesNoType),
        DockingAvailability(CodeYesNoType),
        GroundPowerAvailability(CodeYesNoType),
        Length(ValDistanceType),
        Width(ValDistanceType),
        AssociatedApron(ApronPropertyType),
        SurfaceProperties(SurfaceCharacteristicsPropertyType),
        Extent(ElevatedSurfacePropertyType),
        SupplyService(AirportSuppliesServicePropertyType),
        Annotation(NotePropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ApronElementTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: ApronElementTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ApronElementTimeSliceTypeExtensionElementTypeContent {
        AbstractApronElementExtension(AbstractApronElementExtension),
    }
    impl ApronElementTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AircraftStandTimeSliceContent387Type {
        Designator(TextDesignatorType),
        Type(CodeRunwayProtectionAreaType),
        VisualDockingSystem(CodeVisualDockingGuidanceType),
        SurfaceProperties(SurfaceCharacteristicsPropertyType),
        Location(ElevatedPointPropertyType),
        ApronLocation(ApronElementPropertyType),
        Extent(ElevatedSurfacePropertyType),
        Contaminant(TaxiwayContaminationPropertyType),
        Annotation(NotePropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AircraftStandTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: AircraftStandTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AircraftStandTimeSliceTypeExtensionElementTypeContent {
        AbstractAircraftStandExtension(AbstractAircraftStandExtension),
    }
    impl AircraftStandTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RoadTimeSliceContent406Type {
        Designator(TextDesignatorType),
        Status(CodeStatusOperationsType),
        Type(CodeRunwayProtectionAreaType),
        Abandoned(CodeYesNoType),
        AssociatedAirport(AirportHeliportPropertyType),
        SurfaceProperties(SurfaceCharacteristicsPropertyType),
        AccessibleStand(AircraftStandPropertyType),
        SurfaceExtent(ElevatedSurfacePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RoadTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: RoadTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RoadTimeSliceTypeExtensionElementTypeContent {
        AbstractRoadExtension(AbstractRoadExtension),
    }
    impl RoadTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum DeicingAreaTimeSliceContent449Type {
        AssociatedApron(ApronPropertyType),
        TaxiwayLocation(TaxiwayPropertyType),
        StandLocation(AircraftStandPropertyType),
        SurfaceProperties(SurfaceCharacteristicsPropertyType),
        Extent(ElevatedSurfacePropertyType),
        Annotation(NotePropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct DeicingAreaTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: DeicingAreaTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum DeicingAreaTimeSliceTypeExtensionElementTypeContent {
        AbstractDeicingAreaExtension(AbstractDeicingAreaExtension),
    }
    impl DeicingAreaTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum PassengerLoadingBridgeTimeSliceContent465Type {
        Type(CodeRunwayProtectionAreaType),
        Extent(ElevatedSurfacePropertyType),
        AssociatedStand(AircraftStandPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct PassengerLoadingBridgeTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: PassengerLoadingBridgeTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum PassengerLoadingBridgeTimeSliceTypeExtensionElementTypeContent {
        AbstractPassengerLoadingBridgeExtension(AbstractPassengerLoadingBridgeExtension),
    }
    impl PassengerLoadingBridgeTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffSafeAreaTimeSliceContent478Type {
        Content479(TouchDownLiftOffSafeAreaTimeSliceContent479Type),
        ProtectedTouchDownLiftOff(TouchDownLiftOffPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TouchDownLiftOffSafeAreaTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: TouchDownLiftOffSafeAreaTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffSafeAreaTimeSliceTypeExtensionElementTypeContent {
        AbstractTouchDownLiftOffSafeAreaExtension(AbstractTouchDownLiftOffSafeAreaExtension),
        AbstractAirportHeliportProtectionAreaExtension(
            AbstractAirportHeliportProtectionAreaExtension,
        ),
    }
    impl TouchDownLiftOffSafeAreaTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffTimeSliceContent496Type {
        Designator(TextDesignatorType),
        Length(ValDistanceType),
        Width(ValDistanceType),
        Slope(ValSlopeType),
        HelicopterClass(CodeHelicopterPerformanceType),
        Abandoned(CodeYesNoType),
        AimingPoint(ElevatedPointPropertyType),
        Extent(ElevatedSurfacePropertyType),
        SurfaceProperties(SurfaceCharacteristicsPropertyType),
        AssociatedAirportHeliport(AirportHeliportPropertyType),
        ApproachTakeOffArea(RunwayPropertyType),
        Contaminant(TaxiwayContaminationPropertyType),
        Annotation(NotePropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TouchDownLiftOffTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: TouchDownLiftOffTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffTimeSliceTypeExtensionElementTypeContent {
        AbstractTouchDownLiftOffExtension(AbstractTouchDownLiftOffExtension),
    }
    impl TouchDownLiftOffTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ApronLightSystemTimeSliceContent519Type {
        Content520(ApronLightSystemTimeSliceContent520Type),
        Position(CodeSideType),
        LightedApron(ApronPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ApronLightSystemTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: ApronLightSystemTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ApronLightSystemTimeSliceTypeExtensionElementTypeContent {
        AbstractApronLightSystemExtension(AbstractApronLightSystemExtension),
        AbstractGroundLightSystemExtension(AbstractGroundLightSystemExtension),
    }
    impl ApronLightSystemTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayLightSystemTimeSliceContent537Type {
        Content538(TaxiwayLightSystemTimeSliceContent538Type),
        Position(CodeSideType),
        LightedTaxiway(TaxiwayPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TaxiwayLightSystemTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: TaxiwayLightSystemTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayLightSystemTimeSliceTypeExtensionElementTypeContent {
        AbstractTaxiwayLightSystemExtension(AbstractTaxiwayLightSystemExtension),
        AbstractGroundLightSystemExtension(AbstractGroundLightSystemExtension),
    }
    impl TaxiwayLightSystemTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RunwayDirectionLightSystemTimeSliceContent555Type {
        Content556(RunwayDirectionLightSystemTimeSliceContent556Type),
        Position(CodeSideType),
        AssociatedRunwayDirection(RunwayDirectionPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RunwayDirectionLightSystemTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: RunwayDirectionLightSystemTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayDirectionLightSystemTimeSliceTypeExtensionElementTypeContent {
        AbstractRunwayDirectionLightSystemExtension(AbstractRunwayDirectionLightSystemExtension),
        AbstractGroundLightSystemExtension(AbstractGroundLightSystemExtension),
    }
    impl RunwayDirectionLightSystemTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffLightSystemTimeSliceContent573Type {
        Content574(TouchDownLiftOffLightSystemTimeSliceContent574Type),
        Position(CodeSideType),
        LightedTouchDownLiftOff(TouchDownLiftOffPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TouchDownLiftOffLightSystemTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: TouchDownLiftOffLightSystemTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffLightSystemTimeSliceTypeExtensionElementTypeContent {
        AbstractTouchDownLiftOffLightSystemExtension(AbstractTouchDownLiftOffLightSystemExtension),
        AbstractGroundLightSystemExtension(AbstractGroundLightSystemExtension),
    }
    impl TouchDownLiftOffLightSystemTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum GuidanceLineLightSystemTimeSliceContent591Type {
        Content592(GuidanceLineLightSystemTimeSliceContent592Type),
        LightedGuidanceLine(GuidanceLinePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct GuidanceLineLightSystemTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: GuidanceLineLightSystemTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum GuidanceLineLightSystemTimeSliceTypeExtensionElementTypeContent {
        AbstractGuidanceLineLightSystemExtension(AbstractGuidanceLineLightSystemExtension),
        AbstractGroundLightSystemExtension(AbstractGroundLightSystemExtension),
    }
    impl GuidanceLineLightSystemTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RunwayProtectAreaLightSystemTimeSliceContent608Type {
        Content609(RunwayProtectAreaLightSystemTimeSliceContent609Type),
        Position(CodeSideType),
        LightedArea(RunwayProtectAreaPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RunwayProtectAreaLightSystemTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: RunwayProtectAreaLightSystemTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayProtectAreaLightSystemTimeSliceTypeExtensionElementTypeContent {
        AbstractRunwayProtectAreaLightSystemExtension(
            AbstractRunwayProtectAreaLightSystemExtension,
        ),
        AbstractGroundLightSystemExtension(AbstractGroundLightSystemExtension),
    }
    impl RunwayProtectAreaLightSystemTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum TaxiHoldingPositionLightSystemTimeSliceContent626Type {
        Content627(TaxiHoldingPositionLightSystemTimeSliceContent627Type),
        Type(CodeRunwayProtectionAreaType),
        TaxiHolding(TaxiHoldingPositionPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TaxiHoldingPositionLightSystemTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: TaxiHoldingPositionLightSystemTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiHoldingPositionLightSystemTimeSliceTypeExtensionElementTypeContent {
        AbstractTaxiHoldingPositionLightSystemExtension(
            AbstractTaxiHoldingPositionLightSystemExtension,
        ),
        AbstractGroundLightSystemExtension(AbstractGroundLightSystemExtension),
    }
    impl TaxiHoldingPositionLightSystemTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ApproachLightingSystemTimeSliceContent665Type {
        Content666(ApproachLightingSystemTimeSliceContent666Type),
        ClassICAO(CodeApproachLightingICAOType),
        Type(CodeRunwayProtectionAreaType),
        Length(ValDistanceType),
        SequencedFlashing(CodeYesNoType),
        AlignmentIndicator(CodeYesNoType),
        ServedRunwayDirection(RunwayDirectionPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ApproachLightingSystemTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: ApproachLightingSystemTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ApproachLightingSystemTimeSliceTypeExtensionElementTypeContent {
        AbstractApproachLightingSystemExtension(AbstractApproachLightingSystemExtension),
        AbstractGroundLightSystemExtension(AbstractGroundLightSystemExtension),
    }
    impl ApproachLightingSystemTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayMarkingTimeSliceContent701Type {
        Content702(TaxiwayMarkingTimeSliceContent702Type),
        MarkingLocation(CodeTaxiwaySectionType),
        MarkedTaxiway(TaxiwayPropertyType),
        MarkedElement(TaxiwayElementPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TaxiwayMarkingTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: TaxiwayMarkingTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayMarkingTimeSliceTypeExtensionElementTypeContent {
        AbstractTaxiwayMarkingExtension(AbstractTaxiwayMarkingExtension),
        AbstractMarkingExtension(AbstractMarkingExtension),
    }
    impl TaxiwayMarkingTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ApronMarkingTimeSliceContent718Type {
        Content719(ApronMarkingTimeSliceContent719Type),
        MarkingLocation(CodeTaxiwaySectionType),
        MarkedApron(ApronPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ApronMarkingTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: ApronMarkingTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ApronMarkingTimeSliceTypeExtensionElementTypeContent {
        AbstractApronMarkingExtension(AbstractApronMarkingExtension),
        AbstractMarkingExtension(AbstractMarkingExtension),
    }
    impl ApronMarkingTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AirportProtectionAreaMarkingTimeSliceContent734Type {
        Content735(AirportProtectionAreaMarkingTimeSliceContent735Type),
        MarkingLocation(CodeTaxiwaySectionType),
        MarkedProtectionArea(AirportHeliportProtectionAreaPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AirportProtectionAreaMarkingTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: AirportProtectionAreaMarkingTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirportProtectionAreaMarkingTimeSliceTypeExtensionElementTypeContent {
        AbstractAirportProtectionAreaMarkingExtension(
            AbstractAirportProtectionAreaMarkingExtension,
        ),
        AbstractMarkingExtension(AbstractMarkingExtension),
    }
    impl AirportProtectionAreaMarkingTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffMarkingTimeSliceContent750Type {
        Content751(TouchDownLiftOffMarkingTimeSliceContent751Type),
        MarkingLocation(CodeTaxiwaySectionType),
        MarkedTouchDownLiftOff(TouchDownLiftOffPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TouchDownLiftOffMarkingTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: TouchDownLiftOffMarkingTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffMarkingTimeSliceTypeExtensionElementTypeContent {
        AbstractTouchDownLiftOffMarkingExtension(AbstractTouchDownLiftOffMarkingExtension),
        AbstractMarkingExtension(AbstractMarkingExtension),
    }
    impl TouchDownLiftOffMarkingTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RunwayMarkingTimeSliceContent766Type {
        Content767(RunwayMarkingTimeSliceContent767Type),
        MarkingLocation(CodeTaxiwaySectionType),
        MarkedRunway(RunwayPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RunwayMarkingTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: RunwayMarkingTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayMarkingTimeSliceTypeExtensionElementTypeContent {
        AbstractRunwayMarkingExtension(AbstractRunwayMarkingExtension),
        AbstractMarkingExtension(AbstractMarkingExtension),
    }
    impl RunwayMarkingTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum GuidanceLineMarkingTimeSliceContent782Type {
        Content783(GuidanceLineMarkingTimeSliceContent783Type),
        MarkedGuidanceLine(GuidanceLinePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct GuidanceLineMarkingTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: GuidanceLineMarkingTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum GuidanceLineMarkingTimeSliceTypeExtensionElementTypeContent {
        AbstractGuidanceLineMarkingExtension(AbstractGuidanceLineMarkingExtension),
        AbstractMarkingExtension(AbstractMarkingExtension),
    }
    impl GuidanceLineMarkingTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum DeicingAreaMarkingTimeSliceContent797Type {
        Content798(DeicingAreaMarkingTimeSliceContent798Type),
        MarkedDeicingArea(DeicingAreaPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct DeicingAreaMarkingTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: DeicingAreaMarkingTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum DeicingAreaMarkingTimeSliceTypeExtensionElementTypeContent {
        AbstractDeicingAreaMarkingExtension(AbstractDeicingAreaMarkingExtension),
        AbstractMarkingExtension(AbstractMarkingExtension),
    }
    impl DeicingAreaMarkingTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum TaxiHoldingPositionMarkingTimeSliceContent812Type {
        Content813(TaxiHoldingPositionMarkingTimeSliceContent813Type),
        MarkedTaxiHold(TaxiHoldingPositionPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TaxiHoldingPositionMarkingTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: TaxiHoldingPositionMarkingTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiHoldingPositionMarkingTimeSliceTypeExtensionElementTypeContent {
        AbstractTaxiHoldingPositionMarkingExtension(AbstractTaxiHoldingPositionMarkingExtension),
        AbstractMarkingExtension(AbstractMarkingExtension),
    }
    impl TaxiHoldingPositionMarkingTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum StandMarkingTimeSliceContent827Type {
        Content828(StandMarkingTimeSliceContent828Type),
        MarkedStand(AircraftStandPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct StandMarkingTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: StandMarkingTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum StandMarkingTimeSliceTypeExtensionElementTypeContent {
        AbstractStandMarkingExtension(AbstractStandMarkingExtension),
        AbstractMarkingExtension(AbstractMarkingExtension),
    }
    impl StandMarkingTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum FloatingDockSiteTimeSliceContent1016Type {
        Extent(ElevatedSurfacePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct FloatingDockSiteTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: FloatingDockSiteTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FloatingDockSiteTimeSliceTypeExtensionElementTypeContent {
        AbstractFloatingDockSiteExtension(AbstractFloatingDockSiteExtension),
    }
    impl FloatingDockSiteTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum MarkingBuoyTimeSliceContent1027Type {
        Designator(TextDesignatorType),
        Type(CodeRunwayProtectionAreaType),
        Colour(CodeColourType),
        TheSeaplaneLandingArea(SeaplaneLandingAreaPropertyType),
        Location(ElevatedPointPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MarkingBuoyTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: MarkingBuoyTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum MarkingBuoyTimeSliceTypeExtensionElementTypeContent {
        AbstractMarkingBuoyExtension(AbstractMarkingBuoyExtension),
    }
    impl MarkingBuoyTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum SeaplaneLandingAreaTimeSliceContent1042Type {
        RampSite(SeaplaneRampSitePropertyType),
        DockSite(FloatingDockSitePropertyType),
        Extent(ElevatedSurfacePropertyType),
        Annotation(NotePropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct SeaplaneLandingAreaTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: SeaplaneLandingAreaTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SeaplaneLandingAreaTimeSliceTypeExtensionElementTypeContent {
        AbstractSeaplaneLandingAreaExtension(AbstractSeaplaneLandingAreaExtension),
    }
    impl SeaplaneLandingAreaTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum SeaplaneRampSiteTimeSliceContent1056Type {
        Extent(ElevatedSurfacePropertyType),
        Centreline(ElevatedCurvePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct SeaplaneRampSiteTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: SeaplaneRampSiteTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SeaplaneRampSiteTimeSliceTypeExtensionElementTypeContent {
        AbstractSeaplaneRampSiteExtension(AbstractSeaplaneRampSiteExtension),
    }
    impl SeaplaneRampSiteTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum WorkAreaTimeSliceContent1068Type {
        Type(CodeRunwayProtectionAreaType),
        PlannedOperational(DateType),
        AssociatedAirportHeliport(AirportHeliportPropertyType),
        Extent(ElevatedSurfacePropertyType),
        Activation(CodeSystemActivationType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct WorkAreaTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: WorkAreaTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum WorkAreaTimeSliceTypeExtensionElementTypeContent {
        AbstractWorkAreaExtension(AbstractWorkAreaExtension),
    }
    impl WorkAreaTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum SurveyControlPointTimeSliceContent1083Type {
        Designator(TextDesignatorType),
        AssociatedAirportHeliport(AirportHeliportPropertyType),
        Location(ElevatedPointPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct SurveyControlPointTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: SurveyControlPointTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SurveyControlPointTimeSliceTypeExtensionElementTypeContent {
        AbstractSurveyControlPointExtension(AbstractSurveyControlPointExtension),
    }
    impl SurveyControlPointTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum NonMovementAreaTimeSliceContent1115Type {
        AssociatedAirportHeliport(AirportHeliportPropertyType),
        Extent(ElevatedSurfacePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct NonMovementAreaTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: NonMovementAreaTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NonMovementAreaTimeSliceTypeExtensionElementTypeContent {
        AbstractNonMovementAreaExtension(AbstractNonMovementAreaExtension),
    }
    impl NonMovementAreaTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportCollocationTimeSliceContent1136Type {
        Type(CodeRunwayProtectionAreaType),
        HostAirport(AirportHeliportPropertyType),
        DependentAirport(AirportHeliportPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AirportHeliportCollocationTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: AirportHeliportCollocationTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportCollocationTimeSliceTypeExtensionElementTypeContent {
        AbstractAirportHeliportCollocationExtension(AbstractAirportHeliportCollocationExtension),
    }
    impl AirportHeliportCollocationTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportTimeSliceContent1149Type {
        Designator(TextDesignatorType),
        Name(TextNameType),
        LocationIndicatorICAO(CodeICAOType),
        DesignatorIATA(CodeIATAType),
        Type(CodeRunwayProtectionAreaType),
        CertifiedICAO(CodeYesNoType),
        PrivateUse(CodeYesNoType),
        ControlType(CodeMilitaryOperationsType),
        FieldElevation(ValDistanceVerticalType),
        FieldElevationAccuracy(ValDistanceVerticalType),
        VerticalDatum(CodeVerticalDatumType),
        MagneticVariation(ValMagneticVariationType),
        MagneticVariationAccuracy(ValAngleType),
        DateMagneticVariation(DateYearType),
        MagneticVariationChange(ValMagneticVariationChangeType),
        ReferenceTemperature(ValTemperatureType),
        AltimeterCheckLocation(CodeYesNoType),
        SecondaryPowerSupply(CodeYesNoType),
        WindDirectionIndicator(CodeYesNoType),
        LandingDirectionIndicator(CodeYesNoType),
        TransitionAltitude(ValDistanceVerticalType),
        TransitionLevel(ValFLType),
        LowestTemperature(ValTemperatureType),
        Abandoned(CodeYesNoType),
        CertificationDate(DateType),
        CertificationExpirationDate(DateType),
        Contaminant(TaxiwayContaminationPropertyType),
        ServedCity(CityPropertyType),
        ResponsibleOrganisation(AirportHeliportResponsibilityOrganisationPropertyType),
        Arp(ElevatedPointPropertyType),
        AviationBoundary(ElevatedSurfacePropertyType),
        AltimeterSource(AltimeterSourcePropertyType),
        Contact(ContactInformationPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AirportHeliportTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: AirportHeliportTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportTimeSliceTypeExtensionElementTypeContent {
        AbstractAirportHeliportExtension(AbstractAirportHeliportExtension),
    }
    impl AirportHeliportTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AltimeterSourceTimeSliceContent1193Type {
        IsRemote(CodeYesNoType),
        IsPrimary(CodeYesNoType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AltimeterSourceTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: AltimeterSourceTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AltimeterSourceTimeSliceTypeExtensionElementTypeContent {
        AbstractAltimeterSourceExtension(AbstractAltimeterSourceExtension),
    }
    impl AltimeterSourceTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AirportHotSpotTimeSliceContent1218Type {
        Designator(TextDesignatorType),
        Instruction(TextInstructionType),
        Area(ElevatedSurfacePropertyType),
        AffectedAirport(AirportHeliportPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AirportHotSpotTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: AirportHotSpotTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHotSpotTimeSliceTypeExtensionElementTypeContent {
        AbstractAirportHotSpotExtension(AbstractAirportHotSpotExtension),
    }
    impl AirportHotSpotTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AuthorityForAirspaceTimeSliceContent1295Type {
        Type(CodeRunwayProtectionAreaType),
        ResponsibleOrganisation(AirportHeliportResponsibilityOrganisationPropertyType),
        AssignedAirspace(AirspacePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AuthorityForAirspaceTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: AuthorityForAirspaceTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AuthorityForAirspaceTimeSliceTypeExtensionElementTypeContent {
        AbstractAuthorityForAirspaceExtension(AbstractAuthorityForAirspaceExtension),
    }
    impl AuthorityForAirspaceTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceTimeSliceContent1308Type {
        Type(CodeRunwayProtectionAreaType),
        Designator(TextDesignatorType),
        LocalType(TextNameType),
        Name(TextNameType),
        DesignatorICAO(CodeYesNoType),
        ControlType(CodeMilitaryOperationsType),
        UpperLowerSeparation(ValFLType),
        Class(AirspaceLayerClassPropertyType),
        ProtectedRoute(RoutePropertyType),
        GeometryComponent(AirspaceGeometryComponentPropertyType),
        Activation(CodeSystemActivationType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: AirspaceTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceTimeSliceTypeExtensionElementTypeContent {
        AbstractAirspaceExtension(AbstractAirspaceExtension),
    }
    impl AirspaceTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum GeoBorderTimeSliceContent1385Type {
        Name(TextNameType),
        Type(CodeRunwayProtectionAreaType),
        Border(CurvePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct GeoBorderTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: GeoBorderTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum GeoBorderTimeSliceTypeExtensionElementTypeContent {
        AbstractGeoBorderExtension(AbstractGeoBorderExtension),
    }
    impl GeoBorderTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum CurveContent1409Type {
        HorizontalAccuracy(ValDistanceType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct Curve(pub Box<dyn CurveTrait>);
    pub trait CurveTrait: gml::CurveTrait {}
    #[derive(Debug, Clone)]
    pub enum ElevatedCurveContent1415Type {
        Elevation(ValDistanceVerticalType),
        GeoidUndulation(ValDistanceSignedType),
        VerticalDatum(CodeVerticalDatumType),
        VerticalAccuracy(ValDistanceType),
    }
    #[derive(Debug, Clone)]
    pub struct ElevatedCurveTypeExtensionElementType {
        pub owns: bool,
        pub content: ElevatedCurveTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ElevatedCurveTypeExtensionElementTypeContent {
        AbstractElevatedCurveExtension(AbstractElevatedCurveExtension),
    }
    impl ElevatedCurveTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum PointContent1428Type {
        HorizontalAccuracy(ValDistanceType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct Point(pub Box<dyn PointTrait>);
    pub trait PointTrait: gml::PointTrait {}
    #[derive(Debug, Clone)]
    pub enum ElevatedPointContent1433Type {
        Elevation(ValDistanceVerticalType),
        GeoidUndulation(ValDistanceSignedType),
        VerticalDatum(CodeVerticalDatumType),
        VerticalAccuracy(ValDistanceType),
    }
    #[derive(Debug, Clone)]
    pub struct ElevatedPointTypeExtensionElementType {
        pub owns: bool,
        pub content: ElevatedPointTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ElevatedPointTypeExtensionElementTypeContent {
        AbstractElevatedPointExtension(AbstractElevatedPointExtension),
    }
    impl ElevatedPointTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum SurfaceContent1446Type {
        HorizontalAccuracy(ValDistanceType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct Surface(pub Box<dyn SurfaceTrait>);
    pub trait SurfaceTrait: gml::SurfaceTrait {}
    #[derive(Debug, Clone)]
    pub enum ElevatedSurfaceContent1451Type {
        Elevation(ValDistanceVerticalType),
        GeoidUndulation(ValDistanceSignedType),
        VerticalDatum(CodeVerticalDatumType),
        VerticalAccuracy(ValDistanceType),
    }
    #[derive(Debug, Clone)]
    pub struct ElevatedSurfaceTypeExtensionElementType {
        pub owns: bool,
        pub content: ElevatedSurfaceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ElevatedSurfaceTypeExtensionElementTypeContent {
        AbstractElevatedSurfaceExtension(AbstractElevatedSurfaceExtension),
    }
    impl ElevatedSurfaceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum PrecisionApproachRadarTimeSliceContent1467Type {
        Content1468(PrecisionApproachRadarTimeSliceContent1468Type),
        PrecisionApproachRadarType(CodePARType),
        Slope(ValSlopeType),
        SlopeAccuracy(ValAngleType),
        Reflector(ReflectorPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct PrecisionApproachRadarTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: PrecisionApproachRadarTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum PrecisionApproachRadarTimeSliceTypeExtensionElementTypeContent {
        AbstractPrecisionApproachRadarExtension(AbstractPrecisionApproachRadarExtension),
        AbstractRadarEquipmentExtension(AbstractRadarEquipmentExtension),
    }
    impl PrecisionApproachRadarTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum PrimarySurveillanceRadarTimeSliceContent1499Type {
        Content1500(PrimarySurveillanceRadarTimeSliceContent1500Type),
        Type(CodeRunwayProtectionAreaType),
    }
    #[derive(Debug, Clone)]
    pub struct PrimarySurveillanceRadarTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: PrimarySurveillanceRadarTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum PrimarySurveillanceRadarTimeSliceTypeExtensionElementTypeContent {
        AbstractPrimarySurveillanceRadarExtension(AbstractPrimarySurveillanceRadarExtension),
        AbstractSurveillanceRadarExtension(AbstractSurveillanceRadarExtension),
        AbstractRadarEquipmentExtension(AbstractRadarEquipmentExtension),
    }
    impl PrimarySurveillanceRadarTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RadarSystemTimeSliceContent1544Type {
        Type(CodeRunwayProtectionAreaType),
        Model(TextNameType),
        GeneralTerrainMonitor(CodeYesNoType),
        BroadcastIdentifier(TextDesignatorType),
        RadarEquipment(RadarComponentPropertyType),
        Office(OrganisationAuthorityPropertyType),
        AirportHeliport(AirportHeliportType),
        Parrunway(RunwayPropertyType),
        Location(ElevatedPointPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RadarSystemTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: RadarSystemTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RadarSystemTimeSliceTypeExtensionElementTypeContent {
        AbstractRadarSystemExtension(AbstractRadarSystemExtension),
    }
    impl RadarSystemTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum SecondarySurveillanceRadarTimeSliceContent1572Type {
        Content1573(SecondarySurveillanceRadarTimeSliceContent1573Type),
        Transponder(CodeTransponderType),
        Autonomous(CodeYesNoType),
        Monopulse(CodeYesNoType),
    }
    #[derive(Debug, Clone)]
    pub struct SecondarySurveillanceRadarTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: SecondarySurveillanceRadarTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SecondarySurveillanceRadarTimeSliceTypeExtensionElementTypeContent {
        AbstractSecondarySurveillanceRadarExtension(AbstractSecondarySurveillanceRadarExtension),
        AbstractSurveillanceRadarExtension(AbstractSurveillanceRadarExtension),
        AbstractRadarEquipmentExtension(AbstractRadarEquipmentExtension),
    }
    impl SecondarySurveillanceRadarTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum HoldingAssessmentTimeSliceContent1665Type {
        UpperLimit(ValDistanceVerticalType),
        UpperLimitReference(CodeVerticalReferenceType),
        LowerLimit(ValDistanceVerticalType),
        LowerLimitReference(CodeVerticalReferenceType),
        SpeedLimit(ValSpeedType),
        PatternTemplate(TextNameType),
        TurbulentAir(CodeYesNoType),
        LegLengthToward(ValDistanceType),
        LegLengthAway(ValDistanceType),
        HoldingPoint(SegmentPointPropertyType),
        UnplannedHolding(UnplannedHoldingPropertyType),
        AssessedHoldingPattern(HoldingPatternPropertyType),
        ObstacleAssessment(ObstacleAssessmentAreaPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct HoldingAssessmentTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: HoldingAssessmentTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum HoldingAssessmentTimeSliceTypeExtensionElementTypeContent {
        AbstractHoldingAssessmentExtension(AbstractHoldingAssessmentExtension),
    }
    impl HoldingAssessmentTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum StandardLevelTableTimeSliceContent1699Type {
        Name(TextNameType),
        StandardICAO(CodeYesNoType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct StandardLevelTableTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: StandardLevelTableTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum StandardLevelTableTimeSliceTypeExtensionElementTypeContent {
        AbstractStandardLevelTableExtension(AbstractStandardLevelTableExtension),
    }
    impl StandardLevelTableTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum StandardLevelSectorTimeSliceContent1711Type {
        FlightRule(CodeFlightRuleType),
        FromTrack(ValBearingType),
        ToTrack(ValBearingType),
        AngleType(CodeNorthReferenceType),
        ApplicableAirspace(AirspacePropertyType),
        ApplicableLevelColumn(StandardLevelColumnPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct StandardLevelSectorTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: StandardLevelSectorTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum StandardLevelSectorTimeSliceTypeExtensionElementTypeContent {
        AbstractStandardLevelSectorExtension(AbstractStandardLevelSectorExtension),
    }
    impl StandardLevelSectorTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum StandardLevelColumnTimeSliceContent1727Type {
        Series(CodeLevelSeriesType),
        UnitOfMeasurement(UomDistanceVerticalType),
        Separation(CodeRVSMType),
        Level(StandardLevelPropertyType),
        LevelTable(StandardLevelTablePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct StandardLevelColumnTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: StandardLevelColumnTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum StandardLevelColumnTimeSliceTypeExtensionElementTypeContent {
        AbstractStandardLevelColumnExtension(AbstractStandardLevelColumnExtension),
    }
    impl StandardLevelColumnTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RadioFrequencyAreaTimeSliceContent1750Type {
        Type(CodeRunwayProtectionAreaType),
        AngleScallop(ValAngleType),
        SignalType(CodeRadioSignalType),
        Content1754(RadioFrequencyAreaTimeSliceContent1754Type),
        Sector(CircleSectorPropertyType),
        Extent(ElevatedSurfacePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RadioFrequencyAreaTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: RadioFrequencyAreaTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RadioFrequencyAreaTimeSliceTypeExtensionElementTypeContent {
        AbstractRadioFrequencyAreaExtension(AbstractRadioFrequencyAreaExtension),
    }
    impl RadioFrequencyAreaTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum SpecialDateTimeSliceContent1943Type {
        Type(CodeRunwayProtectionAreaType),
        DateDay(DateMonthDayType),
        DateYear(DateYearType),
        Name(TextNameType),
        Annotation(NotePropertyType),
        Authority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct SpecialDateTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: SpecialDateTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SpecialDateTimeSliceTypeExtensionElementTypeContent {
        AbstractSpecialDateExtension(AbstractSpecialDateExtension),
    }
    impl SpecialDateTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RadioCommunicationChannelTimeSliceContent1971Type {
        Mode(CodeCommunicationModeType),
        Rank(CodeFacilityRankingType),
        FrequencyTransmission(ValFrequencyType),
        FrequencyReception(ValFrequencyType),
        Channel(CodeCommunicationChannelType),
        Logon(TextDesignatorType),
        EmissionType(CodeRadioEmissionType),
        SelectiveCall(CodeYesNoType),
        FlightChecked(CodeYesNoType),
        TrafficDirection(CodeCommunicationDirectionType),
        Location(ElevatedPointPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RadioCommunicationChannelTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: RadioCommunicationChannelTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RadioCommunicationChannelTimeSliceTypeExtensionElementTypeContent {
        AbstractRadioCommunicationChannelExtension(AbstractRadioCommunicationChannelExtension),
    }
    impl RadioCommunicationChannelTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum PilotControlledLightingTimeSliceContent2002Type {
        Type(CodeRunwayProtectionAreaType),
        Duration(ValDurationType),
        IntensitySteps(NoNumberType),
        StandByIntensity(CodeIntensityStandByType),
        RadioFrequency(ValFrequencyType),
        ActivationInstruction(TextInstructionType),
        ControlledLightIntensity(LightActivationPropertyType),
        ActivatedGroundLighting(GroundLightSystemPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct PilotControlledLightingTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: PilotControlledLightingTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum PilotControlledLightingTimeSliceTypeExtensionElementTypeContent {
        AbstractPilotControlledLightingExtension(AbstractPilotControlledLightingExtension),
    }
    impl PilotControlledLightingTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum InformationServiceTimeSliceContent2020Type {
        Content2021(InformationServiceTimeSliceContent2021Type),
        Type(CodeRunwayProtectionAreaType),
        Voice(TextPhoneType),
        DataLink(CodeYesNoType),
        Recorded(CodeYesNoType),
        NavaidBroadcast(VorpropertyType),
        ClientAirspace(AirspacePropertyType),
        ClientAirport(AirportHeliportPropertyType),
        ClientRoute(RoutePortionPropertyType),
        ClientProcedure(ProcedurePropertyType),
        ClientHolding(HoldingPatternPropertyType),
        ClientAerialRefuelling(AerialRefuellingPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct InformationServiceTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: InformationServiceTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum InformationServiceTimeSliceTypeExtensionElementTypeContent {
        AbstractInformationServiceExtension(AbstractInformationServiceExtension),
        AbstractServiceExtension(AbstractServiceExtension),
    }
    impl InformationServiceTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum GroundTrafficControlServiceTimeSliceContent2053Type {
        Content2054(GroundTrafficControlServiceTimeSliceContent2054Type),
        Type(CodeRunwayProtectionAreaType),
        ClientAirport(AirportHeliportPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct GroundTrafficControlServiceTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: GroundTrafficControlServiceTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum GroundTrafficControlServiceTimeSliceTypeExtensionElementTypeContent {
        AbstractGroundTrafficControlServiceExtension(AbstractGroundTrafficControlServiceExtension),
        AbstractTrafficSeparationServiceExtension(AbstractTrafficSeparationServiceExtension),
        AbstractServiceExtension(AbstractServiceExtension),
    }
    impl GroundTrafficControlServiceTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AirTrafficControlServiceTimeSliceContent2080Type {
        Content2081(AirTrafficControlServiceTimeSliceContent2081Type),
        Type(CodeRunwayProtectionAreaType),
        ClientAirport(AirportHeliportPropertyType),
        ClientAirspace(AirspacePropertyType),
        ClientRoute(RoutePortionPropertyType),
        ClientProcedure(ProcedurePropertyType),
        ClientHolding(HoldingPatternPropertyType),
        ClientAerialRefuelling(AerialRefuellingPropertyType),
        AircraftLocator(DirectionFinderPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AirTrafficControlServiceTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: AirTrafficControlServiceTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirTrafficControlServiceTimeSliceTypeExtensionElementTypeContent {
        AbstractAirTrafficControlServiceExtension(AbstractAirTrafficControlServiceExtension),
        AbstractTrafficSeparationServiceExtension(AbstractTrafficSeparationServiceExtension),
        AbstractServiceExtension(AbstractServiceExtension),
    }
    impl AirTrafficControlServiceTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AirTrafficManagementServiceTimeSliceContent2113Type {
        Content2114(AirTrafficManagementServiceTimeSliceContent2114Type),
        Type(CodeRunwayProtectionAreaType),
        ClientAirspace(AirspacePropertyType),
        ClientAerialRefuelling(AerialRefuellingPropertyType),
        ClientRoute(RoutePortionPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AirTrafficManagementServiceTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: AirTrafficManagementServiceTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirTrafficManagementServiceTimeSliceTypeExtensionElementTypeContent {
        AbstractAirTrafficManagementServiceExtension(AbstractAirTrafficManagementServiceExtension),
        AbstractServiceExtension(AbstractServiceExtension),
    }
    impl AirTrafficManagementServiceTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum SearchRescueServiceTimeSliceContent2138Type {
        Content2139(SearchRescueServiceTimeSliceContent2139Type),
        Type(CodeRunwayProtectionAreaType),
        ClientAirspace(AirspacePropertyType),
        ClientRoute(RoutePortionPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct SearchRescueServiceTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: SearchRescueServiceTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SearchRescueServiceTimeSliceTypeExtensionElementTypeContent {
        AbstractSearchRescueServiceExtension(AbstractSearchRescueServiceExtension),
        AbstractServiceExtension(AbstractServiceExtension),
    }
    impl SearchRescueServiceTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum PassengerServiceTimeSliceContent2163Type {
        Content2164(PassengerServiceTimeSliceContent2164Type),
        Type(CodeRunwayProtectionAreaType),
    }
    #[derive(Debug, Clone)]
    pub struct PassengerServiceTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: PassengerServiceTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum PassengerServiceTimeSliceTypeExtensionElementTypeContent {
        AbstractPassengerServiceExtension(AbstractPassengerServiceExtension),
        AbstractAirportGroundServiceExtension(AbstractAirportGroundServiceExtension),
        AbstractServiceExtension(AbstractServiceExtension),
    }
    impl PassengerServiceTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AircraftGroundServiceTimeSliceContent2187Type {
        Content2188(AircraftGroundServiceTimeSliceContent2188Type),
        Type(CodeRunwayProtectionAreaType),
    }
    #[derive(Debug, Clone)]
    pub struct AircraftGroundServiceTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: AircraftGroundServiceTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AircraftGroundServiceTimeSliceTypeExtensionElementTypeContent {
        AbstractAircraftGroundServiceExtension(AbstractAircraftGroundServiceExtension),
        AbstractAirportGroundServiceExtension(AbstractAirportGroundServiceExtension),
        AbstractServiceExtension(AbstractServiceExtension),
    }
    impl AircraftGroundServiceTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum FireFightingServiceTimeSliceContent2211Type {
        Content2212(FireFightingServiceTimeSliceContent2212Type),
        Category(CodeFireFightingType),
        Standard(CodeAviationStandardsType),
    }
    #[derive(Debug, Clone)]
    pub struct FireFightingServiceTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: FireFightingServiceTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FireFightingServiceTimeSliceTypeExtensionElementTypeContent {
        AbstractFireFightingServiceExtension(AbstractFireFightingServiceExtension),
        AbstractAirportGroundServiceExtension(AbstractAirportGroundServiceExtension),
        AbstractServiceExtension(AbstractServiceExtension),
    }
    impl FireFightingServiceTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AirportClearanceServiceTimeSliceContent2236Type {
        Content2237(AirportClearanceServiceTimeSliceContent2237Type),
        SnowPlan(TextInstructionType),
    }
    #[derive(Debug, Clone)]
    pub struct AirportClearanceServiceTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: AirportClearanceServiceTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirportClearanceServiceTimeSliceTypeExtensionElementTypeContent {
        AbstractAirportClearanceServiceExtension(AbstractAirportClearanceServiceExtension),
        AbstractAirportGroundServiceExtension(AbstractAirportGroundServiceExtension),
        AbstractServiceExtension(AbstractServiceExtension),
    }
    impl AirportClearanceServiceTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AirportSuppliesServiceTimeSliceContent2260Type {
        Content2261(AirportSuppliesServiceTimeSliceContent2261Type),
        FuelSupply(FuelPropertyType),
        OilSupply(OilPropertyType),
        NitrogenSupply(NitrogenPropertyType),
        OxygenSupply(OxygenPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AirportSuppliesServiceTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: AirportSuppliesServiceTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirportSuppliesServiceTimeSliceTypeExtensionElementTypeContent {
        AbstractAirportSuppliesServiceExtension(AbstractAirportSuppliesServiceExtension),
        AbstractAirportGroundServiceExtension(AbstractAirportGroundServiceExtension),
        AbstractServiceExtension(AbstractServiceExtension),
    }
    impl AirportSuppliesServiceTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AngleIndicationTimeSliceContent2408Type {
        Angle(ValBearingType),
        AngleType(CodeNorthReferenceType),
        IndicationDirection(CodeDirectionReferenceType),
        TrueAngle(ValBearingType),
        CardinalDirection(CodeCardinalDirectionType),
        MinimumReceptionAltitude(ValDistanceVerticalType),
        Fix(DesignatedPointPropertyType),
        Content2416(AngleIndicationTimeSliceContent2416Type),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AngleIndicationTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: AngleIndicationTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AngleIndicationTimeSliceTypeExtensionElementTypeContent {
        AbstractAngleIndicationExtension(AbstractAngleIndicationExtension),
    }
    impl AngleIndicationTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum DistanceIndicationTimeSliceContent2432Type {
        Distance(ValDistanceType),
        MinimumReceptionAltitude(ValDistanceVerticalType),
        Type(CodeRunwayProtectionAreaType),
        Fix(DesignatedPointPropertyType),
        Content2437(DistanceIndicationTimeSliceContent2437Type),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct DistanceIndicationTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: DistanceIndicationTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum DistanceIndicationTimeSliceTypeExtensionElementTypeContent {
        AbstractDistanceIndicationExtension(AbstractDistanceIndicationExtension),
    }
    impl DistanceIndicationTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AzimuthTimeSliceContent2481Type {
        Content2482(AzimuthTimeSliceContent2482Type),
        Type(CodeRunwayProtectionAreaType),
        TrueBearing(ValBearingType),
        TrueBearingAccuracy(ValAngleType),
        MagneticBearing(ValBearingType),
        AngleProportionalLeft(ValAngleType),
        AngleProportionalRight(ValAngleType),
        AngleCoverLeft(ValAngleType),
        AngleCoverRight(ValAngleType),
        Channel(CodeCommunicationChannelType),
    }
    #[derive(Debug, Clone)]
    pub struct AzimuthTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: AzimuthTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AzimuthTimeSliceTypeExtensionElementTypeContent {
        AbstractAzimuthExtension(AbstractAzimuthExtension),
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtension),
    }
    impl AzimuthTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum CheckpointINSTimeSliceContent2514Type {
        Content2515(CheckpointINSTimeSliceContent2515Type),
    }
    #[derive(Debug, Clone)]
    pub struct CheckpointINSTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: CheckpointINSTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum CheckpointINSTimeSliceTypeExtensionElementTypeContent {
        AbstractCheckpointINSExtension(AbstractCheckpointINSExtension),
        AbstractNavigationSystemCheckpointExtension(AbstractNavigationSystemCheckpointExtension),
    }
    impl CheckpointINSTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum CheckpointVORTimeSliceContent2535Type {
        Content2536(CheckpointVORTimeSliceContent2536Type),
        CheckPointFacility(VorpropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CheckpointVORTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: CheckpointVORTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum CheckpointVORTimeSliceTypeExtensionElementTypeContent {
        AbstractCheckpointVORExtension(AbstractCheckpointVORExtension),
        AbstractNavigationSystemCheckpointExtension(AbstractNavigationSystemCheckpointExtension),
    }
    impl CheckpointVORTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum DmetimeSliceContent2566Type {
        Content2567(DmetimeSliceContent2567Type),
        Type(CodeRunwayProtectionAreaType),
        Channel(CodeCommunicationChannelType),
        GhostFrequency(ValFrequencyType),
        Displace(ValDistanceType),
    }
    #[derive(Debug, Clone)]
    pub struct DmetimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: DmetimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum DmetimeSliceTypeExtensionElementTypeContent {
        AbstractDMEExtension(AbstractDMEExtension),
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtension),
    }
    impl DmetimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ElevationTimeSliceContent2593Type {
        Content2594(ElevationTimeSliceContent2594Type),
        AngleNominal(ValAngleType),
        AngleMinimum(ValAngleType),
        AngleSpan(ValAngleType),
        AngleAccuracy(ValAngleType),
    }
    #[derive(Debug, Clone)]
    pub struct ElevationTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: ElevationTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ElevationTimeSliceTypeExtensionElementTypeContent {
        AbstractElevationExtension(AbstractElevationExtension),
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtension),
    }
    impl ElevationTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum GlidepathTimeSliceContent2620Type {
        Content2621(GlidepathTimeSliceContent2621Type),
        Frequency(ValFrequencyType),
        Slope(ValSlopeType),
        AngleAccuracy(ValAngleType),
        Rdh(ValDistanceVerticalType),
        RdhAccuracy(ValDistanceVerticalType),
    }
    #[derive(Debug, Clone)]
    pub struct GlidepathTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: GlidepathTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum GlidepathTimeSliceTypeExtensionElementTypeContent {
        AbstractGlidepathExtension(AbstractGlidepathExtension),
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtension),
    }
    impl GlidepathTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum LocalizerTimeSliceContent2648Type {
        Content2649(LocalizerTimeSliceContent2649Type),
        Frequency(ValFrequencyType),
        MagneticBearing(ValBearingType),
        MagneticBearingAccuracy(ValAngleType),
        TrueBearing(ValBearingType),
        TrueBearingAccuracy(ValAngleType),
        Declination(ValMagneticVariationType),
        WidthCourse(ValAngleType),
        WidthCourseAccuracy(ValAngleType),
        BackCourseUsable(CodeILSBackCourseType),
    }
    #[derive(Debug, Clone)]
    pub struct LocalizerTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: LocalizerTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum LocalizerTimeSliceTypeExtensionElementTypeContent {
        AbstractLocalizerExtension(AbstractLocalizerExtension),
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtension),
    }
    impl LocalizerTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum MarkerBeaconTimeSliceContent2680Type {
        Content2681(MarkerBeaconTimeSliceContent2681Type),
        Class(AirspaceLayerClassPropertyType),
        Frequency(ValFrequencyType),
        AxisBearing(ValBearingType),
        AuralMorseCode(CodeAuralMorseType),
    }
    #[derive(Debug, Clone)]
    pub struct MarkerBeaconTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: MarkerBeaconTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum MarkerBeaconTimeSliceTypeExtensionElementTypeContent {
        AbstractMarkerBeaconExtension(AbstractMarkerBeaconExtension),
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtension),
    }
    impl MarkerBeaconTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum NavaidTimeSliceContent2707Type {
        Type(CodeRunwayProtectionAreaType),
        Designator(TextDesignatorType),
        Name(TextNameType),
        FlightChecked(CodeYesNoType),
        Purpose(CodeFlightPurposeType),
        SignalPerformance(CodeSignalPerformanceILSType),
        CourseQuality(CodeCourseQualityILSType),
        IntegrityLevel(CodeIntegrityLevelILSType),
        TouchDownLiftOff(TouchDownLiftOffType),
        NavaidEquipment(NavaidEquipmentDistancePropertyType),
        Location(ElevatedPointPropertyType),
        RunwayDirection(RunwayDirectionType),
        ServedAirport(AirportHeliportPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct NavaidTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: NavaidTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NavaidTimeSliceTypeExtensionElementTypeContent {
        AbstractNavaidExtension(AbstractNavaidExtension),
    }
    impl NavaidTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum SdftimeSliceContent2742Type {
        Content2743(SdftimeSliceContent2743Type),
        Frequency(ValFrequencyType),
        MagneticBearing(ValBearingType),
        TrueBearing(ValBearingType),
    }
    #[derive(Debug, Clone)]
    pub struct SdftimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: SdftimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SdftimeSliceTypeExtensionElementTypeContent {
        AbstractSDFExtension(AbstractSDFExtension),
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtension),
    }
    impl SdftimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum NdbtimeSliceContent2768Type {
        Content2769(NdbtimeSliceContent2769Type),
        Frequency(ValFrequencyType),
        Class(AirspaceLayerClassPropertyType),
        EmissionBand(CodeEmissionBandType),
    }
    #[derive(Debug, Clone)]
    pub struct NdbtimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: NdbtimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NdbtimeSliceTypeExtensionElementTypeContent {
        AbstractNDBExtension(AbstractNDBExtension),
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtension),
    }
    impl NdbtimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum SpecialNavigationStationTimeSliceContent2794Type {
        Name(TextNameType),
        Type(CodeRunwayProtectionAreaType),
        Frequency(ValFrequencyType),
        Emission(CodeRadioEmissionType),
        SystemChain(SpecialNavigationSystemPropertyType),
        ResponsibleOrganisation(AirportHeliportResponsibilityOrganisationPropertyType),
        Position(CodeSideType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct SpecialNavigationStationTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: SpecialNavigationStationTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SpecialNavigationStationTimeSliceTypeExtensionElementTypeContent {
        AbstractSpecialNavigationStationExtension(AbstractSpecialNavigationStationExtension),
    }
    impl SpecialNavigationStationTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum VortimeSliceContent2812Type {
        Content2813(VortimeSliceContent2813Type),
        Type(CodeRunwayProtectionAreaType),
        Frequency(ValFrequencyType),
        ZeroBearingDirection(CodeNorthReferenceType),
        Declination(ValMagneticVariationType),
    }
    #[derive(Debug, Clone)]
    pub struct VortimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: VortimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum VortimeSliceTypeExtensionElementTypeContent {
        AbstractVORExtension(AbstractVORExtension),
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtension),
    }
    impl VortimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum TacantimeSliceContent2839Type {
        Content2840(TacantimeSliceContent2840Type),
        Channel(CodeCommunicationChannelType),
        Declination(ValMagneticVariationType),
    }
    #[derive(Debug, Clone)]
    pub struct TacantimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: TacantimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TacantimeSliceTypeExtensionElementTypeContent {
        AbstractTACANExtension(AbstractTACANExtension),
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtension),
    }
    impl TacantimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum SpecialNavigationSystemTimeSliceContent2864Type {
        Type(CodeRunwayProtectionAreaType),
        Designator(TextDesignatorType),
        Name(TextNameType),
        ResponsibleOrganisation(AirportHeliportResponsibilityOrganisationPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct SpecialNavigationSystemTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: SpecialNavigationSystemTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SpecialNavigationSystemTimeSliceTypeExtensionElementTypeContent {
        AbstractSpecialNavigationSystemExtension(AbstractSpecialNavigationSystemExtension),
    }
    impl SpecialNavigationSystemTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum DirectionFinderTimeSliceContent2912Type {
        Content2913(DirectionFinderTimeSliceContent2913Type),
        Doppler(CodeYesNoType),
        InformationProvision(InformationServicePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct DirectionFinderTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: DirectionFinderTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum DirectionFinderTimeSliceTypeExtensionElementTypeContent {
        AbstractDirectionFinderExtension(AbstractDirectionFinderExtension),
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtension),
    }
    impl DirectionFinderTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum DesignatedPointTimeSliceContent2937Type {
        Designator(TextDesignatorType),
        Type(CodeRunwayProtectionAreaType),
        Name(TextNameType),
        Location(ElevatedPointPropertyType),
        AimingPoint(ElevatedPointPropertyType),
        AirportHeliport(AirportHeliportType),
        RunwayPoint(RunwayCentrelinePointPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct DesignatedPointTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: DesignatedPointTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum DesignatedPointTimeSliceTypeExtensionElementTypeContent {
        AbstractDesignatedPointExtension(AbstractDesignatedPointExtension),
    }
    impl DesignatedPointTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum SignificantPointInAirspaceTimeSliceContent2954Type {
        Type(CodeRunwayProtectionAreaType),
        RelativeLocation(CodeAirspacePointPositionType),
        ContainingAirspace(AirspacePropertyType),
        Content2958(SignificantPointInAirspaceTimeSliceContent2958Type),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct SignificantPointInAirspaceTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: SignificantPointInAirspaceTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SignificantPointInAirspaceTimeSliceTypeExtensionElementTypeContent {
        AbstractSignificantPointInAirspaceExtension(AbstractSignificantPointInAirspaceExtension),
    }
    impl SignificantPointInAirspaceTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AeronauticalGroundLightTimeSliceContent2974Type {
        Name(TextNameType),
        Type(CodeRunwayProtectionAreaType),
        Colour(CodeColourType),
        Flashing(CodeYesNoType),
        StructureBeacon(VerticalStructurePropertyType),
        AerodromeBeacon(AirportHeliportPropertyType),
        Location(ElevatedPointPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AeronauticalGroundLightTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: AeronauticalGroundLightTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AeronauticalGroundLightTimeSliceTypeExtensionElementTypeContent {
        AbstractAeronauticalGroundLightExtension(AbstractAeronauticalGroundLightExtension),
    }
    impl AeronauticalGroundLightTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum OrganisationAuthorityTimeSliceContent3007Type {
        Name(TextNameType),
        Designator(TextDesignatorType),
        Type(CodeRunwayProtectionAreaType),
        Military(CodeMilitaryStatusType),
        Contact(ContactInformationPropertyType),
        RelatedOrganisationAuthority(OrganisationAuthorityAssociationPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct OrganisationAuthorityTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: OrganisationAuthorityTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum OrganisationAuthorityTimeSliceTypeExtensionElementTypeContent {
        AbstractOrganisationAuthorityExtension(AbstractOrganisationAuthorityExtension),
    }
    impl OrganisationAuthorityTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum UnitTimeSliceContent3032Type {
        Name(TextNameType),
        Type(CodeRunwayProtectionAreaType),
        CompliantICAO(CodeYesNoType),
        Designator(TextDesignatorType),
        Military(CodeMilitaryStatusType),
        Position(CodeSideType),
        AirportLocation(AirportHeliportPropertyType),
        OwnerOrganisation(OrganisationAuthorityPropertyType),
        Contact(ContactInformationPropertyType),
        RelatedUnit(UnitDependencyPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct UnitTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: UnitTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum UnitTimeSliceTypeExtensionElementTypeContent {
        AbstractUnitExtension(AbstractUnitExtension),
    }
    impl UnitTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ObstacleAreaTimeSliceContent3099Type {
        Type(CodeRunwayProtectionAreaType),
        ObstructionIdSurfaceCondition(CodeObstacleAssessmentSurfaceType),
        Content3102(ObstacleAreaTimeSliceContent3102Type),
        SurfaceExtent(ElevatedSurfacePropertyType),
        Obstacle(VerticalStructurePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ObstacleAreaTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: ObstacleAreaTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ObstacleAreaTimeSliceTypeExtensionElementTypeContent {
        AbstractObstacleAreaExtension(AbstractObstacleAreaExtension),
    }
    impl ObstacleAreaTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum VerticalStructureTimeSliceContent3117Type {
        Name(TextNameType),
        Type(CodeRunwayProtectionAreaType),
        Lighted(CodeYesNoType),
        MarkingICAOStandard(CodeYesNoType),
        Group(CodeYesNoType),
        Length(ValDistanceType),
        Width(ValDistanceType),
        Radius(ValDistanceType),
        LightingICAOStandard(CodeYesNoType),
        SynchronisedLighting(CodeYesNoType),
        Marker(MarkerBeaconPropertyType),
        Part(VerticalStructurePartPropertyType),
        HostedPassengerService(PassengerServicePropertyType),
        SupportedGroundLight(GroundLightSystemPropertyType),
        HostedNavaidEquipment(NavaidEquipmentPropertyType),
        HostedSpecialNavStation(SpecialNavigationStationPropertyType),
        HostedUnit(UnitPropertyType),
        HostedOrganisation(OrganisationAuthorityPropertyType),
        SupportedService(ServicePropertyType),
        Annotation(NotePropertyType),
        LightingAvailability(VerticalStructureLightingStatusPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct VerticalStructureTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: VerticalStructureTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum VerticalStructureTimeSliceTypeExtensionElementTypeContent {
        AbstractVerticalStructureExtension(AbstractVerticalStructureExtension),
    }
    impl VerticalStructureTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum CirclingAreaTimeSliceContent3170Type {
        Extent(ElevatedSurfacePropertyType),
        Approach(InstrumentApproachProcedurePropertyType),
        Condition(CodeMarkingConditionType),
        AircraftCategory(AircraftCharacteristicPropertyType),
        DesignSurface(ObstacleAssessmentAreaPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CirclingAreaTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: CirclingAreaTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum CirclingAreaTimeSliceTypeExtensionElementTypeContent {
        AbstractCirclingAreaExtension(AbstractCirclingAreaExtension),
    }
    impl CirclingAreaTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum TerminalArrivalAreaTimeSliceContent3240Type {
        ArrivalAreaType(CodeTAAType),
        OuterBufferWidth(ValDistanceType),
        LateralBufferWidth(ValDistanceType),
        Content3244(TerminalArrivalAreaTimeSliceContent3244Type),
        Content3251(TerminalArrivalAreaTimeSliceContent3251Type),
        Buffer(SurfacePropertyType),
        Sector(CircleSectorPropertyType),
        ApproachRNAV(InstrumentApproachProcedurePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TerminalArrivalAreaTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: TerminalArrivalAreaTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TerminalArrivalAreaTimeSliceTypeExtensionElementTypeContent {
        AbstractTerminalArrivalAreaExtension(AbstractTerminalArrivalAreaExtension),
    }
    impl TerminalArrivalAreaTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum InstrumentApproachProcedureTimeSliceContent3332Type {
        Content3333(InstrumentApproachProcedureTimeSliceContent3333Type),
        ApproachPrefix(CodeApproachPrefixType),
        ApproachType(CodeApproachType),
        MultipleIdentification(CodeUpperAlphaType),
        CopterTrack(ValBearingType),
        CirclingIdentification(CodeUpperAlphaType),
        CourseReversalInstruction(TextInstructionType),
        AdditionalEquipment(CodeApproachEquipmentAdditionalType),
        ChannelGNSS(ValChannelNumberType),
        Waasreliable(CodeYesNoType),
        Landing(LandingTakeoffAreaCollectionPropertyType),
        MissedInstruction(MissedApproachGroupPropertyType),
        FinalProfile(FinalProfileType),
    }
    #[derive(Debug, Clone)]
    pub struct InstrumentApproachProcedureTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: InstrumentApproachProcedureTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum InstrumentApproachProcedureTimeSliceTypeExtensionElementTypeContent {
        AbstractInstrumentApproachProcedureExtension(AbstractInstrumentApproachProcedureExtension),
        AbstractProcedureExtension(AbstractProcedureExtension),
    }
    impl InstrumentApproachProcedureTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum StandardInstrumentDepartureTimeSliceContent3398Type {
        Content3399(StandardInstrumentDepartureTimeSliceContent3399Type),
        Designator(TextDesignatorType),
        ContingencyRoute(CodeYesNoType),
        Takeoff(LandingTakeoffAreaCollectionPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct StandardInstrumentDepartureTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: StandardInstrumentDepartureTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum StandardInstrumentDepartureTimeSliceTypeExtensionElementTypeContent {
        AbstractStandardInstrumentDepartureExtension(AbstractStandardInstrumentDepartureExtension),
        AbstractProcedureExtension(AbstractProcedureExtension),
    }
    impl StandardInstrumentDepartureTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum NavigationAreaTimeSliceContent3428Type {
        NavigationAreaType(CodeNavigationAreaType),
        MinimumCeiling(ValDistanceVerticalType),
        MinimumVisibility(ValDistanceType),
        Departure(StandardInstrumentDeparturePropertyType),
        Sector(CircleSectorPropertyType),
        Content3434(NavigationAreaTimeSliceContent3434Type),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct NavigationAreaTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: NavigationAreaTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NavigationAreaTimeSliceTypeExtensionElementTypeContent {
        AbstractNavigationAreaExtension(AbstractNavigationAreaExtension),
    }
    impl NavigationAreaTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum StandardInstrumentArrivalTimeSliceContent3485Type {
        Content3486(StandardInstrumentArrivalTimeSliceContent3486Type),
        Designator(TextDesignatorType),
        Arrival(LandingTakeoffAreaCollectionPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct StandardInstrumentArrivalTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: StandardInstrumentArrivalTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum StandardInstrumentArrivalTimeSliceTypeExtensionElementTypeContent {
        AbstractStandardInstrumentArrivalExtension(AbstractStandardInstrumentArrivalExtension),
        AbstractProcedureExtension(AbstractProcedureExtension),
    }
    impl StandardInstrumentArrivalTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum NavigationAreaRestrictionTimeSliceContent3525Type {
        Type(CodeRunwayProtectionAreaType),
        Procedure(ProcedurePropertyType),
        DesignSurface(ObstacleAssessmentAreaPropertyType),
        SectorDefinition(CircleSectorPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct NavigationAreaRestrictionTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: NavigationAreaRestrictionTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NavigationAreaRestrictionTimeSliceTypeExtensionElementTypeContent {
        AbstractNavigationAreaRestrictionExtension(AbstractNavigationAreaRestrictionExtension),
    }
    impl NavigationAreaRestrictionTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ArrivalFeederLegTimeSliceContent3567Type {
        Content3568(ArrivalFeederLegTimeSliceContent3568Type),
        RequiredNavigationPerformance(CodeRNPType),
    }
    #[derive(Debug, Clone)]
    pub struct ArrivalFeederLegTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: ArrivalFeederLegTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ArrivalFeederLegTimeSliceTypeExtensionElementTypeContent {
        AbstractArrivalFeederLegExtension(AbstractArrivalFeederLegExtension),
        AbstractApproachLegExtension(AbstractApproachLegExtension),
        AbstractSegmentLegExtension(AbstractSegmentLegExtension),
    }
    impl ArrivalFeederLegTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ArrivalLegTimeSliceContent3612Type {
        Content3613(ArrivalLegTimeSliceContent3613Type),
        RequiredNavigationPerformance(CodeRNPType),
        Arrival(LandingTakeoffAreaCollectionPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ArrivalLegTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: ArrivalLegTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ArrivalLegTimeSliceTypeExtensionElementTypeContent {
        AbstractArrivalLegExtension(AbstractArrivalLegExtension),
        AbstractSegmentLegExtension(AbstractSegmentLegExtension),
    }
    impl ArrivalLegTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum DepartureLegTimeSliceContent3656Type {
        Content3657(DepartureLegTimeSliceContent3657Type),
        RequiredNavigationPerformance(CodeRNPType),
        MinimumObstacleClearanceAltitude(ValDistanceVerticalType),
        Departure(StandardInstrumentDeparturePropertyType),
        Condition(CodeMarkingConditionType),
    }
    #[derive(Debug, Clone)]
    pub struct DepartureLegTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: DepartureLegTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum DepartureLegTimeSliceTypeExtensionElementTypeContent {
        AbstractDepartureLegExtension(AbstractDepartureLegExtension),
        AbstractSegmentLegExtension(AbstractSegmentLegExtension),
    }
    impl DepartureLegTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum FinalLegTimeSliceContent3702Type {
        Content3703(FinalLegTimeSliceContent3703Type),
        GuidanceSystem(CodeFinalGuidanceType),
        LandingSystemCategory(CodeApproachGuidanceType),
        MinimumBaroVnavTemperature(ValTemperatureType),
        RnpDMEAuthorized(CodeYesNoType),
        CourseOffsetAngle(ValBearingType),
        CourseOffsetSide(CodeSideType),
        CourseCentrelineDistance(ValDistanceType),
        CourseOffsetDistance(ValDistanceType),
        CourseCentrelineIntersect(CodeRelativePositionType),
        Condition(CodeMarkingConditionType),
        Content3748(FinalLegTimeSliceContent3748Type),
        VisualDescentPoint(TerminalSegmentPointPropertyType),
        Fasdata(FasdataBlockPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct FinalLegTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: FinalLegTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FinalLegTimeSliceTypeExtensionElementTypeContent {
        AbstractFinalLegExtension(AbstractFinalLegExtension),
        AbstractApproachLegExtension(AbstractApproachLegExtension),
        AbstractSegmentLegExtension(AbstractSegmentLegExtension),
    }
    impl FinalLegTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum InitialLegTimeSliceContent3765Type {
        Content3766(InitialLegTimeSliceContent3766Type),
        RequiredNavigationPerformance(CodeRNPType),
    }
    #[derive(Debug, Clone)]
    pub struct InitialLegTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: InitialLegTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum InitialLegTimeSliceTypeExtensionElementTypeContent {
        AbstractInitialLegExtension(AbstractInitialLegExtension),
        AbstractApproachLegExtension(AbstractApproachLegExtension),
        AbstractSegmentLegExtension(AbstractSegmentLegExtension),
    }
    impl InitialLegTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum IntermediateLegTimeSliceContent3810Type {
        Content3811(IntermediateLegTimeSliceContent3811Type),
        RequiredNavigationPerformance(CodeRNPType),
    }
    #[derive(Debug, Clone)]
    pub struct IntermediateLegTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: IntermediateLegTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum IntermediateLegTimeSliceTypeExtensionElementTypeContent {
        AbstractIntermediateLegExtension(AbstractIntermediateLegExtension),
        AbstractApproachLegExtension(AbstractApproachLegExtension),
        AbstractSegmentLegExtension(AbstractSegmentLegExtension),
    }
    impl IntermediateLegTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum MissedApproachLegTimeSliceContent3855Type {
        Content3856(MissedApproachLegTimeSliceContent3856Type),
        Type(CodeRunwayProtectionAreaType),
        ThresholdAfterMAPT(CodeYesNoType),
        HeightMAPT(ValDistanceVerticalType),
        RequiredNavigationPerformance(CodeRNPType),
        Condition(CodeMarkingConditionType),
    }
    #[derive(Debug, Clone)]
    pub struct MissedApproachLegTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: MissedApproachLegTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum MissedApproachLegTimeSliceTypeExtensionElementTypeContent {
        AbstractMissedApproachLegExtension(AbstractMissedApproachLegExtension),
        AbstractApproachLegExtension(AbstractApproachLegExtension),
        AbstractSegmentLegExtension(AbstractSegmentLegExtension),
    }
    impl MissedApproachLegTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ProcedureDMETimeSliceContent3922Type {
        CriticalDME(CodeYesNoType),
        Satisfactory(CodeYesNoType),
        Dme(DmepropertyType),
        SegmentLeg(SegmentLegPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ProcedureDMETimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: ProcedureDMETimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ProcedureDMETimeSliceTypeExtensionElementTypeContent {
        AbstractProcedureDMEExtension(AbstractProcedureDMEExtension),
    }
    impl ProcedureDMETimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum SafeAltitudeAreaTimeSliceContent3936Type {
        SafeAreaType(CodeSafeAltitudeType),
        Content3938(SafeAltitudeAreaTimeSliceContent3938Type),
        Sector(CircleSectorPropertyType),
        Location(ElevatedPointPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct SafeAltitudeAreaTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: SafeAltitudeAreaTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SafeAltitudeAreaTimeSliceTypeExtensionElementTypeContent {
        AbstractSafeAltitudeAreaExtension(AbstractSafeAltitudeAreaExtension),
    }
    impl SafeAltitudeAreaTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum HoldingPatternTimeSliceContent3967Type {
        Type(CodeRunwayProtectionAreaType),
        OutboundCourse(ValBearingType),
        OutboundCourseType(CodeCourseType),
        InboundCourse(ValBearingType),
        TurnDirection(CodeDirectionTurnType),
        UpperLimit(ValDistanceVerticalType),
        UpperLimitReference(CodeVerticalReferenceType),
        LowerLimit(ValDistanceVerticalType),
        LowerLimitReference(CodeVerticalReferenceType),
        SpeedLimit(ValSpeedType),
        Instruction(TextInstructionType),
        NonStandardHolding(CodeYesNoType),
        Content3980(HoldingPatternTimeSliceContent3980Type),
        HoldingPoint(SegmentPointPropertyType),
        Extent(ElevatedSurfacePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct HoldingPatternTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: HoldingPatternTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum HoldingPatternTimeSliceTypeExtensionElementTypeContent {
        AbstractHoldingPatternExtension(AbstractHoldingPatternExtension),
    }
    impl HoldingPatternTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum UnplannedHoldingTimeSliceContent3995Type {
        UnplannedHolding(UnplannedHoldingPropertyType),
        AuthorizedAltitude(ValDistanceVerticalType),
        AltitudeReference(CodeVerticalReferenceType),
        ControlledAirspace(CodeYesNoType),
        HoldingPoint(SegmentPointPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct UnplannedHoldingTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: UnplannedHoldingTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum UnplannedHoldingTimeSliceTypeExtensionElementTypeContent {
        AbstractUnplannedHoldingExtension(AbstractUnplannedHoldingExtension),
    }
    impl UnplannedHoldingTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceBorderCrossingTimeSliceContent4026Type {
        ExitedAirspace(AirspacePropertyType),
        EnteredAirspace(AirspacePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceBorderCrossingTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: AirspaceBorderCrossingTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceBorderCrossingTimeSliceTypeExtensionElementTypeContent {
        AbstractAirspaceBorderCrossingExtension(AbstractAirspaceBorderCrossingExtension),
    }
    impl AirspaceBorderCrossingTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum FlightRestrictionTimeSliceContent4104Type {
        Designator(TextDesignatorType),
        Type(CodeRunwayProtectionAreaType),
        Instruction(TextInstructionType),
        Flight(FlightCharacteristicPropertyType),
        RegulatedRoute(FlightRestrictionRoutePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct FlightRestrictionTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: FlightRestrictionTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FlightRestrictionTimeSliceTypeExtensionElementTypeContent {
        AbstractFlightRestrictionExtension(AbstractFlightRestrictionExtension),
    }
    impl FlightRestrictionTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RouteSegmentTimeSliceContent4187Type {
        Level(StandardLevelPropertyType),
        UpperLimit(ValDistanceVerticalType),
        UpperLimitReference(CodeVerticalReferenceType),
        LowerLimit(ValDistanceVerticalType),
        LowerLimitReference(CodeVerticalReferenceType),
        MinimumObstacleClearanceAltitude(ValDistanceVerticalType),
        PathType(CodeRouteSegmentPathType),
        TrueTrack(ValBearingType),
        MagneticTrack(ValBearingType),
        ReverseTrueTrack(ValBearingType),
        ReverseMagneticTrack(ValBearingType),
        Length(ValDistanceType),
        WidthLeft(ValDistanceType),
        WidthRight(ValDistanceType),
        TurnDirection(CodeDirectionTurnType),
        SignalGap(CodeYesNoType),
        MinimumEnrouteAltitude(ValDistanceVerticalType),
        MinimumCrossingAtEnd(ValDistanceVerticalType),
        MinimumCrossingAtEndReference(CodeVerticalReferenceType),
        MaximumCrossingAtEnd(ValDistanceVerticalType),
        MaximumCrossingAtEndReference(CodeVerticalReferenceType),
        NavigationType(CodeRouteNavigationType),
        RequiredNavigationPerformance(CodeRNPType),
        DesignatorSuffix(CodeRouteDesignatorSuffixType),
        Start(EnRouteSegmentPointPropertyType),
        RouteFormed(RoutePropertyType),
        EvaluationArea(ObstacleAssessmentAreaPropertyType),
        CurveExtent(CurvePropertyType),
        End(EnRouteSegmentPointPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RouteSegmentTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: RouteSegmentTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RouteSegmentTimeSliceTypeExtensionElementTypeContent {
        AbstractRouteSegmentExtension(AbstractRouteSegmentExtension),
    }
    impl RouteSegmentTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RouteDMETimeSliceContent4270Type {
        CriticalDME(CodeYesNoType),
        Satisfactory(CodeYesNoType),
        ReferencedDME(DmepropertyType),
        ApplicableRoutePortion(RoutePortionPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RouteDMETimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: RouteDMETimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RouteDMETimeSliceTypeExtensionElementTypeContent {
        AbstractRouteDMEExtension(AbstractRouteDMEExtension),
    }
    impl RouteDMETimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RouteTimeSliceContent4284Type {
        DesignatorPrefix(CodeRouteDesignatorPrefixType),
        DesignatorSecondLetter(CodeRouteDesignatorLetterType),
        DesignatorNumber(NoNumberType),
        MultipleIdentifier(CodeUpperAlphaType),
        LocationDesignator(TextDesignatorType),
        Name(TextNameType),
        Type(CodeRunwayProtectionAreaType),
        FlightRule(CodeFlightRuleType),
        InternationalUse(CodeRouteOriginType),
        MilitaryUse(CodeMilitaryStatusType),
        MilitaryTrainingType(CodeMilitaryTrainingType),
        UserOrganisation(OrganisationAuthorityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RouteTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: RouteTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RouteTimeSliceTypeExtensionElementTypeContent {
        AbstractRouteExtension(AbstractRouteExtension),
    }
    impl RouteTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ChangeOverPointTimeSliceContent4306Type {
        Distance(ValDistanceType),
        Content4308(ChangeOverPointTimeSliceContent4308Type),
        ApplicableRoutePortion(RoutePortionPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ChangeOverPointTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: ChangeOverPointTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ChangeOverPointTimeSliceTypeExtensionElementTypeContent {
        AbstractChangeOverPointExtension(AbstractChangeOverPointExtension),
    }
    impl ChangeOverPointTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AerialRefuellingTimeSliceContent4325Type {
        DesignatorPrefix(CodeRouteDesignatorPrefixType),
        DesignatorNumber(NoNumberType),
        DesignatorSuffix(CodeRouteDesignatorSuffixType),
        DesignatorDirection(CodeCardinalDirectionType),
        Name(TextNameType),
        Type(CodeRunwayProtectionAreaType),
        RadarBeaconSetting(NoNumberType),
        XbandRadarSetting(NoNumberType),
        TankerChannel(CodeTACANChannelType),
        ReceiverChannel(CodeTACANChannelType),
        HelicopterRoute(CodeYesNoType),
        SpecialRefuelling(CodeYesNoType),
        BidirectionalUse(CodeYesNoType),
        ReverseDirectionTurn(CodeDirectionTurnType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        ProtectingAirspace(AirspacePropertyType),
        Track(AerialRefuellingTrackPropertyType),
        Anchor(AerialRefuellingAnchorPropertyType),
        OppositeTrack(AerialRefuellingPropertyType),
        ManagingOrganisation(AuthorityForAerialRefuellingPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AerialRefuellingTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: AerialRefuellingTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AerialRefuellingTimeSliceTypeExtensionElementTypeContent {
        AbstractAerialRefuellingExtension(AbstractAerialRefuellingExtension),
    }
    impl AerialRefuellingTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RulesProceduresTimeSliceContent4416Type {
        Category(CodeFireFightingType),
        Title(TextNameType),
        Content(Xhtmltype),
        AffectedLocation(AirportHeliportPropertyType),
        AffectedArea(AirspacePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RulesProceduresTimeSliceTypeExtensionElementType {
        pub owns: bool,
        pub content: RulesProceduresTimeSliceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RulesProceduresTimeSliceTypeExtensionElementTypeContent {
        AbstractRulesProceduresExtension(AbstractRulesProceduresExtension),
    }
    impl RulesProceduresTimeSliceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RunwayProtectAreaTimeSliceContent33Type {
        Width(ValDistanceType),
        Length(ValDistanceType),
        Lighting(CodeYesNoType),
        ObstacleFree(CodeYesNoType),
        SurfaceProperties(SurfaceCharacteristicsPropertyType),
        Extent(ElevatedSurfacePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeRunwayProtectionAreaType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeRunwayProtectionAreaBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeStatusOperationsType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeStatusOperationsBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct RunwayDirectionPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl RunwayDirectionPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRunwayProtectAreaExtension(
        pub Box<dyn AbstractRunwayProtectAreaExtensionTrait>,
    );
    pub trait AbstractRunwayProtectAreaExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractAirportHeliportProtectionAreaExtension(
        pub Box<dyn AbstractAirportHeliportProtectionAreaExtensionTrait>,
    );
    pub trait AbstractAirportHeliportProtectionAreaExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct TextDesignatorType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: TextDesignatorBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct ValBearingType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct ValAngleType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct CodeDirectionTurnType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeDirectionTurnBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct ValSlopeType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct ValDistanceVerticalType {
        pub uom: Option<UomDistanceVerticalType>,
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: String,
    }
    #[derive(Debug, Clone)]
    pub struct ValDistanceType {
        pub uom: Option<UomDistanceType>,
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct CodeRunwayMarkingType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeRunwayMarkingBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeMarkingConditionType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeMarkingConditionBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeLightingJARType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeLightingJARBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeApproachGuidanceType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeApproachGuidanceBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct RunwayPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl RunwayPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayElementPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl RunwayElementPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct NotePropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: NotePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NotePropertyTypeContent {
        Note(NoteType),
    }
    #[derive(Debug, Clone)]
    pub struct ManoeuvringAreaAvailabilityPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: ManoeuvringAreaAvailabilityPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ManoeuvringAreaAvailabilityPropertyTypeContent {
        ManoeuvringAreaAvailability(ManoeuvringAreaAvailabilityType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRunwayDirectionExtension(pub Box<dyn AbstractRunwayDirectionExtensionTrait>);
    pub trait AbstractRunwayDirectionExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeRunwayPointRoleType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeRunwayPointRoleBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct ElevatedPointPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: ElevatedPointPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ElevatedPointPropertyTypeContent {
        ElevatedPoint(ElevatedPointType),
    }
    #[derive(Debug, Clone)]
    pub struct RunwayDeclaredDistancePropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: RunwayDeclaredDistancePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayDeclaredDistancePropertyTypeContent {
        RunwayDeclaredDistance(RunwayDeclaredDistanceType),
    }
    #[derive(Debug, Clone)]
    pub struct NavaidEquipmentDistancePropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: NavaidEquipmentDistancePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NavaidEquipmentDistancePropertyTypeContent {
        NavaidEquipmentDistance(NavaidEquipmentDistanceType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRunwayCentrelinePointExtension(
        pub Box<dyn AbstractRunwayCentrelinePointExtensionTrait>,
    );
    pub trait AbstractRunwayCentrelinePointExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct ValDistanceSignedType {
        pub uom: Option<UomDistanceType>,
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct SurfaceCharacteristicsPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: SurfaceCharacteristicsPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SurfaceCharacteristicsPropertyTypeContent {
        SurfaceCharacteristics(SurfaceCharacteristicsType),
    }
    #[derive(Debug, Clone)]
    pub struct AirportHeliportPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl AirportHeliportPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayContaminationPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: RunwayContaminationPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayContaminationPropertyTypeContent {
        RunwayContamination(RunwayContaminationType),
    }
    #[derive(Debug, Clone)]
    pub struct RunwaySectionContaminationPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: RunwaySectionContaminationPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwaySectionContaminationPropertyTypeContent {
        RunwaySectionContamination(RunwaySectionContaminationType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRunwayExtension(pub Box<dyn AbstractRunwayExtensionTrait>);
    pub trait AbstractRunwayExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeArrestingGearEngageDeviceType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeArrestingGearEngageDeviceBaseType,
    }
    #[derive(Debug, Clone)]
    pub enum ArrestingGearTimeSliceContent129Type {
        ExtentCurveExtent(ElevatedCurvePropertyType),
        ExtentSurfaceExtent(ElevatedSurfacePropertyType),
        ExtentPointExtent(ElevatedPointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractArrestingGearExtension(pub Box<dyn AbstractArrestingGearExtensionTrait>);
    pub trait AbstractArrestingGearExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeGradeSeparationType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeGradeSeparationBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct ElevatedSurfacePropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: ElevatedSurfacePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ElevatedSurfacePropertyTypeContent {
        ElevatedSurface(ElevatedSurfaceType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRunwayElementExtension(pub Box<dyn AbstractRunwayElementExtensionTrait>);
    pub trait AbstractRunwayElementExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum VisualGlideSlopeIndicatorTimeSliceContent162Type {
        EmergencyLighting(CodeYesNoType),
        IntensityLevel(CodeLightIntensityType),
        Colour(CodeColourType),
        Element(LightElementPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeSideType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeSideBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct NoNumberType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: u32,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractVisualGlideSlopeIndicatorExtension(
        pub Box<dyn AbstractVisualGlideSlopeIndicatorExtensionTrait>,
    );
    pub trait AbstractVisualGlideSlopeIndicatorExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractGroundLightSystemExtension(
        pub Box<dyn AbstractGroundLightSystemExtensionTrait>,
    );
    pub trait AbstractGroundLightSystemExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeRVRReadingType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeRVRReadingBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRunwayVisualRangeExtension(
        pub Box<dyn AbstractRunwayVisualRangeExtensionTrait>,
    );
    pub trait AbstractRunwayVisualRangeExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractRunwayBlastPadExtension(pub Box<dyn AbstractRunwayBlastPadExtensionTrait>);
    pub trait AbstractRunwayBlastPadExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeHoldingCategoryType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeHoldingCategoryBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct GuidanceLinePropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl GuidanceLinePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTaxiHoldingPositionExtension(
        pub Box<dyn AbstractTaxiHoldingPositionExtensionTrait>,
    );
    pub trait AbstractTaxiHoldingPositionExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct TaxiwayContaminationPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: TaxiwayContaminationPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayContaminationPropertyTypeContent {
        TaxiwayContamination(TaxiwayContaminationType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTaxiwayExtension(pub Box<dyn AbstractTaxiwayExtensionTrait>);
    pub trait AbstractTaxiwayExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct TaxiwayPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl TaxiwayPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTaxiwayElementExtension(pub Box<dyn AbstractTaxiwayElementExtensionTrait>);
    pub trait AbstractTaxiwayElementExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct ValSpeedType {
        pub uom: Option<UomSpeedType>,
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct CodeDirectionType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeDirectionBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct TouchDownLiftOffPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl TouchDownLiftOffPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayCentrelinePointPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl RunwayCentrelinePointPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct ApronPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl ApronPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AircraftStandPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl AircraftStandPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractGuidanceLineExtension(pub Box<dyn AbstractGuidanceLineExtensionTrait>);
    pub trait AbstractGuidanceLineExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct TextNameType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: TextNameBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractApronExtension(pub Box<dyn AbstractApronExtensionTrait>);
    pub trait AbstractApronExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AirportSuppliesServicePropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl AirportSuppliesServicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractApronElementExtension(pub Box<dyn AbstractApronElementExtensionTrait>);
    pub trait AbstractApronElementExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeVisualDockingGuidanceType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeVisualDockingGuidanceBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct ApronElementPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl ApronElementPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAircraftStandExtension(pub Box<dyn AbstractAircraftStandExtensionTrait>);
    pub trait AbstractAircraftStandExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractRoadExtension(pub Box<dyn AbstractRoadExtensionTrait>);
    pub trait AbstractRoadExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractDeicingAreaExtension(pub Box<dyn AbstractDeicingAreaExtensionTrait>);
    pub trait AbstractDeicingAreaExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractPassengerLoadingBridgeExtension(
        pub Box<dyn AbstractPassengerLoadingBridgeExtensionTrait>,
    );
    pub trait AbstractPassengerLoadingBridgeExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffSafeAreaTimeSliceContent479Type {
        Width(ValDistanceType),
        Length(ValDistanceType),
        Lighting(CodeYesNoType),
        ObstacleFree(CodeYesNoType),
        SurfaceProperties(SurfaceCharacteristicsPropertyType),
        Extent(ElevatedSurfacePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTouchDownLiftOffSafeAreaExtension(
        pub Box<dyn AbstractTouchDownLiftOffSafeAreaExtensionTrait>,
    );
    pub trait AbstractTouchDownLiftOffSafeAreaExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeHelicopterPerformanceType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeHelicopterPerformanceBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTouchDownLiftOffExtension(
        pub Box<dyn AbstractTouchDownLiftOffExtensionTrait>,
    );
    pub trait AbstractTouchDownLiftOffExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum ApronLightSystemTimeSliceContent520Type {
        EmergencyLighting(CodeYesNoType),
        IntensityLevel(CodeLightIntensityType),
        Colour(CodeColourType),
        Element(LightElementPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractApronLightSystemExtension(
        pub Box<dyn AbstractApronLightSystemExtensionTrait>,
    );
    pub trait AbstractApronLightSystemExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum TaxiwayLightSystemTimeSliceContent538Type {
        EmergencyLighting(CodeYesNoType),
        IntensityLevel(CodeLightIntensityType),
        Colour(CodeColourType),
        Element(LightElementPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTaxiwayLightSystemExtension(
        pub Box<dyn AbstractTaxiwayLightSystemExtensionTrait>,
    );
    pub trait AbstractTaxiwayLightSystemExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum RunwayDirectionLightSystemTimeSliceContent556Type {
        EmergencyLighting(CodeYesNoType),
        IntensityLevel(CodeLightIntensityType),
        Colour(CodeColourType),
        Element(LightElementPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRunwayDirectionLightSystemExtension(
        pub Box<dyn AbstractRunwayDirectionLightSystemExtensionTrait>,
    );
    pub trait AbstractRunwayDirectionLightSystemExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffLightSystemTimeSliceContent574Type {
        EmergencyLighting(CodeYesNoType),
        IntensityLevel(CodeLightIntensityType),
        Colour(CodeColourType),
        Element(LightElementPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTouchDownLiftOffLightSystemExtension(
        pub Box<dyn AbstractTouchDownLiftOffLightSystemExtensionTrait>,
    );
    pub trait AbstractTouchDownLiftOffLightSystemExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum GuidanceLineLightSystemTimeSliceContent592Type {
        EmergencyLighting(CodeYesNoType),
        IntensityLevel(CodeLightIntensityType),
        Colour(CodeColourType),
        Element(LightElementPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractGuidanceLineLightSystemExtension(
        pub Box<dyn AbstractGuidanceLineLightSystemExtensionTrait>,
    );
    pub trait AbstractGuidanceLineLightSystemExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum RunwayProtectAreaLightSystemTimeSliceContent609Type {
        EmergencyLighting(CodeYesNoType),
        IntensityLevel(CodeLightIntensityType),
        Colour(CodeColourType),
        Element(LightElementPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RunwayProtectAreaPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl RunwayProtectAreaPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRunwayProtectAreaLightSystemExtension(
        pub Box<dyn AbstractRunwayProtectAreaLightSystemExtensionTrait>,
    );
    pub trait AbstractRunwayProtectAreaLightSystemExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum TaxiHoldingPositionLightSystemTimeSliceContent627Type {
        EmergencyLighting(CodeYesNoType),
        IntensityLevel(CodeLightIntensityType),
        Colour(CodeColourType),
        Element(LightElementPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TaxiHoldingPositionPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl TaxiHoldingPositionPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTaxiHoldingPositionLightSystemExtension(
        pub Box<dyn AbstractTaxiHoldingPositionLightSystemExtensionTrait>,
    );
    pub trait AbstractTaxiHoldingPositionLightSystemExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum ApproachLightingSystemTimeSliceContent666Type {
        EmergencyLighting(CodeYesNoType),
        IntensityLevel(CodeLightIntensityType),
        Colour(CodeColourType),
        Element(LightElementPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeApproachLightingICAOType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeApproachLightingICAOBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractApproachLightingSystemExtension(
        pub Box<dyn AbstractApproachLightingSystemExtensionTrait>,
    );
    pub trait AbstractApproachLightingSystemExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum TaxiwayMarkingTimeSliceContent702Type {
        MarkingICAOStandard(CodeYesNoType),
        Condition(CodeMarkingConditionType),
        Element(LightElementPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeTaxiwaySectionType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeTaxiwaySectionBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct TaxiwayElementPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl TaxiwayElementPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTaxiwayMarkingExtension(pub Box<dyn AbstractTaxiwayMarkingExtensionTrait>);
    pub trait AbstractTaxiwayMarkingExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractMarkingExtension(pub Box<dyn AbstractMarkingExtensionTrait>);
    pub trait AbstractMarkingExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum ApronMarkingTimeSliceContent719Type {
        MarkingICAOStandard(CodeYesNoType),
        Condition(CodeMarkingConditionType),
        Element(LightElementPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractApronMarkingExtension(pub Box<dyn AbstractApronMarkingExtensionTrait>);
    pub trait AbstractApronMarkingExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum AirportProtectionAreaMarkingTimeSliceContent735Type {
        MarkingICAOStandard(CodeYesNoType),
        Condition(CodeMarkingConditionType),
        Element(LightElementPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AirportHeliportProtectionAreaPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl AirportHeliportProtectionAreaPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAirportProtectionAreaMarkingExtension(
        pub Box<dyn AbstractAirportProtectionAreaMarkingExtensionTrait>,
    );
    pub trait AbstractAirportProtectionAreaMarkingExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffMarkingTimeSliceContent751Type {
        MarkingICAOStandard(CodeYesNoType),
        Condition(CodeMarkingConditionType),
        Element(LightElementPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTouchDownLiftOffMarkingExtension(
        pub Box<dyn AbstractTouchDownLiftOffMarkingExtensionTrait>,
    );
    pub trait AbstractTouchDownLiftOffMarkingExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum RunwayMarkingTimeSliceContent767Type {
        MarkingICAOStandard(CodeYesNoType),
        Condition(CodeMarkingConditionType),
        Element(LightElementPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRunwayMarkingExtension(pub Box<dyn AbstractRunwayMarkingExtensionTrait>);
    pub trait AbstractRunwayMarkingExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum GuidanceLineMarkingTimeSliceContent783Type {
        MarkingICAOStandard(CodeYesNoType),
        Condition(CodeMarkingConditionType),
        Element(LightElementPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractGuidanceLineMarkingExtension(
        pub Box<dyn AbstractGuidanceLineMarkingExtensionTrait>,
    );
    pub trait AbstractGuidanceLineMarkingExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum DeicingAreaMarkingTimeSliceContent798Type {
        MarkingICAOStandard(CodeYesNoType),
        Condition(CodeMarkingConditionType),
        Element(LightElementPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct DeicingAreaPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl DeicingAreaPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractDeicingAreaMarkingExtension(
        pub Box<dyn AbstractDeicingAreaMarkingExtensionTrait>,
    );
    pub trait AbstractDeicingAreaMarkingExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum TaxiHoldingPositionMarkingTimeSliceContent813Type {
        MarkingICAOStandard(CodeYesNoType),
        Condition(CodeMarkingConditionType),
        Element(LightElementPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTaxiHoldingPositionMarkingExtension(
        pub Box<dyn AbstractTaxiHoldingPositionMarkingExtensionTrait>,
    );
    pub trait AbstractTaxiHoldingPositionMarkingExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum StandMarkingTimeSliceContent828Type {
        MarkingICAOStandard(CodeYesNoType),
        Condition(CodeMarkingConditionType),
        Element(LightElementPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractStandMarkingExtension(pub Box<dyn AbstractStandMarkingExtensionTrait>);
    pub trait AbstractStandMarkingExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractFloatingDockSiteExtension(
        pub Box<dyn AbstractFloatingDockSiteExtensionTrait>,
    );
    pub trait AbstractFloatingDockSiteExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeColourType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeColourBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct SeaplaneLandingAreaPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl SeaplaneLandingAreaPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractMarkingBuoyExtension(pub Box<dyn AbstractMarkingBuoyExtensionTrait>);
    pub trait AbstractMarkingBuoyExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct SeaplaneRampSitePropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl SeaplaneRampSitePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct FloatingDockSitePropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl FloatingDockSitePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSeaplaneLandingAreaExtension(
        pub Box<dyn AbstractSeaplaneLandingAreaExtensionTrait>,
    );
    pub trait AbstractSeaplaneLandingAreaExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct ElevatedCurvePropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: ElevatedCurvePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ElevatedCurvePropertyTypeContent {
        ElevatedCurve(ElevatedCurveType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSeaplaneRampSiteExtension(
        pub Box<dyn AbstractSeaplaneRampSiteExtensionTrait>,
    );
    pub trait AbstractSeaplaneRampSiteExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct DateType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: String,
    }
    #[derive(Debug, Clone)]
    pub struct CodeSystemActivationType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeSystemActivationBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractWorkAreaExtension(pub Box<dyn AbstractWorkAreaExtensionTrait>);
    pub trait AbstractWorkAreaExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractSurveyControlPointExtension(
        pub Box<dyn AbstractSurveyControlPointExtensionTrait>,
    );
    pub trait AbstractSurveyControlPointExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractNonMovementAreaExtension(pub Box<dyn AbstractNonMovementAreaExtensionTrait>);
    pub trait AbstractNonMovementAreaExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractAirportHeliportCollocationExtension(
        pub Box<dyn AbstractAirportHeliportCollocationExtensionTrait>,
    );
    pub trait AbstractAirportHeliportCollocationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeICAOType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeICAOBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeIATAType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeIATABaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeMilitaryOperationsType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeMilitaryOperationsBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeVerticalDatumType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeVerticalDatumBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct ValMagneticVariationType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct DateYearType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: String,
    }
    #[derive(Debug, Clone)]
    pub struct ValMagneticVariationChangeType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct ValTemperatureType {
        pub uom: Option<UomTemperatureType>,
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct ValFLType {
        pub uom: Option<UomFLType>,
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: u32,
    }
    #[derive(Debug, Clone)]
    pub struct CityPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CityPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum CityPropertyTypeContent {
        City(CityType),
    }
    #[derive(Debug, Clone)]
    pub struct AirportHeliportResponsibilityOrganisationPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: AirportHeliportResponsibilityOrganisationPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportResponsibilityOrganisationPropertyTypeContent {
        AirportHeliportResponsibilityOrganisation(AirportHeliportResponsibilityOrganisationType),
    }
    #[derive(Debug, Clone)]
    pub struct AltimeterSourcePropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl AltimeterSourcePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct ContactInformationPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: ContactInformationPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ContactInformationPropertyTypeContent {
        ContactInformation(ContactInformationType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAirportHeliportExtension(pub Box<dyn AbstractAirportHeliportExtensionTrait>);
    pub trait AbstractAirportHeliportExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractAltimeterSourceExtension(pub Box<dyn AbstractAltimeterSourceExtensionTrait>);
    pub trait AbstractAltimeterSourceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct TextInstructionType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: TextInstructionBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAirportHotSpotExtension(pub Box<dyn AbstractAirportHotSpotExtensionTrait>);
    pub trait AbstractAirportHotSpotExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AirspacePropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl AirspacePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAuthorityForAirspaceExtension(
        pub Box<dyn AbstractAuthorityForAirspaceExtensionTrait>,
    );
    pub trait AbstractAuthorityForAirspaceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AirspaceLayerClassPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: AirspaceLayerClassPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceLayerClassPropertyTypeContent {
        AirspaceLayerClass(AirspaceLayerClassType),
    }
    #[derive(Debug, Clone)]
    pub struct RoutePropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl RoutePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceGeometryComponentPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: AirspaceGeometryComponentPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceGeometryComponentPropertyTypeContent {
        AirspaceGeometryComponent(AirspaceGeometryComponentType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAirspaceExtension(pub Box<dyn AbstractAirspaceExtensionTrait>);
    pub trait AbstractAirspaceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CurvePropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CurvePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum CurvePropertyTypeContent {
        Curve(Curve),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractGeoBorderExtension(pub Box<dyn AbstractGeoBorderExtensionTrait>);
    pub trait AbstractGeoBorderExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractElevatedCurveExtension(pub Box<dyn AbstractElevatedCurveExtensionTrait>);
    pub trait AbstractElevatedCurveExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractElevatedPointExtension(pub Box<dyn AbstractElevatedPointExtensionTrait>);
    pub trait AbstractElevatedPointExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractElevatedSurfaceExtension(pub Box<dyn AbstractElevatedSurfaceExtensionTrait>);
    pub trait AbstractElevatedSurfaceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum PrecisionApproachRadarTimeSliceContent1468Type {
        Name(TextNameType),
        SerialNumber(TextDesignatorType),
        Range(ValDistanceType),
        RangeAccuracy(ValDistanceType),
        DualChannel(CodeYesNoType),
        MovingTargetIndicator(CodeYesNoType),
        StandbyPower(CodeStandbyPowerType),
        Digital(CodeYesNoType),
        MilitaryUseOnly(CodeYesNoType),
        SpecialUseOnly(CodeYesNoType),
        SpecialAircraftOnly(CodeYesNoType),
        MagneticVariation(ValMagneticVariationType),
        MagneticVariationAccuracy(ValAngleType),
        DateMagneticVariation(DateYearType),
        Contact(ContactInformationPropertyType),
        Location(ElevatedPointPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CodePARType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodePARBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct ReflectorPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: ReflectorPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ReflectorPropertyTypeContent {
        Reflector(Box<ReflectorPropertyType>),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractPrecisionApproachRadarExtension(
        pub Box<dyn AbstractPrecisionApproachRadarExtensionTrait>,
    );
    pub trait AbstractPrecisionApproachRadarExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractRadarEquipmentExtension(pub Box<dyn AbstractRadarEquipmentExtensionTrait>);
    pub trait AbstractRadarEquipmentExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum PrimarySurveillanceRadarTimeSliceContent1500Type {
        Content1501(PrimarySurveillanceRadarTimeSliceContent1501Type),
        VerticalCoverageAltitude(ValDistanceVerticalType),
        VerticalCoverageDistance(ValDistanceType),
        VerticalCoverageAzimuth(ValBearingType),
        AntennaTiltFixed(CodeYesNoType),
        TiltAngle(ValAngleType),
        AutomatedRadarTerminalSystem(TextDesignatorType),
        GroundStation(SurveillanceGroundStationPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractPrimarySurveillanceRadarExtension(
        pub Box<dyn AbstractPrimarySurveillanceRadarExtensionTrait>,
    );
    pub trait AbstractPrimarySurveillanceRadarExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractSurveillanceRadarExtension(
        pub Box<dyn AbstractSurveillanceRadarExtensionTrait>,
    );
    pub trait AbstractSurveillanceRadarExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct RadarComponentPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: RadarComponentPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RadarComponentPropertyTypeContent {
        RadarComponent(RadarComponentType),
    }
    #[derive(Debug, Clone)]
    pub struct OrganisationAuthorityPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl OrganisationAuthorityPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRadarSystemExtension(pub Box<dyn AbstractRadarSystemExtensionTrait>);
    pub trait AbstractRadarSystemExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum SecondarySurveillanceRadarTimeSliceContent1573Type {
        Content1574(SecondarySurveillanceRadarTimeSliceContent1574Type),
        VerticalCoverageAltitude(ValDistanceVerticalType),
        VerticalCoverageDistance(ValDistanceType),
        VerticalCoverageAzimuth(ValBearingType),
        AntennaTiltFixed(CodeYesNoType),
        TiltAngle(ValAngleType),
        AutomatedRadarTerminalSystem(TextDesignatorType),
        GroundStation(SurveillanceGroundStationPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeTransponderType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeTransponderBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSecondarySurveillanceRadarExtension(
        pub Box<dyn AbstractSecondarySurveillanceRadarExtensionTrait>,
    );
    pub trait AbstractSecondarySurveillanceRadarExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeVerticalReferenceType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeVerticalReferenceBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct SegmentPointPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: SegmentPointPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SegmentPointPropertyTypeContent {
        AbstractSegmentPoint(AbstractSegmentPoint),
    }
    #[derive(Debug, Clone)]
    pub struct UnplannedHoldingPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl UnplannedHoldingPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct HoldingPatternPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl HoldingPatternPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct ObstacleAssessmentAreaPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: ObstacleAssessmentAreaPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ObstacleAssessmentAreaPropertyTypeContent {
        ObstacleAssessmentArea(ObstacleAssessmentAreaType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractHoldingAssessmentExtension(
        pub Box<dyn AbstractHoldingAssessmentExtensionTrait>,
    );
    pub trait AbstractHoldingAssessmentExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractStandardLevelTableExtension(
        pub Box<dyn AbstractStandardLevelTableExtensionTrait>,
    );
    pub trait AbstractStandardLevelTableExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeFlightRuleType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeFlightRuleBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeNorthReferenceType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeNorthReferenceBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct StandardLevelColumnPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl StandardLevelColumnPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractStandardLevelSectorExtension(
        pub Box<dyn AbstractStandardLevelSectorExtensionTrait>,
    );
    pub trait AbstractStandardLevelSectorExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeLevelSeriesType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeLevelSeriesBaseType,
    }
    #[derive(Debug, Clone)]
    pub enum UomDistanceVerticalType {
        Ft,
        M,
        Fl,
        Sm,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct CodeRVSMType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeRVSMBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct StandardLevelPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: StandardLevelPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum StandardLevelPropertyTypeContent {
        StandardLevel(StandardLevelType),
    }
    #[derive(Debug, Clone)]
    pub struct StandardLevelTablePropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl StandardLevelTablePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractStandardLevelColumnExtension(
        pub Box<dyn AbstractStandardLevelColumnExtensionTrait>,
    );
    pub trait AbstractStandardLevelColumnExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeRadioSignalType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeRadioSignalBaseType,
    }
    #[derive(Debug, Clone)]
    pub enum RadioFrequencyAreaTimeSliceContent1754Type {
        EquipmentNavaidEquipment(NavaidEquipmentPropertyType),
        EquipmentFrequency(RadioCommunicationChannelPropertyType),
        EquipmentSpecialNavigationStation(SpecialNavigationStationPropertyType),
        EquipmentPrecisionApproachRadar(PrecisionApproachRadarPropertyType),
        EquipmentRadar(SecondarySurveillanceRadarPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CircleSectorPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CircleSectorPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum CircleSectorPropertyTypeContent {
        CircleSector(CircleSectorType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRadioFrequencyAreaExtension(
        pub Box<dyn AbstractRadioFrequencyAreaExtensionTrait>,
    );
    pub trait AbstractRadioFrequencyAreaExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct DateMonthDayType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: String,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSpecialDateExtension(pub Box<dyn AbstractSpecialDateExtensionTrait>);
    pub trait AbstractSpecialDateExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeCommunicationModeType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeCommunicationModeBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeFacilityRankingType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeFacilityRankingBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct ValFrequencyType {
        pub uom: Option<UomFrequencyType>,
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct CodeCommunicationChannelType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: String,
    }
    #[derive(Debug, Clone)]
    pub struct CodeRadioEmissionType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeRadioEmissionBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeCommunicationDirectionType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeCommunicationDirectionBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRadioCommunicationChannelExtension(
        pub Box<dyn AbstractRadioCommunicationChannelExtensionTrait>,
    );
    pub trait AbstractRadioCommunicationChannelExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct ValDurationType {
        pub uom: Option<UomDurationType>,
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct CodeIntensityStandByType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeIntensityStandByBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct LightActivationPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: LightActivationPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum LightActivationPropertyTypeContent {
        LightActivation(LightActivationType),
    }
    #[derive(Debug, Clone)]
    pub struct GroundLightSystemPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl GroundLightSystemPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractPilotControlledLightingExtension(
        pub Box<dyn AbstractPilotControlledLightingExtensionTrait>,
    );
    pub trait AbstractPilotControlledLightingExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum InformationServiceTimeSliceContent2021Type {
        FlightOperations(CodeFlightDestinationType),
        Rank(CodeFacilityRankingType),
        CompliantICAO(CodeYesNoType),
        Name(TextNameType),
        Location(ElevatedPointPropertyType),
        ServiceProvider(UnitPropertyType),
        CallSign(TextNameType),
        RadioCommunication(RadioCommunicationChannelPropertyType),
        GroundCommunication(ContactInformationPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TextPhoneType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: String,
    }
    #[derive(Debug, Clone)]
    pub struct VorpropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl VorpropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RoutePortionPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: RoutePortionPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RoutePortionPropertyTypeContent {
        RoutePortion(RoutePortionType),
    }
    #[derive(Debug, Clone)]
    pub struct ProcedurePropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl ProcedurePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AerialRefuellingPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl AerialRefuellingPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractInformationServiceExtension(
        pub Box<dyn AbstractInformationServiceExtensionTrait>,
    );
    pub trait AbstractInformationServiceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractServiceExtension(pub Box<dyn AbstractServiceExtensionTrait>);
    pub trait AbstractServiceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum GroundTrafficControlServiceTimeSliceContent2054Type {
        Content2055(GroundTrafficControlServiceTimeSliceContent2055Type),
        RadarAssisted(CodeYesNoType),
        DataLinkEnabled(CodeYesNoType),
        DataLinkChannel(CodeCommunicationChannelType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractGroundTrafficControlServiceExtension(
        pub Box<dyn AbstractGroundTrafficControlServiceExtensionTrait>,
    );
    pub trait AbstractGroundTrafficControlServiceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractTrafficSeparationServiceExtension(
        pub Box<dyn AbstractTrafficSeparationServiceExtensionTrait>,
    );
    pub trait AbstractTrafficSeparationServiceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum AirTrafficControlServiceTimeSliceContent2081Type {
        Content2082(AirTrafficControlServiceTimeSliceContent2082Type),
        RadarAssisted(CodeYesNoType),
        DataLinkEnabled(CodeYesNoType),
        DataLinkChannel(CodeCommunicationChannelType),
    }
    #[derive(Debug, Clone)]
    pub struct DirectionFinderPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl DirectionFinderPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAirTrafficControlServiceExtension(
        pub Box<dyn AbstractAirTrafficControlServiceExtensionTrait>,
    );
    pub trait AbstractAirTrafficControlServiceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum AirTrafficManagementServiceTimeSliceContent2114Type {
        FlightOperations(CodeFlightDestinationType),
        Rank(CodeFacilityRankingType),
        CompliantICAO(CodeYesNoType),
        Name(TextNameType),
        Location(ElevatedPointPropertyType),
        ServiceProvider(UnitPropertyType),
        CallSign(TextNameType),
        RadioCommunication(RadioCommunicationChannelPropertyType),
        GroundCommunication(ContactInformationPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAirTrafficManagementServiceExtension(
        pub Box<dyn AbstractAirTrafficManagementServiceExtensionTrait>,
    );
    pub trait AbstractAirTrafficManagementServiceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum SearchRescueServiceTimeSliceContent2139Type {
        FlightOperations(CodeFlightDestinationType),
        Rank(CodeFacilityRankingType),
        CompliantICAO(CodeYesNoType),
        Name(TextNameType),
        Location(ElevatedPointPropertyType),
        ServiceProvider(UnitPropertyType),
        CallSign(TextNameType),
        RadioCommunication(RadioCommunicationChannelPropertyType),
        GroundCommunication(ContactInformationPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSearchRescueServiceExtension(
        pub Box<dyn AbstractSearchRescueServiceExtensionTrait>,
    );
    pub trait AbstractSearchRescueServiceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum PassengerServiceTimeSliceContent2164Type {
        Content2165(PassengerServiceTimeSliceContent2165Type),
        AirportHeliport(AirportHeliportType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractPassengerServiceExtension(
        pub Box<dyn AbstractPassengerServiceExtensionTrait>,
    );
    pub trait AbstractPassengerServiceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractAirportGroundServiceExtension(
        pub Box<dyn AbstractAirportGroundServiceExtensionTrait>,
    );
    pub trait AbstractAirportGroundServiceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum AircraftGroundServiceTimeSliceContent2188Type {
        Content2189(AircraftGroundServiceTimeSliceContent2189Type),
        AirportHeliport(AirportHeliportType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAircraftGroundServiceExtension(
        pub Box<dyn AbstractAircraftGroundServiceExtensionTrait>,
    );
    pub trait AbstractAircraftGroundServiceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum FireFightingServiceTimeSliceContent2212Type {
        Content2213(FireFightingServiceTimeSliceContent2213Type),
        AirportHeliport(AirportHeliportType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeFireFightingType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeFireFightingBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeAviationStandardsType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeAviationStandardsBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractFireFightingServiceExtension(
        pub Box<dyn AbstractFireFightingServiceExtensionTrait>,
    );
    pub trait AbstractFireFightingServiceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum AirportClearanceServiceTimeSliceContent2237Type {
        Content2238(AirportClearanceServiceTimeSliceContent2238Type),
        AirportHeliport(AirportHeliportType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAirportClearanceServiceExtension(
        pub Box<dyn AbstractAirportClearanceServiceExtensionTrait>,
    );
    pub trait AbstractAirportClearanceServiceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum AirportSuppliesServiceTimeSliceContent2261Type {
        Content2262(AirportSuppliesServiceTimeSliceContent2262Type),
        AirportHeliport(AirportHeliportType),
    }
    #[derive(Debug, Clone)]
    pub struct FuelPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: FuelPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FuelPropertyTypeContent {
        Fuel(FuelType),
    }
    #[derive(Debug, Clone)]
    pub struct OilPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: OilPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum OilPropertyTypeContent {
        Oil(OilType),
    }
    #[derive(Debug, Clone)]
    pub struct NitrogenPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: NitrogenPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NitrogenPropertyTypeContent {
        Nitrogen(NitrogenType),
    }
    #[derive(Debug, Clone)]
    pub struct OxygenPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: OxygenPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum OxygenPropertyTypeContent {
        Oxygen(OxygenType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAirportSuppliesServiceExtension(
        pub Box<dyn AbstractAirportSuppliesServiceExtensionTrait>,
    );
    pub trait AbstractAirportSuppliesServiceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeDirectionReferenceType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeDirectionReferenceBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeCardinalDirectionType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeCardinalDirectionBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct DesignatedPointPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl DesignatedPointPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AngleIndicationTimeSliceContent2416Type {
        PointChoiceFixDesignatedPoint(DesignatedPointPropertyType),
        PointChoiceNavaidSystem(NavaidPropertyType),
        PointChoiceAimingPoint(TouchDownLiftOffPropertyType),
        PointChoiceRunwayPoint(RunwayCentrelinePointPropertyType),
        PointChoiceAirportReferencePoint(AirportHeliportPropertyType),
        PointChoicePosition(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAngleIndicationExtension(pub Box<dyn AbstractAngleIndicationExtensionTrait>);
    pub trait AbstractAngleIndicationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum DistanceIndicationTimeSliceContent2437Type {
        PointChoiceFixDesignatedPoint(DesignatedPointPropertyType),
        PointChoiceNavaidSystem(NavaidPropertyType),
        PointChoiceAimingPoint(TouchDownLiftOffPropertyType),
        PointChoiceRunwayPoint(RunwayCentrelinePointPropertyType),
        PointChoiceAirportReferencePoint(AirportHeliportPropertyType),
        PointChoicePosition(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractDistanceIndicationExtension(
        pub Box<dyn AbstractDistanceIndicationExtensionTrait>,
    );
    pub trait AbstractDistanceIndicationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum AzimuthTimeSliceContent2482Type {
        Designator(TextDesignatorType),
        Name(TextNameType),
        EmissionClass(CodeRadioEmissionType),
        Mobile(CodeYesNoType),
        MagneticVariation(ValMagneticVariationType),
        MagneticVariationAccuracy(ValAngleType),
        DateMagneticVariation(DateYearType),
        FlightChecked(CodeYesNoType),
        Location(ElevatedPointPropertyType),
        Authority(OrganisationAuthorityPropertyType),
        Monitoring(NavaidEquipmentMonitoringPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAzimuthExtension(pub Box<dyn AbstractAzimuthExtensionTrait>);
    pub trait AbstractAzimuthExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractNavaidEquipmentExtension(pub Box<dyn AbstractNavaidEquipmentExtensionTrait>);
    pub trait AbstractNavaidEquipmentExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum CheckpointINSTimeSliceContent2515Type {
        Category(CodeFireFightingType),
        UpperLimit(ValDistanceVerticalType),
        UpperLimitReference(CodeVerticalReferenceType),
        LowerLimit(ValDistanceVerticalType),
        LowerLimitReference(CodeVerticalReferenceType),
        AltitudeInterpretation(CodeAltitudeUseType),
        Distance(ValDistanceType),
        Angle(ValBearingType),
        Position(CodeSideType),
        AirportHeliport(AirportHeliportType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractCheckpointINSExtension(pub Box<dyn AbstractCheckpointINSExtensionTrait>);
    pub trait AbstractCheckpointINSExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractNavigationSystemCheckpointExtension(
        pub Box<dyn AbstractNavigationSystemCheckpointExtensionTrait>,
    );
    pub trait AbstractNavigationSystemCheckpointExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum CheckpointVORTimeSliceContent2536Type {
        Category(CodeFireFightingType),
        UpperLimit(ValDistanceVerticalType),
        UpperLimitReference(CodeVerticalReferenceType),
        LowerLimit(ValDistanceVerticalType),
        LowerLimitReference(CodeVerticalReferenceType),
        AltitudeInterpretation(CodeAltitudeUseType),
        Distance(ValDistanceType),
        Angle(ValBearingType),
        Position(CodeSideType),
        AirportHeliport(AirportHeliportType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractCheckpointVORExtension(pub Box<dyn AbstractCheckpointVORExtensionTrait>);
    pub trait AbstractCheckpointVORExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum DmetimeSliceContent2567Type {
        Designator(TextDesignatorType),
        Name(TextNameType),
        EmissionClass(CodeRadioEmissionType),
        Mobile(CodeYesNoType),
        MagneticVariation(ValMagneticVariationType),
        MagneticVariationAccuracy(ValAngleType),
        DateMagneticVariation(DateYearType),
        FlightChecked(CodeYesNoType),
        Location(ElevatedPointPropertyType),
        Authority(OrganisationAuthorityPropertyType),
        Monitoring(NavaidEquipmentMonitoringPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractDMEExtension(pub Box<dyn AbstractDMEExtensionTrait>);
    pub trait AbstractDMEExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum ElevationTimeSliceContent2594Type {
        Designator(TextDesignatorType),
        Name(TextNameType),
        EmissionClass(CodeRadioEmissionType),
        Mobile(CodeYesNoType),
        MagneticVariation(ValMagneticVariationType),
        MagneticVariationAccuracy(ValAngleType),
        DateMagneticVariation(DateYearType),
        FlightChecked(CodeYesNoType),
        Location(ElevatedPointPropertyType),
        Authority(OrganisationAuthorityPropertyType),
        Monitoring(NavaidEquipmentMonitoringPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractElevationExtension(pub Box<dyn AbstractElevationExtensionTrait>);
    pub trait AbstractElevationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum GlidepathTimeSliceContent2621Type {
        Designator(TextDesignatorType),
        Name(TextNameType),
        EmissionClass(CodeRadioEmissionType),
        Mobile(CodeYesNoType),
        MagneticVariation(ValMagneticVariationType),
        MagneticVariationAccuracy(ValAngleType),
        DateMagneticVariation(DateYearType),
        FlightChecked(CodeYesNoType),
        Location(ElevatedPointPropertyType),
        Authority(OrganisationAuthorityPropertyType),
        Monitoring(NavaidEquipmentMonitoringPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractGlidepathExtension(pub Box<dyn AbstractGlidepathExtensionTrait>);
    pub trait AbstractGlidepathExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum LocalizerTimeSliceContent2649Type {
        Designator(TextDesignatorType),
        Name(TextNameType),
        EmissionClass(CodeRadioEmissionType),
        Mobile(CodeYesNoType),
        MagneticVariation(ValMagneticVariationType),
        MagneticVariationAccuracy(ValAngleType),
        DateMagneticVariation(DateYearType),
        FlightChecked(CodeYesNoType),
        Location(ElevatedPointPropertyType),
        Authority(OrganisationAuthorityPropertyType),
        Monitoring(NavaidEquipmentMonitoringPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeILSBackCourseType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeILSBackCourseBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractLocalizerExtension(pub Box<dyn AbstractLocalizerExtensionTrait>);
    pub trait AbstractLocalizerExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum MarkerBeaconTimeSliceContent2681Type {
        Designator(TextDesignatorType),
        Name(TextNameType),
        EmissionClass(CodeRadioEmissionType),
        Mobile(CodeYesNoType),
        MagneticVariation(ValMagneticVariationType),
        MagneticVariationAccuracy(ValAngleType),
        DateMagneticVariation(DateYearType),
        FlightChecked(CodeYesNoType),
        Location(ElevatedPointPropertyType),
        Authority(OrganisationAuthorityPropertyType),
        Monitoring(NavaidEquipmentMonitoringPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeAuralMorseType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: String,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractMarkerBeaconExtension(pub Box<dyn AbstractMarkerBeaconExtensionTrait>);
    pub trait AbstractMarkerBeaconExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeFlightPurposeType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeFlightPurposeBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeSignalPerformanceILSType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeSignalPerformanceILSBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeCourseQualityILSType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeCourseQualityILSBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeIntegrityLevelILSType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeIntegrityLevelILSBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractNavaidExtension(pub Box<dyn AbstractNavaidExtensionTrait>);
    pub trait AbstractNavaidExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum SdftimeSliceContent2743Type {
        Designator(TextDesignatorType),
        Name(TextNameType),
        EmissionClass(CodeRadioEmissionType),
        Mobile(CodeYesNoType),
        MagneticVariation(ValMagneticVariationType),
        MagneticVariationAccuracy(ValAngleType),
        DateMagneticVariation(DateYearType),
        FlightChecked(CodeYesNoType),
        Location(ElevatedPointPropertyType),
        Authority(OrganisationAuthorityPropertyType),
        Monitoring(NavaidEquipmentMonitoringPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSDFExtension(pub Box<dyn AbstractSDFExtensionTrait>);
    pub trait AbstractSDFExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum NdbtimeSliceContent2769Type {
        Designator(TextDesignatorType),
        Name(TextNameType),
        EmissionClass(CodeRadioEmissionType),
        Mobile(CodeYesNoType),
        MagneticVariation(ValMagneticVariationType),
        MagneticVariationAccuracy(ValAngleType),
        DateMagneticVariation(DateYearType),
        FlightChecked(CodeYesNoType),
        Location(ElevatedPointPropertyType),
        Authority(OrganisationAuthorityPropertyType),
        Monitoring(NavaidEquipmentMonitoringPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeEmissionBandType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeEmissionBandBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractNDBExtension(pub Box<dyn AbstractNDBExtensionTrait>);
    pub trait AbstractNDBExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct SpecialNavigationSystemPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl SpecialNavigationSystemPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSpecialNavigationStationExtension(
        pub Box<dyn AbstractSpecialNavigationStationExtensionTrait>,
    );
    pub trait AbstractSpecialNavigationStationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum VortimeSliceContent2813Type {
        Designator(TextDesignatorType),
        Name(TextNameType),
        EmissionClass(CodeRadioEmissionType),
        Mobile(CodeYesNoType),
        MagneticVariation(ValMagneticVariationType),
        MagneticVariationAccuracy(ValAngleType),
        DateMagneticVariation(DateYearType),
        FlightChecked(CodeYesNoType),
        Location(ElevatedPointPropertyType),
        Authority(OrganisationAuthorityPropertyType),
        Monitoring(NavaidEquipmentMonitoringPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractVORExtension(pub Box<dyn AbstractVORExtensionTrait>);
    pub trait AbstractVORExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum TacantimeSliceContent2840Type {
        Designator(TextDesignatorType),
        Name(TextNameType),
        EmissionClass(CodeRadioEmissionType),
        Mobile(CodeYesNoType),
        MagneticVariation(ValMagneticVariationType),
        MagneticVariationAccuracy(ValAngleType),
        DateMagneticVariation(DateYearType),
        FlightChecked(CodeYesNoType),
        Location(ElevatedPointPropertyType),
        Authority(OrganisationAuthorityPropertyType),
        Monitoring(NavaidEquipmentMonitoringPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTACANExtension(pub Box<dyn AbstractTACANExtensionTrait>);
    pub trait AbstractTACANExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractSpecialNavigationSystemExtension(
        pub Box<dyn AbstractSpecialNavigationSystemExtensionTrait>,
    );
    pub trait AbstractSpecialNavigationSystemExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum DirectionFinderTimeSliceContent2913Type {
        Designator(TextDesignatorType),
        Name(TextNameType),
        EmissionClass(CodeRadioEmissionType),
        Mobile(CodeYesNoType),
        MagneticVariation(ValMagneticVariationType),
        MagneticVariationAccuracy(ValAngleType),
        DateMagneticVariation(DateYearType),
        FlightChecked(CodeYesNoType),
        Location(ElevatedPointPropertyType),
        Authority(OrganisationAuthorityPropertyType),
        Monitoring(NavaidEquipmentMonitoringPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct InformationServicePropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl InformationServicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractDirectionFinderExtension(pub Box<dyn AbstractDirectionFinderExtensionTrait>);
    pub trait AbstractDirectionFinderExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractDesignatedPointExtension(pub Box<dyn AbstractDesignatedPointExtensionTrait>);
    pub trait AbstractDesignatedPointExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeAirspacePointPositionType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeAirspacePointPositionBaseType,
    }
    #[derive(Debug, Clone)]
    pub enum SignificantPointInAirspaceTimeSliceContent2958Type {
        LocationFixDesignatedPoint(DesignatedPointPropertyType),
        LocationNavaidSystem(NavaidPropertyType),
        LocationAimingPoint(TouchDownLiftOffPropertyType),
        LocationRunwayPoint(RunwayCentrelinePointPropertyType),
        LocationAirportReferencePoint(AirportHeliportPropertyType),
        LocationPosition(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSignificantPointInAirspaceExtension(
        pub Box<dyn AbstractSignificantPointInAirspaceExtensionTrait>,
    );
    pub trait AbstractSignificantPointInAirspaceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct VerticalStructurePropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl VerticalStructurePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAeronauticalGroundLightExtension(
        pub Box<dyn AbstractAeronauticalGroundLightExtensionTrait>,
    );
    pub trait AbstractAeronauticalGroundLightExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeMilitaryStatusType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeMilitaryStatusBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct OrganisationAuthorityAssociationPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: OrganisationAuthorityAssociationPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum OrganisationAuthorityAssociationPropertyTypeContent {
        OrganisationAuthorityAssociation(OrganisationAuthorityAssociationType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractOrganisationAuthorityExtension(
        pub Box<dyn AbstractOrganisationAuthorityExtensionTrait>,
    );
    pub trait AbstractOrganisationAuthorityExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct UnitDependencyPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: UnitDependencyPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum UnitDependencyPropertyTypeContent {
        UnitDependency(UnitDependencyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractUnitExtension(pub Box<dyn AbstractUnitExtensionTrait>);
    pub trait AbstractUnitExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeObstacleAssessmentSurfaceType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeObstacleAssessmentSurfaceBaseType,
    }
    #[derive(Debug, Clone)]
    pub enum ObstacleAreaTimeSliceContent3102Type {
        ReferenceOwnerAirport(AirportHeliportPropertyType),
        ReferenceOwnerRunway(RunwayDirectionPropertyType),
        ReferenceOwnerOrganisation(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractObstacleAreaExtension(pub Box<dyn AbstractObstacleAreaExtensionTrait>);
    pub trait AbstractObstacleAreaExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct MarkerBeaconPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl MarkerBeaconPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct VerticalStructurePartPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: VerticalStructurePartPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum VerticalStructurePartPropertyTypeContent {
        VerticalStructurePart(VerticalStructurePartType),
    }
    #[derive(Debug, Clone)]
    pub struct PassengerServicePropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl PassengerServicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct NavaidEquipmentPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl NavaidEquipmentPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct SpecialNavigationStationPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl SpecialNavigationStationPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct UnitPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl UnitPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct ServicePropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl ServicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct VerticalStructureLightingStatusPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: VerticalStructureLightingStatusPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum VerticalStructureLightingStatusPropertyTypeContent {
        VerticalStructureLightingStatus(VerticalStructureLightingStatusType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractVerticalStructureExtension(
        pub Box<dyn AbstractVerticalStructureExtensionTrait>,
    );
    pub trait AbstractVerticalStructureExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct InstrumentApproachProcedurePropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl InstrumentApproachProcedurePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AircraftCharacteristicPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: AircraftCharacteristicPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AircraftCharacteristicPropertyTypeContent {
        AircraftCharacteristic(AircraftCharacteristicType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractCirclingAreaExtension(pub Box<dyn AbstractCirclingAreaExtensionTrait>);
    pub trait AbstractCirclingAreaExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeTAAType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeTAABaseType,
    }
    #[derive(Debug, Clone)]
    pub enum TerminalArrivalAreaTimeSliceContent3244Type {
        IfFixDesignatedPoint(DesignatedPointPropertyType),
        IfNavaidSystem(NavaidPropertyType),
        IfAimingPoint(TouchDownLiftOffPropertyType),
        IfRunwayPoint(RunwayCentrelinePointPropertyType),
        IfAirportReferencePoint(AirportHeliportPropertyType),
        IfPosition(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum TerminalArrivalAreaTimeSliceContent3251Type {
        IafFixDesignatedPoint(DesignatedPointPropertyType),
        IafNavaidSystem(NavaidPropertyType),
        IafAimingPoint(TouchDownLiftOffPropertyType),
        IafRunwayPoint(RunwayCentrelinePointPropertyType),
        IafAirportReferencePoint(AirportHeliportPropertyType),
        IafPosition(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct SurfacePropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: SurfacePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SurfacePropertyTypeContent {
        Surface(Surface),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTerminalArrivalAreaExtension(
        pub Box<dyn AbstractTerminalArrivalAreaExtensionTrait>,
    );
    pub trait AbstractTerminalArrivalAreaExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum InstrumentApproachProcedureTimeSliceContent3333Type {
        CommunicationFailureInstruction(TextInstructionType),
        Instruction(TextInstructionType),
        DesignCriteria(CodeDesignStandardType),
        CodingStandard(CodeProcedureCodingStandardType),
        FlightChecked(CodeYesNoType),
        Name(TextNameType),
        Rnav(CodeYesNoType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        AirportHeliport(AirportHeliportType),
        AircraftCharacteristic(AircraftCharacteristicType),
        FlightTransition(ProcedureTransitionPropertyType),
        Content3345(InstrumentApproachProcedureTimeSliceContent3345Type),
        Annotation(NotePropertyType),
        SafeAltitude(SafeAltitudeAreaPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeApproachPrefixType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeApproachPrefixBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeApproachType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeApproachBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeUpperAlphaType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeUpperAlphaBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeApproachEquipmentAdditionalType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeApproachEquipmentAdditionalBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct ValChannelNumberType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct LandingTakeoffAreaCollectionPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: LandingTakeoffAreaCollectionPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum LandingTakeoffAreaCollectionPropertyTypeContent {
        LandingTakeoffAreaCollection(LandingTakeoffAreaCollectionType),
    }
    #[derive(Debug, Clone)]
    pub struct MissedApproachGroupPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: MissedApproachGroupPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum MissedApproachGroupPropertyTypeContent {
        MissedApproachGroup(MissedApproachGroupType),
    }
    #[derive(Debug, Clone)]
    pub struct FinalProfileType {
        pub id: String,
        pub content: Vec<FinalProfileTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FinalProfileTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3318(FinalProfileContent3318Type),
        Extension(FinalProfileTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractInstrumentApproachProcedureExtension(
        pub Box<dyn AbstractInstrumentApproachProcedureExtensionTrait>,
    );
    pub trait AbstractInstrumentApproachProcedureExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractProcedureExtension(pub Box<dyn AbstractProcedureExtensionTrait>);
    pub trait AbstractProcedureExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum StandardInstrumentDepartureTimeSliceContent3399Type {
        CommunicationFailureInstruction(TextInstructionType),
        Instruction(TextInstructionType),
        DesignCriteria(CodeDesignStandardType),
        CodingStandard(CodeProcedureCodingStandardType),
        FlightChecked(CodeYesNoType),
        Name(TextNameType),
        Rnav(CodeYesNoType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        AirportHeliport(AirportHeliportType),
        AircraftCharacteristic(AircraftCharacteristicType),
        FlightTransition(ProcedureTransitionPropertyType),
        Content3411(StandardInstrumentDepartureTimeSliceContent3411Type),
        Annotation(NotePropertyType),
        SafeAltitude(SafeAltitudeAreaPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractStandardInstrumentDepartureExtension(
        pub Box<dyn AbstractStandardInstrumentDepartureExtensionTrait>,
    );
    pub trait AbstractStandardInstrumentDepartureExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeNavigationAreaType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeNavigationAreaBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct StandardInstrumentDeparturePropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl StandardInstrumentDeparturePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum NavigationAreaTimeSliceContent3434Type {
        CentrePointFixDesignatedPoint(DesignatedPointPropertyType),
        CentrePointNavaidSystem(NavaidPropertyType),
        CentrePointAimingPoint(TouchDownLiftOffPropertyType),
        CentrePointRunwayPoint(RunwayCentrelinePointPropertyType),
        CentrePointAirportReferencePoint(AirportHeliportPropertyType),
        CentrePointPosition(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractNavigationAreaExtension(pub Box<dyn AbstractNavigationAreaExtensionTrait>);
    pub trait AbstractNavigationAreaExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum StandardInstrumentArrivalTimeSliceContent3486Type {
        CommunicationFailureInstruction(TextInstructionType),
        Instruction(TextInstructionType),
        DesignCriteria(CodeDesignStandardType),
        CodingStandard(CodeProcedureCodingStandardType),
        FlightChecked(CodeYesNoType),
        Name(TextNameType),
        Rnav(CodeYesNoType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        AirportHeliport(AirportHeliportType),
        AircraftCharacteristic(AircraftCharacteristicType),
        FlightTransition(ProcedureTransitionPropertyType),
        Content3498(StandardInstrumentArrivalTimeSliceContent3498Type),
        Annotation(NotePropertyType),
        SafeAltitude(SafeAltitudeAreaPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractStandardInstrumentArrivalExtension(
        pub Box<dyn AbstractStandardInstrumentArrivalExtensionTrait>,
    );
    pub trait AbstractStandardInstrumentArrivalExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractNavigationAreaRestrictionExtension(
        pub Box<dyn AbstractNavigationAreaRestrictionExtensionTrait>,
    );
    pub trait AbstractNavigationAreaRestrictionExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum ArrivalFeederLegTimeSliceContent3568Type {
        Content3569(ArrivalFeederLegTimeSliceContent3569Type),
        Approach(InstrumentApproachProcedurePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeRNPType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractArrivalFeederLegExtension(
        pub Box<dyn AbstractArrivalFeederLegExtensionTrait>,
    );
    pub trait AbstractArrivalFeederLegExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractApproachLegExtension(pub Box<dyn AbstractApproachLegExtensionTrait>);
    pub trait AbstractApproachLegExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractSegmentLegExtension(pub Box<dyn AbstractSegmentLegExtensionTrait>);
    pub trait AbstractSegmentLegExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum ArrivalLegTimeSliceContent3613Type {
        EndConditionDesignator(CodeSegmentTerminationType),
        LegPath(CodeTrajectoryType),
        LegTypeARINC(CodeSegmentPathType),
        Course(ValBearingType),
        CourseType(CodeCourseType),
        CourseDirection(CodeDirectionReferenceType),
        TurnDirection(CodeDirectionTurnType),
        SpeedLimit(ValSpeedType),
        SpeedReference(CodeSpeedReferenceType),
        SpeedInterpretation(CodeValueInterpretationType),
        BankAngle(ValAngleType),
        Length(ValDistanceType),
        Duration(ValDurationType),
        ProcedureTurnRequired(CodeYesNoType),
        UpperLimitAltitude(ValDistanceVerticalType),
        UpperLimitReference(CodeVerticalReferenceType),
        LowerLimitAltitude(ValDistanceVerticalType),
        LowerLimitReference(CodeVerticalReferenceType),
        AltitudeInterpretation(CodeAltitudeUseType),
        AltitudeOverrideATC(ValDistanceVerticalType),
        AltitudeOverrideReference(CodeVerticalReferenceType),
        VerticalAngle(ValAngleType),
        StartPoint(TerminalSegmentPointPropertyType),
        EndPoint(TerminalSegmentPointPropertyType),
        Trajectory(CurvePropertyType),
        ArcCentre(TerminalSegmentPointPropertyType),
        Angle(ValBearingType),
        Distance(ValDistanceType),
        AircraftCategory(AircraftCharacteristicPropertyType),
        Holding(HoldingUsePropertyType),
        DesignSurface(ObstacleAssessmentAreaPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractArrivalLegExtension(pub Box<dyn AbstractArrivalLegExtensionTrait>);
    pub trait AbstractArrivalLegExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum DepartureLegTimeSliceContent3657Type {
        EndConditionDesignator(CodeSegmentTerminationType),
        LegPath(CodeTrajectoryType),
        LegTypeARINC(CodeSegmentPathType),
        Course(ValBearingType),
        CourseType(CodeCourseType),
        CourseDirection(CodeDirectionReferenceType),
        TurnDirection(CodeDirectionTurnType),
        SpeedLimit(ValSpeedType),
        SpeedReference(CodeSpeedReferenceType),
        SpeedInterpretation(CodeValueInterpretationType),
        BankAngle(ValAngleType),
        Length(ValDistanceType),
        Duration(ValDurationType),
        ProcedureTurnRequired(CodeYesNoType),
        UpperLimitAltitude(ValDistanceVerticalType),
        UpperLimitReference(CodeVerticalReferenceType),
        LowerLimitAltitude(ValDistanceVerticalType),
        LowerLimitReference(CodeVerticalReferenceType),
        AltitudeInterpretation(CodeAltitudeUseType),
        AltitudeOverrideATC(ValDistanceVerticalType),
        AltitudeOverrideReference(CodeVerticalReferenceType),
        VerticalAngle(ValAngleType),
        StartPoint(TerminalSegmentPointPropertyType),
        EndPoint(TerminalSegmentPointPropertyType),
        Trajectory(CurvePropertyType),
        ArcCentre(TerminalSegmentPointPropertyType),
        Angle(ValBearingType),
        Distance(ValDistanceType),
        AircraftCategory(AircraftCharacteristicPropertyType),
        Holding(HoldingUsePropertyType),
        DesignSurface(ObstacleAssessmentAreaPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractDepartureLegExtension(pub Box<dyn AbstractDepartureLegExtensionTrait>);
    pub trait AbstractDepartureLegExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum FinalLegTimeSliceContent3703Type {
        Content3704(FinalLegTimeSliceContent3704Type),
        Approach(InstrumentApproachProcedurePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeFinalGuidanceType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeFinalGuidanceBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeRelativePositionType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeRelativePositionBaseType,
    }
    #[derive(Debug, Clone)]
    pub enum FinalLegTimeSliceContent3748Type {
        FinalPathAlignmentPointFixDesignatedPoint(DesignatedPointPropertyType),
        FinalPathAlignmentPointNavaidSystem(NavaidPropertyType),
        FinalPathAlignmentPointAimingPoint(TouchDownLiftOffPropertyType),
        FinalPathAlignmentPointRunwayPoint(RunwayCentrelinePointPropertyType),
        FinalPathAlignmentPointAirportReferencePoint(AirportHeliportPropertyType),
        FinalPathAlignmentPointPosition(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TerminalSegmentPointPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: TerminalSegmentPointPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TerminalSegmentPointPropertyTypeContent {
        TerminalSegmentPoint(TerminalSegmentPointType),
    }
    #[derive(Debug, Clone)]
    pub struct FasdataBlockPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: FasdataBlockPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FasdataBlockPropertyTypeContent {
        FasdataBlock(FasdataBlockType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractFinalLegExtension(pub Box<dyn AbstractFinalLegExtensionTrait>);
    pub trait AbstractFinalLegExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum InitialLegTimeSliceContent3766Type {
        Content3767(InitialLegTimeSliceContent3767Type),
        Approach(InstrumentApproachProcedurePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractInitialLegExtension(pub Box<dyn AbstractInitialLegExtensionTrait>);
    pub trait AbstractInitialLegExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum IntermediateLegTimeSliceContent3811Type {
        Content3812(IntermediateLegTimeSliceContent3812Type),
        Approach(InstrumentApproachProcedurePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractIntermediateLegExtension(pub Box<dyn AbstractIntermediateLegExtensionTrait>);
    pub trait AbstractIntermediateLegExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum MissedApproachLegTimeSliceContent3856Type {
        Content3857(MissedApproachLegTimeSliceContent3857Type),
        Approach(InstrumentApproachProcedurePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractMissedApproachLegExtension(
        pub Box<dyn AbstractMissedApproachLegExtensionTrait>,
    );
    pub trait AbstractMissedApproachLegExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct DmepropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl DmepropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct SegmentLegPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl SegmentLegPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractProcedureDMEExtension(pub Box<dyn AbstractProcedureDMEExtensionTrait>);
    pub trait AbstractProcedureDMEExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeSafeAltitudeType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeSafeAltitudeBaseType,
    }
    #[derive(Debug, Clone)]
    pub enum SafeAltitudeAreaTimeSliceContent3938Type {
        CentrePointFixDesignatedPoint(DesignatedPointPropertyType),
        CentrePointNavaidSystem(NavaidPropertyType),
        CentrePointAimingPoint(TouchDownLiftOffPropertyType),
        CentrePointRunwayPoint(RunwayCentrelinePointPropertyType),
        CentrePointAirportReferencePoint(AirportHeliportPropertyType),
        CentrePointPosition(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSafeAltitudeAreaExtension(
        pub Box<dyn AbstractSafeAltitudeAreaExtensionTrait>,
    );
    pub trait AbstractSafeAltitudeAreaExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeCourseType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeCourseBaseType,
    }
    #[derive(Debug, Clone)]
    pub enum HoldingPatternTimeSliceContent3980Type {
        OutboundLegSpanEndTime(HoldingPatternDurationPropertyType),
        OutboundLegSpanEndDistance(HoldingPatternDistancePropertyType),
        OutboundLegSpanEndPoint(SegmentPointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractHoldingPatternExtension(pub Box<dyn AbstractHoldingPatternExtensionTrait>);
    pub trait AbstractHoldingPatternExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractUnplannedHoldingExtension(
        pub Box<dyn AbstractUnplannedHoldingExtensionTrait>,
    );
    pub trait AbstractUnplannedHoldingExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractAirspaceBorderCrossingExtension(
        pub Box<dyn AbstractAirspaceBorderCrossingExtensionTrait>,
    );
    pub trait AbstractAirspaceBorderCrossingExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct FlightCharacteristicPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: FlightCharacteristicPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FlightCharacteristicPropertyTypeContent {
        FlightCharacteristic(FlightCharacteristicType),
    }
    #[derive(Debug, Clone)]
    pub struct FlightRestrictionRoutePropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: FlightRestrictionRoutePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FlightRestrictionRoutePropertyTypeContent {
        FlightRestrictionRoute(FlightRestrictionRouteType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractFlightRestrictionExtension(
        pub Box<dyn AbstractFlightRestrictionExtensionTrait>,
    );
    pub trait AbstractFlightRestrictionExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeRouteSegmentPathType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeRouteSegmentPathBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeRouteNavigationType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeRouteNavigationBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeRouteDesignatorSuffixType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeRouteDesignatorSuffixBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct EnRouteSegmentPointPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: EnRouteSegmentPointPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum EnRouteSegmentPointPropertyTypeContent {
        EnRouteSegmentPoint(EnRouteSegmentPointType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRouteSegmentExtension(pub Box<dyn AbstractRouteSegmentExtensionTrait>);
    pub trait AbstractRouteSegmentExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractRouteDMEExtension(pub Box<dyn AbstractRouteDMEExtensionTrait>);
    pub trait AbstractRouteDMEExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeRouteDesignatorPrefixType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeRouteDesignatorPrefixBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeRouteDesignatorLetterType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeRouteDesignatorLetterBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeRouteOriginType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeRouteOriginBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeMilitaryTrainingType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeMilitaryTrainingBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRouteExtension(pub Box<dyn AbstractRouteExtensionTrait>);
    pub trait AbstractRouteExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum ChangeOverPointTimeSliceContent4308Type {
        LocationFixDesignatedPoint(DesignatedPointPropertyType),
        LocationNavaidSystem(NavaidPropertyType),
        LocationAimingPoint(TouchDownLiftOffPropertyType),
        LocationRunwayPoint(RunwayCentrelinePointPropertyType),
        LocationAirportReferencePoint(AirportHeliportPropertyType),
        LocationPosition(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractChangeOverPointExtension(pub Box<dyn AbstractChangeOverPointExtensionTrait>);
    pub trait AbstractChangeOverPointExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeTACANChannelType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeTACANChannelBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AerialRefuellingTrackPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: AerialRefuellingTrackPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AerialRefuellingTrackPropertyTypeContent {
        AerialRefuellingTrack(AerialRefuellingTrackType),
    }
    #[derive(Debug, Clone)]
    pub struct AerialRefuellingAnchorPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: AerialRefuellingAnchorPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AerialRefuellingAnchorPropertyTypeContent {
        AerialRefuellingAnchor(AerialRefuellingAnchorType),
    }
    #[derive(Debug, Clone)]
    pub struct AuthorityForAerialRefuellingPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: AuthorityForAerialRefuellingPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AuthorityForAerialRefuellingPropertyTypeContent {
        AuthorityForAerialRefuelling(AuthorityForAerialRefuellingType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAerialRefuellingExtension(
        pub Box<dyn AbstractAerialRefuellingExtensionTrait>,
    );
    pub trait AbstractAerialRefuellingExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct Xhtmltype {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRulesProceduresExtension(pub Box<dyn AbstractRulesProceduresExtensionTrait>);
    pub trait AbstractRulesProceduresExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum CodeRunwayProtectionAreaBaseType {
        Cwy,
        Resa,
        Ofz,
        Iofz,
        Pofz,
        Ils,
        Vgsi,
        Stopway,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeStatusOperationsBaseType {
        Normal,
        Downgraded,
        Unserviceable,
        WorkInProgress,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractExtension(pub Box<dyn AbstractExtensionTrait>);
    pub trait AbstractExtensionTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone, Default)]
    pub struct TextDesignatorBaseType(pub Vec<String>);
    #[derive(Debug, Clone)]
    pub enum CodeDirectionTurnBaseType {
        Left,
        Right,
        Either,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum UomDistanceType {
        Nm,
        Km,
        M,
        Ft,
        Mi,
        Cm,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeRunwayMarkingBaseType {
        Precision,
        Nonprecision,
        Basic,
        None,
        RunwayNumbers,
        NonStandard,
        Heliport,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeMarkingConditionBaseType {
        Good,
        Fair,
        Poor,
        Excellent,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeLightingJARBaseType {
        Fals,
        Ials,
        Bals,
        Nals,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeApproachGuidanceBaseType {
        NonPrecision,
        IlsPrecisionCatI,
        IlsPrecisionCatIi,
        IlsPrecisionCatIiia,
        IlsPrecisionCatIiib,
        IlsPrecisionCatIiic,
        IlsPrecisionCatIiid,
        MlsPrecision,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct NoteType {
        pub id: String,
        pub content: Vec<NoteTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NoteTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content2988(NoteContent2988Type),
        Extension(NoteTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct ManoeuvringAreaAvailabilityType {
        pub id: String,
        pub content: Vec<ManoeuvringAreaAvailabilityTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ManoeuvringAreaAvailabilityTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content245(ManoeuvringAreaAvailabilityContent245Type),
        Content249(ManoeuvringAreaAvailabilityContent249Type),
        Extension(ManoeuvringAreaAvailabilityTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for ManoeuvringAreaAvailabilityType {}
    impl xsd_parser::AsAny for ManoeuvringAreaAvailabilityType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum CodeRunwayPointRoleBaseType {
        Start,
        Thr,
        Disthr,
        Tdz,
        Mid,
        End,
        StartRun,
        Lahso,
        AbeamGlideslope,
        AbeamPar,
        AbeamElevation,
        AbeamTdr,
        AbeamRer,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct RunwayDeclaredDistanceType {
        pub id: String,
        pub content: Vec<RunwayDeclaredDistanceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayDeclaredDistanceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content222(RunwayDeclaredDistanceContent222Type),
        Extension(RunwayDeclaredDistanceTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct NavaidEquipmentDistanceType {
        pub id: String,
        pub content: Vec<NavaidEquipmentDistanceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NavaidEquipmentDistanceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content212(NavaidEquipmentDistanceContent212Type),
        Extension(NavaidEquipmentDistanceTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct SurfaceCharacteristicsType {
        pub id: String,
        pub content: Vec<SurfaceCharacteristicsTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SurfaceCharacteristicsTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1093(SurfaceCharacteristicsContent1093Type),
        Extension(SurfaceCharacteristicsTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct RunwayContaminationType {
        pub id: String,
        pub content: Vec<RunwayContaminationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayContaminationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content852(RunwayContaminationContent852Type),
        Content866(RunwayContaminationContent866Type),
        Extension(RunwayContaminationTypeExtensionElementType),
    }
    impl AbstractSurfaceContaminationTrait for RunwayContaminationType {}
    impl xsd_parser::AsAny for RunwayContaminationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwaySectionContaminationType {
        pub id: String,
        pub content: Vec<RunwaySectionContaminationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwaySectionContaminationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content912(RunwaySectionContaminationContent912Type),
        Content926(RunwaySectionContaminationContent926Type),
        Extension(RunwaySectionContaminationTypeExtensionElementType),
    }
    impl AbstractSurfaceContaminationTrait for RunwaySectionContaminationType {}
    impl xsd_parser::AsAny for RunwaySectionContaminationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum CodeArrestingGearEngageDeviceBaseType {
        _61QSII,
        _62NI,
        _63PI,
        NetA30,
        NetA40,
        Bak11Strut,
        Bak12,
        Bak14Hook,
        Bak15StanchionNet,
        Bak15Hook,
        Emas,
        HookCable,
        HpNet,
        Jbar,
        JetBarrier,
        Ma1Net,
        Ma1AHookCable,
        Net,
        HookH,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeGradeSeparationBaseType {
        Underpass,
        Overpass,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct CodeLightIntensityType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeLightIntensityBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct LightElementPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: LightElementPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum LightElementPropertyTypeContent {
        LightElement(LightElementType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeSideBaseType {
        Left,
        Right,
        Both,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeRVRReadingBaseType {
        Tdz,
        Mid,
        To,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeHoldingCategoryBaseType {
        NonPrecision,
        CatI,
        CatIiIii,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct TaxiwayContaminationType {
        pub id: String,
        pub content: Vec<TaxiwayContaminationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayContaminationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content881(TaxiwayContaminationContent881Type),
        Content895(TaxiwayContaminationContent895Type),
        Extension(TaxiwayContaminationTypeExtensionElementType),
    }
    impl AbstractSurfaceContaminationTrait for TaxiwayContaminationType {}
    impl xsd_parser::AsAny for TaxiwayContaminationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum UomSpeedType {
        KmH,
        Kt,
        Mach,
        Mmin,
        FtMin,
        Msec,
        FtSec,
        Mph,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeDirectionBaseType {
        Forward,
        Backward,
        Both,
        String(String),
    }
    #[derive(Debug, Clone, Default)]
    pub struct TextNameBaseType(pub Vec<String>);
    #[derive(Debug, Clone)]
    pub enum CodeVisualDockingGuidanceBaseType {
        Agnis,
        Papa,
        SafeGate,
        SafeDoc,
        Apis,
        Avdgs,
        AgnisStop,
        AgnisPapa,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeHelicopterPerformanceBaseType {
        _1,
        _2,
        _3,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeApproachLightingICAOBaseType {
        Simple,
        Cat1,
        Cat23,
        Circling,
        Leadin,
        None,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeTaxiwaySectionBaseType {
        Cl,
        Edge,
        End,
        RwyInt,
        TwyInt,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeColourBaseType {
        Yellow,
        Red,
        White,
        Blue,
        Green,
        Purple,
        Orange,
        Amber,
        Black,
        Brown,
        Grey,
        LightGrey,
        Magenta,
        Pink,
        Violet,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeSystemActivationBaseType {
        On,
        OnOrOff,
        Off,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct CodeICAOBaseType(pub [String; 4usize]);
    #[derive(Debug, Clone)]
    pub struct CodeIATABaseType(pub [String; 3usize]);
    #[derive(Debug, Clone)]
    pub enum CodeMilitaryOperationsBaseType {
        Civil,
        Mil,
        Joint,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeVerticalDatumBaseType {
        Egm96,
        Ahd,
        Navd88,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum UomTemperatureType {
        C,
        F,
        K,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum UomFLType {
        Fl,
        Sm,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct CityType {
        pub id: String,
        pub content: Vec<CityTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CityTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1124(CityContent1124Type),
        Extension(CityTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct AirportHeliportResponsibilityOrganisationType {
        pub id: String,
        pub content: Vec<AirportHeliportResponsibilityOrganisationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportResponsibilityOrganisationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1203(AirportHeliportResponsibilityOrganisationContent1203Type),
        Content1207(AirportHeliportResponsibilityOrganisationContent1207Type),
        Extension(AirportHeliportResponsibilityOrganisationTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for AirportHeliportResponsibilityOrganisationType {}
    impl xsd_parser::AsAny for AirportHeliportResponsibilityOrganisationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ContactInformationType {
        pub id: String,
        pub content: Vec<ContactInformationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ContactInformationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1768(ContactInformationContent1768Type),
        Extension(ContactInformationTypeExtensionElementType),
    }
    #[derive(Debug, Clone, Default)]
    pub struct TextInstructionBaseType(pub Vec<String>);
    #[derive(Debug, Clone)]
    pub struct AirspaceLayerClassType {
        pub id: String,
        pub content: Vec<AirspaceLayerClassTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceLayerClassTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1370(AirspaceLayerClassContent1370Type),
        Content1374(AirspaceLayerClassContent1374Type),
        Extension(AirspaceLayerClassTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for AirspaceLayerClassType {}
    impl xsd_parser::AsAny for AirspaceLayerClassType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceGeometryComponentType {
        pub id: String,
        pub content: Vec<AirspaceGeometryComponentTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceGeometryComponentTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1326(AirspaceGeometryComponentContent1326Type),
        Extension(AirspaceGeometryComponentTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeStandbyPowerType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeStandbyPowerBaseType,
    }
    #[derive(Debug, Clone)]
    pub enum CodePARBaseType {
        Fpn16,
        Fpn62,
        Gpn22,
        Gpn25,
        Mpn14K,
        Tpn19,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum PrimarySurveillanceRadarTimeSliceContent1501Type {
        Name(TextNameType),
        SerialNumber(TextDesignatorType),
        Range(ValDistanceType),
        RangeAccuracy(ValDistanceType),
        DualChannel(CodeYesNoType),
        MovingTargetIndicator(CodeYesNoType),
        StandbyPower(CodeStandbyPowerType),
        Digital(CodeYesNoType),
        MilitaryUseOnly(CodeYesNoType),
        SpecialUseOnly(CodeYesNoType),
        SpecialAircraftOnly(CodeYesNoType),
        MagneticVariation(ValMagneticVariationType),
        MagneticVariationAccuracy(ValAngleType),
        DateMagneticVariation(DateYearType),
        Contact(ContactInformationPropertyType),
        Location(ElevatedPointPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct SurveillanceGroundStationPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: SurveillanceGroundStationPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SurveillanceGroundStationPropertyTypeContent {
        SurveillanceGroundStation(SurveillanceGroundStationType),
    }
    #[derive(Debug, Clone)]
    pub struct RadarComponentType {
        pub id: String,
        pub content: Vec<RadarComponentTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RadarComponentTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1532(RadarComponentContent1532Type),
        Extension(RadarComponentTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum SecondarySurveillanceRadarTimeSliceContent1574Type {
        Name(TextNameType),
        SerialNumber(TextDesignatorType),
        Range(ValDistanceType),
        RangeAccuracy(ValDistanceType),
        DualChannel(CodeYesNoType),
        MovingTargetIndicator(CodeYesNoType),
        StandbyPower(CodeStandbyPowerType),
        Digital(CodeYesNoType),
        MilitaryUseOnly(CodeYesNoType),
        SpecialUseOnly(CodeYesNoType),
        SpecialAircraftOnly(CodeYesNoType),
        MagneticVariation(ValMagneticVariationType),
        MagneticVariationAccuracy(ValAngleType),
        DateMagneticVariation(DateYearType),
        Contact(ContactInformationPropertyType),
        Location(ElevatedPointPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeTransponderBaseType {
        Mode1,
        Mode2,
        Mode3A,
        Mode4,
        Mode5,
        ModeC,
        ModeS,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeVerticalReferenceBaseType {
        Sfc,
        Msl,
        W84,
        Std,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSegmentPoint(pub Box<dyn AbstractSegmentPointTrait>);
    pub trait AbstractSegmentPointTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct ObstacleAssessmentAreaType {
        pub id: String,
        pub content: Vec<ObstacleAssessmentAreaTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ObstacleAssessmentAreaTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1616(ObstacleAssessmentAreaContent1616Type),
        Extension(ObstacleAssessmentAreaTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeFlightRuleBaseType {
        Ifr,
        Vfr,
        All,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeNorthReferenceBaseType {
        True,
        Mag,
        Grid,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeLevelSeriesBaseType {
        Odd,
        Even,
        OddHalf,
        EvenHalf,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeRVSMBaseType {
        Rvsm,
        NonRvsm,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct StandardLevelType {
        pub id: String,
        pub content: Vec<StandardLevelTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum StandardLevelTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1739(StandardLevelContent1739Type),
        Extension(StandardLevelTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeRadioSignalBaseType {
        Azimuth,
        Distance,
        Beam,
        Voice,
        Datalink,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct RadioCommunicationChannelPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl RadioCommunicationChannelPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct PrecisionApproachRadarPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl PrecisionApproachRadarPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct SecondarySurveillanceRadarPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl SecondarySurveillanceRadarPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct CircleSectorType {
        pub id: String,
        pub content: Vec<CircleSectorTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CircleSectorTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1899(CircleSectorContent1899Type),
        Extension(CircleSectorTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeCommunicationModeBaseType {
        Hf,
        Vhf,
        Vdl1,
        Vdl2,
        Vdl4,
        Amss,
        AdsB,
        AdsBVdl,
        Hfdl,
        Vhf833,
        Uhf,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeFacilityRankingBaseType {
        Primary,
        Secondary,
        Alternate,
        Emerg,
        Guard,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum UomFrequencyType {
        Hz,
        Khz,
        Mhz,
        Ghz,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeRadioEmissionBaseType {
        A2,
        A3A,
        A3B,
        A3E,
        A3H,
        A3J,
        A3L,
        A3U,
        J3E,
        Nona1A,
        Nona2A,
        Pon,
        A8W,
        A9W,
        Nox,
        G1D,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeCommunicationDirectionBaseType {
        Uplink,
        Downlink,
        Bidirectional,
        Upcast,
        Downcast,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum UomDurationType {
        Hr,
        Min,
        Sec,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeIntensityStandByBaseType {
        Off,
        Low,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct LightActivationType {
        pub id: String,
        pub content: Vec<LightActivationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum LightActivationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content641(LightActivationContent641Type),
        Extension(LightActivationTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeFlightDestinationType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeFlightDestinationBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct RoutePortionType {
        pub id: String,
        pub content: Vec<RoutePortionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RoutePortionTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content4238(RoutePortionContent4238Type),
        Extension(RoutePortionTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum GroundTrafficControlServiceTimeSliceContent2055Type {
        FlightOperations(CodeFlightDestinationType),
        Rank(CodeFacilityRankingType),
        CompliantICAO(CodeYesNoType),
        Name(TextNameType),
        Location(ElevatedPointPropertyType),
        ServiceProvider(UnitPropertyType),
        CallSign(TextNameType),
        RadioCommunication(RadioCommunicationChannelPropertyType),
        GroundCommunication(ContactInformationPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum AirTrafficControlServiceTimeSliceContent2082Type {
        FlightOperations(CodeFlightDestinationType),
        Rank(CodeFacilityRankingType),
        CompliantICAO(CodeYesNoType),
        Name(TextNameType),
        Location(ElevatedPointPropertyType),
        ServiceProvider(UnitPropertyType),
        CallSign(TextNameType),
        RadioCommunication(RadioCommunicationChannelPropertyType),
        GroundCommunication(ContactInformationPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum PassengerServiceTimeSliceContent2165Type {
        FlightOperations(CodeFlightDestinationType),
        Rank(CodeFacilityRankingType),
        CompliantICAO(CodeYesNoType),
        Name(TextNameType),
        Location(ElevatedPointPropertyType),
        ServiceProvider(UnitPropertyType),
        CallSign(TextNameType),
        RadioCommunication(RadioCommunicationChannelPropertyType),
        GroundCommunication(ContactInformationPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum AircraftGroundServiceTimeSliceContent2189Type {
        FlightOperations(CodeFlightDestinationType),
        Rank(CodeFacilityRankingType),
        CompliantICAO(CodeYesNoType),
        Name(TextNameType),
        Location(ElevatedPointPropertyType),
        ServiceProvider(UnitPropertyType),
        CallSign(TextNameType),
        RadioCommunication(RadioCommunicationChannelPropertyType),
        GroundCommunication(ContactInformationPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum FireFightingServiceTimeSliceContent2213Type {
        FlightOperations(CodeFlightDestinationType),
        Rank(CodeFacilityRankingType),
        CompliantICAO(CodeYesNoType),
        Name(TextNameType),
        Location(ElevatedPointPropertyType),
        ServiceProvider(UnitPropertyType),
        CallSign(TextNameType),
        RadioCommunication(RadioCommunicationChannelPropertyType),
        GroundCommunication(ContactInformationPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeFireFightingBaseType {
        H1,
        H2,
        H3,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeAviationStandardsBaseType {
        Icao,
        Iata,
        Nato,
        Faa,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum AirportClearanceServiceTimeSliceContent2238Type {
        FlightOperations(CodeFlightDestinationType),
        Rank(CodeFacilityRankingType),
        CompliantICAO(CodeYesNoType),
        Name(TextNameType),
        Location(ElevatedPointPropertyType),
        ServiceProvider(UnitPropertyType),
        CallSign(TextNameType),
        RadioCommunication(RadioCommunicationChannelPropertyType),
        GroundCommunication(ContactInformationPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum AirportSuppliesServiceTimeSliceContent2262Type {
        FlightOperations(CodeFlightDestinationType),
        Rank(CodeFacilityRankingType),
        CompliantICAO(CodeYesNoType),
        Name(TextNameType),
        Location(ElevatedPointPropertyType),
        ServiceProvider(UnitPropertyType),
        CallSign(TextNameType),
        RadioCommunication(RadioCommunicationChannelPropertyType),
        GroundCommunication(ContactInformationPropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct FuelType {
        pub id: String,
        pub content: Vec<FuelTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FuelTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content2284(FuelContent2284Type),
        Extension(FuelTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct OilType {
        pub id: String,
        pub content: Vec<OilTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum OilTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content2300(OilContent2300Type),
        Extension(OilTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct NitrogenType {
        pub id: String,
        pub content: Vec<NitrogenTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NitrogenTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content2292(NitrogenContent2292Type),
        Extension(NitrogenTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct OxygenType {
        pub id: String,
        pub content: Vec<OxygenTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum OxygenTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content2308(OxygenContent2308Type),
        Extension(OxygenTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeDirectionReferenceBaseType {
        To,
        From,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeCardinalDirectionBaseType {
        N,
        Ne,
        E,
        Se,
        S,
        Sw,
        W,
        Nw,
        Nne,
        Ene,
        Ese,
        Sse,
        Ssw,
        Wsw,
        Wnw,
        Nnw,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct NavaidPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl NavaidPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct PointPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: PointPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum PointPropertyTypeContent {
        Point(Point),
    }
    #[derive(Debug, Clone)]
    pub struct NavaidEquipmentMonitoringPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: NavaidEquipmentMonitoringPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NavaidEquipmentMonitoringPropertyTypeContent {
        NavaidEquipmentMonitoring(NavaidEquipmentMonitoringType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeAltitudeUseType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeAltitudeUseBaseType,
    }
    #[derive(Debug, Clone)]
    pub enum CodeILSBackCourseBaseType {
        Yes,
        No,
        Rstr,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeFlightPurposeBaseType {
        Scheduled,
        NonScheduled,
        Private,
        AirTraining,
        AirWork,
        All,
        Participant,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeSignalPerformanceILSBaseType {
        I,
        Ii,
        Iii,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeCourseQualityILSBaseType {
        A,
        B,
        C,
        D,
        E,
        T,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeIntegrityLevelILSBaseType {
        _1,
        _2,
        _3,
        _4,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeEmissionBandBaseType {
        U,
        H,
        M,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeAirspacePointPositionBaseType {
        In,
        Out,
        Border,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeMilitaryStatusBaseType {
        Mil,
        Civil,
        All,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct OrganisationAuthorityAssociationType {
        pub id: String,
        pub content: Vec<OrganisationAuthorityAssociationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum OrganisationAuthorityAssociationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3020(OrganisationAuthorityAssociationContent3020Type),
        Extension(OrganisationAuthorityAssociationTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct UnitDependencyType {
        pub id: String,
        pub content: Vec<UnitDependencyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum UnitDependencyTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3050(UnitDependencyContent3050Type),
        Extension(UnitDependencyTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeObstacleAssessmentSurfaceBaseType {
        _40_TO_1,
        _72_TO_1,
        Ma,
        Final,
        PtEntryArea,
        Primary,
        Secondary,
        Zone1,
        Zone2,
        Zone3,
        Area1,
        Area2,
        Area3,
        TurnInitiation,
        Turn,
        Der,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct VerticalStructurePartType {
        pub id: String,
        pub content: Vec<VerticalStructurePartTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum VerticalStructurePartTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3070(VerticalStructurePartContent3070Type),
        Content3074(VerticalStructurePartContent3074Type),
        Extension(VerticalStructurePartTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for VerticalStructurePartType {}
    impl xsd_parser::AsAny for VerticalStructurePartType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct VerticalStructureLightingStatusType {
        pub id: String,
        pub content: Vec<VerticalStructureLightingStatusTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum VerticalStructureLightingStatusTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3144(VerticalStructureLightingStatusContent3144Type),
        Content3148(VerticalStructureLightingStatusContent3148Type),
        Extension(VerticalStructureLightingStatusTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for VerticalStructureLightingStatusType {}
    impl xsd_parser::AsAny for VerticalStructureLightingStatusType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AircraftCharacteristicType {
        pub id: String,
        pub content: Vec<AircraftCharacteristicTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AircraftCharacteristicTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1821(AircraftCharacteristicContent1821Type),
        Extension(AircraftCharacteristicTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeTAABaseType {
        LeftBase,
        RightBase,
        StraightIn,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct CodeDesignStandardType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeDesignStandardBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeProcedureCodingStandardType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeProcedureCodingStandardBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct ProcedureTransitionPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: ProcedureTransitionPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ProcedureTransitionPropertyTypeContent {
        ProcedureTransition(ProcedureTransitionType),
    }
    #[derive(Debug, Clone)]
    pub enum InstrumentApproachProcedureTimeSliceContent3345Type {
        GuidanceFacilityNavaid(NavaidPropertyType),
        GuidanceFacilitySpecialNavigationSystem(SpecialNavigationSystemPropertyType),
        GuidanceFacilityRadar(RadarSystemPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct SafeAltitudeAreaPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl SafeAltitudeAreaPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum CodeApproachPrefixBaseType {
        Hi,
        Copter,
        Converging,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeApproachBaseType {
        Asr,
        Ara,
        Arsr,
        Par,
        Ils,
        IlsDme,
        IlsPrm,
        Lda,
        LdaDme,
        Loc,
        LocBc,
        LocDme,
        LocDmeBc,
        Mls,
        MlsDme,
        Ndb,
        NdbDme,
        Sdf,
        Tls,
        Vor,
        VorDme,
        Tacan,
        Vortac,
        Dme,
        DmeDme,
        Rnp,
        Gps,
        Glonass,
        Galileo,
        Rnav,
        Igs,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeUpperAlphaBaseType {
        A,
        B,
        C,
        D,
        E,
        F,
        G,
        H,
        I,
        J,
        K,
        L,
        M,
        N,
        O,
        P,
        Q,
        R,
        S,
        T,
        U,
        V,
        W,
        X,
        Y,
        Z,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeApproachEquipmentAdditionalBaseType {
        Adf,
        Dme,
        Radar,
        Radardme,
        Vorloc,
        Dualvordme,
        Dualadf,
        Adfma,
        Special,
        Dualvhf,
        Gpsrnp3,
        Adfils,
        DualadfDme,
        RadarRnav,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct LandingTakeoffAreaCollectionType {
        pub id: String,
        pub content: Vec<LandingTakeoffAreaCollectionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum LandingTakeoffAreaCollectionTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3910(LandingTakeoffAreaCollectionContent3910Type),
        Extension(LandingTakeoffAreaCollectionTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct MissedApproachGroupType {
        pub id: String,
        pub content: Vec<MissedApproachGroupTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MissedApproachGroupTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3368(MissedApproachGroupContent3368Type),
        Extension(MissedApproachGroupTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum FinalProfileContent3318Type {
        Altitude(ValDistanceVerticalType),
        Distance(ValDistanceType),
        Timing(ApproachTimingTablePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct FinalProfileTypeExtensionElementType {
        pub owns: bool,
        pub content: FinalProfileTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FinalProfileTypeExtensionElementTypeContent {
        AbstractFinalProfileExtension(AbstractFinalProfileExtension),
    }
    impl FinalProfileTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum StandardInstrumentDepartureTimeSliceContent3411Type {
        GuidanceFacilityNavaid(NavaidPropertyType),
        GuidanceFacilitySpecialNavigationSystem(SpecialNavigationSystemPropertyType),
        GuidanceFacilityRadar(RadarSystemPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeNavigationAreaBaseType {
        Pna,
        Omni,
        Dva,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum StandardInstrumentArrivalTimeSliceContent3498Type {
        GuidanceFacilityNavaid(NavaidPropertyType),
        GuidanceFacilitySpecialNavigationSystem(SpecialNavigationSystemPropertyType),
        GuidanceFacilityRadar(RadarSystemPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum ArrivalFeederLegTimeSliceContent3569Type {
        EndConditionDesignator(CodeSegmentTerminationType),
        LegPath(CodeTrajectoryType),
        LegTypeARINC(CodeSegmentPathType),
        Course(ValBearingType),
        CourseType(CodeCourseType),
        CourseDirection(CodeDirectionReferenceType),
        TurnDirection(CodeDirectionTurnType),
        SpeedLimit(ValSpeedType),
        SpeedReference(CodeSpeedReferenceType),
        SpeedInterpretation(CodeValueInterpretationType),
        BankAngle(ValAngleType),
        Length(ValDistanceType),
        Duration(ValDurationType),
        ProcedureTurnRequired(CodeYesNoType),
        UpperLimitAltitude(ValDistanceVerticalType),
        UpperLimitReference(CodeVerticalReferenceType),
        LowerLimitAltitude(ValDistanceVerticalType),
        LowerLimitReference(CodeVerticalReferenceType),
        AltitudeInterpretation(CodeAltitudeUseType),
        AltitudeOverrideATC(ValDistanceVerticalType),
        AltitudeOverrideReference(CodeVerticalReferenceType),
        VerticalAngle(ValAngleType),
        StartPoint(TerminalSegmentPointPropertyType),
        EndPoint(TerminalSegmentPointPropertyType),
        Trajectory(CurvePropertyType),
        ArcCentre(TerminalSegmentPointPropertyType),
        Angle(ValBearingType),
        Distance(ValDistanceType),
        AircraftCategory(AircraftCharacteristicPropertyType),
        Holding(HoldingUsePropertyType),
        DesignSurface(ObstacleAssessmentAreaPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeSegmentTerminationType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeSegmentTerminationBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeTrajectoryType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeTrajectoryBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeSegmentPathType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeSegmentPathBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeSpeedReferenceType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeSpeedReferenceBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeValueInterpretationType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeValueInterpretationBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct HoldingUsePropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: HoldingUsePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum HoldingUsePropertyTypeContent {
        HoldingUse(HoldingUseType),
    }
    #[derive(Debug, Clone)]
    pub enum FinalLegTimeSliceContent3704Type {
        EndConditionDesignator(CodeSegmentTerminationType),
        LegPath(CodeTrajectoryType),
        LegTypeARINC(CodeSegmentPathType),
        Course(ValBearingType),
        CourseType(CodeCourseType),
        CourseDirection(CodeDirectionReferenceType),
        TurnDirection(CodeDirectionTurnType),
        SpeedLimit(ValSpeedType),
        SpeedReference(CodeSpeedReferenceType),
        SpeedInterpretation(CodeValueInterpretationType),
        BankAngle(ValAngleType),
        Length(ValDistanceType),
        Duration(ValDurationType),
        ProcedureTurnRequired(CodeYesNoType),
        UpperLimitAltitude(ValDistanceVerticalType),
        UpperLimitReference(CodeVerticalReferenceType),
        LowerLimitAltitude(ValDistanceVerticalType),
        LowerLimitReference(CodeVerticalReferenceType),
        AltitudeInterpretation(CodeAltitudeUseType),
        AltitudeOverrideATC(ValDistanceVerticalType),
        AltitudeOverrideReference(CodeVerticalReferenceType),
        VerticalAngle(ValAngleType),
        StartPoint(TerminalSegmentPointPropertyType),
        EndPoint(TerminalSegmentPointPropertyType),
        Trajectory(CurvePropertyType),
        ArcCentre(TerminalSegmentPointPropertyType),
        Angle(ValBearingType),
        Distance(ValDistanceType),
        AircraftCategory(AircraftCharacteristicPropertyType),
        Holding(HoldingUsePropertyType),
        DesignSurface(ObstacleAssessmentAreaPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeFinalGuidanceBaseType {
        Lpv,
        LnavVnav,
        Lnav,
        Gls,
        Asr,
        Ara,
        Arsr,
        Par,
        Ils,
        IlsDme,
        IlsPrm,
        Lda,
        LdaDme,
        Loc,
        LocBc,
        LocDme,
        LocDmeBc,
        Mls,
        MlsDme,
        Ndb,
        NdbDme,
        Sdf,
        Tls,
        Vor,
        VorDme,
        Tacan,
        Vortac,
        Dme,
        Lp,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeRelativePositionBaseType {
        Before,
        At,
        After,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct TerminalSegmentPointType {
        pub id: String,
        pub content: Vec<TerminalSegmentPointTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TerminalSegmentPointTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content2355(TerminalSegmentPointContent2355Type),
        Content2370(TerminalSegmentPointContent2370Type),
        Extension(TerminalSegmentPointTypeExtensionElementType),
    }
    impl AbstractSegmentPointTrait for TerminalSegmentPointType {}
    impl xsd_parser::AsAny for TerminalSegmentPointType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct FasdataBlockType {
        pub id: String,
        pub content: Vec<FasdataBlockTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FasdataBlockTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3267(FasdataBlockContent3267Type),
        Extension(FasdataBlockTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum InitialLegTimeSliceContent3767Type {
        EndConditionDesignator(CodeSegmentTerminationType),
        LegPath(CodeTrajectoryType),
        LegTypeARINC(CodeSegmentPathType),
        Course(ValBearingType),
        CourseType(CodeCourseType),
        CourseDirection(CodeDirectionReferenceType),
        TurnDirection(CodeDirectionTurnType),
        SpeedLimit(ValSpeedType),
        SpeedReference(CodeSpeedReferenceType),
        SpeedInterpretation(CodeValueInterpretationType),
        BankAngle(ValAngleType),
        Length(ValDistanceType),
        Duration(ValDurationType),
        ProcedureTurnRequired(CodeYesNoType),
        UpperLimitAltitude(ValDistanceVerticalType),
        UpperLimitReference(CodeVerticalReferenceType),
        LowerLimitAltitude(ValDistanceVerticalType),
        LowerLimitReference(CodeVerticalReferenceType),
        AltitudeInterpretation(CodeAltitudeUseType),
        AltitudeOverrideATC(ValDistanceVerticalType),
        AltitudeOverrideReference(CodeVerticalReferenceType),
        VerticalAngle(ValAngleType),
        StartPoint(TerminalSegmentPointPropertyType),
        EndPoint(TerminalSegmentPointPropertyType),
        Trajectory(CurvePropertyType),
        ArcCentre(TerminalSegmentPointPropertyType),
        Angle(ValBearingType),
        Distance(ValDistanceType),
        AircraftCategory(AircraftCharacteristicPropertyType),
        Holding(HoldingUsePropertyType),
        DesignSurface(ObstacleAssessmentAreaPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum IntermediateLegTimeSliceContent3812Type {
        EndConditionDesignator(CodeSegmentTerminationType),
        LegPath(CodeTrajectoryType),
        LegTypeARINC(CodeSegmentPathType),
        Course(ValBearingType),
        CourseType(CodeCourseType),
        CourseDirection(CodeDirectionReferenceType),
        TurnDirection(CodeDirectionTurnType),
        SpeedLimit(ValSpeedType),
        SpeedReference(CodeSpeedReferenceType),
        SpeedInterpretation(CodeValueInterpretationType),
        BankAngle(ValAngleType),
        Length(ValDistanceType),
        Duration(ValDurationType),
        ProcedureTurnRequired(CodeYesNoType),
        UpperLimitAltitude(ValDistanceVerticalType),
        UpperLimitReference(CodeVerticalReferenceType),
        LowerLimitAltitude(ValDistanceVerticalType),
        LowerLimitReference(CodeVerticalReferenceType),
        AltitudeInterpretation(CodeAltitudeUseType),
        AltitudeOverrideATC(ValDistanceVerticalType),
        AltitudeOverrideReference(CodeVerticalReferenceType),
        VerticalAngle(ValAngleType),
        StartPoint(TerminalSegmentPointPropertyType),
        EndPoint(TerminalSegmentPointPropertyType),
        Trajectory(CurvePropertyType),
        ArcCentre(TerminalSegmentPointPropertyType),
        Angle(ValBearingType),
        Distance(ValDistanceType),
        AircraftCategory(AircraftCharacteristicPropertyType),
        Holding(HoldingUsePropertyType),
        DesignSurface(ObstacleAssessmentAreaPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum MissedApproachLegTimeSliceContent3857Type {
        EndConditionDesignator(CodeSegmentTerminationType),
        LegPath(CodeTrajectoryType),
        LegTypeARINC(CodeSegmentPathType),
        Course(ValBearingType),
        CourseType(CodeCourseType),
        CourseDirection(CodeDirectionReferenceType),
        TurnDirection(CodeDirectionTurnType),
        SpeedLimit(ValSpeedType),
        SpeedReference(CodeSpeedReferenceType),
        SpeedInterpretation(CodeValueInterpretationType),
        BankAngle(ValAngleType),
        Length(ValDistanceType),
        Duration(ValDurationType),
        ProcedureTurnRequired(CodeYesNoType),
        UpperLimitAltitude(ValDistanceVerticalType),
        UpperLimitReference(CodeVerticalReferenceType),
        LowerLimitAltitude(ValDistanceVerticalType),
        LowerLimitReference(CodeVerticalReferenceType),
        AltitudeInterpretation(CodeAltitudeUseType),
        AltitudeOverrideATC(ValDistanceVerticalType),
        AltitudeOverrideReference(CodeVerticalReferenceType),
        VerticalAngle(ValAngleType),
        StartPoint(TerminalSegmentPointPropertyType),
        EndPoint(TerminalSegmentPointPropertyType),
        Trajectory(CurvePropertyType),
        ArcCentre(TerminalSegmentPointPropertyType),
        Angle(ValBearingType),
        Distance(ValDistanceType),
        AircraftCategory(AircraftCharacteristicPropertyType),
        Holding(HoldingUsePropertyType),
        DesignSurface(ObstacleAssessmentAreaPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeSafeAltitudeBaseType {
        Msa,
        Esa,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeCourseBaseType {
        TrueTrack,
        MagTrack,
        TrueBrg,
        MagBrg,
        Hdg,
        Rdl,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct HoldingPatternDurationPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: HoldingPatternDurationPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum HoldingPatternDurationPropertyTypeContent {
        HoldingPatternDuration(HoldingPatternDurationType),
    }
    #[derive(Debug, Clone)]
    pub struct HoldingPatternDistancePropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: HoldingPatternDistancePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum HoldingPatternDistancePropertyTypeContent {
        HoldingPatternDistance(HoldingPatternDistanceType),
    }
    #[derive(Debug, Clone)]
    pub struct FlightCharacteristicType {
        pub id: String,
        pub content: Vec<FlightCharacteristicTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FlightCharacteristicTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1849(FlightCharacteristicContent1849Type),
        Extension(FlightCharacteristicTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct FlightRestrictionRouteType {
        pub id: String,
        pub content: Vec<FlightRestrictionRouteTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FlightRestrictionRouteTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content4116(FlightRestrictionRouteContent4116Type),
        Extension(FlightRestrictionRouteTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeRouteSegmentPathBaseType {
        Grc,
        Rhl,
        Gds,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeRouteNavigationBaseType {
        Conv,
        Rnav,
        Tacan,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeRouteDesignatorSuffixBaseType {
        F,
        G,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct EnRouteSegmentPointType {
        pub id: String,
        pub content: Vec<EnRouteSegmentPointTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum EnRouteSegmentPointTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content2380(EnRouteSegmentPointContent2380Type),
        Content2395(EnRouteSegmentPointContent2395Type),
        Extension(EnRouteSegmentPointTypeExtensionElementType),
    }
    impl AbstractSegmentPointTrait for EnRouteSegmentPointType {}
    impl xsd_parser::AsAny for EnRouteSegmentPointType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum CodeRouteDesignatorPrefixBaseType {
        K,
        U,
        S,
        T,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeRouteDesignatorLetterBaseType {
        A,
        B,
        G,
        H,
        J,
        L,
        M,
        N,
        P,
        Q,
        R,
        T,
        V,
        W,
        Y,
        Z,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeRouteOriginBaseType {
        Intl,
        Dom,
        Both,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeMilitaryTrainingBaseType {
        Ir,
        Vr,
        Sr,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeTACANChannelBaseType {
        _1X,
        _1Y,
        _2X,
        _2Y,
        _3X,
        _3Y,
        _4X,
        _4Y,
        _5X,
        _5Y,
        _6X,
        _6Y,
        _7X,
        _7Y,
        _8X,
        _8Y,
        _9X,
        _9Y,
        _10X,
        _10Y,
        _11X,
        _11Y,
        _12X,
        _12Y,
        _13X,
        _13Y,
        _14X,
        _14Y,
        _15X,
        _15Y,
        _16X,
        _16Y,
        _17X,
        _17Y,
        _17Z,
        _18X,
        _18W,
        _18Y,
        _18Z,
        _19X,
        _19Y,
        _19Z,
        _20X,
        _20W,
        _20Y,
        _20Z,
        _21X,
        _21Y,
        _21Z,
        _22X,
        _22W,
        _22Y,
        _22Z,
        _23X,
        _23Y,
        _23Z,
        _24X,
        _24W,
        _24Y,
        _24Z,
        _25X,
        _25Y,
        _25Z,
        _26X,
        _26W,
        _26Y,
        _26Z,
        _27X,
        _27Y,
        _27Z,
        _28X,
        _28W,
        _28Y,
        _28Z,
        _29X,
        _29Y,
        _29Z,
        _30X,
        _30W,
        _30Y,
        _30Z,
        _31X,
        _31Y,
        _31Z,
        _32X,
        _32W,
        _32Y,
        _32Z,
        _33X,
        _33Y,
        _33Z,
        _34X,
        _34W,
        _34Y,
        _34Z,
        _35X,
        _35Y,
        _35Z,
        _36X,
        _36W,
        _36Y,
        _36Z,
        _37X,
        _37Y,
        _37Z,
        _38X,
        _38W,
        _38Y,
        _38Z,
        _39X,
        _39Y,
        _39Z,
        _40X,
        _40W,
        _40Y,
        _40Z,
        _41X,
        _41Y,
        _41Z,
        _42X,
        _42W,
        _42Y,
        _42Z,
        _43X,
        _43Y,
        _43Z,
        _44X,
        _44W,
        _44Y,
        _44Z,
        _45X,
        _45Y,
        _45Z,
        _46X,
        _46W,
        _46Y,
        _46Z,
        _47X,
        _47Y,
        _47Z,
        _48X,
        _48W,
        _48Y,
        _48Z,
        _49X,
        _49Y,
        _49Z,
        _50X,
        _50W,
        _50Y,
        _50Z,
        _51X,
        _51Y,
        _51Z,
        _52X,
        _52W,
        _52Y,
        _52Z,
        _53X,
        _53Y,
        _53Z,
        _54X,
        _54W,
        _54Y,
        _54Z,
        _55X,
        _55Y,
        _55Z,
        _56X,
        _56W,
        _56Y,
        _56Z,
        _57X,
        _57Y,
        _58X,
        _58Y,
        _59X,
        _59Y,
        _60X,
        _60Y,
        _61X,
        _61Y,
        _62X,
        _62Y,
        _63X,
        _63Y,
        _64X,
        _64Y,
        _65X,
        _65Y,
        _66X,
        _66Y,
        _67X,
        _67Y,
        _68X,
        _68Y,
        _69X,
        _69Y,
        _70X,
        _70Y,
        _71X,
        _71Y,
        _72X,
        _72Y,
        _73X,
        _73Y,
        _74X,
        _74Y,
        _75X,
        _75Y,
        _76X,
        _76Y,
        _77X,
        _77Y,
        _78X,
        _78Y,
        _79X,
        _79Y,
        _80X,
        _80Y,
        _80Z,
        _81X,
        _81Y,
        _81Z,
        _82X,
        _82Y,
        _82Z,
        _83X,
        _83Y,
        _83Z,
        _84X,
        _84Y,
        _84Z,
        _85X,
        _85Y,
        _85Z,
        _86X,
        _86Y,
        _86Z,
        _87X,
        _87Y,
        _87Z,
        _88X,
        _88Y,
        _88Z,
        _89X,
        _89Y,
        _89Z,
        _90X,
        _90Y,
        _90Z,
        _91X,
        _91Y,
        _91Z,
        _92X,
        _92Y,
        _92Z,
        _93X,
        _93Y,
        _93Z,
        _94X,
        _94Y,
        _94Z,
        _95X,
        _95Y,
        _95Z,
        _96X,
        _96Y,
        _96Z,
        _97X,
        _97Y,
        _97Z,
        _98X,
        _98Y,
        _98Z,
        _99X,
        _99Y,
        _99Z,
        _100X,
        _100Y,
        _100Z,
        _101X,
        _101Y,
        _101Z,
        _102X,
        _102Y,
        _102Z,
        _103X,
        _103Y,
        _103Z,
        _104X,
        _104Y,
        _104Z,
        _105X,
        _105Y,
        _105Z,
        _106X,
        _106Y,
        _106Z,
        _107X,
        _107Y,
        _107Z,
        _108X,
        _108Y,
        _108Z,
        _109X,
        _109Y,
        _109Z,
        _110X,
        _110Y,
        _110Z,
        _111X,
        _111Y,
        _111Z,
        _112X,
        _112Y,
        _112Z,
        _113X,
        _113Y,
        _113Z,
        _114X,
        _114Y,
        _114Z,
        _115X,
        _115Y,
        _115Z,
        _116X,
        _116Y,
        _116Z,
        _117X,
        _117Y,
        _117Z,
        _118X,
        _118Y,
        _118Z,
        _119X,
        _119Y,
        _119Z,
        _120X,
        _120Y,
        _121X,
        _121Y,
        _122X,
        _122Y,
        _123X,
        _123Y,
        _124X,
        _124Y,
        _125X,
        _125Y,
        _126X,
        _126Y,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct AerialRefuellingTrackType {
        pub id: String,
        pub content: Vec<AerialRefuellingTrackTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AerialRefuellingTrackTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content4394(AerialRefuellingTrackContent4394Type),
        Extension(AerialRefuellingTrackTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct AerialRefuellingAnchorType {
        pub id: String,
        pub content: Vec<AerialRefuellingAnchorTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AerialRefuellingAnchorTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content4375(AerialRefuellingAnchorContent4375Type),
        Extension(AerialRefuellingAnchorTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct AuthorityForAerialRefuellingType {
        pub id: String,
        pub content: Vec<AuthorityForAerialRefuellingTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AuthorityForAerialRefuellingTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content4404(AuthorityForAerialRefuellingContent4404Type),
        Extension(AuthorityForAerialRefuellingTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractExtensionType {
        pub id: String,
        pub content: AbstractExtensionTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractExtensionTypeContent {
        Content3(gml::AbstractGMLContent3Type),
    }
    impl AbstractExtensionTrait for AbstractExtensionType {}
    impl xsd_parser::AsAny for AbstractExtensionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum NoteContent2988Type {
        PropertyName(TextPropertyNameType),
        Purpose(CodeFlightPurposeType),
        TranslatedNote(LinguisticNotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct NoteTypeExtensionElementType {
        pub owns: bool,
        pub content: NoteTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NoteTypeExtensionElementTypeContent {
        AbstractNoteExtension(AbstractNoteExtension),
    }
    impl NoteTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ManoeuvringAreaAvailabilityContent245Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum ManoeuvringAreaAvailabilityContent249Type {
        OperationalStatus(CodeStatusAirportType),
        Warning(CodeAirportWarningType),
        Usage(ManoeuvringAreaUsagePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ManoeuvringAreaAvailabilityTypeExtensionElementType {
        pub owns: bool,
        pub content: ManoeuvringAreaAvailabilityTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ManoeuvringAreaAvailabilityTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractManoeuvringAreaAvailabilityExtension(AbstractManoeuvringAreaAvailabilityExtension),
    }
    impl ManoeuvringAreaAvailabilityTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractPropertiesWithSchedule(pub Box<dyn AbstractPropertiesWithScheduleTrait>);
    pub trait AbstractPropertiesWithScheduleTrait:
        core::fmt::Debug + Clone + xsd_parser::AsAny
    {
    }
    #[derive(Debug, Clone)]
    pub enum RunwayDeclaredDistanceContent222Type {
        Type(CodeRunwayProtectionAreaType),
        DeclaredValue(RunwayDeclaredDistanceValuePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RunwayDeclaredDistanceTypeExtensionElementType {
        pub owns: bool,
        pub content: RunwayDeclaredDistanceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayDeclaredDistanceTypeExtensionElementTypeContent {
        AbstractRunwayDeclaredDistanceExtension(AbstractRunwayDeclaredDistanceExtension),
    }
    impl RunwayDeclaredDistanceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum NavaidEquipmentDistanceContent212Type {
        Distance(ValDistanceType),
        DistanceAccuracy(ValDistanceType),
        Annotation(NotePropertyType),
        TheNavaidEquipment(NavaidEquipmentPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct NavaidEquipmentDistanceTypeExtensionElementType {
        pub owns: bool,
        pub content: NavaidEquipmentDistanceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NavaidEquipmentDistanceTypeExtensionElementTypeContent {
        AbstractNavaidEquipmentDistanceExtension(AbstractNavaidEquipmentDistanceExtension),
    }
    impl NavaidEquipmentDistanceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum SurfaceCharacteristicsContent1093Type {
        Composition(CodeSurfaceCompositionType),
        Preparation(CodeSurfacePreparationType),
        SurfaceCondition(CodeSurfaceConditionType),
        ClassPCN(ValPCNType),
        PavementTypePCN(CodePCNPavementType),
        PavementSubgradePCN(CodePCNSubgradeType),
        MaxTyrePressurePCN(CodePCNTyrePressureType),
        EvaluationMethodPCN(CodePCNMethodType),
        ClassLCN(ValLCNType),
        WeightSIWL(ValWeightType),
        TyrePressureSIWL(ValPressureType),
        WeightAUW(ValWeightType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct SurfaceCharacteristicsTypeExtensionElementType {
        pub owns: bool,
        pub content: SurfaceCharacteristicsTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SurfaceCharacteristicsTypeExtensionElementTypeContent {
        AbstractSurfaceCharacteristicsExtension(AbstractSurfaceCharacteristicsExtension),
    }
    impl SurfaceCharacteristicsTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RunwayContaminationContent852Type {
        ObservationTime(DateTimeType),
        Depth(ValDepthType),
        FrictionCoefficient(ValFrictionType),
        FrictionEstimation(CodeFrictionEstimateType),
        FrictionDevice(CodeFrictionDeviceType),
        ObscuredLights(CodeYesNoType),
        FurtherClearanceTime(TimeType),
        FurtherTotalClearance(CodeYesNoType),
        NextObservationTime(DateTimeType),
        Proportion(ValPercentType),
        CriticalRidge(RidgePropertyType),
        Layer(SurfaceContaminationLayerPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum RunwayContaminationContent866Type {
        ClearedLength(ValDistanceType),
        ClearedWidth(ValDistanceType),
        ClearedSide(CodeSideType),
        FurtherClearanceLength(ValDistanceType),
        FurtherClearanceWidth(ValDistanceType),
        ObscuredLightsSide(CodeSideType),
        ClearedLengthBegin(ValDistanceType),
        TaxiwayAvailable(CodeYesNoType),
        ApronAvailable(CodeYesNoType),
    }
    #[derive(Debug, Clone)]
    pub struct RunwayContaminationTypeExtensionElementType {
        pub owns: bool,
        pub content: RunwayContaminationTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayContaminationTypeExtensionElementTypeContent {
        AbstractSurfaceContaminationExtension(AbstractSurfaceContaminationExtension),
        AbstractRunwayContaminationExtension(AbstractRunwayContaminationExtension),
    }
    impl RunwayContaminationTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSurfaceContamination(pub Box<dyn AbstractSurfaceContaminationTrait>);
    pub trait AbstractSurfaceContaminationTrait:
        core::fmt::Debug + Clone + xsd_parser::AsAny
    {
    }
    #[derive(Debug, Clone)]
    pub enum RunwaySectionContaminationContent912Type {
        ObservationTime(DateTimeType),
        Depth(ValDepthType),
        FrictionCoefficient(ValFrictionType),
        FrictionEstimation(CodeFrictionEstimateType),
        FrictionDevice(CodeFrictionDeviceType),
        ObscuredLights(CodeYesNoType),
        FurtherClearanceTime(TimeType),
        FurtherTotalClearance(CodeYesNoType),
        NextObservationTime(DateTimeType),
        Proportion(ValPercentType),
        CriticalRidge(RidgePropertyType),
        Layer(SurfaceContaminationLayerPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum RunwaySectionContaminationContent926Type {
        Section(CodeRunwaySectionType),
    }
    #[derive(Debug, Clone)]
    pub struct RunwaySectionContaminationTypeExtensionElementType {
        pub owns: bool,
        pub content: RunwaySectionContaminationTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwaySectionContaminationTypeExtensionElementTypeContent {
        AbstractSurfaceContaminationExtension(AbstractSurfaceContaminationExtension),
        AbstractRunwaySectionContaminationExtension(AbstractRunwaySectionContaminationExtension),
    }
    impl RunwaySectionContaminationTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum CodeLightIntensityBaseType {
        Lil,
        Lim,
        Lih,
        LilLih,
        Predetermined,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct LightElementType {
        pub id: String,
        pub content: Vec<LightElementTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum LightElementTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1862(LightElementContent1862Type),
        Extension(LightElementTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayContaminationContent881Type {
        ObservationTime(DateTimeType),
        Depth(ValDepthType),
        FrictionCoefficient(ValFrictionType),
        FrictionEstimation(CodeFrictionEstimateType),
        FrictionDevice(CodeFrictionDeviceType),
        ObscuredLights(CodeYesNoType),
        FurtherClearanceTime(TimeType),
        FurtherTotalClearance(CodeYesNoType),
        NextObservationTime(DateTimeType),
        Proportion(ValPercentType),
        CriticalRidge(RidgePropertyType),
        Layer(SurfaceContaminationLayerPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayContaminationContent895Type {
        ClearedWidth(ValDistanceType),
    }
    #[derive(Debug, Clone)]
    pub struct TaxiwayContaminationTypeExtensionElementType {
        pub owns: bool,
        pub content: TaxiwayContaminationTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TaxiwayContaminationTypeExtensionElementTypeContent {
        AbstractSurfaceContaminationExtension(AbstractSurfaceContaminationExtension),
        AbstractTaxiwayContaminationExtension(AbstractTaxiwayContaminationExtension),
    }
    impl TaxiwayContaminationTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum CityContent1124Type {
        Name(TextNameType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CityTypeExtensionElementType {
        pub owns: bool,
        pub content: CityTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum CityTypeExtensionElementTypeContent {
        AbstractCityExtension(AbstractCityExtension),
    }
    impl CityTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportResponsibilityOrganisationContent1203Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportResponsibilityOrganisationContent1207Type {
        Role(CodeRunwayPointRoleType),
        TheOrganisationAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AirportHeliportResponsibilityOrganisationTypeExtensionElementType {
        pub owns: bool,
        pub content: AirportHeliportResponsibilityOrganisationTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportResponsibilityOrganisationTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractAirportHeliportResponsibilityOrganisationExtension(
            AbstractAirportHeliportResponsibilityOrganisationExtension,
        ),
    }
    impl AirportHeliportResponsibilityOrganisationTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ContactInformationContent1768Type {
        Name(TextNameType),
        Title(TextNameType),
        Address(PostalAddressPropertyType),
        NetworkNode(OnlineContactPropertyType),
        PhoneFax(TelephoneContactPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ContactInformationTypeExtensionElementType {
        pub owns: bool,
        pub content: ContactInformationTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ContactInformationTypeExtensionElementTypeContent {
        AbstractContactInformationExtension(AbstractContactInformationExtension),
    }
    impl ContactInformationTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceLayerClassContent1370Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceLayerClassContent1374Type {
        Classification(CodeAirspaceClassificationType),
        AssociatedLevels(AirspaceLayerPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceLayerClassTypeExtensionElementType {
        pub owns: bool,
        pub content: AirspaceLayerClassTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceLayerClassTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractAirspaceLayerClassExtension(AbstractAirspaceLayerClassExtension),
    }
    impl AirspaceLayerClassTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceGeometryComponentContent1326Type {
        Operation(CodeOperationManoeuvringAreaType),
        OperationSequence(NoSequenceType),
        Annotation(NotePropertyType),
        TheAirspaceVolume(AirspaceVolumePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceGeometryComponentTypeExtensionElementType {
        pub owns: bool,
        pub content: AirspaceGeometryComponentTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceGeometryComponentTypeExtensionElementTypeContent {
        AbstractAirspaceGeometryComponentExtension(AbstractAirspaceGeometryComponentExtension),
    }
    impl AirspaceGeometryComponentTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum CodeStandbyPowerBaseType {
        Battery,
        Commercial,
        Generator,
        Unknown,
        None,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct SurveillanceGroundStationType {
        pub id: String,
        pub content: Vec<SurveillanceGroundStationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SurveillanceGroundStationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1607(SurveillanceGroundStationContent1607Type),
        Extension(SurveillanceGroundStationTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum RadarComponentContent1532Type {
        CollocationGroup(NoSequenceType),
        Annotation(NotePropertyType),
        TheRadarEquipment(RadarEquipmentPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RadarComponentTypeExtensionElementType {
        pub owns: bool,
        pub content: RadarComponentTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RadarComponentTypeExtensionElementTypeContent {
        AbstractRadarComponentExtension(AbstractRadarComponentExtension),
    }
    impl RadarComponentTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AerialRefuellingPointType {
        pub id: String,
        pub content: Vec<AerialRefuellingPointTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AerialRefuellingPointTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content4352(AerialRefuellingPointContent4352Type),
        Content4367(AerialRefuellingPointContent4367Type),
        Extension(AerialRefuellingPointTypeExtensionElementType),
    }
    impl AbstractSegmentPointTrait for AerialRefuellingPointType {}
    impl xsd_parser::AsAny for AerialRefuellingPointType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum ObstacleAssessmentAreaContent1616Type {
        Type(CodeRunwayProtectionAreaType),
        SectionNumber(NoNumberType),
        Slope(ValSlopeType),
        AssessedAltitude(ValDistanceVerticalType),
        SlopeLowerAltitude(ValDistanceVerticalType),
        GradientLowHigh(ValSlopeType),
        SurfaceZone(CodeObstructionIdSurfaceZoneType),
        SafetyRegulation(TextNameType),
        AircraftCategory(AircraftCharacteristicPropertyType),
        SignificantObstacle(ObstructionPropertyType),
        Surface(Surface),
        StartingCurve(CurvePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ObstacleAssessmentAreaTypeExtensionElementType {
        pub owns: bool,
        pub content: ObstacleAssessmentAreaTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ObstacleAssessmentAreaTypeExtensionElementTypeContent {
        AbstractObstacleAssessmentAreaExtension(AbstractObstacleAssessmentAreaExtension),
    }
    impl ObstacleAssessmentAreaTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum StandardLevelContent1739Type {
        VerticalDistance(ValDistanceVerticalType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct StandardLevelTypeExtensionElementType {
        pub owns: bool,
        pub content: StandardLevelTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum StandardLevelTypeExtensionElementTypeContent {
        AbstractStandardLevelExtension(AbstractStandardLevelExtension),
    }
    impl StandardLevelTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum CircleSectorContent1899Type {
        ArcDirection(CodeArcDirectionType),
        FromAngle(ValBearingType),
        ToAngle(ValBearingType),
        AngleType(CodeNorthReferenceType),
        AngleDirectionReference(CodeDirectionReferenceType),
        InnerDistance(ValDistanceType),
        OuterDistance(ValDistanceType),
        UpperLimit(ValDistanceVerticalType),
        UpperLimitReference(CodeVerticalReferenceType),
        LowerLimit(ValDistanceVerticalType),
        LowerLimitReference(CodeVerticalReferenceType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CircleSectorTypeExtensionElementType {
        pub owns: bool,
        pub content: CircleSectorTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum CircleSectorTypeExtensionElementTypeContent {
        AbstractCircleSectorExtension(AbstractCircleSectorExtension),
    }
    impl CircleSectorTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum LightActivationContent641Type {
        Clicks(NoNumberType),
        IntensityLevel(CodeLightIntensityType),
        Activation(CodeSystemActivationType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct LightActivationTypeExtensionElementType {
        pub owns: bool,
        pub content: LightActivationTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum LightActivationTypeExtensionElementTypeContent {
        AbstractLightActivationExtension(AbstractLightActivationExtension),
    }
    impl LightActivationTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum CodeFlightDestinationBaseType {
        Arr,
        Dep,
        Overfly,
        All,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum RoutePortionContent4238Type {
        Content4239(RoutePortionContent4239Type),
        Content4246(RoutePortionContent4246Type),
        ReferencedRoute(RoutePropertyType),
        Content4254(RoutePortionContent4254Type),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RoutePortionTypeExtensionElementType {
        pub owns: bool,
        pub content: RoutePortionTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RoutePortionTypeExtensionElementTypeContent {
        AbstractRoutePortionExtension(AbstractRoutePortionExtension),
    }
    impl RoutePortionTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum FuelContent2284Type {
        Category(CodeFireFightingType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct FuelTypeExtensionElementType {
        pub owns: bool,
        pub content: FuelTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FuelTypeExtensionElementTypeContent {
        AbstractFuelExtension(AbstractFuelExtension),
    }
    impl FuelTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum OilContent2300Type {
        Category(CodeFireFightingType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct OilTypeExtensionElementType {
        pub owns: bool,
        pub content: OilTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum OilTypeExtensionElementTypeContent {
        AbstractOilExtension(AbstractOilExtension),
    }
    impl OilTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum NitrogenContent2292Type {
        Type(CodeRunwayProtectionAreaType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct NitrogenTypeExtensionElementType {
        pub owns: bool,
        pub content: NitrogenTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NitrogenTypeExtensionElementTypeContent {
        AbstractNitrogenExtension(AbstractNitrogenExtension),
    }
    impl NitrogenTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum OxygenContent2308Type {
        Type(CodeRunwayProtectionAreaType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct OxygenTypeExtensionElementType {
        pub owns: bool,
        pub content: OxygenTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum OxygenTypeExtensionElementTypeContent {
        AbstractOxygenExtension(AbstractOxygenExtension),
    }
    impl OxygenTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct NavaidEquipmentMonitoringType {
        pub id: String,
        pub content: Vec<NavaidEquipmentMonitoringTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NavaidEquipmentMonitoringTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content2887(NavaidEquipmentMonitoringContent2887Type),
        Content2891(NavaidEquipmentMonitoringContent2891Type),
        Extension(NavaidEquipmentMonitoringTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for NavaidEquipmentMonitoringType {}
    impl xsd_parser::AsAny for NavaidEquipmentMonitoringType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum CodeAltitudeUseBaseType {
        AboveLower,
        BelowUpper,
        AtLower,
        Between,
        Recommended,
        ExpectLower,
        AsAssigned,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum OrganisationAuthorityAssociationContent3020Type {
        Type(CodeRunwayProtectionAreaType),
        Annotation(NotePropertyType),
        TheOrganisationAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct OrganisationAuthorityAssociationTypeExtensionElementType {
        pub owns: bool,
        pub content: OrganisationAuthorityAssociationTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum OrganisationAuthorityAssociationTypeExtensionElementTypeContent {
        AbstractOrganisationAuthorityAssociationExtension(
            AbstractOrganisationAuthorityAssociationExtension,
        ),
    }
    impl OrganisationAuthorityAssociationTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum UnitDependencyContent3050Type {
        Type(CodeRunwayProtectionAreaType),
        Annotation(NotePropertyType),
        TheUnit(UnitPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct UnitDependencyTypeExtensionElementType {
        pub owns: bool,
        pub content: UnitDependencyTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum UnitDependencyTypeExtensionElementTypeContent {
        AbstractUnitDependencyExtension(AbstractUnitDependencyExtension),
    }
    impl UnitDependencyTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum VerticalStructurePartContent3070Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum VerticalStructurePartContent3074Type {
        VerticalExtent(ValDistanceType),
        VerticalExtentAccuracy(ValDistanceType),
        Type(CodeRunwayProtectionAreaType),
        ConstructionStatus(CodeStatusConstructionType),
        MarkingPattern(CodeVerticalStructureMarkingType),
        MarkingFirstColour(CodeColourType),
        MarkingSecondColour(CodeColourType),
        Mobile(CodeYesNoType),
        Frangible(CodeYesNoType),
        VisibleMaterial(CodeVerticalStructureMaterialType),
        Designator(TextDesignatorType),
        Content3086(VerticalStructurePartContent3086Type),
        Lighting(CodeYesNoType),
    }
    #[derive(Debug, Clone)]
    pub struct VerticalStructurePartTypeExtensionElementType {
        pub owns: bool,
        pub content: VerticalStructurePartTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum VerticalStructurePartTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractVerticalStructurePartExtension(AbstractVerticalStructurePartExtension),
    }
    impl VerticalStructurePartTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum VerticalStructureLightingStatusContent3144Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum VerticalStructureLightingStatusContent3148Type {
        Status(CodeStatusOperationsType),
    }
    #[derive(Debug, Clone)]
    pub struct VerticalStructureLightingStatusTypeExtensionElementType {
        pub owns: bool,
        pub content: VerticalStructureLightingStatusTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum VerticalStructureLightingStatusTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractVerticalStructureLightingStatusExtension(
            AbstractVerticalStructureLightingStatusExtension,
        ),
    }
    impl VerticalStructureLightingStatusTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AircraftCharacteristicContent1821Type {
        Type(CodeRunwayProtectionAreaType),
        Engine(CodeAircraftEngineType),
        NumberEngine(CodeAircraftEngineNumberType),
        TypeAircraftICAO(CodeAircraftICAOType),
        AircraftLandingCategory(CodeAircraftCategoryType),
        WingSpan(ValDistanceType),
        WingSpanInterpretation(CodeValueInterpretationType),
        ClassWingSpan(CodeAircraftWingspanClassType),
        Weight(ValWeightType),
        WeightInterpretation(CodeValueInterpretationType),
        Passengers(NoNumberType),
        PassengersInterpretation(CodeValueInterpretationType),
        Speed(ValSpeedType),
        SpeedInterpretation(CodeValueInterpretationType),
        WakeTurbulence(CodeWakeTurbulenceType),
        NavigationEquipment(CodeNavigationEquipmentType),
        NavigationSpecification(CodeNavigationSpecificationType),
        VerticalSeparationCapability(CodeRVSMType),
        AntiCollisionAndSeparationEquipment(CodeEquipmentAntiCollisionType),
        CommunicationEquipment(CodeCommunicationModeType),
        SurveillanceEquipment(CodeTransponderType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AircraftCharacteristicTypeExtensionElementType {
        pub owns: bool,
        pub content: AircraftCharacteristicTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AircraftCharacteristicTypeExtensionElementTypeContent {
        AbstractAircraftCharacteristicExtension(AbstractAircraftCharacteristicExtension),
    }
    impl AircraftCharacteristicTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum CodeDesignStandardBaseType {
        PansOps,
        Terps,
        CanadaTerps,
        Nato,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeProcedureCodingStandardBaseType {
        PansOps,
        Arinc42415,
        Arinc42418,
        Arinc42419,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct ProcedureTransitionType {
        pub id: String,
        pub content: Vec<ProcedureTransitionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ProcedureTransitionTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3537(ProcedureTransitionContent3537Type),
        Extension(ProcedureTransitionTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct RadarSystemPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl RadarSystemPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum LandingTakeoffAreaCollectionContent3910Type {
        Runway(RunwayType),
        Tlof(TouchDownLiftOffPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct LandingTakeoffAreaCollectionTypeExtensionElementType {
        pub owns: bool,
        pub content: LandingTakeoffAreaCollectionTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum LandingTakeoffAreaCollectionTypeExtensionElementTypeContent {
        AbstractLandingTakeoffAreaCollectionExtension(
            AbstractLandingTakeoffAreaCollectionExtension,
        ),
    }
    impl LandingTakeoffAreaCollectionTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum MissedApproachGroupContent3368Type {
        Instruction(TextInstructionType),
        AlternateClimbInstruction(TextInstructionType),
        AlternateClimbAltitude(ValDistanceVerticalType),
        Altimeter(AltimeterSourcePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MissedApproachGroupTypeExtensionElementType {
        pub owns: bool,
        pub content: MissedApproachGroupTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum MissedApproachGroupTypeExtensionElementTypeContent {
        AbstractMissedApproachGroupExtension(AbstractMissedApproachGroupExtension),
    }
    impl MissedApproachGroupTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct ApproachTimingTablePropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: ApproachTimingTablePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ApproachTimingTablePropertyTypeContent {
        ApproachTimingTable(ApproachTimingTableType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractFinalProfileExtension(pub Box<dyn AbstractFinalProfileExtensionTrait>);
    pub trait AbstractFinalProfileExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum CodeSegmentTerminationBaseType {
        Altitude,
        Distance,
        Duration,
        Intercept,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeTrajectoryBaseType {
        Straight,
        Arc,
        Pt,
        Baseturn,
        Holding,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeSegmentPathBaseType {
        Af,
        Hf,
        Ha,
        Hm,
        If,
        Pi,
        Pt,
        Tf,
        Ca,
        Cd,
        Ci,
        Cr,
        Cf,
        Df,
        Fa,
        Fc,
        Ft,
        Fm,
        Vm,
        Fd,
        Vr,
        Vd,
        Vi,
        Va,
        Rf,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeSpeedReferenceBaseType {
        Ias,
        Tas,
        Gs,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeValueInterpretationBaseType {
        Above,
        AtOrAbove,
        AtOrBelow,
        Below,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct HoldingUseType {
        pub id: String,
        pub content: Vec<HoldingUseTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum HoldingUseTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3551(HoldingUseContent3551Type),
        Extension(HoldingUseTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum TerminalSegmentPointContent2355Type {
        ReportingATC(CodeATCReportingType),
        FlyOver(CodeYesNoType),
        Waypoint(CodeYesNoType),
        RadarGuidance(CodeYesNoType),
        FacilityMakeup(PointReferencePropertyType),
        Content2361(TerminalSegmentPointContent2361Type),
        ExtendedServiceVolume(RadioFrequencyAreaPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum TerminalSegmentPointContent2370Type {
        Role(CodeRunwayPointRoleType),
        LeadRadial(ValBearingType),
        LeadDME(ValDistanceType),
        IndicatorFACF(CodeYesNoType),
    }
    #[derive(Debug, Clone)]
    pub struct TerminalSegmentPointTypeExtensionElementType {
        pub owns: bool,
        pub content: TerminalSegmentPointTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TerminalSegmentPointTypeExtensionElementTypeContent {
        AbstractSegmentPointExtension(AbstractSegmentPointExtension),
        AbstractTerminalSegmentPointExtension(AbstractTerminalSegmentPointExtension),
    }
    impl TerminalSegmentPointTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum FasdataBlockContent3267Type {
        HorizontalAlarmLimit(ValAlarmLimitType),
        VerticalAlarmLimit(ValAlarmLimitType),
        ThresholdCourseWidth(ValDistanceType),
        LengthOffset(ValDistanceSignedType),
        Crcremainder(ValHexType),
        OperationType(NoSequenceType),
        ServiceProviderSBAS(NoSequenceType),
        ApproachPerformanceDesignator(NoSequenceType),
        RouteIndicator(String),
        ReferencePathDataSelector(NoSequenceType),
        ReferencePathIdentifier(String),
        CodeICAO(String),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct FasdataBlockTypeExtensionElementType {
        pub owns: bool,
        pub content: FasdataBlockTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FasdataBlockTypeExtensionElementTypeContent {
        AbstractFASDataBlockExtension(AbstractFASDataBlockExtension),
    }
    impl FasdataBlockTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct HoldingPatternDurationType {
        pub id: String,
        pub content: Vec<HoldingPatternDurationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum HoldingPatternDurationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content4007(HoldingPatternDurationContent4007Type),
        Extension(HoldingPatternDurationTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct HoldingPatternDistanceType {
        pub id: String,
        pub content: Vec<HoldingPatternDistanceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum HoldingPatternDistanceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content4015(HoldingPatternDistanceContent4015Type),
        Extension(HoldingPatternDistanceTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum FlightCharacteristicContent1849Type {
        Type(CodeRunwayProtectionAreaType),
        Rule(CodeFlightRuleType),
        Status(CodeStatusOperationsType),
        Military(CodeMilitaryStatusType),
        Origin(CodeFlightOriginType),
        Purpose(CodeFlightPurposeType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct FlightCharacteristicTypeExtensionElementType {
        pub owns: bool,
        pub content: FlightCharacteristicTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FlightCharacteristicTypeExtensionElementTypeContent {
        AbstractFlightCharacteristicExtension(AbstractFlightCharacteristicExtension),
    }
    impl FlightCharacteristicTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum FlightRestrictionRouteContent4116Type {
        PriorPermission(ValDurationType),
        RouteElement(FlightRoutingElementPropertyType),
        Contact(ContactInformationPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct FlightRestrictionRouteTypeExtensionElementType {
        pub owns: bool,
        pub content: FlightRestrictionRouteTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FlightRestrictionRouteTypeExtensionElementTypeContent {
        AbstractFlightRestrictionRouteExtension(AbstractFlightRestrictionRouteExtension),
    }
    impl FlightRestrictionRouteTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum EnRouteSegmentPointContent2380Type {
        ReportingATC(CodeATCReportingType),
        FlyOver(CodeYesNoType),
        Waypoint(CodeYesNoType),
        RadarGuidance(CodeYesNoType),
        FacilityMakeup(PointReferencePropertyType),
        Content2386(EnRouteSegmentPointContent2386Type),
        ExtendedServiceVolume(RadioFrequencyAreaPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum EnRouteSegmentPointContent2395Type {
        RoleFreeFlight(CodeFreeFlightType),
        RoleRVSM(CodeRVSMPointRoleType),
        TurnRadius(ValDistanceType),
        RoleMilitaryTraining(CodeMilitaryRoutePointType),
    }
    #[derive(Debug, Clone)]
    pub struct EnRouteSegmentPointTypeExtensionElementType {
        pub owns: bool,
        pub content: EnRouteSegmentPointTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum EnRouteSegmentPointTypeExtensionElementTypeContent {
        AbstractSegmentPointExtension(AbstractSegmentPointExtension),
        AbstractEnRouteSegmentPointExtension(AbstractEnRouteSegmentPointExtension),
    }
    impl EnRouteSegmentPointTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AerialRefuellingTrackContent4394Type {
        Extent(ElevatedSurfacePropertyType),
        Point(Point),
        VerticalExtent(ValDistanceType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AerialRefuellingTrackTypeExtensionElementType {
        pub owns: bool,
        pub content: AerialRefuellingTrackTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AerialRefuellingTrackTypeExtensionElementTypeContent {
        AbstractAerialRefuellingTrackExtension(AbstractAerialRefuellingTrackExtension),
    }
    impl AerialRefuellingTrackTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AerialRefuellingAnchorContent4375Type {
        OutboundCourse(ValBearingType),
        OutboundCourseType(CodeCourseType),
        InboundCourse(ValBearingType),
        TurnDirection(CodeDirectionTurnType),
        SpeedLimit(ValSpeedType),
        LegSeparation(ValDistanceType),
        LegLength(ValDistanceType),
        RefuellingBaseLevel(ValDistanceVerticalType),
        RefuellingBaseLevelReference(CodeVerticalReferenceType),
        Extent(ElevatedSurfacePropertyType),
        VerticalExtent(ValDistanceType),
        Point(Point),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AerialRefuellingAnchorTypeExtensionElementType {
        pub owns: bool,
        pub content: AerialRefuellingAnchorTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AerialRefuellingAnchorTypeExtensionElementTypeContent {
        AbstractAerialRefuellingAnchorExtension(AbstractAerialRefuellingAnchorExtension),
    }
    impl AerialRefuellingAnchorTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AuthorityForAerialRefuellingContent4404Type {
        Type(CodeRunwayProtectionAreaType),
        Annotation(NotePropertyType),
        TheOrganisationAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AuthorityForAerialRefuellingTypeExtensionElementType {
        pub owns: bool,
        pub content: AuthorityForAerialRefuellingTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AuthorityForAerialRefuellingTypeExtensionElementTypeContent {
        AbstractAuthorityForAerialRefuellingExtension(
            AbstractAuthorityForAerialRefuellingExtension,
        ),
    }
    impl AuthorityForAerialRefuellingTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TextPropertyNameType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: TextPropertyNameBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct LinguisticNotePropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: LinguisticNotePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum LinguisticNotePropertyTypeContent {
        LinguisticNote(LinguisticNoteType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractNoteExtension(pub Box<dyn AbstractNoteExtensionTrait>);
    pub trait AbstractNoteExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct TimesheetPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: TimesheetPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TimesheetPropertyTypeContent {
        Timesheet(TimesheetType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeStatusAirportType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeStatusAirportBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeAirportWarningType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeAirportWarningBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct ManoeuvringAreaUsagePropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: ManoeuvringAreaUsagePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ManoeuvringAreaUsagePropertyTypeContent {
        ManoeuvringAreaUsage(ManoeuvringAreaUsageType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractPropertiesWithScheduleExtension(
        pub Box<dyn AbstractPropertiesWithScheduleExtensionTrait>,
    );
    pub trait AbstractPropertiesWithScheduleExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractManoeuvringAreaAvailabilityExtension(
        pub Box<dyn AbstractManoeuvringAreaAvailabilityExtensionTrait>,
    );
    pub trait AbstractManoeuvringAreaAvailabilityExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct RunwayDeclaredDistanceValueType {
        pub id: String,
        pub content: Vec<RunwayDeclaredDistanceValueTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayDeclaredDistanceValueTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content233(RunwayDeclaredDistanceValueContent233Type),
        Content237(RunwayDeclaredDistanceValueContent237Type),
        Extension(RunwayDeclaredDistanceValueTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for RunwayDeclaredDistanceValueType {}
    impl xsd_parser::AsAny for RunwayDeclaredDistanceValueType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ApronAreaAvailabilityType {
        pub id: String,
        pub content: Vec<ApronAreaAvailabilityTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ApronAreaAvailabilityTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content421(ApronAreaAvailabilityContent421Type),
        Content425(ApronAreaAvailabilityContent425Type),
        Extension(ApronAreaAvailabilityTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for ApronAreaAvailabilityType {}
    impl xsd_parser::AsAny for ApronAreaAvailabilityType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GroundLightingAvailabilityType {
        pub id: String,
        pub content: Vec<GroundLightingAvailabilityTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GroundLightingAvailabilityTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content651(GroundLightingAvailabilityContent651Type),
        Content655(GroundLightingAvailabilityContent655Type),
        Extension(GroundLightingAvailabilityTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for GroundLightingAvailabilityType {}
    impl xsd_parser::AsAny for GroundLightingAvailabilityType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AltimeterSourceStatusType {
        pub id: String,
        pub content: Vec<AltimeterSourceStatusTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AltimeterSourceStatusTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1229(AltimeterSourceStatusContent1229Type),
        Content1233(AltimeterSourceStatusContent1233Type),
        Extension(AltimeterSourceStatusTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for AltimeterSourceStatusType {}
    impl xsd_parser::AsAny for AltimeterSourceStatusType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct WorkareaActivityType {
        pub id: String,
        pub content: Vec<WorkareaActivityTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum WorkareaActivityTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1240(WorkareaActivityContent1240Type),
        Content1244(WorkareaActivityContent1244Type),
        Extension(WorkareaActivityTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for WorkareaActivityType {}
    impl xsd_parser::AsAny for WorkareaActivityType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ConditionCombinationType {
        pub id: String,
        pub content: Vec<ConditionCombinationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ConditionCombinationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1251(ConditionCombinationContent1251Type),
        Content1255(ConditionCombinationContent1255Type),
        Extension(ConditionCombinationTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for ConditionCombinationType {}
    impl xsd_parser::AsAny for ConditionCombinationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportHeliportAvailabilityType {
        pub id: String,
        pub content: Vec<AirportHeliportAvailabilityTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportAvailabilityTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1266(AirportHeliportAvailabilityContent1266Type),
        Content1270(AirportHeliportAvailabilityContent1270Type),
        Extension(AirportHeliportAvailabilityTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for AirportHeliportAvailabilityType {}
    impl xsd_parser::AsAny for AirportHeliportAvailabilityType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceActivationType {
        pub id: String,
        pub content: Vec<AirspaceActivationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceActivationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1355(AirspaceActivationContent1355Type),
        Content1359(AirspaceActivationContent1359Type),
        Extension(AirspaceActivationTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for AirspaceActivationType {}
    impl xsd_parser::AsAny for AirspaceActivationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct OnlineContactType {
        pub id: String,
        pub content: Vec<OnlineContactTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum OnlineContactTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1780(OnlineContactContent1780Type),
        Content1784(OnlineContactContent1784Type),
        Extension(OnlineContactTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for OnlineContactType {}
    impl xsd_parser::AsAny for OnlineContactType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct PostalAddressType {
        pub id: String,
        pub content: Vec<PostalAddressTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PostalAddressTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1794(PostalAddressContent1794Type),
        Content1798(PostalAddressContent1798Type),
        Extension(PostalAddressTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for PostalAddressType {}
    impl xsd_parser::AsAny for PostalAddressType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TelephoneContactType {
        pub id: String,
        pub content: Vec<TelephoneContactTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TelephoneContactTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1809(TelephoneContactContent1809Type),
        Content1813(TelephoneContactContent1813Type),
        Extension(TelephoneContactTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for TelephoneContactType {}
    impl xsd_parser::AsAny for TelephoneContactType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct LightElementStatusType {
        pub id: String,
        pub content: Vec<LightElementStatusTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum LightElementStatusTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1875(LightElementStatusContent1875Type),
        Content1879(LightElementStatusContent1879Type),
        Extension(LightElementStatusTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for LightElementStatusType {}
    impl xsd_parser::AsAny for LightElementStatusType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ServiceOperationalStatusType {
        pub id: String,
        pub content: Vec<ServiceOperationalStatusTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ServiceOperationalStatusTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content2316(ServiceOperationalStatusContent2316Type),
        Content2320(ServiceOperationalStatusContent2320Type),
        Extension(ServiceOperationalStatusTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for ServiceOperationalStatusType {}
    impl xsd_parser::AsAny for ServiceOperationalStatusType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RadioCommunicationOperationalStatusType {
        pub id: String,
        pub content: Vec<RadioCommunicationOperationalStatusTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RadioCommunicationOperationalStatusTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content2327(RadioCommunicationOperationalStatusContent2327Type),
        Content2331(RadioCommunicationOperationalStatusContent2331Type),
        Extension(RadioCommunicationOperationalStatusTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for RadioCommunicationOperationalStatusType {}
    impl xsd_parser::AsAny for RadioCommunicationOperationalStatusType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct NavaidOperationalStatusType {
        pub id: String,
        pub content: Vec<NavaidOperationalStatusTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NavaidOperationalStatusTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content2875(NavaidOperationalStatusContent2875Type),
        Content2879(NavaidOperationalStatusContent2879Type),
        Extension(NavaidOperationalStatusTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for NavaidOperationalStatusType {}
    impl xsd_parser::AsAny for NavaidOperationalStatusType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SpecialNavigationStationStatusType {
        pub id: String,
        pub content: Vec<SpecialNavigationStationStatusTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SpecialNavigationStationStatusTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content2898(SpecialNavigationStationStatusContent2898Type),
        Content2902(SpecialNavigationStationStatusContent2902Type),
        Extension(SpecialNavigationStationStatusTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for SpecialNavigationStationStatusType {}
    impl xsd_parser::AsAny for SpecialNavigationStationStatusType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct UnitAvailabilityType {
        pub id: String,
        pub content: Vec<UnitAvailabilityTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum UnitAvailabilityTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3059(UnitAvailabilityContent3059Type),
        Content3063(UnitAvailabilityContent3063Type),
        Extension(UnitAvailabilityTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for UnitAvailabilityType {}
    impl xsd_parser::AsAny for UnitAvailabilityType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CirclingRestrictionType {
        pub id: String,
        pub content: Vec<CirclingRestrictionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CirclingRestrictionTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3155(CirclingRestrictionContent3155Type),
        Content3159(CirclingRestrictionContent3159Type),
        Extension(CirclingRestrictionTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for CirclingRestrictionType {}
    impl xsd_parser::AsAny for CirclingRestrictionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ProcedureAvailabilityType {
        pub id: String,
        pub content: Vec<ProcedureAvailabilityTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ProcedureAvailabilityTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3511(ProcedureAvailabilityContent3511Type),
        Content3515(ProcedureAvailabilityContent3515Type),
        Extension(ProcedureAvailabilityTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for ProcedureAvailabilityType {}
    impl xsd_parser::AsAny for ProcedureAvailabilityType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct FlightConditionCombinationType {
        pub id: String,
        pub content: Vec<FlightConditionCombinationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FlightConditionCombinationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content4069(FlightConditionCombinationContent4069Type),
        Content4073(FlightConditionCombinationContent4073Type),
        Extension(FlightConditionCombinationTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for FlightConditionCombinationType {}
    impl xsd_parser::AsAny for FlightConditionCombinationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RouteAvailabilityType {
        pub id: String,
        pub content: Vec<RouteAvailabilityTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RouteAvailabilityTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content4224(RouteAvailabilityContent4224Type),
        Content4228(RouteAvailabilityContent4228Type),
        Extension(RouteAvailabilityTypeExtensionElementType),
    }
    impl AbstractPropertiesWithScheduleTrait for RouteAvailabilityType {}
    impl xsd_parser::AsAny for RouteAvailabilityType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RunwayDeclaredDistanceValuePropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: RunwayDeclaredDistanceValuePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayDeclaredDistanceValuePropertyTypeContent {
        RunwayDeclaredDistanceValue(RunwayDeclaredDistanceValueType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRunwayDeclaredDistanceExtension(
        pub Box<dyn AbstractRunwayDeclaredDistanceExtensionTrait>,
    );
    pub trait AbstractRunwayDeclaredDistanceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractNavaidEquipmentDistanceExtension(
        pub Box<dyn AbstractNavaidEquipmentDistanceExtensionTrait>,
    );
    pub trait AbstractNavaidEquipmentDistanceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeSurfaceCompositionType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeSurfaceCompositionBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeSurfacePreparationType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeSurfacePreparationBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeSurfaceConditionType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeSurfaceConditionBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct ValPCNType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct CodePCNPavementType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodePCNPavementBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodePCNSubgradeType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodePCNSubgradeBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodePCNTyrePressureType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodePCNTyrePressureBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodePCNMethodType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodePCNMethodBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct ValLCNType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct ValWeightType {
        pub uom: Option<UomWeightType>,
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct ValPressureType {
        pub uom: Option<UomPressureType>,
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSurfaceCharacteristicsExtension(
        pub Box<dyn AbstractSurfaceCharacteristicsExtensionTrait>,
    );
    pub trait AbstractSurfaceCharacteristicsExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct DateTimeType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: String,
    }
    #[derive(Debug, Clone)]
    pub struct ValDepthType {
        pub uom: Option<UomDepthType>,
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct ValFrictionType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct CodeFrictionEstimateType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeFrictionEstimateBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeFrictionDeviceType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeFrictionDeviceBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct TimeType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: String,
    }
    #[derive(Debug, Clone)]
    pub struct ValPercentType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct RidgePropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: RidgePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RidgePropertyTypeContent {
        Ridge(RidgeType),
    }
    #[derive(Debug, Clone)]
    pub struct SurfaceContaminationLayerPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: SurfaceContaminationLayerPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SurfaceContaminationLayerPropertyTypeContent {
        SurfaceContaminationLayer(SurfaceContaminationLayerType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSurfaceContaminationExtension(
        pub Box<dyn AbstractSurfaceContaminationExtensionTrait>,
    );
    pub trait AbstractSurfaceContaminationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractRunwayContaminationExtension(
        pub Box<dyn AbstractRunwayContaminationExtensionTrait>,
    );
    pub trait AbstractRunwayContaminationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct TouchDownLiftOffContaminationType {
        pub id: String,
        pub content: Vec<TouchDownLiftOffContaminationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffContaminationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content933(TouchDownLiftOffContaminationContent933Type),
        Extension(TouchDownLiftOffContaminationTypeExtensionElementType),
    }
    impl AbstractSurfaceContaminationTrait for TouchDownLiftOffContaminationType {}
    impl xsd_parser::AsAny for TouchDownLiftOffContaminationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ApronContaminationType {
        pub id: String,
        pub content: Vec<ApronContaminationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ApronContaminationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content953(ApronContaminationContent953Type),
        Extension(ApronContaminationTypeExtensionElementType),
    }
    impl AbstractSurfaceContaminationTrait for ApronContaminationType {}
    impl xsd_parser::AsAny for ApronContaminationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AircraftStandContaminationType {
        pub id: String,
        pub content: Vec<AircraftStandContaminationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AircraftStandContaminationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content973(AircraftStandContaminationContent973Type),
        Extension(AircraftStandContaminationTypeExtensionElementType),
    }
    impl AbstractSurfaceContaminationTrait for AircraftStandContaminationType {}
    impl xsd_parser::AsAny for AircraftStandContaminationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportHeliportContaminationType {
        pub id: String,
        pub content: Vec<AirportHeliportContaminationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportContaminationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content993(AirportHeliportContaminationContent993Type),
        Extension(AirportHeliportContaminationTypeExtensionElementType),
    }
    impl AbstractSurfaceContaminationTrait for AirportHeliportContaminationType {}
    impl xsd_parser::AsAny for AirportHeliportContaminationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CodeRunwaySectionType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeRunwaySectionBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRunwaySectionContaminationExtension(
        pub Box<dyn AbstractRunwaySectionContaminationExtensionTrait>,
    );
    pub trait AbstractRunwaySectionContaminationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum LightElementContent1862Type {
        Colour(CodeColourType),
        IntensityLevel(CodeLightIntensityType),
        Intensity(ValLightIntensityType),
        Type(CodeRunwayProtectionAreaType),
        Location(ElevatedPointPropertyType),
        Annotation(NotePropertyType),
        Availability(ManoeuvringAreaAvailabilityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct LightElementTypeExtensionElementType {
        pub owns: bool,
        pub content: LightElementTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum LightElementTypeExtensionElementTypeContent {
        AbstractLightElementExtension(AbstractLightElementExtension),
    }
    impl LightElementTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTaxiwayContaminationExtension(
        pub Box<dyn AbstractTaxiwayContaminationExtensionTrait>,
    );
    pub trait AbstractTaxiwayContaminationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractCityExtension(pub Box<dyn AbstractCityExtensionTrait>);
    pub trait AbstractCityExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractAirportHeliportResponsibilityOrganisationExtension(
        pub Box<dyn AbstractAirportHeliportResponsibilityOrganisationExtensionTrait>,
    );
    pub trait AbstractAirportHeliportResponsibilityOrganisationExtensionTrait:
        AbstractExtensionTrait
    {
    }
    #[derive(Debug, Clone)]
    pub struct PostalAddressPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: PostalAddressPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum PostalAddressPropertyTypeContent {
        PostalAddress(PostalAddressType),
    }
    #[derive(Debug, Clone)]
    pub struct OnlineContactPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: OnlineContactPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum OnlineContactPropertyTypeContent {
        OnlineContact(OnlineContactType),
    }
    #[derive(Debug, Clone)]
    pub struct TelephoneContactPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: TelephoneContactPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TelephoneContactPropertyTypeContent {
        TelephoneContact(TelephoneContactType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractContactInformationExtension(
        pub Box<dyn AbstractContactInformationExtensionTrait>,
    );
    pub trait AbstractContactInformationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeAirspaceClassificationType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeAirspaceClassificationBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceLayerPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: AirspaceLayerPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceLayerPropertyTypeContent {
        AirspaceLayer(AirspaceLayerType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAirspaceLayerClassExtension(
        pub Box<dyn AbstractAirspaceLayerClassExtensionTrait>,
    );
    pub trait AbstractAirspaceLayerClassExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeOperationManoeuvringAreaType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeOperationManoeuvringAreaBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct NoSequenceType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: u32,
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceVolumePropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: AirspaceVolumePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceVolumePropertyTypeContent {
        AirspaceVolume(AirspaceVolumeType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAirspaceGeometryComponentExtension(
        pub Box<dyn AbstractAirspaceGeometryComponentExtensionTrait>,
    );
    pub trait AbstractAirspaceGeometryComponentExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum SurveillanceGroundStationContent1607Type {
        VideoMap(CodeYesNoType),
        Annotation(NotePropertyType),
        TheUnit(UnitPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct SurveillanceGroundStationTypeExtensionElementType {
        pub owns: bool,
        pub content: SurveillanceGroundStationTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SurveillanceGroundStationTypeExtensionElementTypeContent {
        AbstractSurveillanceGroundStationExtension(AbstractSurveillanceGroundStationExtension),
    }
    impl SurveillanceGroundStationTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct RadarEquipmentPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl RadarEquipmentPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRadarComponentExtension(pub Box<dyn AbstractRadarComponentExtensionTrait>);
    pub trait AbstractRadarComponentExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum AerialRefuellingPointContent4352Type {
        ReportingATC(CodeATCReportingType),
        FlyOver(CodeYesNoType),
        Waypoint(CodeYesNoType),
        RadarGuidance(CodeYesNoType),
        FacilityMakeup(PointReferencePropertyType),
        Content4358(AerialRefuellingPointContent4358Type),
        ExtendedServiceVolume(RadioFrequencyAreaPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum AerialRefuellingPointContent4367Type {
        Sequence(NoSequenceType),
        UsageType(CodeAerialRefuellingPointType),
    }
    #[derive(Debug, Clone)]
    pub struct AerialRefuellingPointTypeExtensionElementType {
        pub owns: bool,
        pub content: AerialRefuellingPointTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AerialRefuellingPointTypeExtensionElementTypeContent {
        AbstractSegmentPointExtension(AbstractSegmentPointExtension),
        AbstractAerialRefuellingPointExtension(AbstractAerialRefuellingPointExtension),
    }
    impl AerialRefuellingPointTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct CodeObstructionIdSurfaceZoneType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeObstructionIdSurfaceZoneBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct ObstructionPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: ObstructionPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ObstructionPropertyTypeContent {
        Obstruction(ObstructionType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractObstacleAssessmentAreaExtension(
        pub Box<dyn AbstractObstacleAssessmentAreaExtensionTrait>,
    );
    pub trait AbstractObstacleAssessmentAreaExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractStandardLevelExtension(pub Box<dyn AbstractStandardLevelExtensionTrait>);
    pub trait AbstractStandardLevelExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeArcDirectionType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeArcDirectionBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractCircleSectorExtension(pub Box<dyn AbstractCircleSectorExtensionTrait>);
    pub trait AbstractCircleSectorExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractLightActivationExtension(pub Box<dyn AbstractLightActivationExtensionTrait>);
    pub trait AbstractLightActivationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum RoutePortionContent4239Type {
        StartFixDesignatedPoint(DesignatedPointPropertyType),
        StartNavaidSystem(NavaidPropertyType),
        StartAimingPoint(TouchDownLiftOffPropertyType),
        StartRunwayPoint(RunwayCentrelinePointPropertyType),
        StartAirportReferencePoint(AirportHeliportPropertyType),
        StartPosition(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum RoutePortionContent4246Type {
        IntermediatePointFixDesignatedPoint(DesignatedPointPropertyType),
        IntermediatePointNavaidSystem(NavaidPropertyType),
        IntermediatePointAimingPoint(TouchDownLiftOffPropertyType),
        IntermediatePointRunwayPoint(RunwayCentrelinePointPropertyType),
        IntermediatePointAirportReferencePoint(AirportHeliportPropertyType),
        IntermediatePointPosition(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum RoutePortionContent4254Type {
        EndFixDesignatedPoint(DesignatedPointPropertyType),
        EndNavaidSystem(NavaidPropertyType),
        EndAimingPoint(TouchDownLiftOffPropertyType),
        EndRunwayPoint(RunwayCentrelinePointPropertyType),
        EndAirportReferencePoint(AirportHeliportPropertyType),
        EndPosition(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRoutePortionExtension(pub Box<dyn AbstractRoutePortionExtensionTrait>);
    pub trait AbstractRoutePortionExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractFuelExtension(pub Box<dyn AbstractFuelExtensionTrait>);
    pub trait AbstractFuelExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractOilExtension(pub Box<dyn AbstractOilExtensionTrait>);
    pub trait AbstractOilExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractNitrogenExtension(pub Box<dyn AbstractNitrogenExtensionTrait>);
    pub trait AbstractNitrogenExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractOxygenExtension(pub Box<dyn AbstractOxygenExtensionTrait>);
    pub trait AbstractOxygenExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum NavaidEquipmentMonitoringContent2887Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum NavaidEquipmentMonitoringContent2891Type {
        Monitored(CodeYesNoType),
    }
    #[derive(Debug, Clone)]
    pub struct NavaidEquipmentMonitoringTypeExtensionElementType {
        pub owns: bool,
        pub content: NavaidEquipmentMonitoringTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NavaidEquipmentMonitoringTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractNavaidEquipmentMonitoringExtension(AbstractNavaidEquipmentMonitoringExtension),
    }
    impl NavaidEquipmentMonitoringTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractOrganisationAuthorityAssociationExtension(
        pub Box<dyn AbstractOrganisationAuthorityAssociationExtensionTrait>,
    );
    pub trait AbstractOrganisationAuthorityAssociationExtensionTrait:
        AbstractExtensionTrait
    {
    }
    #[derive(Debug, Clone)]
    pub struct AbstractUnitDependencyExtension(pub Box<dyn AbstractUnitDependencyExtensionTrait>);
    pub trait AbstractUnitDependencyExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeStatusConstructionType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeStatusConstructionBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeVerticalStructureMarkingType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeVerticalStructureMarkingBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeVerticalStructureMaterialType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeVerticalStructureMaterialBaseType,
    }
    #[derive(Debug, Clone)]
    pub enum VerticalStructurePartContent3086Type {
        HorizontalProjectionLocation(ElevatedPointPropertyType),
        HorizontalProjectionLinearExtent(ElevatedCurvePropertyType),
        HorizontalProjectionSurfaceExtent(ElevatedSurfacePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractVerticalStructurePartExtension(
        pub Box<dyn AbstractVerticalStructurePartExtensionTrait>,
    );
    pub trait AbstractVerticalStructurePartExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractVerticalStructureLightingStatusExtension(
        pub Box<dyn AbstractVerticalStructureLightingStatusExtensionTrait>,
    );
    pub trait AbstractVerticalStructureLightingStatusExtensionTrait:
        AbstractExtensionTrait
    {
    }
    #[derive(Debug, Clone)]
    pub struct CodeAircraftEngineType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeAircraftEngineBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeAircraftEngineNumberType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeAircraftEngineNumberBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeAircraftICAOType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeAircraftICAOBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeAircraftCategoryType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeAircraftCategoryBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeAircraftWingspanClassType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeAircraftWingspanClassBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeWakeTurbulenceType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeWakeTurbulenceBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeNavigationEquipmentType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeNavigationEquipmentBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeNavigationSpecificationType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeNavigationSpecificationBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeEquipmentAntiCollisionType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeEquipmentAntiCollisionBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAircraftCharacteristicExtension(
        pub Box<dyn AbstractAircraftCharacteristicExtensionTrait>,
    );
    pub trait AbstractAircraftCharacteristicExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum ProcedureTransitionContent3537Type {
        TransitionId(CodeDesignatedPointDesignatorType),
        Type(CodeRunwayProtectionAreaType),
        Instruction(TextInstructionType),
        VectorHeading(ValBearingType),
        DepartureRunwayTransition(LandingTakeoffAreaCollectionPropertyType),
        Trajectory(CurvePropertyType),
        TransitionLeg(ProcedureTransitionLegPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ProcedureTransitionTypeExtensionElementType {
        pub owns: bool,
        pub content: ProcedureTransitionTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ProcedureTransitionTypeExtensionElementTypeContent {
        AbstractProcedureTransitionExtension(AbstractProcedureTransitionExtension),
    }
    impl ProcedureTransitionTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractLandingTakeoffAreaCollectionExtension(
        pub Box<dyn AbstractLandingTakeoffAreaCollectionExtensionTrait>,
    );
    pub trait AbstractLandingTakeoffAreaCollectionExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractMissedApproachGroupExtension(
        pub Box<dyn AbstractMissedApproachGroupExtensionTrait>,
    );
    pub trait AbstractMissedApproachGroupExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct ApproachTimingTableType {
        pub id: String,
        pub content: Vec<ApproachTimingTableTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ApproachTimingTableTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3307(ApproachTimingTableContent3307Type),
        Extension(ApproachTimingTableTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum HoldingUseContent3551Type {
        HoldingUse(HoldingUseType),
        Instruction(TextInstructionType),
        InstructedAltitude(ValDistanceVerticalType),
        InstructionAltitudeReference(CodeVerticalReferenceType),
        Annotation(NotePropertyType),
        TheHoldingPattern(HoldingPatternPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct HoldingUseTypeExtensionElementType {
        pub owns: bool,
        pub content: HoldingUseTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum HoldingUseTypeExtensionElementTypeContent {
        AbstractHoldingUseExtension(AbstractHoldingUseExtension),
    }
    impl HoldingUseTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct CodeATCReportingType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeATCReportingBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct PointReferencePropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: PointReferencePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum PointReferencePropertyTypeContent {
        PointReference(PointReferenceType),
    }
    #[derive(Debug, Clone)]
    pub enum TerminalSegmentPointContent2361Type {
        PointChoiceFixDesignatedPoint(DesignatedPointPropertyType),
        PointChoiceNavaidSystem(NavaidPropertyType),
        PointChoiceAimingPoint(TouchDownLiftOffPropertyType),
        PointChoiceRunwayPoint(RunwayCentrelinePointPropertyType),
        PointChoiceAirportReferencePoint(AirportHeliportPropertyType),
        PointChoicePosition(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RadioFrequencyAreaPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl RadioFrequencyAreaPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSegmentPointExtension(pub Box<dyn AbstractSegmentPointExtensionTrait>);
    pub trait AbstractSegmentPointExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractTerminalSegmentPointExtension(
        pub Box<dyn AbstractTerminalSegmentPointExtensionTrait>,
    );
    pub trait AbstractTerminalSegmentPointExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct ValAlarmLimitType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct ValHexType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: String,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractFASDataBlockExtension(pub Box<dyn AbstractFASDataBlockExtensionTrait>);
    pub trait AbstractFASDataBlockExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum HoldingPatternDurationContent4007Type {
        Duration(ValDurationType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct HoldingPatternDurationTypeExtensionElementType {
        pub owns: bool,
        pub content: HoldingPatternDurationTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum HoldingPatternDurationTypeExtensionElementTypeContent {
        AbstractHoldingPatternDurationExtension(AbstractHoldingPatternDurationExtension),
    }
    impl HoldingPatternDurationTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum HoldingPatternDistanceContent4015Type {
        Length(ValDistanceType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct HoldingPatternDistanceTypeExtensionElementType {
        pub owns: bool,
        pub content: HoldingPatternDistanceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum HoldingPatternDistanceTypeExtensionElementTypeContent {
        AbstractHoldingPatternDistanceExtension(AbstractHoldingPatternDistanceExtension),
    }
    impl HoldingPatternDistanceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct CodeFlightOriginType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeFlightOriginBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractFlightCharacteristicExtension(
        pub Box<dyn AbstractFlightCharacteristicExtensionTrait>,
    );
    pub trait AbstractFlightCharacteristicExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct FlightRoutingElementPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: FlightRoutingElementPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FlightRoutingElementPropertyTypeContent {
        FlightRoutingElement(FlightRoutingElementType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractFlightRestrictionRouteExtension(
        pub Box<dyn AbstractFlightRestrictionRouteExtensionTrait>,
    );
    pub trait AbstractFlightRestrictionRouteExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum EnRouteSegmentPointContent2386Type {
        PointChoiceFixDesignatedPoint(DesignatedPointPropertyType),
        PointChoiceNavaidSystem(NavaidPropertyType),
        PointChoiceAimingPoint(TouchDownLiftOffPropertyType),
        PointChoiceRunwayPoint(RunwayCentrelinePointPropertyType),
        PointChoiceAirportReferencePoint(AirportHeliportPropertyType),
        PointChoicePosition(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeFreeFlightType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeFreeFlightBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeRVSMPointRoleType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeRVSMPointRoleBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeMilitaryRoutePointType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeMilitaryRoutePointBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractEnRouteSegmentPointExtension(
        pub Box<dyn AbstractEnRouteSegmentPointExtensionTrait>,
    );
    pub trait AbstractEnRouteSegmentPointExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractAerialRefuellingTrackExtension(
        pub Box<dyn AbstractAerialRefuellingTrackExtensionTrait>,
    );
    pub trait AbstractAerialRefuellingTrackExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractAerialRefuellingAnchorExtension(
        pub Box<dyn AbstractAerialRefuellingAnchorExtensionTrait>,
    );
    pub trait AbstractAerialRefuellingAnchorExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractAuthorityForAerialRefuellingExtension(
        pub Box<dyn AbstractAuthorityForAerialRefuellingExtensionTrait>,
    );
    pub trait AbstractAuthorityForAerialRefuellingExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone, Default)]
    pub struct TextPropertyNameBaseType(pub Vec<String>);
    #[derive(Debug, Clone)]
    pub struct LinguisticNoteType {
        pub id: String,
        pub content: Vec<LinguisticNoteTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum LinguisticNoteTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content2997(LinguisticNoteContent2997Type),
        Extension(LinguisticNoteTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct TimesheetType {
        pub id: String,
        pub content: Vec<TimesheetTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimesheetTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1917(TimesheetContent1917Type),
        Extension(TimesheetTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeStatusAirportBaseType {
        Normal,
        Limited,
        Closed,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeAirportWarningBaseType {
        Wip,
        Equip,
        Bird,
        Animal,
        RubberRemoval,
        ParkedAcft,
        Resurfacing,
        Paving,
        Painting,
        Inspection,
        GrassCutting,
        Calibration,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct ManoeuvringAreaUsageType {
        pub id: String,
        pub content: Vec<ManoeuvringAreaUsageTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ManoeuvringAreaUsageTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content260(ManoeuvringAreaUsageContent260Type),
        Content266(ManoeuvringAreaUsageContent266Type),
        Extension(ManoeuvringAreaUsageTypeExtensionElementType),
    }
    impl AbstractUsageConditionTrait for ManoeuvringAreaUsageType {}
    impl xsd_parser::AsAny for ManoeuvringAreaUsageType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum RunwayDeclaredDistanceValueContent233Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum RunwayDeclaredDistanceValueContent237Type {
        Distance(ValDistanceType),
        DistanceAccuracy(ValDistanceType),
    }
    #[derive(Debug, Clone)]
    pub struct RunwayDeclaredDistanceValueTypeExtensionElementType {
        pub owns: bool,
        pub content: RunwayDeclaredDistanceValueTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RunwayDeclaredDistanceValueTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractRunwayDeclaredDistanceValueExtension(AbstractRunwayDeclaredDistanceValueExtension),
    }
    impl RunwayDeclaredDistanceValueTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ApronAreaAvailabilityContent421Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum ApronAreaAvailabilityContent425Type {
        OperationalStatus(CodeStatusAirportType),
        Warning(CodeAirportWarningType),
        Usage(ManoeuvringAreaUsagePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ApronAreaAvailabilityTypeExtensionElementType {
        pub owns: bool,
        pub content: ApronAreaAvailabilityTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ApronAreaAvailabilityTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractApronAreaAvailabilityExtension(AbstractApronAreaAvailabilityExtension),
    }
    impl ApronAreaAvailabilityTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum GroundLightingAvailabilityContent651Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum GroundLightingAvailabilityContent655Type {
        OperationalStatus(CodeStatusAirportType),
    }
    #[derive(Debug, Clone)]
    pub struct GroundLightingAvailabilityTypeExtensionElementType {
        pub owns: bool,
        pub content: GroundLightingAvailabilityTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum GroundLightingAvailabilityTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractGroundLightingAvailabilityExtension(AbstractGroundLightingAvailabilityExtension),
    }
    impl GroundLightingAvailabilityTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AltimeterSourceStatusContent1229Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum AltimeterSourceStatusContent1233Type {
        OperationalStatus(CodeStatusAirportType),
    }
    #[derive(Debug, Clone)]
    pub struct AltimeterSourceStatusTypeExtensionElementType {
        pub owns: bool,
        pub content: AltimeterSourceStatusTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AltimeterSourceStatusTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractAltimeterSourceStatusExtension(AbstractAltimeterSourceStatusExtension),
    }
    impl AltimeterSourceStatusTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum WorkareaActivityContent1240Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum WorkareaActivityContent1244Type {
        IsActive(CodeYesNoType),
    }
    #[derive(Debug, Clone)]
    pub struct WorkareaActivityTypeExtensionElementType {
        pub owns: bool,
        pub content: WorkareaActivityTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum WorkareaActivityTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractWorkareaActivityExtension(AbstractWorkareaActivityExtension),
    }
    impl WorkareaActivityTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ConditionCombinationContent1251Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum ConditionCombinationContent1255Type {
        LogicalOperator(CodeLogicalOperatorType),
        Weather(MeteorologyPropertyType),
        Aircraft(AircraftCharacteristicPropertyType),
        Flight(FlightCharacteristicPropertyType),
        SubCondition(ConditionCombinationPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ConditionCombinationTypeExtensionElementType {
        pub owns: bool,
        pub content: ConditionCombinationTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ConditionCombinationTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractConditionCombinationExtension(AbstractConditionCombinationExtension),
    }
    impl ConditionCombinationTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportAvailabilityContent1266Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportAvailabilityContent1270Type {
        OperationalStatus(CodeStatusAirportType),
        Warning(CodeAirportWarningType),
        Usage(ManoeuvringAreaUsagePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AirportHeliportAvailabilityTypeExtensionElementType {
        pub owns: bool,
        pub content: AirportHeliportAvailabilityTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportAvailabilityTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractAirportHeliportAvailabilityExtension(AbstractAirportHeliportAvailabilityExtension),
    }
    impl AirportHeliportAvailabilityTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceActivationContent1355Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceActivationContent1359Type {
        Activity(CodeAirspaceActivityType),
        Status(CodeStatusOperationsType),
        Levels(AirspaceLayerPropertyType),
        User(OrganisationAuthorityPropertyType),
        Aircraft(AircraftCharacteristicPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceActivationTypeExtensionElementType {
        pub owns: bool,
        pub content: AirspaceActivationTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceActivationTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractAirspaceActivationExtension(AbstractAirspaceActivationExtension),
    }
    impl AirspaceActivationTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum OnlineContactContent1780Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum OnlineContactContent1784Type {
        Network(CodeTelecomNetworkType),
        Linkage(TextAddressType),
        Protocol(TextNameType),
        Email(TextAddressType),
    }
    #[derive(Debug, Clone)]
    pub struct OnlineContactTypeExtensionElementType {
        pub owns: bool,
        pub content: OnlineContactTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum OnlineContactTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractOnlineContactExtension(AbstractOnlineContactExtension),
    }
    impl OnlineContactTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum PostalAddressContent1794Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum PostalAddressContent1798Type {
        DeliveryPoint(TextAddressType),
        City(CityType),
        AdministrativeArea(TextNameType),
        PostalCode(TextNameType),
        Country(TextNameType),
    }
    #[derive(Debug, Clone)]
    pub struct PostalAddressTypeExtensionElementType {
        pub owns: bool,
        pub content: PostalAddressTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum PostalAddressTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractPostalAddressExtension(AbstractPostalAddressExtension),
    }
    impl PostalAddressTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum TelephoneContactContent1809Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum TelephoneContactContent1813Type {
        Voice(TextPhoneType),
        Facsimile(TextPhoneType),
    }
    #[derive(Debug, Clone)]
    pub struct TelephoneContactTypeExtensionElementType {
        pub owns: bool,
        pub content: TelephoneContactTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TelephoneContactTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractTelephoneContactExtension(AbstractTelephoneContactExtension),
    }
    impl TelephoneContactTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum LightElementStatusContent1875Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum LightElementStatusContent1879Type {
        Status(CodeStatusOperationsType),
    }
    #[derive(Debug, Clone)]
    pub struct LightElementStatusTypeExtensionElementType {
        pub owns: bool,
        pub content: LightElementStatusTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum LightElementStatusTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractLightElementStatusExtension(AbstractLightElementStatusExtension),
    }
    impl LightElementStatusTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ServiceOperationalStatusContent2316Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum ServiceOperationalStatusContent2320Type {
        OperationalStatus(CodeStatusAirportType),
    }
    #[derive(Debug, Clone)]
    pub struct ServiceOperationalStatusTypeExtensionElementType {
        pub owns: bool,
        pub content: ServiceOperationalStatusTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ServiceOperationalStatusTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractServiceOperationalStatusExtension(AbstractServiceOperationalStatusExtension),
    }
    impl ServiceOperationalStatusTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RadioCommunicationOperationalStatusContent2327Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum RadioCommunicationOperationalStatusContent2331Type {
        OperationalStatus(CodeStatusAirportType),
    }
    #[derive(Debug, Clone)]
    pub struct RadioCommunicationOperationalStatusTypeExtensionElementType {
        pub owns: bool,
        pub content: RadioCommunicationOperationalStatusTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RadioCommunicationOperationalStatusTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractRadioCommunicationOperationalStatusExtension(
            AbstractRadioCommunicationOperationalStatusExtension,
        ),
    }
    impl RadioCommunicationOperationalStatusTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum NavaidOperationalStatusContent2875Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum NavaidOperationalStatusContent2879Type {
        OperationalStatus(CodeStatusAirportType),
        SignalType(CodeRadioSignalType),
    }
    #[derive(Debug, Clone)]
    pub struct NavaidOperationalStatusTypeExtensionElementType {
        pub owns: bool,
        pub content: NavaidOperationalStatusTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NavaidOperationalStatusTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractNavaidOperationalStatusExtension(AbstractNavaidOperationalStatusExtension),
    }
    impl NavaidOperationalStatusTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum SpecialNavigationStationStatusContent2898Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum SpecialNavigationStationStatusContent2902Type {
        OperationalStatus(CodeStatusAirportType),
    }
    #[derive(Debug, Clone)]
    pub struct SpecialNavigationStationStatusTypeExtensionElementType {
        pub owns: bool,
        pub content: SpecialNavigationStationStatusTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SpecialNavigationStationStatusTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractSpecialNavigationStationStatusExtension(
            AbstractSpecialNavigationStationStatusExtension,
        ),
    }
    impl SpecialNavigationStationStatusTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum UnitAvailabilityContent3059Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum UnitAvailabilityContent3063Type {
        OperationalStatus(CodeStatusAirportType),
    }
    #[derive(Debug, Clone)]
    pub struct UnitAvailabilityTypeExtensionElementType {
        pub owns: bool,
        pub content: UnitAvailabilityTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum UnitAvailabilityTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractUnitAvailabilityExtension(AbstractUnitAvailabilityExtension),
    }
    impl UnitAvailabilityTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum CirclingRestrictionContent3155Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum CirclingRestrictionContent3159Type {
        SectorDescription(CircleSectorPropertyType),
        RestrictionArea(SurfacePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CirclingRestrictionTypeExtensionElementType {
        pub owns: bool,
        pub content: CirclingRestrictionTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum CirclingRestrictionTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractCirclingRestrictionExtension(AbstractCirclingRestrictionExtension),
    }
    impl CirclingRestrictionTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ProcedureAvailabilityContent3511Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum ProcedureAvailabilityContent3515Type {
        Status(CodeStatusOperationsType),
    }
    #[derive(Debug, Clone)]
    pub struct ProcedureAvailabilityTypeExtensionElementType {
        pub owns: bool,
        pub content: ProcedureAvailabilityTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ProcedureAvailabilityTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractProcedureAvailabilityExtension(AbstractProcedureAvailabilityExtension),
    }
    impl ProcedureAvailabilityTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum FlightConditionCombinationContent4069Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum FlightConditionCombinationContent4073Type {
        LogicalOperator(CodeLogicalOperatorType),
        Element(LightElementPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct FlightConditionCombinationTypeExtensionElementType {
        pub owns: bool,
        pub content: FlightConditionCombinationTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FlightConditionCombinationTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractFlightConditionCombinationExtension(AbstractFlightConditionCombinationExtension),
    }
    impl FlightConditionCombinationTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum RouteAvailabilityContent4224Type {
        TimeInterval(TimesheetPropertyType),
        Annotation(NotePropertyType),
        SpecialDateAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum RouteAvailabilityContent4228Type {
        Direction(CodeDirectionType),
        CardinalDirection(CodeCardinalDirectionType),
        Status(CodeStatusOperationsType),
        Levels(AirspaceLayerPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RouteAvailabilityTypeExtensionElementType {
        pub owns: bool,
        pub content: RouteAvailabilityTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RouteAvailabilityTypeExtensionElementTypeContent {
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtension),
        AbstractRouteAvailabilityExtension(AbstractRouteAvailabilityExtension),
    }
    impl RouteAvailabilityTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum CodeSurfaceCompositionBaseType {
        Asph,
        AsphGrass,
        Conc,
        ConcAsph,
        ConcGrs,
        Grass,
        Sand,
        Water,
        Bitum,
        Brick,
        Macadam,
        Stone,
        Coral,
        Clay,
        Laterite,
        Gravel,
        Earth,
        Ice,
        Snow,
        Membrane,
        Metal,
        Mats,
        PiercedSteel,
        Wood,
        NonBitumMix,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeSurfacePreparationBaseType {
        Natural,
        Rolled,
        Compacted,
        Graded,
        Grooved,
        Oiled,
        Paved,
        Pfc,
        Afsc,
        Rfsc,
        NonGrooved,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeSurfaceConditionBaseType {
        Good,
        Fair,
        Poor,
        Unsafe,
        Deformed,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodePCNPavementBaseType {
        Rigid,
        Flexible,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodePCNSubgradeBaseType {
        A,
        B,
        C,
        D,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodePCNTyrePressureBaseType {
        W,
        X,
        Y,
        Z,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodePCNMethodBaseType {
        Tech,
        Acft,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum UomWeightType {
        Kg,
        T,
        Lb,
        Ton,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum UomPressureType {
        Pa,
        Mpa,
        Psi,
        Bar,
        Torr,
        Atm,
        Hpa,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum UomDepthType {
        Mm,
        Cm,
        In,
        Ft,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeFrictionEstimateBaseType {
        Good,
        MediumGood,
        Medium,
        MediumPoor,
        Poor,
        Unreliable,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeFrictionDeviceBaseType {
        Brd,
        Grt,
        Mum,
        Rft,
        Sfh,
        Sfl,
        Skh,
        Skl,
        Tap,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct RidgeType {
        pub id: String,
        pub content: Vec<RidgeTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RidgeTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content842(RidgeContent842Type),
        Extension(RidgeTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct SurfaceContaminationLayerType {
        pub id: String,
        pub content: Vec<SurfaceContaminationLayerTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SurfaceContaminationLayerTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content902(SurfaceContaminationLayerContent902Type),
        Extension(SurfaceContaminationLayerTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffContaminationContent933Type {
        ObservationTime(DateTimeType),
        Depth(ValDepthType),
        FrictionCoefficient(ValFrictionType),
        FrictionEstimation(CodeFrictionEstimateType),
        FrictionDevice(CodeFrictionDeviceType),
        ObscuredLights(CodeYesNoType),
        FurtherClearanceTime(TimeType),
        FurtherTotalClearance(CodeYesNoType),
        NextObservationTime(DateTimeType),
        Proportion(ValPercentType),
        CriticalRidge(RidgePropertyType),
        Layer(SurfaceContaminationLayerPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TouchDownLiftOffContaminationTypeExtensionElementType {
        pub owns: bool,
        pub content: TouchDownLiftOffContaminationTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TouchDownLiftOffContaminationTypeExtensionElementTypeContent {
        AbstractSurfaceContaminationExtension(AbstractSurfaceContaminationExtension),
        AbstractTouchDownLiftOffContaminationExtension(
            AbstractTouchDownLiftOffContaminationExtension,
        ),
    }
    impl TouchDownLiftOffContaminationTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ApronContaminationContent953Type {
        ObservationTime(DateTimeType),
        Depth(ValDepthType),
        FrictionCoefficient(ValFrictionType),
        FrictionEstimation(CodeFrictionEstimateType),
        FrictionDevice(CodeFrictionDeviceType),
        ObscuredLights(CodeYesNoType),
        FurtherClearanceTime(TimeType),
        FurtherTotalClearance(CodeYesNoType),
        NextObservationTime(DateTimeType),
        Proportion(ValPercentType),
        CriticalRidge(RidgePropertyType),
        Layer(SurfaceContaminationLayerPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ApronContaminationTypeExtensionElementType {
        pub owns: bool,
        pub content: ApronContaminationTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ApronContaminationTypeExtensionElementTypeContent {
        AbstractSurfaceContaminationExtension(AbstractSurfaceContaminationExtension),
        AbstractApronContaminationExtension(AbstractApronContaminationExtension),
    }
    impl ApronContaminationTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AircraftStandContaminationContent973Type {
        ObservationTime(DateTimeType),
        Depth(ValDepthType),
        FrictionCoefficient(ValFrictionType),
        FrictionEstimation(CodeFrictionEstimateType),
        FrictionDevice(CodeFrictionDeviceType),
        ObscuredLights(CodeYesNoType),
        FurtherClearanceTime(TimeType),
        FurtherTotalClearance(CodeYesNoType),
        NextObservationTime(DateTimeType),
        Proportion(ValPercentType),
        CriticalRidge(RidgePropertyType),
        Layer(SurfaceContaminationLayerPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AircraftStandContaminationTypeExtensionElementType {
        pub owns: bool,
        pub content: AircraftStandContaminationTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AircraftStandContaminationTypeExtensionElementTypeContent {
        AbstractSurfaceContaminationExtension(AbstractSurfaceContaminationExtension),
        AbstractAircraftStandContaminationExtension(AbstractAircraftStandContaminationExtension),
    }
    impl AircraftStandContaminationTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportContaminationContent993Type {
        ObservationTime(DateTimeType),
        Depth(ValDepthType),
        FrictionCoefficient(ValFrictionType),
        FrictionEstimation(CodeFrictionEstimateType),
        FrictionDevice(CodeFrictionDeviceType),
        ObscuredLights(CodeYesNoType),
        FurtherClearanceTime(TimeType),
        FurtherTotalClearance(CodeYesNoType),
        NextObservationTime(DateTimeType),
        Proportion(ValPercentType),
        CriticalRidge(RidgePropertyType),
        Layer(SurfaceContaminationLayerPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AirportHeliportContaminationTypeExtensionElementType {
        pub owns: bool,
        pub content: AirportHeliportContaminationTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportContaminationTypeExtensionElementTypeContent {
        AbstractSurfaceContaminationExtension(AbstractSurfaceContaminationExtension),
        AbstractAirportHeliportContaminationExtension(
            AbstractAirportHeliportContaminationExtension,
        ),
    }
    impl AirportHeliportContaminationTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum CodeRunwaySectionBaseType {
        Tdz,
        Aim,
        Cl,
        Edge,
        Thr,
        Desig,
        AftThr,
        Dthr,
        End,
        TwyInt,
        RpdTwyInt,
        _1_THIRD,
        _2_THIRD,
        _3_THIRD,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct ValLightIntensityType {
        pub uom: Option<UomLightIntensityType>,
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractLightElementExtension(pub Box<dyn AbstractLightElementExtensionTrait>);
    pub trait AbstractLightElementExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum CodeAirspaceClassificationBaseType {
        A,
        B,
        C,
        D,
        E,
        F,
        G,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceLayerType {
        pub id: String,
        pub content: Vec<AirspaceLayerTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceLayerTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1886(AirspaceLayerContent1886Type),
        Extension(AirspaceLayerTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeOperationManoeuvringAreaBaseType {
        Landing,
        Takeoff,
        Touchgo,
        TrainApproach,
        Taxiing,
        Crossing,
        Airshow,
        All,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceVolumeType {
        pub id: String,
        pub content: Vec<AirspaceVolumeTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceVolumeTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1336(AirspaceVolumeContent1336Type),
        Extension(AirspaceVolumeTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSurveillanceGroundStationExtension(
        pub Box<dyn AbstractSurveillanceGroundStationExtensionTrait>,
    );
    pub trait AbstractSurveillanceGroundStationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum AerialRefuellingPointContent4358Type {
        PointChoiceFixDesignatedPoint(DesignatedPointPropertyType),
        PointChoiceNavaidSystem(NavaidPropertyType),
        PointChoiceAimingPoint(TouchDownLiftOffPropertyType),
        PointChoiceRunwayPoint(RunwayCentrelinePointPropertyType),
        PointChoiceAirportReferencePoint(AirportHeliportPropertyType),
        PointChoicePosition(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeAerialRefuellingPointType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeAerialRefuellingPointBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAerialRefuellingPointExtension(
        pub Box<dyn AbstractAerialRefuellingPointExtensionTrait>,
    );
    pub trait AbstractAerialRefuellingPointExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum CodeObstructionIdSurfaceZoneBaseType {
        Approach,
        Conical,
        Horizontal,
        Primary,
        Transition,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct ObstructionType {
        pub id: String,
        pub content: Vec<ObstructionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ObstructionTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1635(ObstructionContent1635Type),
        Extension(ObstructionTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeArcDirectionBaseType {
        Cwa,
        Cca,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractNavaidEquipmentMonitoringExtension(
        pub Box<dyn AbstractNavaidEquipmentMonitoringExtensionTrait>,
    );
    pub trait AbstractNavaidEquipmentMonitoringExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum CodeStatusConstructionBaseType {
        InConstruction,
        Completed,
        DemolitionPlanned,
        InDemolition,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeVerticalStructureMarkingBaseType {
        Monocolour,
        Chequered,
        Hbands,
        Vbands,
        Flag,
        Markers,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeVerticalStructureMaterialBaseType {
        AdobeBrick,
        Aluminium,
        Brick,
        Concrete,
        Fibreglass,
        Glass,
        Iron,
        Masonry,
        Metal,
        Mud,
        Plant,
        PrestressedConcrete,
        ReinforcedConcrete,
        Sod,
        Steel,
        Stone,
        TreatedTimber,
        Wood,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeAircraftEngineBaseType {
        Jet,
        Piston,
        Turboprop,
        All,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeAircraftEngineNumberBaseType {
        _1,
        _2,
        _3,
        _4,
        _6,
        _8,
        _2C,
        String(String),
    }
    #[derive(Debug, Clone, Default)]
    pub struct CodeAircraftICAOBaseType(pub Vec<String>);
    #[derive(Debug, Clone)]
    pub enum CodeAircraftCategoryBaseType {
        A,
        B,
        C,
        D,
        E,
        H,
        All,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeAircraftWingspanClassBaseType {
        I,
        Ii,
        Iii,
        Iv,
        V,
        Vi,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeWakeTurbulenceBaseType {
        Low,
        Medium,
        High,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeNavigationEquipmentBaseType {
        Dme,
        VorDme,
        DmeDme,
        Tacan,
        Ils,
        Mls,
        Gnss,
        Waas,
        Loran,
        Ins,
        Fms,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeNavigationSpecificationBaseType {
        Rnav10,
        Rnav5,
        Rnav2,
        Rnav1,
        Rnp4,
        Rnp2,
        BasicRnp1,
        AdvancedRnp1,
        RnpApch,
        RnpArApch,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeEquipmentAntiCollisionBaseType {
        AcasI,
        AcasIi,
        Gpws,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct CodeDesignatedPointDesignatorType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeDesignatedPointDesignatorBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct ProcedureTransitionLegPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: ProcedureTransitionLegPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ProcedureTransitionLegPropertyTypeContent {
        ProcedureTransitionLeg(ProcedureTransitionLegType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractProcedureTransitionExtension(
        pub Box<dyn AbstractProcedureTransitionExtensionTrait>,
    );
    pub trait AbstractProcedureTransitionExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum ApproachTimingTableContent3307Type {
        StartingMeasurementPoint(CodeProcedureDistanceType),
        EndingMeasurementPoint(CodeProcedureDistanceType),
        Time(ValDurationType),
        Speed(ValSpeedType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ApproachTimingTableTypeExtensionElementType {
        pub owns: bool,
        pub content: ApproachTimingTableTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ApproachTimingTableTypeExtensionElementTypeContent {
        AbstractApproachTimingTableExtension(AbstractApproachTimingTableExtension),
    }
    impl ApproachTimingTableTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractHoldingUseExtension(pub Box<dyn AbstractHoldingUseExtensionTrait>);
    pub trait AbstractHoldingUseExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum CodeATCReportingBaseType {
        Compulsory,
        OnRequest,
        NoReport,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct PointReferenceType {
        pub id: String,
        pub content: Vec<PointReferenceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PointReferenceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content2338(PointReferenceContent2338Type),
        Extension(PointReferenceTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractHoldingPatternDurationExtension(
        pub Box<dyn AbstractHoldingPatternDurationExtensionTrait>,
    );
    pub trait AbstractHoldingPatternDurationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractHoldingPatternDistanceExtension(
        pub Box<dyn AbstractHoldingPatternDistanceExtensionTrait>,
    );
    pub trait AbstractHoldingPatternDistanceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum CodeFlightOriginBaseType {
        Ntl,
        Intl,
        All,
        HomeBased,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct FlightRoutingElementType {
        pub id: String,
        pub content: Vec<FlightRoutingElementTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FlightRoutingElementTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content4126(FlightRoutingElementContent4126Type),
        Extension(FlightRoutingElementTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeFreeFlightBaseType {
        Pitch,
        Catch,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeRVSMPointRoleBaseType {
        In,
        Out,
        InOut,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeMilitaryRoutePointBaseType {
        S,
        T,
        X,
        As,
        Ax,
        Asx,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum LinguisticNoteContent2997Type {
        Note(NoteType),
    }
    #[derive(Debug, Clone)]
    pub struct LinguisticNoteTypeExtensionElementType {
        pub owns: bool,
        pub content: LinguisticNoteTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum LinguisticNoteTypeExtensionElementTypeContent {
        AbstractLinguisticNoteExtension(AbstractLinguisticNoteExtension),
    }
    impl LinguisticNoteTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum TimesheetContent1917Type {
        TimeReference(CodeTimeReferenceType),
        StartDate(DateMonthDayType),
        EndDate(DateMonthDayType),
        Day(CodeDayType),
        DayTil(CodeDayType),
        StartTime(TimeType),
        StartEvent(CodeTimeEventType),
        StartTimeRelativeEvent(ValDurationType),
        StartEventInterpretation(CodeTimeEventCombinationType),
        EndTime(TimeType),
        EndEvent(CodeTimeEventType),
        EndTimeRelativeEvent(ValDurationType),
        EndEventInterpretation(CodeTimeEventCombinationType),
        DaylightSavingAdjust(CodeYesNoType),
        Excluded(CodeYesNoType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TimesheetTypeExtensionElementType {
        pub owns: bool,
        pub content: TimesheetTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TimesheetTypeExtensionElementTypeContent {
        AbstractTimesheetExtension(AbstractTimesheetExtension),
    }
    impl TimesheetTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum ManoeuvringAreaUsageContent260Type {
        Type(CodeRunwayProtectionAreaType),
        PriorPermission(ValDurationType),
        Contact(ContactInformationPropertyType),
        Selection(ConditionCombinationPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum ManoeuvringAreaUsageContent266Type {
        Operation(CodeOperationManoeuvringAreaType),
    }
    #[derive(Debug, Clone)]
    pub struct ManoeuvringAreaUsageTypeExtensionElementType {
        pub owns: bool,
        pub content: ManoeuvringAreaUsageTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ManoeuvringAreaUsageTypeExtensionElementTypeContent {
        AbstractUsageConditionExtension(AbstractUsageConditionExtension),
        AbstractManoeuvringAreaUsageExtension(AbstractManoeuvringAreaUsageExtension),
    }
    impl ManoeuvringAreaUsageTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractUsageCondition(pub Box<dyn AbstractUsageConditionTrait>);
    pub trait AbstractUsageConditionTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct AbstractRunwayDeclaredDistanceValueExtension(
        pub Box<dyn AbstractRunwayDeclaredDistanceValueExtensionTrait>,
    );
    pub trait AbstractRunwayDeclaredDistanceValueExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractApronAreaAvailabilityExtension(
        pub Box<dyn AbstractApronAreaAvailabilityExtensionTrait>,
    );
    pub trait AbstractApronAreaAvailabilityExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractGroundLightingAvailabilityExtension(
        pub Box<dyn AbstractGroundLightingAvailabilityExtensionTrait>,
    );
    pub trait AbstractGroundLightingAvailabilityExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractAltimeterSourceStatusExtension(
        pub Box<dyn AbstractAltimeterSourceStatusExtensionTrait>,
    );
    pub trait AbstractAltimeterSourceStatusExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractWorkareaActivityExtension(
        pub Box<dyn AbstractWorkareaActivityExtensionTrait>,
    );
    pub trait AbstractWorkareaActivityExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeLogicalOperatorType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeLogicalOperatorBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct MeteorologyPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: MeteorologyPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum MeteorologyPropertyTypeContent {
        Meteorology(MeteorologyType),
    }
    #[derive(Debug, Clone)]
    pub struct ConditionCombinationPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: ConditionCombinationPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ConditionCombinationPropertyTypeContent {
        ConditionCombination(ConditionCombinationType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractConditionCombinationExtension(
        pub Box<dyn AbstractConditionCombinationExtensionTrait>,
    );
    pub trait AbstractConditionCombinationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractAirportHeliportAvailabilityExtension(
        pub Box<dyn AbstractAirportHeliportAvailabilityExtensionTrait>,
    );
    pub trait AbstractAirportHeliportAvailabilityExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeAirspaceActivityType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeAirspaceActivityBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAirspaceActivationExtension(
        pub Box<dyn AbstractAirspaceActivationExtensionTrait>,
    );
    pub trait AbstractAirspaceActivationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeTelecomNetworkType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeTelecomNetworkBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct TextAddressType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: TextAddressBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractOnlineContactExtension(pub Box<dyn AbstractOnlineContactExtensionTrait>);
    pub trait AbstractOnlineContactExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractPostalAddressExtension(pub Box<dyn AbstractPostalAddressExtensionTrait>);
    pub trait AbstractPostalAddressExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractTelephoneContactExtension(
        pub Box<dyn AbstractTelephoneContactExtensionTrait>,
    );
    pub trait AbstractTelephoneContactExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractLightElementStatusExtension(
        pub Box<dyn AbstractLightElementStatusExtensionTrait>,
    );
    pub trait AbstractLightElementStatusExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractServiceOperationalStatusExtension(
        pub Box<dyn AbstractServiceOperationalStatusExtensionTrait>,
    );
    pub trait AbstractServiceOperationalStatusExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractRadioCommunicationOperationalStatusExtension(
        pub Box<dyn AbstractRadioCommunicationOperationalStatusExtensionTrait>,
    );
    pub trait AbstractRadioCommunicationOperationalStatusExtensionTrait:
        AbstractExtensionTrait
    {
    }
    #[derive(Debug, Clone)]
    pub struct AbstractNavaidOperationalStatusExtension(
        pub Box<dyn AbstractNavaidOperationalStatusExtensionTrait>,
    );
    pub trait AbstractNavaidOperationalStatusExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractSpecialNavigationStationStatusExtension(
        pub Box<dyn AbstractSpecialNavigationStationStatusExtensionTrait>,
    );
    pub trait AbstractSpecialNavigationStationStatusExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractUnitAvailabilityExtension(
        pub Box<dyn AbstractUnitAvailabilityExtensionTrait>,
    );
    pub trait AbstractUnitAvailabilityExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractCirclingRestrictionExtension(
        pub Box<dyn AbstractCirclingRestrictionExtensionTrait>,
    );
    pub trait AbstractCirclingRestrictionExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractProcedureAvailabilityExtension(
        pub Box<dyn AbstractProcedureAvailabilityExtensionTrait>,
    );
    pub trait AbstractProcedureAvailabilityExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractFlightConditionCombinationExtension(
        pub Box<dyn AbstractFlightConditionCombinationExtensionTrait>,
    );
    pub trait AbstractFlightConditionCombinationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractRouteAvailabilityExtension(
        pub Box<dyn AbstractRouteAvailabilityExtensionTrait>,
    );
    pub trait AbstractRouteAvailabilityExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum RidgeContent842Type {
        Side(CodeSideType),
        Distance(ValDistanceType),
        Depth(ValDepthType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct RidgeTypeExtensionElementType {
        pub owns: bool,
        pub content: RidgeTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RidgeTypeExtensionElementTypeContent {
        AbstractRidgeExtension(AbstractRidgeExtension),
    }
    impl RidgeTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum SurfaceContaminationLayerContent902Type {
        LayerOrder(NoSequenceType),
        Type(CodeRunwayProtectionAreaType),
        Extent(ElevatedSurfacePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct SurfaceContaminationLayerTypeExtensionElementType {
        pub owns: bool,
        pub content: SurfaceContaminationLayerTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SurfaceContaminationLayerTypeExtensionElementTypeContent {
        AbstractSurfaceContaminationLayerExtension(AbstractSurfaceContaminationLayerExtension),
    }
    impl SurfaceContaminationLayerTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTouchDownLiftOffContaminationExtension(
        pub Box<dyn AbstractTouchDownLiftOffContaminationExtensionTrait>,
    );
    pub trait AbstractTouchDownLiftOffContaminationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractApronContaminationExtension(
        pub Box<dyn AbstractApronContaminationExtensionTrait>,
    );
    pub trait AbstractApronContaminationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractAircraftStandContaminationExtension(
        pub Box<dyn AbstractAircraftStandContaminationExtensionTrait>,
    );
    pub trait AbstractAircraftStandContaminationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractAirportHeliportContaminationExtension(
        pub Box<dyn AbstractAirportHeliportContaminationExtensionTrait>,
    );
    pub trait AbstractAirportHeliportContaminationExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum UomLightIntensityType {
        Cd,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceLayerContent1886Type {
        UpperLimit(ValDistanceVerticalType),
        UpperLimitReference(CodeVerticalReferenceType),
        LowerLimit(ValDistanceVerticalType),
        LowerLimitReference(CodeVerticalReferenceType),
        AltitudeInterpretation(CodeAltitudeUseType),
        DiscreteLevelSeries(StandardLevelColumnPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceLayerTypeExtensionElementType {
        pub owns: bool,
        pub content: AirspaceLayerTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceLayerTypeExtensionElementTypeContent {
        AbstractAirspaceLayerExtension(AbstractAirspaceLayerExtension),
    }
    impl AirspaceLayerTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceVolumeContent1336Type {
        UpperLimit(ValDistanceVerticalType),
        UpperLimitReference(CodeVerticalReferenceType),
        MaximumLimit(ValDistanceVerticalType),
        MaximumLimitReference(CodeVerticalReferenceType),
        LowerLimit(ValDistanceVerticalType),
        LowerLimitReference(CodeVerticalReferenceType),
        MinimumLimit(ValDistanceVerticalType),
        MinimumLimitReference(CodeVerticalReferenceType),
        Width(ValDistanceType),
        HorizontalProjection(SurfacePropertyType),
        Centreline(ElevatedCurvePropertyType),
        ContributorAirspace(AirspaceVolumeDependencyPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceVolumeTypeExtensionElementType {
        pub owns: bool,
        pub content: AirspaceVolumeTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceVolumeTypeExtensionElementTypeContent {
        AbstractAirspaceVolumeExtension(AbstractAirspaceVolumeExtension),
    }
    impl AirspaceVolumeTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum CodeAerialRefuellingPointBaseType {
        Initial,
        Control,
        Check,
        Exit,
        Entry,
        Anchor,
        Pattern,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum ObstructionContent1635Type {
        RequiredClearance(ValDistanceType),
        MinimumAltitude(ValDistanceVerticalType),
        SurfacePenetration(CodeYesNoType),
        SlopePenetration(ValAngleType),
        Controlling(CodeYesNoType),
        CloseIn(CodeYesNoType),
        TheVerticalStructure(VerticalStructurePropertyType),
        Adjustment(AltitudeAdjustmentPropertyType),
        ObstaclePlacement(ObstaclePlacementPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ObstructionTypeExtensionElementType {
        pub owns: bool,
        pub content: ObstructionTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ObstructionTypeExtensionElementTypeContent {
        AbstractObstructionExtension(AbstractObstructionExtension),
    }
    impl ObstructionTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone, Default)]
    pub struct CodeDesignatedPointDesignatorBaseType(pub Vec<String>);
    #[derive(Debug, Clone)]
    pub struct ProcedureTransitionLegType {
        pub id: String,
        pub content: Vec<ProcedureTransitionLegTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ProcedureTransitionLegTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3901(ProcedureTransitionLegContent3901Type),
        Extension(ProcedureTransitionLegTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct CodeProcedureDistanceType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeProcedureDistanceBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractApproachTimingTableExtension(
        pub Box<dyn AbstractApproachTimingTableExtensionTrait>,
    );
    pub trait AbstractApproachTimingTableExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum PointReferenceContent2338Type {
        Role(CodeRunwayPointRoleType),
        PriorFixTolerance(ValDistanceSignedType),
        PostFixTolerance(ValDistanceSignedType),
        Point(Point),
        FacilityAngle(AngleUsePropertyType),
        FacilityDistance(DistanceIndicationPropertyType),
        FixToleranceArea(SurfacePropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct PointReferenceTypeExtensionElementType {
        pub owns: bool,
        pub content: PointReferenceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum PointReferenceTypeExtensionElementTypeContent {
        AbstractPointReferenceExtension(AbstractPointReferenceExtension),
    }
    impl PointReferenceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum FlightRoutingElementContent4126Type {
        OrderNumber(NoSequenceType),
        Speed(ValSpeedType),
        SpeedReference(CodeSpeedReferenceType),
        SpeedCriteria(CodeComparisonType),
        FlightLevel(FlightRestrictionLevelPropertyType),
        Content4132(FlightRoutingElementContent4132Type),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct FlightRoutingElementTypeExtensionElementType {
        pub owns: bool,
        pub content: FlightRoutingElementTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FlightRoutingElementTypeExtensionElementTypeContent {
        AbstractFlightRoutingElementExtension(AbstractFlightRoutingElementExtension),
    }
    impl FlightRoutingElementTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractLinguisticNoteExtension(pub Box<dyn AbstractLinguisticNoteExtensionTrait>);
    pub trait AbstractLinguisticNoteExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeTimeReferenceType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeTimeReferenceBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeDayType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeDayBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeTimeEventType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeTimeEventBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeTimeEventCombinationType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeTimeEventCombinationBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTimesheetExtension(pub Box<dyn AbstractTimesheetExtensionTrait>);
    pub trait AbstractTimesheetExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractUsageConditionExtension(pub Box<dyn AbstractUsageConditionExtensionTrait>);
    pub trait AbstractUsageConditionExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractManoeuvringAreaUsageExtension(
        pub Box<dyn AbstractManoeuvringAreaUsageExtensionTrait>,
    );
    pub trait AbstractManoeuvringAreaUsageExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct ApronAreaUsageType {
        pub id: String,
        pub content: Vec<ApronAreaUsageTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ApronAreaUsageTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content434(ApronAreaUsageContent434Type),
        Extension(ApronAreaUsageTypeExtensionElementType),
    }
    impl AbstractUsageConditionTrait for ApronAreaUsageType {}
    impl xsd_parser::AsAny for ApronAreaUsageType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirportHeliportUsageType {
        pub id: String,
        pub content: Vec<AirportHeliportUsageTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportUsageTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1279(AirportHeliportUsageContent1279Type),
        Content1285(AirportHeliportUsageContent1285Type),
        Extension(AirportHeliportUsageTypeExtensionElementType),
    }
    impl AbstractUsageConditionTrait for AirportHeliportUsageType {}
    impl xsd_parser::AsAny for AirportHeliportUsageType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum CodeLogicalOperatorBaseType {
        And,
        Or,
        Not,
        None,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct MeteorologyType {
        pub id: String,
        pub content: Vec<MeteorologyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MeteorologyTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1955(MeteorologyContent1955Type),
        Extension(MeteorologyTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeAirspaceActivityBaseType {
        AdTfc,
        HeliTfc,
        Training,
        Aerobatics,
        Airshow,
        Sport,
        Ulm,
        Gliding,
        Paraglider,
        Hanggliding,
        Parachute,
        AirDrop,
        Balloon,
        Radiosonde,
        SpaceFlight,
        Uav,
        AerialWork,
        CropDusting,
        FireFighting,
        Milops,
        Refuel,
        JetClimbing,
        Exercise,
        Towing,
        NavalExer,
        Missiles,
        AirGun,
        Artillery,
        Shooting,
        Blasting,
        WaterBlasting,
        AntiHail,
        Bird,
        BirdMigration,
        Firework,
        HiRadio,
        HiLight,
        Laser,
        Nature,
        Fauna,
        NoNoise,
        Accident,
        Population,
        Vip,
        VipPres,
        VipVice,
        Oil,
        Gas,
        Refinery,
        Chemical,
        Nuclear,
        Technical,
        Ats,
        Procedure,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeTelecomNetworkBaseType {
        Aftn,
        Amhs,
        Internet,
        Sita,
        Acars,
        Adns,
        String(String),
    }
    #[derive(Debug, Clone, Default)]
    pub struct TextAddressBaseType(pub Vec<String>);
    #[derive(Debug, Clone)]
    pub struct AbstractRidgeExtension(pub Box<dyn AbstractRidgeExtensionTrait>);
    pub trait AbstractRidgeExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractSurfaceContaminationLayerExtension(
        pub Box<dyn AbstractSurfaceContaminationLayerExtensionTrait>,
    );
    pub trait AbstractSurfaceContaminationLayerExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractAirspaceLayerExtension(pub Box<dyn AbstractAirspaceLayerExtensionTrait>);
    pub trait AbstractAirspaceLayerExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AirspaceVolumeDependencyPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: AirspaceVolumeDependencyPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceVolumeDependencyPropertyTypeContent {
        AirspaceVolumeDependency(AirspaceVolumeDependencyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAirspaceVolumeExtension(pub Box<dyn AbstractAirspaceVolumeExtensionTrait>);
    pub trait AbstractAirspaceVolumeExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AltitudeAdjustmentPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: AltitudeAdjustmentPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AltitudeAdjustmentPropertyTypeContent {
        AltitudeAdjustment(AltitudeAdjustmentType),
    }
    #[derive(Debug, Clone)]
    pub struct ObstaclePlacementPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: ObstaclePlacementPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ObstaclePlacementPropertyTypeContent {
        ObstaclePlacement(Box<ObstaclePlacementPropertyType>),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractObstructionExtension(pub Box<dyn AbstractObstructionExtensionTrait>);
    pub trait AbstractObstructionExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum ProcedureTransitionLegContent3901Type {
        SeqNumberARINC(NoSequenceType),
        Annotation(NotePropertyType),
        TheSegmentLeg(SegmentLegPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ProcedureTransitionLegTypeExtensionElementType {
        pub owns: bool,
        pub content: ProcedureTransitionLegTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ProcedureTransitionLegTypeExtensionElementTypeContent {
        AbstractProcedureTransitionLegExtension(AbstractProcedureTransitionLegExtension),
    }
    impl ProcedureTransitionLegTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum CodeProcedureDistanceBaseType {
        Hat,
        Om,
        Mm,
        Im,
        Pfaf,
        Gsant,
        Faf,
        Map,
        Thld,
        Vdp,
        Rech,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct AngleUsePropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: AngleUsePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AngleUsePropertyTypeContent {
        AngleUse(AngleUseType),
    }
    #[derive(Debug, Clone)]
    pub struct DistanceIndicationPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl DistanceIndicationPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractPointReferenceExtension(pub Box<dyn AbstractPointReferenceExtensionTrait>);
    pub trait AbstractPointReferenceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeComparisonType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeComparisonBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct FlightRestrictionLevelPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: FlightRestrictionLevelPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FlightRestrictionLevelPropertyTypeContent {
        FlightRestrictionLevel(FlightRestrictionLevelType),
    }
    #[derive(Debug, Clone)]
    pub enum FlightRoutingElementContent4132Type {
        ElementStandardInstrumentArrivalElement(StandardInstrumentArrivalPropertyType),
        ElementAirspaceElement(AirspacePropertyType),
        Content4135(FlightRoutingElementContent4135Type),
        ElementDirectFlightElement(DirectFlightSegmentPropertyType),
        ElementStandardInstrumentDepartureElement(StandardInstrumentDeparturePropertyType),
        ElementRoutePortionElement(RoutePortionPropertyType),
        ElementAirportHeliportElement(AirportHeliportPropertyType),
        ElementAerialRefuellingElement(AerialRefuellingPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractFlightRoutingElementExtension(
        pub Box<dyn AbstractFlightRoutingElementExtensionTrait>,
    );
    pub trait AbstractFlightRoutingElementExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum CodeTimeReferenceBaseType {
        Utc,
        Utc12,
        Utc11,
        Utc10,
        Utc9,
        Utc8,
        Utc7,
        Utc6,
        Utc5,
        Utc4,
        Utc3,
        Utc2,
        Utc1,
        Utc1,
        Utc2,
        Utc3,
        Utc4,
        Utc5,
        Utc6,
        Utc7,
        Utc8,
        Utc9,
        Utc10,
        Utc11,
        Utc12,
        Utc13,
        Utc14,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeDayBaseType {
        Mon,
        Tue,
        Wed,
        Thu,
        Fri,
        Sat,
        Sun,
        WorkDay,
        BefWorkDay,
        AftWorkDay,
        Hol,
        BefHol,
        AftHol,
        Any,
        BusyFri,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeTimeEventBaseType {
        Sr,
        Ss,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeTimeEventCombinationBaseType {
        Earliest,
        Latest,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum ApronAreaUsageContent434Type {
        Type(CodeRunwayProtectionAreaType),
        PriorPermission(ValDurationType),
        Contact(ContactInformationPropertyType),
        Selection(ConditionCombinationPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ApronAreaUsageTypeExtensionElementType {
        pub owns: bool,
        pub content: ApronAreaUsageTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ApronAreaUsageTypeExtensionElementTypeContent {
        AbstractUsageConditionExtension(AbstractUsageConditionExtension),
        AbstractApronAreaUsageExtension(AbstractApronAreaUsageExtension),
    }
    impl ApronAreaUsageTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportUsageContent1279Type {
        Type(CodeRunwayProtectionAreaType),
        PriorPermission(ValDurationType),
        Contact(ContactInformationPropertyType),
        Selection(ConditionCombinationPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportUsageContent1285Type {
        Operation(CodeOperationManoeuvringAreaType),
    }
    #[derive(Debug, Clone)]
    pub struct AirportHeliportUsageTypeExtensionElementType {
        pub owns: bool,
        pub content: AirportHeliportUsageTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirportHeliportUsageTypeExtensionElementTypeContent {
        AbstractUsageConditionExtension(AbstractUsageConditionExtension),
        AbstractAirportHeliportUsageExtension(AbstractAirportHeliportUsageExtension),
    }
    impl AirportHeliportUsageTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum MeteorologyContent1955Type {
        FlightConditions(CodeMeteoConditionsType),
        Visibility(ValDistanceType),
        VisibilityInterpretation(CodeValueInterpretationType),
        RunwayVisualRange(RunwayVisualRangeType),
        RunwayVisualRangeInterpretation(CodeValueInterpretationType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MeteorologyTypeExtensionElementType {
        pub owns: bool,
        pub content: MeteorologyTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum MeteorologyTypeExtensionElementTypeContent {
        AbstractMeteorologyExtension(AbstractMeteorologyExtension),
    }
    impl MeteorologyTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceVolumeDependencyType {
        pub id: String,
        pub content: Vec<AirspaceVolumeDependencyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceVolumeDependencyTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1395(AirspaceVolumeDependencyContent1395Type),
        Extension(AirspaceVolumeDependencyTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct AltitudeAdjustmentType {
        pub id: String,
        pub content: Vec<AltitudeAdjustmentTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AltitudeAdjustmentTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1651(AltitudeAdjustmentContent1651Type),
        Extension(AltitudeAdjustmentTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractProcedureTransitionLegExtension(
        pub Box<dyn AbstractProcedureTransitionLegExtensionTrait>,
    );
    pub trait AbstractProcedureTransitionLegExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AngleUseType {
        pub id: String,
        pub content: Vec<AngleUseTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AngleUseTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content2450(AngleUseContent2450Type),
        Extension(AngleUseTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeComparisonBaseType {
        Less,
        LessOrEqual,
        Equal,
        GreaterOrEqual,
        Greater,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct FlightRestrictionLevelType {
        pub id: String,
        pub content: Vec<FlightRestrictionLevelTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FlightRestrictionLevelTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content4090(FlightRestrictionLevelContent4090Type),
        Extension(FlightRestrictionLevelTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub struct StandardInstrumentArrivalPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl StandardInstrumentArrivalPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum FlightRoutingElementContent4135Type {
        PointElementFixDesignatedPoint(DesignatedPointPropertyType),
        PointElementNavaidSystem(NavaidPropertyType),
        PointElementAimingPoint(TouchDownLiftOffPropertyType),
        PointElementRunwayPoint(RunwayCentrelinePointPropertyType),
        PointElementAirportReferencePoint(AirportHeliportPropertyType),
        PointElementPosition(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct DirectFlightSegmentPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: DirectFlightSegmentPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum DirectFlightSegmentPropertyTypeContent {
        DirectFlightSegment(DirectFlightSegmentType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractApronAreaUsageExtension(pub Box<dyn AbstractApronAreaUsageExtensionTrait>);
    pub trait AbstractApronAreaUsageExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractAirportHeliportUsageExtension(
        pub Box<dyn AbstractAirportHeliportUsageExtensionTrait>,
    );
    pub trait AbstractAirportHeliportUsageExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeMeteoConditionsType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeMeteoConditionsBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractMeteorologyExtension(pub Box<dyn AbstractMeteorologyExtensionTrait>);
    pub trait AbstractMeteorologyExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum AirspaceVolumeDependencyContent1395Type {
        Dependency(CodeAirspaceDependencyType),
        Annotation(NotePropertyType),
        TheAirspace(AirspacePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AirspaceVolumeDependencyTypeExtensionElementType {
        pub owns: bool,
        pub content: AirspaceVolumeDependencyTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AirspaceVolumeDependencyTypeExtensionElementTypeContent {
        AbstractAirspaceVolumeDependencyExtension(AbstractAirspaceVolumeDependencyExtension),
    }
    impl AirspaceVolumeDependencyTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AltitudeAdjustmentContent1651Type {
        AltitudeAdjustmentType(CodeAltitudeAdjustmentType),
        PrimaryAlternateMinimum(CodeYesNoType),
        AltitudeAdjustment(AltitudeAdjustmentType),
        LocalRemoteCode(CodeYesNoType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AltitudeAdjustmentTypeExtensionElementType {
        pub owns: bool,
        pub content: AltitudeAdjustmentTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AltitudeAdjustmentTypeExtensionElementTypeContent {
        AbstractAltitudeAdjustmentExtension(AbstractAltitudeAdjustmentExtension),
    }
    impl AltitudeAdjustmentTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AngleUseContent2450Type {
        AlongCourseGuidance(CodeYesNoType),
        Annotation(NotePropertyType),
        TheAngleIndication(AngleIndicationPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AngleUseTypeExtensionElementType {
        pub owns: bool,
        pub content: AngleUseTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AngleUseTypeExtensionElementTypeContent {
        AbstractAngleUseExtension(AbstractAngleUseExtension),
    }
    impl AngleUseTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum FlightRestrictionLevelContent4090Type {
        UpperLevel(ValDistanceVerticalType),
        UpperLevelReference(CodeVerticalReferenceType),
        LowerLevel(ValDistanceVerticalType),
        LowerLevelReference(CodeVerticalReferenceType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct FlightRestrictionLevelTypeExtensionElementType {
        pub owns: bool,
        pub content: FlightRestrictionLevelTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FlightRestrictionLevelTypeExtensionElementTypeContent {
        AbstractFlightRestrictionLevelExtension(AbstractFlightRestrictionLevelExtension),
    }
    impl FlightRestrictionLevelTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct DirectFlightSegmentType {
        pub id: String,
        pub content: Vec<DirectFlightSegmentTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DirectFlightSegmentTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content4047(DirectFlightSegmentContent4047Type),
        Content4049(DirectFlightSegmentContent4049Type),
        Extension(DirectFlightSegmentTypeExtensionElementType),
    }
    impl AbstractDirectFlightTrait for DirectFlightSegmentType {}
    impl xsd_parser::AsAny for DirectFlightSegmentType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum CodeMeteoConditionsBaseType {
        Imc,
        Vmc,
        All,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct CodeAirspaceDependencyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeAirspaceDependencyBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAirspaceVolumeDependencyExtension(
        pub Box<dyn AbstractAirspaceVolumeDependencyExtensionTrait>,
    );
    pub trait AbstractAirspaceVolumeDependencyExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct CodeAltitudeAdjustmentType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeAltitudeAdjustmentBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAltitudeAdjustmentExtension(
        pub Box<dyn AbstractAltitudeAdjustmentExtensionTrait>,
    );
    pub trait AbstractAltitudeAdjustmentExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AngleIndicationPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl AngleIndicationPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAngleUseExtension(pub Box<dyn AbstractAngleUseExtensionTrait>);
    pub trait AbstractAngleUseExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractFlightRestrictionLevelExtension(
        pub Box<dyn AbstractFlightRestrictionLevelExtensionTrait>,
    );
    pub trait AbstractFlightRestrictionLevelExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub enum DirectFlightSegmentContent4047Type {
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum DirectFlightSegmentContent4049Type {
        Content4050(DirectFlightSegmentContent4050Type),
        Content4057(DirectFlightSegmentContent4057Type),
    }
    #[derive(Debug, Clone)]
    pub struct DirectFlightSegmentTypeExtensionElementType {
        pub owns: bool,
        pub content: DirectFlightSegmentTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum DirectFlightSegmentTypeExtensionElementTypeContent {
        AbstractDirectFlightExtension(AbstractDirectFlightExtension),
        AbstractDirectFlightSegmentExtension(AbstractDirectFlightSegmentExtension),
    }
    impl DirectFlightSegmentTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractDirectFlight(pub Box<dyn AbstractDirectFlightTrait>);
    pub trait AbstractDirectFlightTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub enum CodeAirspaceDependencyBaseType {
        FullGeometry,
        HorzProjection,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeAltitudeAdjustmentBaseType {
        Ra,
        As,
        At,
        Ac,
        Si,
        Xl,
        Pr,
        Haa,
        Ma,
        Pt,
        Dg,
        Gs,
        Ca,
        Mt,
        Mah,
        Sa,
        Aao,
        Va,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum DirectFlightSegmentContent4050Type {
        EndFixDesignatedPoint(DesignatedPointPropertyType),
        EndNavaidSystem(NavaidPropertyType),
        EndAimingPoint(TouchDownLiftOffPropertyType),
        EndRunwayPoint(RunwayCentrelinePointPropertyType),
        EndAirportReferencePoint(AirportHeliportPropertyType),
        EndPosition(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum DirectFlightSegmentContent4057Type {
        StartFixDesignatedPoint(DesignatedPointPropertyType),
        StartNavaidSystem(NavaidPropertyType),
        StartAimingPoint(TouchDownLiftOffPropertyType),
        StartRunwayPoint(RunwayCentrelinePointPropertyType),
        StartAirportReferencePoint(AirportHeliportPropertyType),
        StartPosition(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractDirectFlightExtension(pub Box<dyn AbstractDirectFlightExtensionTrait>);
    pub trait AbstractDirectFlightExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractDirectFlightSegmentExtension(
        pub Box<dyn AbstractDirectFlightSegmentExtensionTrait>,
    );
    pub trait AbstractDirectFlightSegmentExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct DirectFlightClassType {
        pub id: String,
        pub content: Vec<DirectFlightClassTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DirectFlightClassTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content4038(DirectFlightClassContent4038Type),
        Content4040(DirectFlightClassContent4040Type),
        Extension(DirectFlightClassTypeExtensionElementType),
    }
    impl AbstractDirectFlightTrait for DirectFlightClassType {}
    impl xsd_parser::AsAny for DirectFlightClassType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum DirectFlightClassContent4038Type {
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum DirectFlightClassContent4040Type {
        ExceedLength(ValDistanceType),
    }
    #[derive(Debug, Clone)]
    pub struct DirectFlightClassTypeExtensionElementType {
        pub owns: bool,
        pub content: DirectFlightClassTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum DirectFlightClassTypeExtensionElementTypeContent {
        AbstractDirectFlightExtension(AbstractDirectFlightExtension),
        AbstractDirectFlightClassExtension(AbstractDirectFlightClassExtension),
    }
    impl DirectFlightClassTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractDirectFlightClassExtension(
        pub Box<dyn AbstractDirectFlightClassExtensionTrait>,
    );
    pub trait AbstractDirectFlightClassExtensionTrait: AbstractExtensionTrait {}
    pub type AbstractAIXMFeatureTypeFeatureMetadata = FeatureMetadataPropertyType;
    pub type AbstractAIXMMessageBaseTypeMessageMetadata = MessageMetadataPropertyType;
    #[derive(Debug, Clone)]
    pub struct MessageMetadataPropertyType {
        pub owns: bool,
        pub content: Option<MessageMetadataPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MessageMetadataPropertyTypeContent {
        MdMetadata(gmd::MdMetadataType),
    }
    impl MessageMetadataPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAIXMObject(pub Box<dyn AbstractAIXMObjectTrait>);
    pub trait AbstractAIXMObjectTrait: gml::AbstractGMLTrait {}
    pub type AbstractAIXMTimeSliceTypeTimeSliceMetadata = FeatureTimeSliceMetadataPropertyType;
    #[derive(Debug, Clone)]
    pub struct AbstractApproachAltitudeTableExtension(
        pub Box<dyn AbstractApproachAltitudeTableExtensionTrait>,
    );
    pub trait AbstractApproachAltitudeTableExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractApproachConditionExtension(
        pub Box<dyn AbstractApproachConditionExtensionTrait>,
    );
    pub trait AbstractApproachConditionExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractApproachDistanceTableExtension(
        pub Box<dyn AbstractApproachDistanceTableExtensionTrait>,
    );
    pub trait AbstractApproachDistanceTableExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractAuthorityForNavaidEquipmentExtension(
        pub Box<dyn AbstractAuthorityForNavaidEquipmentExtensionTrait>,
    );
    pub trait AbstractAuthorityForNavaidEquipmentExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractAuthorityForSpecialNavigationStationExtension(
        pub Box<dyn AbstractAuthorityForSpecialNavigationStationExtensionTrait>,
    );
    pub trait AbstractAuthorityForSpecialNavigationStationExtensionTrait:
        AbstractExtensionTrait
    {
    }
    #[derive(Debug, Clone)]
    pub struct AbstractAuthorityForSpecialNavigationSystemExtension(
        pub Box<dyn AbstractAuthorityForSpecialNavigationSystemExtensionTrait>,
    );
    pub trait AbstractAuthorityForSpecialNavigationSystemExtensionTrait:
        AbstractExtensionTrait
    {
    }
    #[derive(Debug, Clone)]
    pub struct AbstractCallsignDetailExtension(pub Box<dyn AbstractCallsignDetailExtensionTrait>);
    pub trait AbstractCallsignDetailExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractDepartureArrivalConditionExtension(
        pub Box<dyn AbstractDepartureArrivalConditionExtensionTrait>,
    );
    pub trait AbstractDepartureArrivalConditionExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractEquipmentUnavailableAdjustmentColumnExtension(
        pub Box<dyn AbstractEquipmentUnavailableAdjustmentColumnExtensionTrait>,
    );
    pub trait AbstractEquipmentUnavailableAdjustmentColumnExtensionTrait:
        AbstractExtensionTrait
    {
    }
    #[derive(Debug, Clone)]
    pub struct AbstractEquipmentUnavailableAdjustmentExtension(
        pub Box<dyn AbstractEquipmentUnavailableAdjustmentExtensionTrait>,
    );
    pub trait AbstractEquipmentUnavailableAdjustmentExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractFlightConditionCircumstanceExtension(
        pub Box<dyn AbstractFlightConditionCircumstanceExtensionTrait>,
    );
    pub trait AbstractFlightConditionCircumstanceExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractFlightConditionElementExtension(
        pub Box<dyn AbstractFlightConditionElementExtensionTrait>,
    );
    pub trait AbstractFlightConditionElementExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractMarkingElementExtension(pub Box<dyn AbstractMarkingElementExtensionTrait>);
    pub trait AbstractMarkingElementExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractMinimaExtension(pub Box<dyn AbstractMinimaExtensionTrait>);
    pub trait AbstractMinimaExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractNavaidComponentExtension(pub Box<dyn AbstractNavaidComponentExtensionTrait>);
    pub trait AbstractNavaidComponentExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractNavigationAreaSectorExtension(
        pub Box<dyn AbstractNavigationAreaSectorExtensionTrait>,
    );
    pub trait AbstractNavigationAreaSectorExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractObstaclePlacementExtension(
        pub Box<dyn AbstractObstaclePlacementExtensionTrait>,
    );
    pub trait AbstractObstaclePlacementExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractReflectorExtension(pub Box<dyn AbstractReflectorExtensionTrait>);
    pub trait AbstractReflectorExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractSafeAltitudeAreaSectorExtension(
        pub Box<dyn AbstractSafeAltitudeAreaSectorExtensionTrait>,
    );
    pub trait AbstractSafeAltitudeAreaSectorExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractSectorDesignExtension(pub Box<dyn AbstractSectorDesignExtensionTrait>);
    pub trait AbstractSectorDesignExtensionTrait: AbstractExtensionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractTerminalArrivalAreaSectorExtension(
        pub Box<dyn AbstractTerminalArrivalAreaSectorExtensionTrait>,
    );
    pub trait AbstractTerminalArrivalAreaSectorExtensionTrait: AbstractExtensionTrait {}
    pub type AccessibleStand = AircraftStandPropertyType;
    pub type ActivatedGroundLighting = GroundLightSystemPropertyType;
    pub type Activation = CodeSystemActivationType;
    pub type ActivationInstruction = TextInstructionType;
    pub type Activity = CodeAirspaceActivityType;
    pub type AdditionalEquipment = CodeApproachEquipmentAdditionalType;
    pub type Address = PostalAddressPropertyType;
    pub type Adjustment = AltitudeAdjustmentPropertyType;
    pub type AdjustmentINOP = EquipmentUnavailableAdjustmentPropertyType;
    #[derive(Debug, Clone)]
    pub struct EquipmentUnavailableAdjustmentPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: EquipmentUnavailableAdjustmentPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum EquipmentUnavailableAdjustmentPropertyTypeContent {
        EquipmentUnavailableAdjustment(EquipmentUnavailableAdjustmentType),
    }
    #[derive(Debug, Clone)]
    pub struct EquipmentUnavailableAdjustmentType {
        pub id: String,
        pub content: Vec<EquipmentUnavailableAdjustmentTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum EquipmentUnavailableAdjustmentTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3202(EquipmentUnavailableAdjustmentContent3202Type),
        Extension(EquipmentUnavailableAdjustmentTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum EquipmentUnavailableAdjustmentContent3202Type {
        Type(CodeRunwayProtectionAreaType),
        ApproachLightingInoperative(CodeYesNoType),
        AdjustmentINOPCol(EquipmentUnavailableAdjustmentColumnPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct EquipmentUnavailableAdjustmentTypeExtensionElementType {
        pub owns: bool,
        pub content: EquipmentUnavailableAdjustmentTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum EquipmentUnavailableAdjustmentTypeExtensionElementTypeContent {
        AbstractEquipmentUnavailableAdjustmentExtension(
            AbstractEquipmentUnavailableAdjustmentExtension,
        ),
    }
    impl EquipmentUnavailableAdjustmentTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct EquipmentUnavailableAdjustmentColumnPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: EquipmentUnavailableAdjustmentColumnPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum EquipmentUnavailableAdjustmentColumnPropertyTypeContent {
        EquipmentUnavailableAdjustmentColumn(EquipmentUnavailableAdjustmentColumnType),
    }
    #[derive(Debug, Clone)]
    pub struct EquipmentUnavailableAdjustmentColumnType {
        pub id: String,
        pub content: Vec<EquipmentUnavailableAdjustmentColumnTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum EquipmentUnavailableAdjustmentColumnTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3212(EquipmentUnavailableAdjustmentColumnContent3212Type),
        Extension(EquipmentUnavailableAdjustmentColumnTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum EquipmentUnavailableAdjustmentColumnContent3212Type {
        GuidanceEquipment(CodeApproachType),
        LandingSystemLights(CodeYesNoType),
        EquipmentRVR(CodeYesNoType),
        VisibilityAdjustment(ValDistanceVerticalType),
        ApproachLightingInoperative(CodeYesNoType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct EquipmentUnavailableAdjustmentColumnTypeExtensionElementType {
        pub owns: bool,
        pub content: EquipmentUnavailableAdjustmentColumnTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum EquipmentUnavailableAdjustmentColumnTypeExtensionElementTypeContent {
        AbstractEquipmentUnavailableAdjustmentColumnExtension(
            AbstractEquipmentUnavailableAdjustmentColumnExtension,
        ),
    }
    impl EquipmentUnavailableAdjustmentColumnTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type AdjustmentINOPCol = EquipmentUnavailableAdjustmentColumnPropertyType;
    pub type AdministrativeArea = TextNameType;
    pub type AerialRefuelling = AerialRefuellingType;
    pub type AerialRefuellingAnchor = AerialRefuellingAnchorType;
    pub type AerialRefuellingAnchorTypeExtension = AerialRefuellingAnchorTypeExtensionElementType;
    pub type AerialRefuellingPoint = AerialRefuellingPointType;
    pub type AerialRefuellingPointTypeExtension = AerialRefuellingPointTypeExtensionElementType;
    pub type AerialRefuellingTimeSlice = AerialRefuellingTimeSliceType;
    pub type AerialRefuellingTimeSliceTypeExtension =
        AerialRefuellingTimeSliceTypeExtensionElementType;
    pub type AerialRefuellingTrack = AerialRefuellingTrackType;
    pub type AerialRefuellingTrackTypeExtension = AerialRefuellingTrackTypeExtensionElementType;
    pub type AerialRefuellingTypeTimeSlice = AerialRefuellingTimeSlicePropertyType;
    pub type AerodromeBeacon = AirportHeliportPropertyType;
    pub type AeronauticalGroundLight = AeronauticalGroundLightType;
    pub type AeronauticalGroundLightTimeSlice = AeronauticalGroundLightTimeSliceType;
    pub type AeronauticalGroundLightTimeSliceTypeExtension =
        AeronauticalGroundLightTimeSliceTypeExtensionElementType;
    pub type AeronauticalGroundLightTypeTimeSlice = AeronauticalGroundLightTimeSlicePropertyType;
    pub type AffectedAirport = AirportHeliportPropertyType;
    pub type AffectedArea = AirspacePropertyType;
    pub type AffectedLocation = AirportHeliportPropertyType;
    pub type AimingPoint = ElevatedPointPropertyType;
    pub type AirTrafficControlService = AirTrafficControlServiceType;
    pub type AirTrafficControlServiceTimeSlice = AirTrafficControlServiceTimeSliceType;
    pub type AirTrafficControlServiceTimeSliceTypeExtension =
        AirTrafficControlServiceTimeSliceTypeExtensionElementType;
    pub type AirTrafficControlServiceTypeTimeSlice = AirTrafficControlServiceTimeSlicePropertyType;
    pub type AirTrafficManagementService = AirTrafficManagementServiceType;
    pub type AirTrafficManagementServiceTimeSlice = AirTrafficManagementServiceTimeSliceType;
    pub type AirTrafficManagementServiceTimeSliceTypeExtension =
        AirTrafficManagementServiceTimeSliceTypeExtensionElementType;
    pub type AirTrafficManagementServiceTypeTimeSlice =
        AirTrafficManagementServiceTimeSlicePropertyType;
    pub type Aircraft = AircraftCharacteristicPropertyType;
    pub type AircraftCategory = AircraftCharacteristicPropertyType;
    pub type AircraftCharacteristic = AircraftCharacteristicType;
    pub type AircraftCharacteristicTypeExtension = AircraftCharacteristicTypeExtensionElementType;
    pub type AircraftGroundService = AircraftGroundServiceType;
    pub type AircraftGroundServiceTimeSlice = AircraftGroundServiceTimeSliceType;
    pub type AircraftGroundServiceTimeSliceTypeExtension =
        AircraftGroundServiceTimeSliceTypeExtensionElementType;
    pub type AircraftGroundServiceTypeTimeSlice = AircraftGroundServiceTimeSlicePropertyType;
    pub type AircraftLandingCategory = CodeAircraftCategoryType;
    pub type AircraftLocator = DirectionFinderPropertyType;
    pub type AircraftStand = AircraftStandType;
    pub type AircraftStandContamination = AircraftStandContaminationType;
    pub type AircraftStandContaminationTypeExtension =
        AircraftStandContaminationTypeExtensionElementType;
    pub type AircraftStandTimeSlice = AircraftStandTimeSliceType;
    pub type AircraftStandTimeSliceTypeExtension = AircraftStandTimeSliceTypeExtensionElementType;
    pub type AircraftStandTypeTimeSlice = AircraftStandTimeSlicePropertyType;
    pub type AirportClearanceService = AirportClearanceServiceType;
    pub type AirportClearanceServiceTimeSlice = AirportClearanceServiceTimeSliceType;
    pub type AirportClearanceServiceTimeSliceTypeExtension =
        AirportClearanceServiceTimeSliceTypeExtensionElementType;
    pub type AirportClearanceServiceTypeTimeSlice = AirportClearanceServiceTimeSlicePropertyType;
    pub type AirportHeliport = AirportHeliportType;
    pub type AirportHeliportAvailability = AirportHeliportAvailabilityType;
    pub type AirportHeliportAvailabilityTypeExtension =
        AirportHeliportAvailabilityTypeExtensionElementType;
    pub type AirportHeliportCollocation = AirportHeliportCollocationType;
    pub type AirportHeliportCollocationTimeSlice = AirportHeliportCollocationTimeSliceType;
    pub type AirportHeliportCollocationTimeSliceTypeExtension =
        AirportHeliportCollocationTimeSliceTypeExtensionElementType;
    pub type AirportHeliportCollocationTypeTimeSlice =
        AirportHeliportCollocationTimeSlicePropertyType;
    pub type AirportHeliportContamination = AirportHeliportContaminationType;
    pub type AirportHeliportContaminationTypeExtension =
        AirportHeliportContaminationTypeExtensionElementType;
    pub type AirportHeliportResponsibilityOrganisation =
        AirportHeliportResponsibilityOrganisationType;
    pub type AirportHeliportResponsibilityOrganisationTypeExtension =
        AirportHeliportResponsibilityOrganisationTypeExtensionElementType;
    pub type AirportHeliportTimeSlice = AirportHeliportTimeSliceType;
    pub type AirportHeliportTimeSliceTypeExtension =
        AirportHeliportTimeSliceTypeExtensionElementType;
    pub type AirportHeliportTypeTimeSlice = AirportHeliportTimeSlicePropertyType;
    pub type AirportHeliportUsage = AirportHeliportUsageType;
    pub type AirportHeliportUsageTypeExtension = AirportHeliportUsageTypeExtensionElementType;
    pub type AirportHotSpot = AirportHotSpotType;
    pub type AirportHotSpotTimeSlice = AirportHotSpotTimeSliceType;
    pub type AirportHotSpotTimeSliceTypeExtension = AirportHotSpotTimeSliceTypeExtensionElementType;
    pub type AirportHotSpotTypeTimeSlice = AirportHotSpotTimeSlicePropertyType;
    pub type AirportLocation = AirportHeliportPropertyType;
    pub type AirportProtectionAreaMarking = AirportProtectionAreaMarkingType;
    pub type AirportProtectionAreaMarkingTimeSlice = AirportProtectionAreaMarkingTimeSliceType;
    pub type AirportProtectionAreaMarkingTimeSliceTypeExtension =
        AirportProtectionAreaMarkingTimeSliceTypeExtensionElementType;
    pub type AirportProtectionAreaMarkingTypeTimeSlice =
        AirportProtectionAreaMarkingTimeSlicePropertyType;
    pub type AirportSuppliesService = AirportSuppliesServiceType;
    pub type AirportSuppliesServiceTimeSlice = AirportSuppliesServiceTimeSliceType;
    pub type AirportSuppliesServiceTimeSliceTypeExtension =
        AirportSuppliesServiceTimeSliceTypeExtensionElementType;
    pub type AirportSuppliesServiceTypeTimeSlice = AirportSuppliesServiceTimeSlicePropertyType;
    pub type Airspace = AirspaceType;
    pub type AirspaceActivation = AirspaceActivationType;
    pub type AirspaceActivationTypeExtension = AirspaceActivationTypeExtensionElementType;
    pub type AirspaceBorderCrossing = AirspaceBorderCrossingType;
    pub type AirspaceBorderCrossingTimeSlice = AirspaceBorderCrossingTimeSliceType;
    pub type AirspaceBorderCrossingTimeSliceTypeExtension =
        AirspaceBorderCrossingTimeSliceTypeExtensionElementType;
    pub type AirspaceBorderCrossingTypeTimeSlice = AirspaceBorderCrossingTimeSlicePropertyType;
    pub type AirspaceGeometryComponent = AirspaceGeometryComponentType;
    pub type AirspaceGeometryComponentTypeExtension =
        AirspaceGeometryComponentTypeExtensionElementType;
    pub type AirspaceLayer = AirspaceLayerType;
    pub type AirspaceLayerClass = AirspaceLayerClassType;
    pub type AirspaceLayerClassTypeExtension = AirspaceLayerClassTypeExtensionElementType;
    pub type AirspaceLayerTypeExtension = AirspaceLayerTypeExtensionElementType;
    pub type AirspaceTimeSlice = AirspaceTimeSliceType;
    pub type AirspaceTimeSliceTypeExtension = AirspaceTimeSliceTypeExtensionElementType;
    pub type AirspaceTypeTimeSlice = AirspaceTimeSlicePropertyType;
    pub type AirspaceVolume = AirspaceVolumeType;
    pub type AirspaceVolumeDependency = AirspaceVolumeDependencyType;
    pub type AirspaceVolumeDependencyTypeExtension =
        AirspaceVolumeDependencyTypeExtensionElementType;
    pub type AirspaceVolumeTypeExtension = AirspaceVolumeTypeExtensionElementType;
    pub type AlignmentIndicator = CodeYesNoType;
    pub type AlongCourseGuidance = CodeYesNoType;
    pub type AlternateClimbAltitude = ValDistanceVerticalType;
    pub type AlternateClimbInstruction = TextInstructionType;
    pub type Altimeter = AltimeterSourcePropertyType;
    pub type AltimeterCheckLocation = CodeYesNoType;
    pub type AltimeterSource = AltimeterSourcePropertyType;
    pub type AltimeterSourceStatus = AltimeterSourceStatusType;
    pub type AltimeterSourceStatusTypeExtension = AltimeterSourceStatusTypeExtensionElementType;
    pub type AltimeterSourceTimeSlice = AltimeterSourceTimeSliceType;
    pub type AltimeterSourceTimeSliceTypeExtension =
        AltimeterSourceTimeSliceTypeExtensionElementType;
    pub type AltimeterSourceTypeTimeSlice = AltimeterSourceTimeSlicePropertyType;
    #[derive(Debug, Clone)]
    pub struct AltimeterSourceTimeSlicePropertyType {
        pub owns: bool,
        pub content: AltimeterSourceTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AltimeterSourceTimeSlicePropertyTypeContent {
        AltimeterSourceTimeSlice(AltimeterSourceTimeSliceType),
    }
    impl AltimeterSourceTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type Altitude = ValDistanceVerticalType;
    pub type AltitudeAdjustment = AltitudeAdjustmentType;
    pub type AltitudeAdjustmentType = CodeAltitudeAdjustmentType;
    pub type AltitudeAdjustmentTypeExtension = AltitudeAdjustmentTypeExtensionElementType;
    pub type AltitudeCode = CodeMinimumAltitudeType;
    #[derive(Debug, Clone)]
    pub struct CodeMinimumAltitudeType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeMinimumAltitudeBaseType,
    }
    #[derive(Debug, Clone)]
    pub enum CodeMinimumAltitudeBaseType {
        Oca,
        Da,
        Mda,
        String(String),
    }
    pub type AltitudeDescription = CodeAltitudeUseType;
    pub type AltitudeInterpretation = CodeAltitudeUseType;
    pub type AltitudeOverrideATC = ValDistanceVerticalType;
    pub type AltitudeOverrideReference = CodeVerticalReferenceType;
    pub type AltitudeReference = CodeVerticalReferenceType;
    pub type Anchor = AerialRefuellingAnchorPropertyType;
    pub type Angle = ValBearingType;
    pub type AngleAccuracy = ValAngleType;
    pub type AngleCoverLeft = ValAngleType;
    pub type AngleCoverRight = ValAngleType;
    pub type AngleDirectionReference = CodeDirectionReferenceType;
    pub type AngleIndication = AngleIndicationType;
    pub type AngleIndicationTimeSlice = AngleIndicationTimeSliceType;
    pub type AngleIndicationTimeSliceTypeExtension =
        AngleIndicationTimeSliceTypeExtensionElementType;
    pub type AngleIndicationTypeTimeSlice = AngleIndicationTimeSlicePropertyType;
    pub type AngleMinimum = ValAngleType;
    pub type AngleNominal = ValAngleType;
    pub type AngleProportionalLeft = ValAngleType;
    pub type AngleProportionalRight = ValAngleType;
    pub type AngleScallop = ValAngleType;
    pub type AngleSpan = ValAngleType;
    pub type AngleType = CodeNorthReferenceType;
    pub type AngleUse = AngleUseType;
    pub type AngleUseTypeExtension = AngleUseTypeExtensionElementType;
    pub type Annotation = NotePropertyType;
    pub type AntennaTiltFixed = CodeYesNoType;
    pub type AntiCollisionAndSeparationEquipment = CodeEquipmentAntiCollisionType;
    pub type ApplicableAirspace = AirspacePropertyType;
    pub type ApplicableLevelColumn = StandardLevelColumnPropertyType;
    pub type ApplicableRoutePortion = RoutePortionPropertyType;
    pub type Approach = InstrumentApproachProcedurePropertyType;
    pub type ApproachAltitudeTable = ApproachAltitudeTableType;
    #[derive(Debug, Clone)]
    pub struct ApproachAltitudeTableType {
        pub id: String,
        pub content: Vec<ApproachAltitudeTableTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ApproachAltitudeTableTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3286(ApproachAltitudeTableContent3286Type),
        Extension(ApproachAltitudeTableTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum ApproachAltitudeTableContent3286Type {
        MeasurementPoint(CodeProcedureDistanceType),
        Altitude(ValDistanceVerticalType),
        AltitudeReference(CodeVerticalReferenceType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ApproachAltitudeTableTypeExtensionElementType {
        pub owns: bool,
        pub content: ApproachAltitudeTableTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ApproachAltitudeTableTypeExtensionElementTypeContent {
        AbstractApproachAltitudeTableExtension(AbstractApproachAltitudeTableExtension),
    }
    impl ApproachAltitudeTableTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type ApproachAltitudeTableTypeExtension = ApproachAltitudeTableTypeExtensionElementType;
    pub type ApproachCondition = ApproachConditionType;
    #[derive(Debug, Clone)]
    pub struct ApproachConditionType {
        pub id: String,
        pub content: Vec<ApproachConditionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ApproachConditionTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3379(ApproachConditionContent3379Type),
        Extension(ApproachConditionTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum ApproachConditionContent3379Type {
        FinalApproachPath(CodeMinimaFinalApproachPathType),
        RequiredNavigationPerformance(CodeRNPType),
        ClimbGradient(ValSlopeType),
        MinimumSet(MinimaPropertyType),
        CirclingRestriction(CirclingRestrictionType),
        AircraftCategory(AircraftCharacteristicPropertyType),
        LandingArea(LandingTakeoffAreaCollectionPropertyType),
        Altimeter(AltimeterSourcePropertyType),
        DesignSurface(ObstacleAssessmentAreaPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ApproachConditionTypeExtensionElementType {
        pub owns: bool,
        pub content: ApproachConditionTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ApproachConditionTypeExtensionElementTypeContent {
        AbstractApproachConditionExtension(AbstractApproachConditionExtension),
    }
    impl ApproachConditionTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct CodeMinimaFinalApproachPathType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeMinimaFinalApproachPathBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct MinimaPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: MinimaPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum MinimaPropertyTypeContent {
        Minima(MinimaType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeMinimaFinalApproachPathBaseType {
        StraightIn,
        Circling,
        Sidestep,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct MinimaType {
        pub id: String,
        pub content: Vec<MinimaTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MinimaTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3182(MinimaContent3182Type),
        Extension(MinimaTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum MinimaContent3182Type {
        Altitude(ValDistanceVerticalType),
        AltitudeCode(CodeMinimumAltitudeType),
        AltitudeReference(CodeVerticalReferenceType),
        Height(ValDistanceVerticalType),
        MilitaryHeight(ValDistanceVerticalType),
        RadioHeight(ValDistanceVerticalType),
        HeightCode(CodeMinimumHeightType),
        HeightReference(CodeHeightReferenceType),
        Visibility(ValDistanceType),
        MilitaryVisibility(ValDistanceType),
        MandatoryRVR(CodeYesNoType),
        RemoteAltimeterMinima(CodeYesNoType),
        AdjustmentINOP(EquipmentUnavailableAdjustmentPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MinimaTypeExtensionElementType {
        pub owns: bool,
        pub content: MinimaTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum MinimaTypeExtensionElementTypeContent {
        AbstractMinimaExtension(AbstractMinimaExtension),
    }
    impl MinimaTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct CodeMinimumHeightType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeMinimumHeightBaseType,
    }
    #[derive(Debug, Clone)]
    pub struct CodeHeightReferenceType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeHeightReferenceBaseType,
    }
    #[derive(Debug, Clone)]
    pub enum CodeMinimumHeightBaseType {
        Dh,
        Och,
        Mdh,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum CodeHeightReferenceBaseType {
        Hat,
        Haa,
        Hal,
        Has,
        String(String),
    }
    pub type ApproachConditionTypeExtension = ApproachConditionTypeExtensionElementType;
    pub type ApproachDistanceTable = ApproachDistanceTableType;
    #[derive(Debug, Clone)]
    pub struct ApproachDistanceTableType {
        pub id: String,
        pub content: Vec<ApproachDistanceTableTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ApproachDistanceTableTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3296(ApproachDistanceTableContent3296Type),
        Extension(ApproachDistanceTableTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum ApproachDistanceTableContent3296Type {
        StartingMeasurementPoint(CodeProcedureDistanceType),
        ValueHAT(ValDistanceVerticalType),
        EndingMeasurementPoint(CodeProcedureDistanceType),
        Distance(ValDistanceType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ApproachDistanceTableTypeExtensionElementType {
        pub owns: bool,
        pub content: ApproachDistanceTableTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ApproachDistanceTableTypeExtensionElementTypeContent {
        AbstractApproachDistanceTableExtension(AbstractApproachDistanceTableExtension),
    }
    impl ApproachDistanceTableTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type ApproachDistanceTableTypeExtension = ApproachDistanceTableTypeExtensionElementType;
    pub type ApproachLightingInoperative = CodeYesNoType;
    pub type ApproachLightingSystem = ApproachLightingSystemType;
    pub type ApproachLightingSystemTimeSlice = ApproachLightingSystemTimeSliceType;
    pub type ApproachLightingSystemTimeSliceTypeExtension =
        ApproachLightingSystemTimeSliceTypeExtensionElementType;
    pub type ApproachLightingSystemTypeTimeSlice = ApproachLightingSystemTimeSlicePropertyType;
    pub type ApproachMarkingCondition = CodeMarkingConditionType;
    pub type ApproachMarkingType = CodeRunwayMarkingType;
    pub type ApproachPerformanceDesignator = NoSequenceType;
    pub type ApproachPrefix = CodeApproachPrefixType;
    pub type ApproachRNAV = InstrumentApproachProcedurePropertyType;
    pub type ApproachTakeOffArea = RunwayPropertyType;
    pub type ApproachTimingTable = ApproachTimingTableType;
    pub type ApproachTimingTableTypeExtension = ApproachTimingTableTypeExtensionElementType;
    pub type ApproachType = CodeApproachType;
    pub type Apron = ApronType;
    pub type ApronAreaAvailability = ApronAreaAvailabilityType;
    pub type ApronAreaAvailabilityTypeExtension = ApronAreaAvailabilityTypeExtensionElementType;
    pub type ApronAreaUsage = ApronAreaUsageType;
    pub type ApronAreaUsageTypeExtension = ApronAreaUsageTypeExtensionElementType;
    pub type ApronAvailable = CodeYesNoType;
    pub type ApronContamination = ApronContaminationType;
    pub type ApronContaminationTypeExtension = ApronContaminationTypeExtensionElementType;
    pub type ApronElement = ApronElementType;
    pub type ApronElementTimeSlice = ApronElementTimeSliceType;
    pub type ApronElementTimeSliceTypeExtension = ApronElementTimeSliceTypeExtensionElementType;
    pub type ApronElementTypeTimeSlice = ApronElementTimeSlicePropertyType;
    pub type ApronLightSystem = ApronLightSystemType;
    pub type ApronLightSystemTimeSlice = ApronLightSystemTimeSliceType;
    pub type ApronLightSystemTimeSliceTypeExtension =
        ApronLightSystemTimeSliceTypeExtensionElementType;
    pub type ApronLightSystemTypeTimeSlice = ApronLightSystemTimeSlicePropertyType;
    pub type ApronLocation = ApronElementPropertyType;
    pub type ApronMarking = ApronMarkingType;
    pub type ApronMarkingTimeSlice = ApronMarkingTimeSliceType;
    pub type ApronMarkingTimeSliceTypeExtension = ApronMarkingTimeSliceTypeExtensionElementType;
    pub type ApronMarkingTypeTimeSlice = ApronMarkingTimeSlicePropertyType;
    pub type ApronTimeSlice = ApronTimeSliceType;
    pub type ApronTimeSliceTypeExtension = ApronTimeSliceTypeExtensionElementType;
    pub type ApronTypeTimeSlice = ApronTimeSlicePropertyType;
    pub type ArcCentre = TerminalSegmentPointPropertyType;
    pub type ArcDirection = CodeArcDirectionType;
    pub type Area = ElevatedSurfacePropertyType;
    pub type AreaContaminant = RunwaySectionContaminationPropertyType;
    pub type Arp = ElevatedPointPropertyType;
    pub type ArrestingGear = ArrestingGearType;
    pub type ArrestingGearTimeSlice = ArrestingGearTimeSliceType;
    pub type ArrestingGearTimeSliceTypeExtension = ArrestingGearTimeSliceTypeExtensionElementType;
    pub type ArrestingGearTypeTimeSlice = ArrestingGearTimeSlicePropertyType;
    pub type Arrival = LandingTakeoffAreaCollectionPropertyType;
    pub type ArrivalAreaType = CodeTAAType;
    pub type ArrivalFeederLeg = ArrivalFeederLegType;
    pub type ArrivalFeederLegTimeSlice = ArrivalFeederLegTimeSliceType;
    pub type ArrivalFeederLegTimeSliceTypeExtension =
        ArrivalFeederLegTimeSliceTypeExtensionElementType;
    pub type ArrivalFeederLegTypeTimeSlice = ArrivalFeederLegTimeSlicePropertyType;
    pub type ArrivalLeg = ArrivalLegType;
    pub type ArrivalLegTimeSlice = ArrivalLegTimeSliceType;
    pub type ArrivalLegTimeSliceTypeExtension = ArrivalLegTimeSliceTypeExtensionElementType;
    pub type ArrivalLegTypeTimeSlice = ArrivalLegTimeSlicePropertyType;
    pub type AssessedAltitude = ValDistanceVerticalType;
    pub type AssessedHoldingPattern = HoldingPatternPropertyType;
    pub type AssignedAirspace = AirspacePropertyType;
    pub type AssociatedAirport = AirportHeliportPropertyType;
    pub type AssociatedAirportHeliport = AirportHeliportPropertyType;
    pub type AssociatedApron = ApronPropertyType;
    pub type AssociatedDeclaredDistance = RunwayDeclaredDistancePropertyType;
    pub type AssociatedGuidanceLine = GuidanceLinePropertyType;
    pub type AssociatedLevels = AirspaceLayerPropertyType;
    pub type AssociatedRunway = RunwayPropertyType;
    pub type AssociatedRunwayDirection = RunwayDirectionPropertyType;
    pub type AssociatedStand = AircraftStandPropertyType;
    pub type AssociatedTaxiway = TaxiwayPropertyType;
    pub type AuralMorseCode = CodeAuralMorseType;
    pub type Authority = OrganisationAuthorityPropertyType;
    pub type AuthorityForAerialRefuelling = AuthorityForAerialRefuellingType;
    pub type AuthorityForAerialRefuellingTypeExtension =
        AuthorityForAerialRefuellingTypeExtensionElementType;
    pub type AuthorityForAirspace = AuthorityForAirspaceType;
    pub type AuthorityForAirspaceTimeSlice = AuthorityForAirspaceTimeSliceType;
    pub type AuthorityForAirspaceTimeSliceTypeExtension =
        AuthorityForAirspaceTimeSliceTypeExtensionElementType;
    pub type AuthorityForAirspaceTypeTimeSlice = AuthorityForAirspaceTimeSlicePropertyType;
    pub type AuthorityForNavaidEquipment = AuthorityForNavaidEquipmentType;
    #[derive(Debug, Clone)]
    pub struct AuthorityForNavaidEquipmentType {
        pub id: String,
        pub content: Vec<AuthorityForNavaidEquipmentTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AuthorityForNavaidEquipmentTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content2459(AuthorityForNavaidEquipmentContent2459Type),
        Extension(AuthorityForNavaidEquipmentTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum AuthorityForNavaidEquipmentContent2459Type {
        Type(CodeRunwayProtectionAreaType),
        Annotation(NotePropertyType),
        TheOrganisationAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AuthorityForNavaidEquipmentTypeExtensionElementType {
        pub owns: bool,
        pub content: AuthorityForNavaidEquipmentTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AuthorityForNavaidEquipmentTypeExtensionElementTypeContent {
        AbstractAuthorityForNavaidEquipmentExtension(AbstractAuthorityForNavaidEquipmentExtension),
    }
    impl AuthorityForNavaidEquipmentTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type AuthorityForNavaidEquipmentTypeExtension =
        AuthorityForNavaidEquipmentTypeExtensionElementType;
    pub type AuthorityForSpecialNavigationStation = AuthorityForSpecialNavigationStationType;
    #[derive(Debug, Clone)]
    pub struct AuthorityForSpecialNavigationStationType {
        pub id: String,
        pub content: Vec<AuthorityForSpecialNavigationStationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AuthorityForSpecialNavigationStationTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content2468(AuthorityForSpecialNavigationStationContent2468Type),
        Extension(AuthorityForSpecialNavigationStationTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum AuthorityForSpecialNavigationStationContent2468Type {
        Type(CodeRunwayProtectionAreaType),
        Annotation(NotePropertyType),
        TheOrganisationAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AuthorityForSpecialNavigationStationTypeExtensionElementType {
        pub owns: bool,
        pub content: AuthorityForSpecialNavigationStationTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AuthorityForSpecialNavigationStationTypeExtensionElementTypeContent {
        AbstractAuthorityForSpecialNavigationStationExtension(
            AbstractAuthorityForSpecialNavigationStationExtension,
        ),
    }
    impl AuthorityForSpecialNavigationStationTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type AuthorityForSpecialNavigationStationTypeExtension =
        AuthorityForSpecialNavigationStationTypeExtensionElementType;
    pub type AuthorityForSpecialNavigationSystem = AuthorityForSpecialNavigationSystemType;
    #[derive(Debug, Clone)]
    pub struct AuthorityForSpecialNavigationSystemType {
        pub id: String,
        pub content: Vec<AuthorityForSpecialNavigationSystemTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AuthorityForSpecialNavigationSystemTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content2554(AuthorityForSpecialNavigationSystemContent2554Type),
        Extension(AuthorityForSpecialNavigationSystemTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum AuthorityForSpecialNavigationSystemContent2554Type {
        Type(CodeRunwayProtectionAreaType),
        Annotation(NotePropertyType),
        TheOrganisationAuthority(OrganisationAuthorityPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AuthorityForSpecialNavigationSystemTypeExtensionElementType {
        pub owns: bool,
        pub content: AuthorityForSpecialNavigationSystemTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AuthorityForSpecialNavigationSystemTypeExtensionElementTypeContent {
        AbstractAuthorityForSpecialNavigationSystemExtension(
            AbstractAuthorityForSpecialNavigationSystemExtension,
        ),
    }
    impl AuthorityForSpecialNavigationSystemTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type AuthorityForSpecialNavigationSystemTypeExtension =
        AuthorityForSpecialNavigationSystemTypeExtensionElementType;
    pub type AuthorizedAltitude = ValDistanceVerticalType;
    pub type AutomatedRadarTerminalSystem = TextDesignatorType;
    pub type Autonomous = CodeYesNoType;
    pub type Availability = ManoeuvringAreaAvailabilityPropertyType;
    pub type AviationBoundary = ElevatedSurfacePropertyType;
    pub type AxisBearing = ValBearingType;
    pub type Azimuth = AzimuthType;
    pub type AzimuthTimeSlice = AzimuthTimeSliceType;
    pub type AzimuthTimeSliceTypeExtension = AzimuthTimeSliceTypeExtensionElementType;
    pub type AzimuthTypeTimeSlice = AzimuthTimeSlicePropertyType;
    pub type BackCourseUsable = CodeILSBackCourseType;
    pub type BankAngle = ValAngleType;
    pub type Bidirectional = CodeYesNoType;
    pub type BidirectionalUse = CodeYesNoType;
    pub type Border = CurvePropertyType;
    pub type BroadcastIdentifier = TextDesignatorType;
    pub type Buffer = SurfacePropertyType;
    pub type BufferWidth = ValDistanceType;
    pub type CallSign = TextNameType;
    pub type CallsignDetail = CallsignDetailType;
    #[derive(Debug, Clone)]
    pub struct CallsignDetailType {
        pub id: String,
        pub content: Vec<CallsignDetailTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CallsignDetailTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content1990(CallsignDetailContent1990Type),
        Extension(CallsignDetailTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum CallsignDetailContent1990Type {
        CallSign(TextNameType),
        Language(CodeLanguageType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CallsignDetailTypeExtensionElementType {
        pub owns: bool,
        pub content: CallsignDetailTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum CallsignDetailTypeExtensionElementTypeContent {
        AbstractCallsignDetailExtension(AbstractCallsignDetailExtension),
    }
    impl CallsignDetailTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct CodeLanguageType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: String,
    }
    pub type CallsignDetailTypeExtension = CallsignDetailTypeExtensionElementType;
    pub type CardinalDirection = CodeCardinalDirectionType;
    pub type Category = CodeFireFightingType;
    pub type CentrePointAimingPoint = TouchDownLiftOffPropertyType;
    pub type CentrePointAirportReferencePoint = AirportHeliportPropertyType;
    pub type CentrePointFixDesignatedPoint = DesignatedPointPropertyType;
    pub type CentrePointNavaidSystem = NavaidPropertyType;
    pub type CentrePointPosition = PointPropertyType;
    pub type CentrePointRunwayPoint = RunwayCentrelinePointPropertyType;
    pub type Centreline = ElevatedCurvePropertyType;
    pub type CertificationDate = DateType;
    pub type CertificationExpirationDate = DateType;
    pub type CertifiedICAO = CodeYesNoType;
    pub type ChangeOverPoint = ChangeOverPointType;
    pub type ChangeOverPointTimeSlice = ChangeOverPointTimeSliceType;
    pub type ChangeOverPointTimeSliceTypeExtension =
        ChangeOverPointTimeSliceTypeExtensionElementType;
    pub type ChangeOverPointTypeTimeSlice = ChangeOverPointTimeSlicePropertyType;
    pub type Channel = CodeCommunicationChannelType;
    pub type ChannelGNSS = ValChannelNumberType;
    pub type CheckPointFacility = VorpropertyType;
    pub type CheckpointINS = CheckpointINSType;
    pub type CheckpointINSTimeSlice = CheckpointINSTimeSliceType;
    pub type CheckpointINSTimeSliceTypeExtension = CheckpointINSTimeSliceTypeExtensionElementType;
    pub type CheckpointINSTypeTimeSlice = CheckpointINSTimeSlicePropertyType;
    pub type CheckpointVOR = CheckpointVORType;
    pub type CheckpointVORTimeSlice = CheckpointVORTimeSliceType;
    pub type CheckpointVORTimeSliceTypeExtension = CheckpointVORTimeSliceTypeExtensionElementType;
    pub type CheckpointVORTypeTimeSlice = CheckpointVORTimeSlicePropertyType;
    pub type CircleSector = CircleSectorType;
    pub type CircleSectorTypeExtension = CircleSectorTypeExtensionElementType;
    pub type CirclingArea = CirclingAreaType;
    pub type CirclingAreaTimeSlice = CirclingAreaTimeSliceType;
    pub type CirclingAreaTimeSliceTypeExtension = CirclingAreaTimeSliceTypeExtensionElementType;
    pub type CirclingAreaTypeTimeSlice = CirclingAreaTimeSlicePropertyType;
    pub type CirclingIdentification = CodeUpperAlphaType;
    pub type CirclingRestriction = CirclingRestrictionType;
    pub type CirclingRestrictionTypeExtension = CirclingRestrictionTypeExtensionElementType;
    pub type City = CityType;
    pub type CityTypeExtension = CityTypeExtensionElementType;
    pub type Class = AirspaceLayerClassPropertyType;
    pub type ClassICAO = CodeApproachLightingICAOType;
    pub type ClassLCN = ValLCNType;
    pub type ClassLightingJAR = CodeLightingJARType;
    pub type ClassPCN = ValPCNType;
    pub type ClassWingSpan = CodeAircraftWingspanClassType;
    pub type Classification = CodeAirspaceClassificationType;
    pub type ClearedLength = ValDistanceType;
    pub type ClearedLengthBegin = ValDistanceType;
    pub type ClearedSide = CodeSideType;
    pub type ClearedWidth = ValDistanceType;
    pub type Clicks = NoNumberType;
    pub type ClientAerialRefuelling = AerialRefuellingPropertyType;
    pub type ClientAirport = AirportHeliportPropertyType;
    pub type ClientAirspace = AirspacePropertyType;
    pub type ClientHolding = HoldingPatternPropertyType;
    pub type ClientProcedure = ProcedurePropertyType;
    pub type ClientRoute = RoutePortionPropertyType;
    pub type ClimbGradient = ValSlopeType;
    pub type CloseIn = CodeYesNoType;
    pub type CodeICAO = String;
    pub type CodingStandard = CodeProcedureCodingStandardType;
    pub type CollocationGroup = NoSequenceType;
    pub type Colour = CodeColourType;
    pub type CommunicationEquipment = CodeCommunicationModeType;
    pub type CommunicationFailureInstruction = TextInstructionType;
    pub type CompliantICAO = CodeYesNoType;
    pub type Composition = CodeSurfaceCompositionType;
    pub type Condition = CodeMarkingConditionType;
    pub type ConditionCombination = ConditionCombinationType;
    pub type ConditionCombinationTypeExtension = ConditionCombinationTypeExtensionElementType;
    pub type ConnectedApron = ApronPropertyType;
    pub type ConnectedRunwayCentrelinePoint = RunwayCentrelinePointPropertyType;
    pub type ConnectedStand = AircraftStandPropertyType;
    pub type ConnectedTaxiway = TaxiwayPropertyType;
    pub type ConnectedTouchDownLiftOff = TouchDownLiftOffPropertyType;
    pub type ConstructionStatus = CodeStatusConstructionType;
    pub type Contact = ContactInformationPropertyType;
    pub type ContactInformation = ContactInformationType;
    pub type ContactInformationTypeExtension = ContactInformationTypeExtensionElementType;
    pub type ContainingAirspace = AirspacePropertyType;
    pub type Contaminant = TaxiwayContaminationPropertyType;
    pub type Content = Xhtmltype;
    pub type ContingencyRoute = CodeYesNoType;
    pub type ContributorAirspace = AirspaceVolumeDependencyPropertyType;
    pub type ControlType = CodeMilitaryOperationsType;
    pub type ControlledAirspace = CodeYesNoType;
    pub type ControlledLightIntensity = LightActivationPropertyType;
    pub type Controlling = CodeYesNoType;
    pub type CopterTrack = ValBearingType;
    pub type Country = TextNameType;
    pub type Course = ValBearingType;
    pub type CourseCentrelineDistance = ValDistanceType;
    pub type CourseCentrelineIntersect = CodeRelativePositionType;
    pub type CourseDirection = CodeDirectionReferenceType;
    pub type CourseOffsetAngle = ValBearingType;
    pub type CourseOffsetDistance = ValDistanceType;
    pub type CourseOffsetSide = CodeSideType;
    pub type CourseQuality = CodeCourseQualityILSType;
    pub type CourseReversalInstruction = TextInstructionType;
    pub type CourseType = CodeCourseType;
    pub type Crcremainder = ValHexType;
    pub type CriticalDME = CodeYesNoType;
    pub type CriticalRidge = RidgePropertyType;
    pub type CurveExtent = CurvePropertyType;
    pub type Dme = Dmetype;
    pub type DmetimeSlice = DmetimeSliceType;
    pub type DataLink = CodeYesNoType;
    pub type DataLinkChannel = CodeCommunicationChannelType;
    pub type DataLinkEnabled = CodeYesNoType;
    pub type DateDay = DateMonthDayType;
    pub type DateMagneticVariation = DateYearType;
    pub type DateYear = DateYearType;
    pub type Day = CodeDayType;
    pub type DayTil = CodeDayType;
    pub type DaylightSavingAdjust = CodeYesNoType;
    pub type DeclaredValue = RunwayDeclaredDistanceValuePropertyType;
    pub type Declination = ValMagneticVariationType;
    pub type DeicingArea = DeicingAreaType;
    pub type DeicingAreaMarking = DeicingAreaMarkingType;
    pub type DeicingAreaMarkingTimeSlice = DeicingAreaMarkingTimeSliceType;
    pub type DeicingAreaMarkingTimeSliceTypeExtension =
        DeicingAreaMarkingTimeSliceTypeExtensionElementType;
    pub type DeicingAreaMarkingTypeTimeSlice = DeicingAreaMarkingTimeSlicePropertyType;
    pub type DeicingAreaTimeSlice = DeicingAreaTimeSliceType;
    pub type DeicingAreaTimeSliceTypeExtension = DeicingAreaTimeSliceTypeExtensionElementType;
    pub type DeicingAreaTypeTimeSlice = DeicingAreaTimeSlicePropertyType;
    pub type DeliveryPoint = TextAddressType;
    pub type Departure = StandardInstrumentDeparturePropertyType;
    pub type DepartureArrivalCondition = DepartureArrivalConditionType;
    #[derive(Debug, Clone)]
    pub struct DepartureArrivalConditionType {
        pub id: String,
        pub content: Vec<DepartureArrivalConditionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DepartureArrivalConditionTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3458(DepartureArrivalConditionContent3458Type),
        Extension(DepartureArrivalConditionTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum DepartureArrivalConditionContent3458Type {
        MinimumEnrouteAltitude(ValDistanceVerticalType),
        MinimumCrossingAtEnd(ValDistanceVerticalType),
        MinimumCrossingAtEndReference(CodeVerticalReferenceType),
        MaximumCrossingAtEnd(ValDistanceVerticalType),
        MaximumCrossingAtEndReference(CodeVerticalReferenceType),
        EngineType(AircraftCharacteristicPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct DepartureArrivalConditionTypeExtensionElementType {
        pub owns: bool,
        pub content: DepartureArrivalConditionTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum DepartureArrivalConditionTypeExtensionElementTypeContent {
        AbstractDepartureArrivalConditionExtension(AbstractDepartureArrivalConditionExtension),
    }
    impl DepartureArrivalConditionTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type DepartureArrivalConditionTypeExtension =
        DepartureArrivalConditionTypeExtensionElementType;
    pub type DepartureLeg = DepartureLegType;
    pub type DepartureLegTimeSlice = DepartureLegTimeSliceType;
    pub type DepartureLegTimeSliceTypeExtension = DepartureLegTimeSliceTypeExtensionElementType;
    pub type DepartureLegTypeTimeSlice = DepartureLegTimeSlicePropertyType;
    pub type DepartureRunwayTransition = LandingTakeoffAreaCollectionPropertyType;
    pub type Dependency = CodeAirspaceDependencyType;
    pub type DependentAirport = AirportHeliportPropertyType;
    pub type Depth = ValDepthType;
    pub type DesignCriteria = CodeDesignStandardType;
    pub type DesignGradient = ValSlopeType;
    pub type DesignSurface = ObstacleAssessmentAreaPropertyType;
    pub type DesignatedPoint = DesignatedPointType;
    pub type DesignatedPointTimeSlice = DesignatedPointTimeSliceType;
    pub type DesignatedPointTimeSliceTypeExtension =
        DesignatedPointTimeSliceTypeExtensionElementType;
    pub type DesignatedPointTypeTimeSlice = DesignatedPointTimeSlicePropertyType;
    pub type Designator = TextDesignatorType;
    pub type DesignatorDirection = CodeCardinalDirectionType;
    pub type DesignatorIATA = CodeIATAType;
    pub type DesignatorICAO = CodeYesNoType;
    pub type DesignatorNumber = NoNumberType;
    pub type DesignatorPrefix = CodeRouteDesignatorPrefixType;
    pub type DesignatorSecondLetter = CodeRouteDesignatorLetterType;
    pub type DesignatorSuffix = CodeRouteDesignatorSuffixType;
    pub type Digital = CodeYesNoType;
    pub type DirectFlightClass = DirectFlightClassType;
    pub type DirectFlightClassTypeExtension = DirectFlightClassTypeExtensionElementType;
    pub type DirectFlightSegment = DirectFlightSegmentType;
    pub type DirectFlightSegmentTypeExtension = DirectFlightSegmentTypeExtensionElementType;
    pub type Direction = CodeDirectionType;
    pub type DirectionFinder = DirectionFinderType;
    pub type DirectionFinderTimeSlice = DirectionFinderTimeSliceType;
    pub type DirectionFinderTimeSliceTypeExtension =
        DirectionFinderTimeSliceTypeExtensionElementType;
    pub type DirectionFinderTypeTimeSlice = DirectionFinderTimeSlicePropertyType;
    pub type DiscreteLevelSeries = StandardLevelColumnPropertyType;
    pub type Displace = ValDistanceType;
    pub type Distance = ValDistanceType;
    pub type DistanceAccuracy = ValDistanceType;
    pub type DistanceIndication = DistanceIndicationType;
    pub type DistanceIndicationTimeSlice = DistanceIndicationTimeSliceType;
    pub type DistanceIndicationTimeSliceTypeExtension =
        DistanceIndicationTimeSliceTypeExtensionElementType;
    pub type DistanceIndicationTypeTimeSlice = DistanceIndicationTimeSlicePropertyType;
    pub type Dme = DmepropertyType;
    pub type DmetimeSliceTypeExtension = DmetimeSliceTypeExtensionElementType;
    pub type DmetypeTimeSlice = DmetimeSlicePropertyType;
    pub type DockSite = FloatingDockSitePropertyType;
    pub type DockingAvailability = CodeYesNoType;
    pub type Doppler = CodeYesNoType;
    pub type DualChannel = CodeYesNoType;
    pub type Duration = ValDurationType;
    pub type Element = LightElementPropertyType;
    pub type ElementAerialRefuellingElement = AerialRefuellingPropertyType;
    pub type ElementAirportHeliportElement = AirportHeliportPropertyType;
    pub type ElementAirspaceElement = AirspacePropertyType;
    pub type ElementDirectFlightElement = DirectFlightSegmentPropertyType;
    pub type ElementRoutePortionElement = RoutePortionPropertyType;
    pub type ElementStandardInstrumentArrivalElement = StandardInstrumentArrivalPropertyType;
    pub type ElementStandardInstrumentDepartureElement = StandardInstrumentDeparturePropertyType;
    pub type ElevatedCurve = ElevatedCurveType;
    pub type ElevatedCurveTypeExtension = ElevatedCurveTypeExtensionElementType;
    pub type ElevatedPoint = ElevatedPointType;
    pub type ElevatedPointTypeExtension = ElevatedPointTypeExtensionElementType;
    pub type ElevatedSurface = ElevatedSurfaceType;
    pub type ElevatedSurfaceTypeExtension = ElevatedSurfaceTypeExtensionElementType;
    pub type Elevation = ValDistanceVerticalType;
    pub type ElevationTDZ = ValDistanceVerticalType;
    pub type ElevationTDZAccuracy = ValDistanceType;
    pub type ElevationTimeSlice = ElevationTimeSliceType;
    pub type ElevationTimeSliceTypeExtension = ElevationTimeSliceTypeExtensionElementType;
    pub type ElevationTypeTimeSlice = ElevationTimeSlicePropertyType;
    #[derive(Debug, Clone)]
    pub struct ElevationTimeSlicePropertyType {
        pub owns: bool,
        pub content: ElevationTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ElevationTimeSlicePropertyTypeContent {
        ElevationTimeSlice(ElevationTimeSliceType),
    }
    impl ElevationTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type Email = TextAddressType;
    pub type EmergencyLighting = CodeYesNoType;
    pub type Emission = CodeRadioEmissionType;
    pub type EmissionBand = CodeEmissionBandType;
    pub type EmissionClass = CodeRadioEmissionType;
    pub type EmissionType = CodeRadioEmissionType;
    pub type EnRouteSegmentPoint = EnRouteSegmentPointType;
    pub type EnRouteSegmentPointTypeExtension = EnRouteSegmentPointTypeExtensionElementType;
    pub type End = EnRouteSegmentPointPropertyType;
    pub type EndAimingPoint = TouchDownLiftOffPropertyType;
    pub type EndAirportReferencePoint = AirportHeliportPropertyType;
    pub type EndConditionDesignator = CodeSegmentTerminationType;
    pub type EndDate = DateMonthDayType;
    pub type EndEvent = CodeTimeEventType;
    pub type EndEventInterpretation = CodeTimeEventCombinationType;
    pub type EndFixDesignatedPoint = DesignatedPointPropertyType;
    pub type EndNavaidSystem = NavaidPropertyType;
    pub type EndPoint = TerminalSegmentPointPropertyType;
    pub type EndPosition = PointPropertyType;
    pub type EndRunwayPoint = RunwayCentrelinePointPropertyType;
    pub type EndTime = TimeType;
    pub type EndTimeRelativeEvent = ValDurationType;
    pub type EndingMeasurementPoint = CodeProcedureDistanceType;
    pub type EngageDevice = CodeArrestingGearEngageDeviceType;
    pub type Engine = CodeAircraftEngineType;
    pub type EngineType = AircraftCharacteristicPropertyType;
    pub type EnteredAirspace = AirspacePropertyType;
    pub type EquipmentFrequency = RadioCommunicationChannelPropertyType;
    pub type EquipmentNavaidEquipment = NavaidEquipmentPropertyType;
    pub type EquipmentPrecisionApproachRadar = PrecisionApproachRadarPropertyType;
    pub type EquipmentRVR = CodeYesNoType;
    pub type EquipmentRadar = SecondarySurveillanceRadarPropertyType;
    pub type EquipmentSpecialNavigationStation = SpecialNavigationStationPropertyType;
    pub type EquipmentUnavailableAdjustment = EquipmentUnavailableAdjustmentType;
    pub type EquipmentUnavailableAdjustmentColumn = EquipmentUnavailableAdjustmentColumnType;
    pub type EquipmentUnavailableAdjustmentColumnTypeExtension =
        EquipmentUnavailableAdjustmentColumnTypeExtensionElementType;
    pub type EquipmentUnavailableAdjustmentTypeExtension =
        EquipmentUnavailableAdjustmentTypeExtensionElementType;
    pub type EvaluationArea = ObstacleAssessmentAreaPropertyType;
    pub type EvaluationMethodPCN = CodePCNMethodType;
    pub type ExceedLength = ValDistanceType;
    pub type Excluded = CodeYesNoType;
    pub type ExitedAirspace = AirspacePropertyType;
    pub type ExtendedServiceVolume = RadioFrequencyAreaPropertyType;
    pub type Extent = ElevatedSurfacePropertyType;
    pub type ExtentCurveExtent = ElevatedCurvePropertyType;
    pub type ExtentLocation = ElevatedPointPropertyType;
    pub type ExtentPointExtent = ElevatedPointPropertyType;
    pub type ExtentSurfaceExtent = ElevatedSurfacePropertyType;
    pub type FasdataBlock = FasdataBlockType;
    pub type FacilityAngle = AngleUsePropertyType;
    pub type FacilityDistance = DistanceIndicationPropertyType;
    pub type FacilityMakeup = PointReferencePropertyType;
    pub type Facsimile = TextPhoneType;
    pub type Fasdata = FasdataBlockPropertyType;
    pub type FasdataBlockTypeExtension = FasdataBlockTypeExtensionElementType;
    pub type FieldElevation = ValDistanceVerticalType;
    pub type FieldElevationAccuracy = ValDistanceVerticalType;
    pub type FinalApproachPath = CodeMinimaFinalApproachPathType;
    pub type FinalLeg = FinalLegType;
    pub type FinalLegTimeSlice = FinalLegTimeSliceType;
    pub type FinalLegTimeSliceTypeExtension = FinalLegTimeSliceTypeExtensionElementType;
    pub type FinalLegTypeTimeSlice = FinalLegTimeSlicePropertyType;
    pub type FinalPathAlignmentPointAimingPoint = TouchDownLiftOffPropertyType;
    pub type FinalPathAlignmentPointAirportReferencePoint = AirportHeliportPropertyType;
    pub type FinalPathAlignmentPointFixDesignatedPoint = DesignatedPointPropertyType;
    pub type FinalPathAlignmentPointNavaidSystem = NavaidPropertyType;
    pub type FinalPathAlignmentPointPosition = PointPropertyType;
    pub type FinalPathAlignmentPointRunwayPoint = RunwayCentrelinePointPropertyType;
    pub type FinalProfile = FinalProfileType;
    pub type FinalProfileTypeExtension = FinalProfileTypeExtensionElementType;
    pub type FireFightingService = FireFightingServiceType;
    pub type FireFightingServiceTimeSlice = FireFightingServiceTimeSliceType;
    pub type FireFightingServiceTimeSliceTypeExtension =
        FireFightingServiceTimeSliceTypeExtensionElementType;
    pub type FireFightingServiceTypeTimeSlice = FireFightingServiceTimeSlicePropertyType;
    pub type Fix = DesignatedPointPropertyType;
    pub type FixToleranceArea = SurfacePropertyType;
    pub type Flashing = CodeYesNoType;
    pub type Flight = FlightCharacteristicPropertyType;
    pub type FlightCharacteristic = FlightCharacteristicType;
    pub type FlightCharacteristicTypeExtension = FlightCharacteristicTypeExtensionElementType;
    pub type FlightChecked = CodeYesNoType;
    pub type FlightConditionAerialRefuellingCondition = AerialRefuellingPropertyType;
    pub type FlightConditionAircraft = AircraftCharacteristicPropertyType;
    pub type FlightConditionAirportHeliportCondition = AirportHeliportPropertyType;
    pub type FlightConditionAirspaceCondition = AirspacePropertyType;
    pub type FlightConditionBorderCrossingCondition = AirspaceBorderCrossingPropertyType;
    #[derive(Debug, Clone)]
    pub struct AirspaceBorderCrossingPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl AirspaceBorderCrossingPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type FlightConditionCircumstance = FlightConditionCircumstanceType;
    #[derive(Debug, Clone)]
    pub struct FlightConditionCircumstanceType {
        pub id: String,
        pub content: Vec<FlightConditionCircumstanceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FlightConditionCircumstanceTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content4081(FlightConditionCircumstanceContent4081Type),
        Extension(FlightConditionCircumstanceTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum FlightConditionCircumstanceContent4081Type {
        ReferenceLocation(CodeYesNoType),
        RelationWithLocation(CodeLocationQualifierType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct FlightConditionCircumstanceTypeExtensionElementType {
        pub owns: bool,
        pub content: FlightConditionCircumstanceTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FlightConditionCircumstanceTypeExtensionElementTypeContent {
        AbstractFlightConditionCircumstanceExtension(AbstractFlightConditionCircumstanceExtension),
    }
    impl FlightConditionCircumstanceTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct CodeLocationQualifierType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeLocationQualifierBaseType,
    }
    #[derive(Debug, Clone)]
    pub enum CodeLocationQualifierBaseType {
        Dep,
        Xng,
        Arr,
        Act,
        Avbl,
        String(String),
    }
    pub type FlightConditionCircumstanceTypeExtension =
        FlightConditionCircumstanceTypeExtensionElementType;
    pub type FlightConditionCombination = FlightConditionCombinationType;
    pub type FlightConditionCombinationTypeExtension =
        FlightConditionCombinationTypeExtensionElementType;
    pub type FlightConditionDirectFlightCondition = DirectFlightPropertyType;
    #[derive(Debug, Clone)]
    pub struct DirectFlightPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: DirectFlightPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum DirectFlightPropertyTypeContent {
        AbstractDirectFlight(AbstractDirectFlight),
    }
    pub type FlightConditionElement = FlightConditionElementType;
    #[derive(Debug, Clone)]
    pub struct FlightConditionElementType {
        pub id: String,
        pub content: Vec<FlightConditionElementTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FlightConditionElementTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content4153(FlightConditionElementContent4153Type),
        Extension(FlightConditionElementTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum FlightConditionElementContent4153Type {
        Index(NoSequenceType),
        Content4155(FlightConditionElementContent4155Type),
        OperationalCondition(FlightConditionCircumstancePropertyType),
        FlightLevel(FlightRestrictionLevelPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct FlightConditionElementTypeExtensionElementType {
        pub owns: bool,
        pub content: FlightConditionElementTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FlightConditionElementTypeExtensionElementTypeContent {
        AbstractFlightConditionElementExtension(AbstractFlightConditionElementExtension),
    }
    impl FlightConditionElementTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum FlightConditionElementContent4155Type {
        FlightConditionAirportHeliportCondition(AirportHeliportPropertyType),
        FlightConditionStandardInstrumentDepartureCondition(
            StandardInstrumentDeparturePropertyType,
        ),
        FlightConditionRoutePortionCondition(RoutePortionPropertyType),
        FlightConditionOrganisationCondition(OrganisationAuthorityPropertyType),
        Content4160(FlightConditionElementContent4160Type),
        FlightConditionDirectFlightCondition(DirectFlightPropertyType),
        FlightConditionAircraft(AircraftCharacteristicPropertyType),
        FlightConditionBorderCrossingCondition(AirspaceBorderCrossingPropertyType),
        FlightConditionAirspaceCondition(AirspacePropertyType),
        FlightConditionFlight(FlightCharacteristicPropertyType),
        FlightConditionStandardInstrumentArrivalCondition(StandardInstrumentArrivalPropertyType),
        FlightConditionOperand(FlightConditionCombinationPropertyType),
        FlightConditionWeather(MeteorologyPropertyType),
        FlightConditionAerialRefuellingCondition(AerialRefuellingPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct FlightConditionCircumstancePropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: FlightConditionCircumstancePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FlightConditionCircumstancePropertyTypeContent {
        FlightConditionCircumstance(FlightConditionCircumstanceType),
    }
    #[derive(Debug, Clone)]
    pub enum FlightConditionElementContent4160Type {
        SignificantPointConditionFixDesignatedPoint(DesignatedPointPropertyType),
        SignificantPointConditionNavaidSystem(NavaidPropertyType),
        SignificantPointConditionAimingPoint(TouchDownLiftOffPropertyType),
        SignificantPointConditionRunwayPoint(RunwayCentrelinePointPropertyType),
        SignificantPointConditionAirportReferencePoint(AirportHeliportPropertyType),
        SignificantPointConditionPosition(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct FlightConditionCombinationPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: FlightConditionCombinationPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum FlightConditionCombinationPropertyTypeContent {
        FlightConditionCombination(FlightConditionCombinationType),
    }
    pub type FlightConditionElementTypeExtension = FlightConditionElementTypeExtensionElementType;
    pub type FlightConditionFlight = FlightCharacteristicPropertyType;
    pub type FlightConditionOperand = FlightConditionCombinationPropertyType;
    pub type FlightConditionOrganisationCondition = OrganisationAuthorityPropertyType;
    pub type FlightConditionRoutePortionCondition = RoutePortionPropertyType;
    pub type FlightConditionStandardInstrumentArrivalCondition =
        StandardInstrumentArrivalPropertyType;
    pub type FlightConditionStandardInstrumentDepartureCondition =
        StandardInstrumentDeparturePropertyType;
    pub type FlightConditionWeather = MeteorologyPropertyType;
    pub type FlightConditions = CodeMeteoConditionsType;
    pub type FlightLevel = FlightRestrictionLevelPropertyType;
    pub type FlightOperations = CodeFlightDestinationType;
    pub type FlightRestriction = FlightRestrictionType;
    pub type FlightRestrictionLevel = FlightRestrictionLevelType;
    pub type FlightRestrictionLevelTypeExtension = FlightRestrictionLevelTypeExtensionElementType;
    pub type FlightRestrictionRoute = FlightRestrictionRouteType;
    pub type FlightRestrictionRouteTypeExtension = FlightRestrictionRouteTypeExtensionElementType;
    pub type FlightRestrictionTimeSlice = FlightRestrictionTimeSliceType;
    pub type FlightRestrictionTimeSliceTypeExtension =
        FlightRestrictionTimeSliceTypeExtensionElementType;
    pub type FlightRestrictionTypeTimeSlice = FlightRestrictionTimeSlicePropertyType;
    pub type FlightRoutingElement = FlightRoutingElementType;
    pub type FlightRoutingElementTypeExtension = FlightRoutingElementTypeExtensionElementType;
    pub type FlightRule = CodeFlightRuleType;
    pub type FlightTransition = ProcedureTransitionPropertyType;
    pub type FloatingDockSite = FloatingDockSiteType;
    pub type FloatingDockSiteTimeSlice = FloatingDockSiteTimeSliceType;
    pub type FloatingDockSiteTimeSliceTypeExtension =
        FloatingDockSiteTimeSliceTypeExtensionElementType;
    pub type FloatingDockSiteTypeTimeSlice = FloatingDockSiteTimeSlicePropertyType;
    pub type FlyByCode = CodeYesNoType;
    pub type FlyOver = CodeYesNoType;
    pub type Frangible = CodeYesNoType;
    pub type Frequency = ValFrequencyType;
    pub type FrequencyReception = ValFrequencyType;
    pub type FrequencyTransmission = ValFrequencyType;
    pub type FrictionCoefficient = ValFrictionType;
    pub type FrictionDevice = CodeFrictionDeviceType;
    pub type FrictionEstimation = CodeFrictionEstimateType;
    pub type FromAngle = ValBearingType;
    pub type FromTrack = ValBearingType;
    pub type Fuel = FuelType;
    pub type FuelSupply = FuelPropertyType;
    pub type FuelTypeExtension = FuelTypeExtensionElementType;
    pub type FurtherClearanceLength = ValDistanceType;
    pub type FurtherClearanceTime = TimeType;
    pub type FurtherClearanceWidth = ValDistanceType;
    pub type FurtherTotalClearance = CodeYesNoType;
    pub type GeneralTerrainMonitor = CodeYesNoType;
    pub type GeoBorder = GeoBorderType;
    pub type GeoBorderTimeSlice = GeoBorderTimeSliceType;
    pub type GeoBorderTimeSliceTypeExtension = GeoBorderTimeSliceTypeExtensionElementType;
    pub type GeoBorderTypeTimeSlice = GeoBorderTimeSlicePropertyType;
    pub type GeoidUndulation = ValDistanceSignedType;
    pub type GeometryComponent = AirspaceGeometryComponentPropertyType;
    pub type GhostFrequency = ValFrequencyType;
    pub type Glidepath = GlidepathType;
    pub type GlidepathTimeSlice = GlidepathTimeSliceType;
    pub type GlidepathTimeSliceTypeExtension = GlidepathTimeSliceTypeExtensionElementType;
    pub type GlidepathTypeTimeSlice = GlidepathTimeSlicePropertyType;
    pub type GradeSeparation = CodeGradeSeparationType;
    pub type GradientLowHigh = ValSlopeType;
    pub type GroundCommunication = ContactInformationPropertyType;
    pub type GroundLightingAvailability = GroundLightingAvailabilityType;
    pub type GroundLightingAvailabilityTypeExtension =
        GroundLightingAvailabilityTypeExtensionElementType;
    pub type GroundPowerAvailability = CodeYesNoType;
    pub type GroundStation = SurveillanceGroundStationPropertyType;
    pub type GroundTrafficControlService = GroundTrafficControlServiceType;
    pub type GroundTrafficControlServiceTimeSlice = GroundTrafficControlServiceTimeSliceType;
    pub type GroundTrafficControlServiceTimeSliceTypeExtension =
        GroundTrafficControlServiceTimeSliceTypeExtensionElementType;
    pub type GroundTrafficControlServiceTypeTimeSlice =
        GroundTrafficControlServiceTimeSlicePropertyType;
    pub type Group = CodeYesNoType;
    pub type GuidanceEquipment = CodeApproachType;
    pub type GuidanceFacilityNavaid = NavaidPropertyType;
    pub type GuidanceFacilityRadar = RadarSystemPropertyType;
    pub type GuidanceFacilitySpecialNavigationSystem = SpecialNavigationSystemPropertyType;
    pub type GuidanceLine = GuidanceLineType;
    pub type GuidanceLineLightSystem = GuidanceLineLightSystemType;
    pub type GuidanceLineLightSystemTimeSlice = GuidanceLineLightSystemTimeSliceType;
    pub type GuidanceLineLightSystemTimeSliceTypeExtension =
        GuidanceLineLightSystemTimeSliceTypeExtensionElementType;
    pub type GuidanceLineLightSystemTypeTimeSlice = GuidanceLineLightSystemTimeSlicePropertyType;
    pub type GuidanceLineMarking = GuidanceLineMarkingType;
    pub type GuidanceLineMarkingTimeSlice = GuidanceLineMarkingTimeSliceType;
    pub type GuidanceLineMarkingTimeSliceTypeExtension =
        GuidanceLineMarkingTimeSliceTypeExtensionElementType;
    pub type GuidanceLineMarkingTypeTimeSlice = GuidanceLineMarkingTimeSlicePropertyType;
    pub type GuidanceLineTimeSlice = GuidanceLineTimeSliceType;
    pub type GuidanceLineTimeSliceTypeExtension = GuidanceLineTimeSliceTypeExtensionElementType;
    pub type GuidanceLineTypeTimeSlice = GuidanceLineTimeSlicePropertyType;
    pub type GuidanceSystem = CodeFinalGuidanceType;
    pub type Height = ValDistanceVerticalType;
    pub type HeightCode = CodeMinimumHeightType;
    pub type HeightMAPT = ValDistanceVerticalType;
    pub type HeightReference = CodeHeightReferenceType;
    pub type HelicopterClass = CodeHelicopterPerformanceType;
    pub type HelicopterRoute = CodeYesNoType;
    pub type Holding = HoldingUsePropertyType;
    pub type HoldingAssessment = HoldingAssessmentType;
    pub type HoldingAssessmentTimeSlice = HoldingAssessmentTimeSliceType;
    pub type HoldingAssessmentTimeSliceTypeExtension =
        HoldingAssessmentTimeSliceTypeExtensionElementType;
    pub type HoldingAssessmentTypeTimeSlice = HoldingAssessmentTimeSlicePropertyType;
    pub type HoldingPattern = HoldingPatternType;
    pub type HoldingPatternDistance = HoldingPatternDistanceType;
    pub type HoldingPatternDistanceTypeExtension = HoldingPatternDistanceTypeExtensionElementType;
    pub type HoldingPatternDuration = HoldingPatternDurationType;
    pub type HoldingPatternDurationTypeExtension = HoldingPatternDurationTypeExtensionElementType;
    pub type HoldingPatternTimeSlice = HoldingPatternTimeSliceType;
    pub type HoldingPatternTimeSliceTypeExtension = HoldingPatternTimeSliceTypeExtensionElementType;
    pub type HoldingPatternTypeTimeSlice = HoldingPatternTimeSlicePropertyType;
    pub type HoldingPoint = SegmentPointPropertyType;
    pub type HoldingUse = HoldingUseType;
    pub type HoldingUseTypeExtension = HoldingUseTypeExtensionElementType;
    pub type HorizontalAccuracy = ValDistanceType;
    pub type HorizontalAlarmLimit = ValAlarmLimitType;
    pub type HorizontalProjection = SurfacePropertyType;
    pub type HorizontalProjectionLinearExtent = ElevatedCurvePropertyType;
    pub type HorizontalProjectionLocation = ElevatedPointPropertyType;
    pub type HorizontalProjectionSurfaceExtent = ElevatedSurfacePropertyType;
    pub type HostAirport = AirportHeliportPropertyType;
    pub type HostedNavaidEquipment = NavaidEquipmentPropertyType;
    pub type HostedOrganisation = OrganisationAuthorityPropertyType;
    pub type HostedPassengerService = PassengerServicePropertyType;
    pub type HostedSpecialNavStation = SpecialNavigationStationPropertyType;
    pub type HostedUnit = UnitPropertyType;
    pub type IafAimingPoint = TouchDownLiftOffPropertyType;
    pub type IafAirportReferencePoint = AirportHeliportPropertyType;
    pub type IafFixDesignatedPoint = DesignatedPointPropertyType;
    pub type IafNavaidSystem = NavaidPropertyType;
    pub type IafPosition = PointPropertyType;
    pub type IafRunwayPoint = RunwayCentrelinePointPropertyType;
    pub type IfAimingPoint = TouchDownLiftOffPropertyType;
    pub type IfAirportReferencePoint = AirportHeliportPropertyType;
    pub type IfFixDesignatedPoint = DesignatedPointPropertyType;
    pub type IfNavaidSystem = NavaidPropertyType;
    pub type IfPosition = PointPropertyType;
    pub type IfRunwayPoint = RunwayCentrelinePointPropertyType;
    pub type InboundCourse = ValBearingType;
    pub type Index = NoSequenceType;
    pub type IndicationDirection = CodeDirectionReferenceType;
    pub type IndicatorFACF = CodeYesNoType;
    pub type InformationProvision = InformationServicePropertyType;
    pub type InformationService = InformationServiceType;
    pub type InformationServiceTimeSlice = InformationServiceTimeSliceType;
    pub type InformationServiceTimeSliceTypeExtension =
        InformationServiceTimeSliceTypeExtensionElementType;
    pub type InformationServiceTypeTimeSlice = InformationServiceTimeSlicePropertyType;
    pub type InitialLeg = InitialLegType;
    pub type InitialLegTimeSlice = InitialLegTimeSliceType;
    pub type InitialLegTimeSliceTypeExtension = InitialLegTimeSliceTypeExtensionElementType;
    pub type InitialLegTypeTimeSlice = InitialLegTimeSlicePropertyType;
    pub type InnerDistance = ValDistanceType;
    pub type InstructedAltitude = ValDistanceVerticalType;
    pub type Instruction = TextInstructionType;
    pub type InstructionAltitudeReference = CodeVerticalReferenceType;
    pub type InstrumentApproachProcedure = InstrumentApproachProcedureType;
    pub type InstrumentApproachProcedureTimeSlice = InstrumentApproachProcedureTimeSliceType;
    pub type InstrumentApproachProcedureTimeSliceTypeExtension =
        InstrumentApproachProcedureTimeSliceTypeExtensionElementType;
    pub type InstrumentApproachProcedureTypeTimeSlice =
        InstrumentApproachProcedureTimeSlicePropertyType;
    pub type IntegrityLevel = CodeIntegrityLevelILSType;
    pub type Intensity = ValLightIntensityType;
    pub type IntensityLevel = CodeLightIntensityType;
    pub type IntensitySteps = NoNumberType;
    pub type IntermediateLeg = IntermediateLegType;
    pub type IntermediateLegTimeSlice = IntermediateLegTimeSliceType;
    pub type IntermediateLegTimeSliceTypeExtension =
        IntermediateLegTimeSliceTypeExtensionElementType;
    pub type IntermediateLegTypeTimeSlice = IntermediateLegTimeSlicePropertyType;
    pub type IntermediatePointAimingPoint = TouchDownLiftOffPropertyType;
    pub type IntermediatePointAirportReferencePoint = AirportHeliportPropertyType;
    pub type IntermediatePointFixDesignatedPoint = DesignatedPointPropertyType;
    pub type IntermediatePointNavaidSystem = NavaidPropertyType;
    pub type IntermediatePointPosition = PointPropertyType;
    pub type IntermediatePointRunwayPoint = RunwayCentrelinePointPropertyType;
    pub type InternationalUse = CodeRouteOriginType;
    pub type IsActive = CodeYesNoType;
    pub type IsPrimary = CodeYesNoType;
    pub type IsRemote = CodeYesNoType;
    pub type JetwayAvailability = CodeYesNoType;
    pub type Landing = LandingTakeoffAreaCollectionPropertyType;
    pub type LandingArea = LandingTakeoffAreaCollectionPropertyType;
    pub type LandingCategory = CodeHoldingCategoryType;
    pub type LandingDirectionIndicator = CodeYesNoType;
    pub type LandingSystemCategory = CodeApproachGuidanceType;
    pub type LandingSystemLights = CodeYesNoType;
    pub type LandingTakeoffAreaCollection = LandingTakeoffAreaCollectionType;
    pub type LandingTakeoffAreaCollectionTypeExtension =
        LandingTakeoffAreaCollectionTypeExtensionElementType;
    pub type Language = CodeLanguageType;
    pub type LateralBufferWidth = ValDistanceType;
    pub type Layer = SurfaceContaminationLayerPropertyType;
    pub type LayerOrder = NoSequenceType;
    pub type LeadDME = ValDistanceType;
    pub type LeadRadial = ValBearingType;
    pub type LegLength = ValDistanceType;
    pub type LegLengthAway = ValDistanceType;
    pub type LegLengthToward = ValDistanceType;
    pub type LegPath = CodeTrajectoryType;
    pub type LegSeparation = ValDistanceType;
    pub type LegTypeARINC = CodeSegmentPathType;
    pub type Length = ValDistanceType;
    pub type LengthAccuracy = ValDistanceType;
    pub type LengthOffset = ValDistanceSignedType;
    pub type LengthStrip = ValDistanceType;
    pub type Level = StandardLevelPropertyType;
    pub type LevelTable = StandardLevelTablePropertyType;
    pub type Levels = AirspaceLayerPropertyType;
    pub type LightActivation = LightActivationType;
    pub type LightActivationTypeExtension = LightActivationTypeExtensionElementType;
    pub type LightElement = LightElementType;
    pub type LightElementStatus = LightElementStatusType;
    pub type LightElementStatusTypeExtension = LightElementStatusTypeExtensionElementType;
    pub type LightElementTypeExtension = LightElementTypeExtensionElementType;
    pub type Lighted = CodeYesNoType;
    pub type LightedApron = ApronPropertyType;
    pub type LightedArea = RunwayProtectAreaPropertyType;
    pub type LightedGuidanceLine = GuidanceLinePropertyType;
    pub type LightedTaxiway = TaxiwayPropertyType;
    pub type LightedTouchDownLiftOff = TouchDownLiftOffPropertyType;
    pub type Lighting = CodeYesNoType;
    pub type LightingAvailability = VerticalStructureLightingStatusPropertyType;
    pub type LightingICAOStandard = CodeYesNoType;
    pub type LinguisticNote = LinguisticNoteType;
    pub type LinguisticNoteTypeExtension = LinguisticNoteTypeExtensionElementType;
    pub type Linkage = TextAddressType;
    pub type LocalRemoteCode = CodeYesNoType;
    pub type LocalType = TextNameType;
    pub type Localizer = LocalizerType;
    pub type LocalizerTimeSlice = LocalizerTimeSliceType;
    pub type LocalizerTimeSliceTypeExtension = LocalizerTimeSliceTypeExtensionElementType;
    pub type LocalizerTypeTimeSlice = LocalizerTimeSlicePropertyType;
    pub type Location = ElevatedPointPropertyType;
    pub type LocationAimingPoint = TouchDownLiftOffPropertyType;
    pub type LocationAirportReferencePoint = AirportHeliportPropertyType;
    pub type LocationDesignator = TextDesignatorType;
    pub type LocationFixDesignatedPoint = DesignatedPointPropertyType;
    pub type LocationIndicatorICAO = CodeICAOType;
    pub type LocationNavaidSystem = NavaidPropertyType;
    pub type LocationPosition = PointPropertyType;
    pub type LocationRunwayPoint = RunwayCentrelinePointPropertyType;
    pub type LogicalOperator = CodeLogicalOperatorType;
    pub type Logon = TextDesignatorType;
    pub type LowerLevel = ValDistanceVerticalType;
    pub type LowerLevelReference = CodeVerticalReferenceType;
    pub type LowerLimit = ValDistanceVerticalType;
    pub type LowerLimitAltitude = ValDistanceVerticalType;
    pub type LowerLimitReference = CodeVerticalReferenceType;
    pub type LowestTemperature = ValTemperatureType;
    pub type MagneticBearing = ValBearingType;
    pub type MagneticBearingAccuracy = ValAngleType;
    pub type MagneticTrack = ValBearingType;
    pub type MagneticVariation = ValMagneticVariationType;
    pub type MagneticVariationAccuracy = ValAngleType;
    pub type MagneticVariationChange = ValMagneticVariationChangeType;
    pub type ManagingOrganisation = AuthorityForAerialRefuellingPropertyType;
    pub type MandatoryRVR = CodeYesNoType;
    pub type ManoeuvringAreaAvailability = ManoeuvringAreaAvailabilityType;
    pub type ManoeuvringAreaAvailabilityTypeExtension =
        ManoeuvringAreaAvailabilityTypeExtensionElementType;
    pub type ManoeuvringAreaUsage = ManoeuvringAreaUsageType;
    pub type ManoeuvringAreaUsageTypeExtension = ManoeuvringAreaUsageTypeExtensionElementType;
    pub type MarkedApron = ApronPropertyType;
    pub type MarkedDeicingArea = DeicingAreaPropertyType;
    pub type MarkedElement = TaxiwayElementPropertyType;
    pub type MarkedGuidanceLine = GuidanceLinePropertyType;
    pub type MarkedProtectionArea = AirportHeliportProtectionAreaPropertyType;
    pub type MarkedRunway = RunwayPropertyType;
    pub type MarkedStand = AircraftStandPropertyType;
    pub type MarkedTaxiHold = TaxiHoldingPositionPropertyType;
    pub type MarkedTaxiway = TaxiwayPropertyType;
    pub type MarkedTouchDownLiftOff = TouchDownLiftOffPropertyType;
    pub type Marker = MarkerBeaconPropertyType;
    pub type MarkerBeacon = MarkerBeaconType;
    pub type MarkerBeaconTimeSlice = MarkerBeaconTimeSliceType;
    pub type MarkerBeaconTimeSliceTypeExtension = MarkerBeaconTimeSliceTypeExtensionElementType;
    pub type MarkerBeaconTypeTimeSlice = MarkerBeaconTimeSlicePropertyType;
    pub type MarkerPosition = CodePositionInILSType;
    #[derive(Debug, Clone)]
    pub struct CodePositionInILSType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodePositionInILSBaseType,
    }
    #[derive(Debug, Clone)]
    pub enum CodePositionInILSBaseType {
        Outer,
        Middle,
        Inner,
        Backcourse,
        String(String),
    }
    pub type MarkingBuoy = MarkingBuoyType;
    pub type MarkingBuoyTimeSlice = MarkingBuoyTimeSliceType;
    pub type MarkingBuoyTimeSliceTypeExtension = MarkingBuoyTimeSliceTypeExtensionElementType;
    pub type MarkingBuoyTypeTimeSlice = MarkingBuoyTimeSlicePropertyType;
    pub type MarkingElement = MarkingElementType;
    #[derive(Debug, Clone)]
    pub struct MarkingElementType {
        pub id: String,
        pub content: Vec<MarkingElementTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MarkingElementTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content685(MarkingElementContent685Type),
        Extension(MarkingElementTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum MarkingElementContent685Type {
        Colour(CodeColourType),
        Style(CodeMarkingStyleType),
        Content688(MarkingElementContent688Type),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MarkingElementTypeExtensionElementType {
        pub owns: bool,
        pub content: MarkingElementTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum MarkingElementTypeExtensionElementTypeContent {
        AbstractMarkingElementExtension(AbstractMarkingElementExtension),
    }
    impl MarkingElementTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct CodeMarkingStyleType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: CodeMarkingStyleBaseType,
    }
    #[derive(Debug, Clone)]
    pub enum MarkingElementContent688Type {
        ExtentSurfaceExtent(ElevatedSurfacePropertyType),
        ExtentCurveExtent(ElevatedCurvePropertyType),
        ExtentLocation(ElevatedPointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum CodeMarkingStyleBaseType {
        Solid,
        Dashed,
        Dotted,
        String(String),
    }
    pub type MarkingElementTypeExtension = MarkingElementTypeExtensionElementType;
    pub type MarkingFirstColour = CodeColourType;
    pub type MarkingICAOStandard = CodeYesNoType;
    pub type MarkingLocation = CodeTaxiwaySectionType;
    pub type MarkingPattern = CodeVerticalStructureMarkingType;
    pub type MarkingSecondColour = CodeColourType;
    pub type MaxSpeed = ValSpeedType;
    pub type MaxTyrePressurePCN = CodePCNTyrePressureType;
    pub type MaximumCrossingAtEnd = ValDistanceVerticalType;
    pub type MaximumCrossingAtEndReference = CodeVerticalReferenceType;
    pub type MaximumLimit = ValDistanceVerticalType;
    pub type MaximumLimitReference = CodeVerticalReferenceType;
    pub type MeasurementPoint = CodeProcedureDistanceType;
    pub type Meteorology = MeteorologyType;
    pub type MeteorologyTypeExtension = MeteorologyTypeExtensionElementType;
    pub type Military = CodeMilitaryStatusType;
    pub type MilitaryHeight = ValDistanceVerticalType;
    pub type MilitaryTrainingType = CodeMilitaryTrainingType;
    pub type MilitaryUse = CodeMilitaryStatusType;
    pub type MilitaryUseOnly = CodeYesNoType;
    pub type MilitaryVisibility = ValDistanceType;
    pub type Minima = MinimaType;
    pub type MinimaTypeExtension = MinimaTypeExtensionElementType;
    pub type MinimumAltitude = ValDistanceVerticalType;
    pub type MinimumBaroVnavTemperature = ValTemperatureType;
    pub type MinimumCeiling = ValDistanceVerticalType;
    pub type MinimumCrossingAtEnd = ValDistanceVerticalType;
    pub type MinimumCrossingAtEndReference = CodeVerticalReferenceType;
    pub type MinimumEnrouteAltitude = ValDistanceVerticalType;
    pub type MinimumEyeHeightOverThreshold = ValDistanceVerticalType;
    pub type MinimumLimit = ValDistanceVerticalType;
    pub type MinimumLimitReference = CodeVerticalReferenceType;
    pub type MinimumObstacleClearanceAltitude = ValDistanceVerticalType;
    pub type MinimumReceptionAltitude = ValDistanceVerticalType;
    pub type MinimumSet = MinimaPropertyType;
    pub type MinimumVisibility = ValDistanceType;
    pub type MissedApproachGroup = MissedApproachGroupType;
    pub type MissedApproachGroupTypeExtension = MissedApproachGroupTypeExtensionElementType;
    pub type MissedApproachLeg = MissedApproachLegType;
    pub type MissedApproachLegTimeSlice = MissedApproachLegTimeSliceType;
    pub type MissedApproachLegTimeSliceTypeExtension =
        MissedApproachLegTimeSliceTypeExtensionElementType;
    pub type MissedApproachLegTypeTimeSlice = MissedApproachLegTimeSlicePropertyType;
    pub type MissedInstruction = MissedApproachGroupPropertyType;
    pub type Mobile = CodeYesNoType;
    pub type Mode = CodeCommunicationModeType;
    pub type Model = TextNameType;
    pub type Monitored = CodeYesNoType;
    pub type Monitoring = NavaidEquipmentMonitoringPropertyType;
    pub type Monopulse = CodeYesNoType;
    pub type MovingTargetIndicator = CodeYesNoType;
    pub type MultipleIdentification = CodeUpperAlphaType;
    pub type MultipleIdentifier = CodeUpperAlphaType;
    pub type Ndb = Ndbtype;
    pub type NdbtimeSlice = NdbtimeSliceType;
    pub type Name = TextNameType;
    pub type Navaid = NavaidType;
    pub type NavaidBroadcast = VorpropertyType;
    pub type NavaidComponent = NavaidComponentType;
    #[derive(Debug, Clone)]
    pub struct NavaidComponentType {
        pub id: String,
        pub content: Vec<NavaidComponentTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NavaidComponentTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content2728(NavaidComponentContent2728Type),
        Extension(NavaidComponentTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum NavaidComponentContent2728Type {
        CollocationGroup(NoSequenceType),
        MarkerPosition(CodePositionInILSType),
        ProvidesNavigableLocation(CodeYesNoType),
        Annotation(NotePropertyType),
        TheNavaidEquipment(NavaidEquipmentPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct NavaidComponentTypeExtensionElementType {
        pub owns: bool,
        pub content: NavaidComponentTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NavaidComponentTypeExtensionElementTypeContent {
        AbstractNavaidComponentExtension(AbstractNavaidComponentExtension),
    }
    impl NavaidComponentTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type NavaidComponentTypeExtension = NavaidComponentTypeExtensionElementType;
    pub type NavaidEquipment = NavaidEquipmentDistancePropertyType;
    pub type NavaidEquipmentDistance = NavaidEquipmentDistanceType;
    pub type NavaidEquipmentDistanceTypeExtension = NavaidEquipmentDistanceTypeExtensionElementType;
    pub type NavaidEquipmentMonitoring = NavaidEquipmentMonitoringType;
    pub type NavaidEquipmentMonitoringTypeExtension =
        NavaidEquipmentMonitoringTypeExtensionElementType;
    pub type NavaidOperationalStatus = NavaidOperationalStatusType;
    pub type NavaidOperationalStatusTypeExtension = NavaidOperationalStatusTypeExtensionElementType;
    pub type NavaidTimeSlice = NavaidTimeSliceType;
    pub type NavaidTimeSliceTypeExtension = NavaidTimeSliceTypeExtensionElementType;
    pub type NavaidTypeTimeSlice = NavaidTimeSlicePropertyType;
    pub type NavigationArea = NavigationAreaType;
    pub type NavigationAreaRestriction = NavigationAreaRestrictionType;
    pub type NavigationAreaRestrictionTimeSlice = NavigationAreaRestrictionTimeSliceType;
    pub type NavigationAreaRestrictionTimeSliceTypeExtension =
        NavigationAreaRestrictionTimeSliceTypeExtensionElementType;
    pub type NavigationAreaRestrictionTypeTimeSlice =
        NavigationAreaRestrictionTimeSlicePropertyType;
    pub type NavigationAreaSector = NavigationAreaSectorType;
    #[derive(Debug, Clone)]
    pub struct NavigationAreaSectorType {
        pub id: String,
        pub content: Vec<NavigationAreaSectorTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NavigationAreaSectorTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3447(NavigationAreaSectorContent3447Type),
        Extension(NavigationAreaSectorTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum NavigationAreaSectorContent3447Type {
        SectorDefinition(CircleSectorPropertyType),
        SignificantObstacle(ObstructionPropertyType),
        Extent(ElevatedSurfacePropertyType),
        SectorCriteria(SectorDesignPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct NavigationAreaSectorTypeExtensionElementType {
        pub owns: bool,
        pub content: NavigationAreaSectorTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum NavigationAreaSectorTypeExtensionElementTypeContent {
        AbstractNavigationAreaSectorExtension(AbstractNavigationAreaSectorExtension),
    }
    impl NavigationAreaSectorTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct SectorDesignPropertyType {
        pub nil_reason: Option<gml::NilReasonEnumerationType>,
        pub content: SectorDesignPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SectorDesignPropertyTypeContent {
        SectorDesign(SectorDesignType),
    }
    #[derive(Debug, Clone)]
    pub struct SectorDesignType {
        pub id: String,
        pub content: Vec<SectorDesignTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SectorDesignTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3471(SectorDesignContent3471Type),
        Extension(SectorDesignTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum SectorDesignContent3471Type {
        TurnDirection(CodeDirectionTurnType),
        DesignGradient(ValSlopeType),
        TerminationAltitude(ValDistanceVerticalType),
        TurnPermitted(CodeYesNoType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct SectorDesignTypeExtensionElementType {
        pub owns: bool,
        pub content: SectorDesignTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SectorDesignTypeExtensionElementTypeContent {
        AbstractSectorDesignExtension(AbstractSectorDesignExtension),
    }
    impl SectorDesignTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type NavigationAreaSectorTypeExtension = NavigationAreaSectorTypeExtensionElementType;
    pub type NavigationAreaTimeSlice = NavigationAreaTimeSliceType;
    pub type NavigationAreaTimeSliceTypeExtension = NavigationAreaTimeSliceTypeExtensionElementType;
    pub type NavigationAreaType = CodeNavigationAreaType;
    pub type NavigationAreaTypeTimeSlice = NavigationAreaTimeSlicePropertyType;
    pub type NavigationEquipment = CodeNavigationEquipmentType;
    pub type NavigationSpecification = CodeNavigationSpecificationType;
    pub type NavigationType = CodeRouteNavigationType;
    pub type NdbtimeSliceTypeExtension = NdbtimeSliceTypeExtensionElementType;
    pub type NdbtypeTimeSlice = NdbtimeSlicePropertyType;
    pub type Network = CodeTelecomNetworkType;
    pub type NetworkNode = OnlineContactPropertyType;
    pub type NextObservationTime = DateTimeType;
    pub type Nitrogen = NitrogenType;
    pub type NitrogenSupply = NitrogenPropertyType;
    pub type NitrogenTypeExtension = NitrogenTypeExtensionElementType;
    pub type NominalLength = ValDistanceType;
    pub type NominalWidth = ValDistanceType;
    pub type NonMovementArea = NonMovementAreaType;
    pub type NonMovementAreaTimeSlice = NonMovementAreaTimeSliceType;
    pub type NonMovementAreaTimeSliceTypeExtension =
        NonMovementAreaTimeSliceTypeExtensionElementType;
    pub type NonMovementAreaTypeTimeSlice = NonMovementAreaTimeSlicePropertyType;
    pub type NonStandardHolding = CodeYesNoType;
    pub type Note = NoteType;
    pub type NoteTypeExtension = NoteTypeExtensionElementType;
    pub type NumberBox = NoNumberType;
    pub type NumberEngine = CodeAircraftEngineNumberType;
    pub type ObscuredLights = CodeYesNoType;
    pub type ObscuredLightsSide = CodeSideType;
    pub type ObservationTime = DateTimeType;
    pub type Obstacle = VerticalStructurePropertyType;
    pub type ObstacleArea = ObstacleAreaType;
    pub type ObstacleAreaTimeSlice = ObstacleAreaTimeSliceType;
    pub type ObstacleAreaTimeSliceTypeExtension = ObstacleAreaTimeSliceTypeExtensionElementType;
    pub type ObstacleAreaTypeTimeSlice = ObstacleAreaTimeSlicePropertyType;
    pub type ObstacleAssessment = ObstacleAssessmentAreaPropertyType;
    pub type ObstacleAssessmentArea = ObstacleAssessmentAreaType;
    pub type ObstacleAssessmentAreaTypeExtension = ObstacleAssessmentAreaTypeExtensionElementType;
    pub type ObstacleBearing = ValBearingType;
    pub type ObstacleDistance = ValDistanceType;
    pub type ObstacleFree = CodeYesNoType;
    pub type ObstaclePlacement = ObstaclePlacementPropertyType;
    pub type ObstaclePlacementTypeExtension = ObstaclePlacementTypeExtensionElementType;
    #[derive(Debug, Clone)]
    pub struct ObstaclePlacementTypeExtensionElementType {
        pub owns: bool,
        pub content: ObstaclePlacementTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ObstaclePlacementTypeExtensionElementTypeContent {
        AbstractObstaclePlacementExtension(AbstractObstaclePlacementExtension),
    }
    impl ObstaclePlacementTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type Obstruction = ObstructionType;
    pub type ObstructionIdSurfaceCondition = CodeObstacleAssessmentSurfaceType;
    pub type ObstructionTypeExtension = ObstructionTypeExtensionElementType;
    pub type Office = OrganisationAuthorityPropertyType;
    pub type Oil = OilType;
    pub type OilSupply = OilPropertyType;
    pub type OilTypeExtension = OilTypeExtensionElementType;
    pub type OnRunway = RunwayDirectionPropertyType;
    pub type OnlineContact = OnlineContactType;
    pub type OnlineContactTypeExtension = OnlineContactTypeExtensionElementType;
    pub type Operation = CodeOperationManoeuvringAreaType;
    pub type OperationSequence = NoSequenceType;
    pub type OperationType = NoSequenceType;
    pub type OperationalCondition = FlightConditionCircumstancePropertyType;
    pub type OperationalStatus = CodeStatusAirportType;
    pub type OppositeTrack = AerialRefuellingPropertyType;
    pub type OrderNumber = NoSequenceType;
    pub type OrganisationAuthority = OrganisationAuthorityType;
    pub type OrganisationAuthorityAssociation = OrganisationAuthorityAssociationType;
    pub type OrganisationAuthorityAssociationTypeExtension =
        OrganisationAuthorityAssociationTypeExtensionElementType;
    pub type OrganisationAuthorityTimeSlice = OrganisationAuthorityTimeSliceType;
    pub type OrganisationAuthorityTimeSliceTypeExtension =
        OrganisationAuthorityTimeSliceTypeExtensionElementType;
    pub type OrganisationAuthorityTypeTimeSlice = OrganisationAuthorityTimeSlicePropertyType;
    pub type Origin = CodeFlightOriginType;
    pub type OutboundCourse = ValBearingType;
    pub type OutboundCourseType = CodeCourseType;
    pub type OutboundLegSpanEndDistance = HoldingPatternDistancePropertyType;
    pub type OutboundLegSpanEndPoint = SegmentPointPropertyType;
    pub type OutboundLegSpanEndTime = HoldingPatternDurationPropertyType;
    pub type OuterBufferWidth = ValDistanceType;
    pub type OuterDistance = ValDistanceType;
    pub type OverallContaminant = RunwayContaminationPropertyType;
    pub type OwnerOrganisation = OrganisationAuthorityPropertyType;
    pub type Oxygen = OxygenType;
    pub type OxygenSupply = OxygenPropertyType;
    pub type OxygenTypeExtension = OxygenTypeExtensionElementType;
    pub type Parrunway = RunwayPropertyType;
    pub type Part = VerticalStructurePartPropertyType;
    pub type PassengerLoadingBridge = PassengerLoadingBridgeType;
    pub type PassengerLoadingBridgeTimeSlice = PassengerLoadingBridgeTimeSliceType;
    pub type PassengerLoadingBridgeTimeSliceTypeExtension =
        PassengerLoadingBridgeTimeSliceTypeExtensionElementType;
    pub type PassengerLoadingBridgeTypeTimeSlice = PassengerLoadingBridgeTimeSlicePropertyType;
    pub type PassengerService = PassengerServiceType;
    pub type PassengerServiceTimeSlice = PassengerServiceTimeSliceType;
    pub type PassengerServiceTimeSliceTypeExtension =
        PassengerServiceTimeSliceTypeExtensionElementType;
    pub type PassengerServiceTypeTimeSlice = PassengerServiceTimeSlicePropertyType;
    pub type Passengers = NoNumberType;
    pub type PassengersInterpretation = CodeValueInterpretationType;
    pub type PathType = CodeRouteSegmentPathType;
    pub type PatternTemplate = TextNameType;
    pub type PatternVFR = CodeDirectionTurnType;
    pub type PavementSubgradePCN = CodePCNSubgradeType;
    pub type PavementTypePCN = CodePCNPavementType;
    pub type PhoneFax = TelephoneContactPropertyType;
    pub type PilotControlledLighting = PilotControlledLightingType;
    pub type PilotControlledLightingTimeSlice = PilotControlledLightingTimeSliceType;
    pub type PilotControlledLightingTimeSliceTypeExtension =
        PilotControlledLightingTimeSliceTypeExtensionElementType;
    pub type PilotControlledLightingTypeTimeSlice = PilotControlledLightingTimeSlicePropertyType;
    pub type PlannedOperational = DateType;
    pub type PointChoiceAimingPoint = TouchDownLiftOffPropertyType;
    pub type PointChoiceAirportReferencePoint = AirportHeliportPropertyType;
    pub type PointChoiceFixDesignatedPoint = DesignatedPointPropertyType;
    pub type PointChoiceNavaidSystem = NavaidPropertyType;
    pub type PointChoicePosition = PointPropertyType;
    pub type PointChoiceRunwayPoint = RunwayCentrelinePointPropertyType;
    pub type PointElementAimingPoint = TouchDownLiftOffPropertyType;
    pub type PointElementAirportReferencePoint = AirportHeliportPropertyType;
    pub type PointElementFixDesignatedPoint = DesignatedPointPropertyType;
    pub type PointElementNavaidSystem = NavaidPropertyType;
    pub type PointElementPosition = PointPropertyType;
    pub type PointElementRunwayPoint = RunwayCentrelinePointPropertyType;
    pub type PointReference = PointReferenceType;
    pub type PointReferenceTypeExtension = PointReferenceTypeExtensionElementType;
    pub type PointType = TextNameType;
    pub type Portable = CodeYesNoType;
    pub type Position = CodeSideType;
    pub type PostFixTolerance = ValDistanceSignedType;
    pub type PostalAddress = PostalAddressType;
    pub type PostalAddressTypeExtension = PostalAddressTypeExtensionElementType;
    pub type PostalCode = TextNameType;
    pub type PrecisionApproachGuidance = CodeApproachGuidanceType;
    pub type PrecisionApproachRadar = PrecisionApproachRadarType;
    pub type PrecisionApproachRadarTimeSlice = PrecisionApproachRadarTimeSliceType;
    pub type PrecisionApproachRadarTimeSliceTypeExtension =
        PrecisionApproachRadarTimeSliceTypeExtensionElementType;
    pub type PrecisionApproachRadarType = CodePARType;
    pub type PrecisionApproachRadarTypeTimeSlice = PrecisionApproachRadarTimeSlicePropertyType;
    pub type Preparation = CodeSurfacePreparationType;
    pub type PrimaryAlternateMinimum = CodeYesNoType;
    pub type PrimarySurveillanceRadar = PrimarySurveillanceRadarType;
    pub type PrimarySurveillanceRadarTimeSlice = PrimarySurveillanceRadarTimeSliceType;
    pub type PrimarySurveillanceRadarTimeSliceTypeExtension =
        PrimarySurveillanceRadarTimeSliceTypeExtensionElementType;
    pub type PrimarySurveillanceRadarTypeTimeSlice = PrimarySurveillanceRadarTimeSlicePropertyType;
    pub type PriorFixTolerance = ValDistanceSignedType;
    pub type PriorPermission = ValDurationType;
    pub type PrivateUse = CodeYesNoType;
    pub type Procedure = ProcedurePropertyType;
    pub type ProcedureAvailability = ProcedureAvailabilityType;
    pub type ProcedureAvailabilityTypeExtension = ProcedureAvailabilityTypeExtensionElementType;
    pub type ProcedureDME = ProcedureDMEType;
    pub type ProcedureDMETimeSlice = ProcedureDMETimeSliceType;
    pub type ProcedureDMETimeSliceTypeExtension = ProcedureDMETimeSliceTypeExtensionElementType;
    pub type ProcedureDMETypeTimeSlice = ProcedureDMETimeSlicePropertyType;
    pub type ProcedureTransition = ProcedureTransitionType;
    pub type ProcedureTransitionLeg = ProcedureTransitionLegType;
    pub type ProcedureTransitionLegTypeExtension = ProcedureTransitionLegTypeExtensionElementType;
    pub type ProcedureTransitionTypeExtension = ProcedureTransitionTypeExtensionElementType;
    pub type ProcedureTurnRequired = CodeYesNoType;
    pub type PropertyName = TextPropertyNameType;
    pub type Proportion = ValPercentType;
    pub type ProtectedRoute = RoutePropertyType;
    pub type ProtectedRunway = RunwayPropertyType;
    pub type ProtectedRunwayDirection = RunwayDirectionPropertyType;
    pub type ProtectedTouchDownLiftOff = TouchDownLiftOffPropertyType;
    pub type ProtectingAirspace = AirspacePropertyType;
    pub type Protocol = TextNameType;
    pub type ProvidesNavigableLocation = CodeYesNoType;
    pub type Purpose = CodeFlightPurposeType;
    pub type RadarAssisted = CodeYesNoType;
    pub type RadarBeaconSetting = NoNumberType;
    pub type RadarComponent = RadarComponentType;
    pub type RadarComponentTypeExtension = RadarComponentTypeExtensionElementType;
    pub type RadarEquipment = RadarComponentPropertyType;
    pub type RadarGuidance = CodeYesNoType;
    pub type RadarSystem = RadarSystemType;
    pub type RadarSystemTimeSlice = RadarSystemTimeSliceType;
    pub type RadarSystemTimeSliceTypeExtension = RadarSystemTimeSliceTypeExtensionElementType;
    pub type RadarSystemTypeTimeSlice = RadarSystemTimeSlicePropertyType;
    pub type RadioCommunication = RadioCommunicationChannelPropertyType;
    pub type RadioCommunicationChannel = RadioCommunicationChannelType;
    pub type RadioCommunicationChannelTimeSlice = RadioCommunicationChannelTimeSliceType;
    pub type RadioCommunicationChannelTimeSliceTypeExtension =
        RadioCommunicationChannelTimeSliceTypeExtensionElementType;
    pub type RadioCommunicationChannelTypeTimeSlice =
        RadioCommunicationChannelTimeSlicePropertyType;
    pub type RadioCommunicationOperationalStatus = RadioCommunicationOperationalStatusType;
    pub type RadioCommunicationOperationalStatusTypeExtension =
        RadioCommunicationOperationalStatusTypeExtensionElementType;
    pub type RadioFrequency = ValFrequencyType;
    pub type RadioFrequencyArea = RadioFrequencyAreaType;
    pub type RadioFrequencyAreaTimeSlice = RadioFrequencyAreaTimeSliceType;
    pub type RadioFrequencyAreaTimeSliceTypeExtension =
        RadioFrequencyAreaTimeSliceTypeExtensionElementType;
    pub type RadioFrequencyAreaTypeTimeSlice = RadioFrequencyAreaTimeSlicePropertyType;
    pub type RadioHeight = ValDistanceVerticalType;
    pub type Radius = ValDistanceType;
    pub type RampSite = SeaplaneRampSitePropertyType;
    pub type Range = ValDistanceType;
    pub type RangeAccuracy = ValDistanceType;
    pub type Rank = CodeFacilityRankingType;
    pub type Rdh = ValDistanceVerticalType;
    pub type RdhAccuracy = ValDistanceVerticalType;
    pub type ReadingPosition = CodeRVRReadingType;
    pub type ReceiverChannel = CodeTACANChannelType;
    pub type Recorded = CodeYesNoType;
    pub type ReferenceLocation = CodeYesNoType;
    pub type ReferenceOwnerAirport = AirportHeliportPropertyType;
    pub type ReferenceOwnerOrganisation = OrganisationAuthorityPropertyType;
    pub type ReferenceOwnerRunway = RunwayDirectionPropertyType;
    pub type ReferencePathDataSelector = NoSequenceType;
    pub type ReferencePathIdentifier = String;
    pub type ReferenceTemperature = ValTemperatureType;
    pub type ReferencedDME = DmepropertyType;
    pub type ReferencedRoute = RoutePropertyType;
    pub type Reflector = ReflectorPropertyType;
    pub type ReflectorTypeExtension = ReflectorTypeExtensionElementType;
    #[derive(Debug, Clone)]
    pub struct ReflectorTypeExtensionElementType {
        pub owns: bool,
        pub content: ReflectorTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ReflectorTypeExtensionElementTypeContent {
        AbstractReflectorExtension(AbstractReflectorExtension),
    }
    impl ReflectorTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type RefuellingBaseLevel = ValDistanceVerticalType;
    pub type RefuellingBaseLevelReference = CodeVerticalReferenceType;
    pub type RegulatedRoute = FlightRestrictionRoutePropertyType;
    pub type RelatedOrganisationAuthority = OrganisationAuthorityAssociationPropertyType;
    pub type RelatedUnit = UnitDependencyPropertyType;
    pub type RelationWithLocation = CodeLocationQualifierType;
    pub type RelativeLocation = CodeAirspacePointPositionType;
    pub type RemoteAltimeterMinima = CodeYesNoType;
    pub type ReportingATC = CodeATCReportingType;
    pub type RequiredClearance = ValDistanceType;
    pub type RequiredNavigationPerformance = CodeRNPType;
    pub type ResponsibleOrganisation = AirportHeliportResponsibilityOrganisationPropertyType;
    pub type RestrictionArea = SurfacePropertyType;
    pub type ReverseDirectionTurn = CodeDirectionTurnType;
    pub type ReverseMagneticTrack = ValBearingType;
    pub type ReverseTrueTrack = ValBearingType;
    pub type Ridge = RidgeType;
    pub type RidgeTypeExtension = RidgeTypeExtensionElementType;
    pub type Rnav = CodeYesNoType;
    pub type RnpDMEAuthorized = CodeYesNoType;
    pub type Road = RoadType;
    pub type RoadTimeSlice = RoadTimeSliceType;
    pub type RoadTimeSliceTypeExtension = RoadTimeSliceTypeExtensionElementType;
    pub type RoadTypeTimeSlice = RoadTimeSlicePropertyType;
    pub type Role = CodeRunwayPointRoleType;
    pub type RoleFreeFlight = CodeFreeFlightType;
    pub type RoleMilitaryTraining = CodeMilitaryRoutePointType;
    pub type RoleRVSM = CodeRVSMPointRoleType;
    pub type Route = RouteType;
    pub type RouteAvailability = RouteAvailabilityType;
    pub type RouteAvailabilityTypeExtension = RouteAvailabilityTypeExtensionElementType;
    pub type RouteDME = RouteDMEType;
    pub type RouteDMETimeSlice = RouteDMETimeSliceType;
    pub type RouteDMETimeSliceTypeExtension = RouteDMETimeSliceTypeExtensionElementType;
    pub type RouteDMETypeTimeSlice = RouteDMETimeSlicePropertyType;
    pub type RouteElement = FlightRoutingElementPropertyType;
    pub type RouteFormed = RoutePropertyType;
    pub type RouteIndicator = String;
    pub type RoutePortion = RoutePortionType;
    pub type RoutePortionTypeExtension = RoutePortionTypeExtensionElementType;
    pub type RouteSegment = RouteSegmentType;
    pub type RouteSegmentTimeSlice = RouteSegmentTimeSliceType;
    pub type RouteSegmentTimeSliceTypeExtension = RouteSegmentTimeSliceTypeExtensionElementType;
    pub type RouteSegmentTypeTimeSlice = RouteSegmentTimeSlicePropertyType;
    pub type RouteTimeSlice = RouteTimeSliceType;
    pub type RouteTimeSliceTypeExtension = RouteTimeSliceTypeExtensionElementType;
    pub type RouteTypeTimeSlice = RouteTimeSlicePropertyType;
    pub type Rule = CodeFlightRuleType;
    pub type RulesProcedures = RulesProceduresType;
    pub type RulesProceduresTimeSlice = RulesProceduresTimeSliceType;
    pub type RulesProceduresTimeSliceTypeExtension =
        RulesProceduresTimeSliceTypeExtensionElementType;
    pub type RulesProceduresTypeTimeSlice = RulesProceduresTimeSlicePropertyType;
    pub type Runway = RunwayType;
    pub type RunwayBlastPad = RunwayBlastPadType;
    pub type RunwayBlastPadTimeSlice = RunwayBlastPadTimeSliceType;
    pub type RunwayBlastPadTimeSliceTypeExtension = RunwayBlastPadTimeSliceTypeExtensionElementType;
    pub type RunwayBlastPadTypeTimeSlice = RunwayBlastPadTimeSlicePropertyType;
    pub type RunwayCentrelinePoint = RunwayCentrelinePointType;
    pub type RunwayCentrelinePointTimeSlice = RunwayCentrelinePointTimeSliceType;
    pub type RunwayCentrelinePointTimeSliceTypeExtension =
        RunwayCentrelinePointTimeSliceTypeExtensionElementType;
    pub type RunwayCentrelinePointTypeTimeSlice = RunwayCentrelinePointTimeSlicePropertyType;
    pub type RunwayContamination = RunwayContaminationType;
    pub type RunwayContaminationTypeExtension = RunwayContaminationTypeExtensionElementType;
    pub type RunwayDeclaredDistance = RunwayDeclaredDistanceType;
    pub type RunwayDeclaredDistanceTypeExtension = RunwayDeclaredDistanceTypeExtensionElementType;
    pub type RunwayDeclaredDistanceValue = RunwayDeclaredDistanceValueType;
    pub type RunwayDeclaredDistanceValueTypeExtension =
        RunwayDeclaredDistanceValueTypeExtensionElementType;
    pub type RunwayDirection = RunwayDirectionType;
    pub type RunwayDirectionLightSystem = RunwayDirectionLightSystemType;
    pub type RunwayDirectionLightSystemTimeSlice = RunwayDirectionLightSystemTimeSliceType;
    pub type RunwayDirectionLightSystemTimeSliceTypeExtension =
        RunwayDirectionLightSystemTimeSliceTypeExtensionElementType;
    pub type RunwayDirectionLightSystemTypeTimeSlice =
        RunwayDirectionLightSystemTimeSlicePropertyType;
    pub type RunwayDirectionTimeSlice = RunwayDirectionTimeSliceType;
    pub type RunwayDirectionTimeSliceTypeExtension =
        RunwayDirectionTimeSliceTypeExtensionElementType;
    pub type RunwayDirectionTypeTimeSlice = RunwayDirectionTimeSlicePropertyType;
    pub type RunwayElement = RunwayElementType;
    pub type RunwayElementTimeSlice = RunwayElementTimeSliceType;
    pub type RunwayElementTimeSliceTypeExtension = RunwayElementTimeSliceTypeExtensionElementType;
    pub type RunwayElementTypeTimeSlice = RunwayElementTimeSlicePropertyType;
    pub type RunwayMarking = RunwayMarkingType;
    pub type RunwayMarkingTimeSlice = RunwayMarkingTimeSliceType;
    pub type RunwayMarkingTimeSliceTypeExtension = RunwayMarkingTimeSliceTypeExtensionElementType;
    pub type RunwayMarkingTypeTimeSlice = RunwayMarkingTimeSlicePropertyType;
    pub type RunwayPoint = RunwayCentrelinePointPropertyType;
    pub type RunwayProtectArea = RunwayProtectAreaType;
    pub type RunwayProtectAreaLightSystem = RunwayProtectAreaLightSystemType;
    pub type RunwayProtectAreaLightSystemTimeSlice = RunwayProtectAreaLightSystemTimeSliceType;
    pub type RunwayProtectAreaLightSystemTimeSliceTypeExtension =
        RunwayProtectAreaLightSystemTimeSliceTypeExtensionElementType;
    pub type RunwayProtectAreaLightSystemTypeTimeSlice =
        RunwayProtectAreaLightSystemTimeSlicePropertyType;
    pub type RunwayProtectAreaTimeSlice = RunwayProtectAreaTimeSliceType;
    pub type RunwayProtectAreaTimeSliceTypeExtension =
        RunwayProtectAreaTimeSliceTypeExtensionElementType;
    pub type RunwayProtectAreaTypeTimeSlice = RunwayProtectAreaTimeSlicePropertyType;
    pub type RunwaySectionContamination = RunwaySectionContaminationType;
    pub type RunwaySectionContaminationTypeExtension =
        RunwaySectionContaminationTypeExtensionElementType;
    pub type RunwayTimeSlice = RunwayTimeSliceType;
    pub type RunwayTimeSliceTypeExtension = RunwayTimeSliceTypeExtensionElementType;
    pub type RunwayTypeTimeSlice = RunwayTimeSlicePropertyType;
    pub type RunwayVisualRange = RunwayVisualRangeType;
    pub type RunwayVisualRangeInterpretation = CodeValueInterpretationType;
    pub type RunwayVisualRangeTimeSlice = RunwayVisualRangeTimeSliceType;
    pub type RunwayVisualRangeTimeSliceTypeExtension =
        RunwayVisualRangeTimeSliceTypeExtensionElementType;
    pub type RunwayVisualRangeTypeTimeSlice = RunwayVisualRangeTimeSlicePropertyType;
    pub type Sdf = Sdftype;
    pub type SdftimeSlice = SdftimeSliceType;
    pub type SafeAltitude = SafeAltitudeAreaPropertyType;
    pub type SafeAltitudeArea = SafeAltitudeAreaType;
    pub type SafeAltitudeAreaSector = SafeAltitudeAreaSectorType;
    #[derive(Debug, Clone)]
    pub struct SafeAltitudeAreaSectorType {
        pub id: String,
        pub content: Vec<SafeAltitudeAreaSectorTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SafeAltitudeAreaSectorTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3953(SafeAltitudeAreaSectorContent3953Type),
        Extension(SafeAltitudeAreaSectorTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum SafeAltitudeAreaSectorContent3953Type {
        BufferWidth(ValDistanceType),
        Extent(ElevatedSurfacePropertyType),
        SignificantObstacle(ObstructionPropertyType),
        SectorDefinition(CircleSectorPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct SafeAltitudeAreaSectorTypeExtensionElementType {
        pub owns: bool,
        pub content: SafeAltitudeAreaSectorTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SafeAltitudeAreaSectorTypeExtensionElementTypeContent {
        AbstractSafeAltitudeAreaSectorExtension(AbstractSafeAltitudeAreaSectorExtension),
    }
    impl SafeAltitudeAreaSectorTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type SafeAltitudeAreaSectorTypeExtension = SafeAltitudeAreaSectorTypeExtensionElementType;
    pub type SafeAltitudeAreaTimeSlice = SafeAltitudeAreaTimeSliceType;
    pub type SafeAltitudeAreaTimeSliceTypeExtension =
        SafeAltitudeAreaTimeSliceTypeExtensionElementType;
    pub type SafeAltitudeAreaTypeTimeSlice = SafeAltitudeAreaTimeSlicePropertyType;
    pub type SafeAreaType = CodeSafeAltitudeType;
    pub type SafetyRegulation = TextNameType;
    pub type Satisfactory = CodeYesNoType;
    pub type SdftimeSliceTypeExtension = SdftimeSliceTypeExtensionElementType;
    pub type SdftypeTimeSlice = SdftimeSlicePropertyType;
    pub type SeaplaneLandingArea = SeaplaneLandingAreaType;
    pub type SeaplaneLandingAreaTimeSlice = SeaplaneLandingAreaTimeSliceType;
    pub type SeaplaneLandingAreaTimeSliceTypeExtension =
        SeaplaneLandingAreaTimeSliceTypeExtensionElementType;
    pub type SeaplaneLandingAreaTypeTimeSlice = SeaplaneLandingAreaTimeSlicePropertyType;
    pub type SeaplaneRampSite = SeaplaneRampSiteType;
    pub type SeaplaneRampSiteTimeSlice = SeaplaneRampSiteTimeSliceType;
    pub type SeaplaneRampSiteTimeSliceTypeExtension =
        SeaplaneRampSiteTimeSliceTypeExtensionElementType;
    pub type SeaplaneRampSiteTypeTimeSlice = SeaplaneRampSiteTimeSlicePropertyType;
    pub type SearchRescueService = SearchRescueServiceType;
    pub type SearchRescueServiceTimeSlice = SearchRescueServiceTimeSliceType;
    pub type SearchRescueServiceTimeSliceTypeExtension =
        SearchRescueServiceTimeSliceTypeExtensionElementType;
    pub type SearchRescueServiceTypeTimeSlice = SearchRescueServiceTimeSlicePropertyType;
    pub type SecondaryPowerSupply = CodeYesNoType;
    pub type SecondarySurveillanceRadar = SecondarySurveillanceRadarType;
    pub type SecondarySurveillanceRadarTimeSlice = SecondarySurveillanceRadarTimeSliceType;
    pub type SecondarySurveillanceRadarTimeSliceTypeExtension =
        SecondarySurveillanceRadarTimeSliceTypeExtensionElementType;
    pub type SecondarySurveillanceRadarTypeTimeSlice =
        SecondarySurveillanceRadarTimeSlicePropertyType;
    pub type Section = CodeRunwaySectionType;
    pub type SectionNumber = NoNumberType;
    pub type Sector = CircleSectorPropertyType;
    pub type SectorCriteria = SectorDesignPropertyType;
    pub type SectorDefinition = CircleSectorPropertyType;
    pub type SectorDescription = CircleSectorPropertyType;
    pub type SectorDesign = SectorDesignType;
    pub type SectorDesignTypeExtension = SectorDesignTypeExtensionElementType;
    pub type SegmentLeg = SegmentLegPropertyType;
    pub type Selection = ConditionCombinationPropertyType;
    pub type SelectiveCall = CodeYesNoType;
    pub type Separation = CodeRVSMType;
    pub type SeqNumberARINC = NoSequenceType;
    pub type Sequence = NoSequenceType;
    pub type SequencedFlashing = CodeYesNoType;
    pub type SerialNumber = TextDesignatorType;
    pub type Series = CodeLevelSeriesType;
    pub type ServedAirport = AirportHeliportPropertyType;
    pub type ServedCity = CityPropertyType;
    pub type ServedRunwayDirection = RunwayDirectionPropertyType;
    pub type ServiceOperationalStatus = ServiceOperationalStatusType;
    pub type ServiceOperationalStatusTypeExtension =
        ServiceOperationalStatusTypeExtensionElementType;
    pub type ServiceProvider = UnitPropertyType;
    pub type ServiceProviderSBAS = NoSequenceType;
    pub type Side = CodeSideType;
    pub type SignalGap = CodeYesNoType;
    pub type SignalPerformance = CodeSignalPerformanceILSType;
    pub type SignalType = CodeRadioSignalType;
    pub type SignificantObstacle = ObstructionPropertyType;
    pub type SignificantPointConditionAimingPoint = TouchDownLiftOffPropertyType;
    pub type SignificantPointConditionAirportReferencePoint = AirportHeliportPropertyType;
    pub type SignificantPointConditionFixDesignatedPoint = DesignatedPointPropertyType;
    pub type SignificantPointConditionNavaidSystem = NavaidPropertyType;
    pub type SignificantPointConditionPosition = PointPropertyType;
    pub type SignificantPointConditionRunwayPoint = RunwayCentrelinePointPropertyType;
    pub type SignificantPointInAirspace = SignificantPointInAirspaceType;
    pub type SignificantPointInAirspaceTimeSlice = SignificantPointInAirspaceTimeSliceType;
    pub type SignificantPointInAirspaceTimeSliceTypeExtension =
        SignificantPointInAirspaceTimeSliceTypeExtensionElementType;
    pub type SignificantPointInAirspaceTypeTimeSlice =
        SignificantPointInAirspaceTimeSlicePropertyType;
    pub type Slope = ValSlopeType;
    pub type SlopeAccuracy = ValAngleType;
    pub type SlopeAngle = ValAngleType;
    pub type SlopeLowerAltitude = ValDistanceVerticalType;
    pub type SlopePenetration = ValAngleType;
    pub type SlopeTDZ = ValSlopeType;
    pub type SnowPlan = TextInstructionType;
    pub type SpecialAircraftOnly = CodeYesNoType;
    pub type SpecialDate = SpecialDateType;
    pub type SpecialDateAuthority = OrganisationAuthorityPropertyType;
    pub type SpecialDateTimeSlice = SpecialDateTimeSliceType;
    pub type SpecialDateTimeSliceTypeExtension = SpecialDateTimeSliceTypeExtensionElementType;
    pub type SpecialDateTypeTimeSlice = SpecialDateTimeSlicePropertyType;
    pub type SpecialNavigationStation = SpecialNavigationStationType;
    pub type SpecialNavigationStationStatus = SpecialNavigationStationStatusType;
    pub type SpecialNavigationStationStatusTypeExtension =
        SpecialNavigationStationStatusTypeExtensionElementType;
    pub type SpecialNavigationStationTimeSlice = SpecialNavigationStationTimeSliceType;
    pub type SpecialNavigationStationTimeSliceTypeExtension =
        SpecialNavigationStationTimeSliceTypeExtensionElementType;
    pub type SpecialNavigationStationTypeTimeSlice = SpecialNavigationStationTimeSlicePropertyType;
    pub type SpecialNavigationSystem = SpecialNavigationSystemType;
    pub type SpecialNavigationSystemTimeSlice = SpecialNavigationSystemTimeSliceType;
    pub type SpecialNavigationSystemTimeSliceTypeExtension =
        SpecialNavigationSystemTimeSliceTypeExtensionElementType;
    pub type SpecialNavigationSystemTypeTimeSlice = SpecialNavigationSystemTimeSlicePropertyType;
    pub type SpecialRefuelling = CodeYesNoType;
    pub type SpecialUseOnly = CodeYesNoType;
    pub type Speed = ValSpeedType;
    pub type SpeedCriteria = CodeComparisonType;
    pub type SpeedInterpretation = CodeValueInterpretationType;
    pub type SpeedLimit = ValSpeedType;
    pub type SpeedReference = CodeSpeedReferenceType;
    pub type StandByIntensity = CodeIntensityStandByType;
    pub type StandLocation = AircraftStandPropertyType;
    pub type StandMarking = StandMarkingType;
    pub type StandMarkingTimeSlice = StandMarkingTimeSliceType;
    pub type StandMarkingTimeSliceTypeExtension = StandMarkingTimeSliceTypeExtensionElementType;
    pub type StandMarkingTypeTimeSlice = StandMarkingTimeSlicePropertyType;
    pub type Standard = CodeAviationStandardsType;
    pub type StandardICAO = CodeYesNoType;
    pub type StandardInstrumentArrival = StandardInstrumentArrivalType;
    pub type StandardInstrumentArrivalTimeSlice = StandardInstrumentArrivalTimeSliceType;
    pub type StandardInstrumentArrivalTimeSliceTypeExtension =
        StandardInstrumentArrivalTimeSliceTypeExtensionElementType;
    pub type StandardInstrumentArrivalTypeTimeSlice =
        StandardInstrumentArrivalTimeSlicePropertyType;
    pub type StandardInstrumentDeparture = StandardInstrumentDepartureType;
    pub type StandardInstrumentDepartureTimeSlice = StandardInstrumentDepartureTimeSliceType;
    pub type StandardInstrumentDepartureTimeSliceTypeExtension =
        StandardInstrumentDepartureTimeSliceTypeExtensionElementType;
    pub type StandardInstrumentDepartureTypeTimeSlice =
        StandardInstrumentDepartureTimeSlicePropertyType;
    pub type StandardLevel = StandardLevelType;
    pub type StandardLevelColumn = StandardLevelColumnType;
    pub type StandardLevelColumnTimeSlice = StandardLevelColumnTimeSliceType;
    pub type StandardLevelColumnTimeSliceTypeExtension =
        StandardLevelColumnTimeSliceTypeExtensionElementType;
    pub type StandardLevelColumnTypeTimeSlice = StandardLevelColumnTimeSlicePropertyType;
    pub type StandardLevelSector = StandardLevelSectorType;
    pub type StandardLevelSectorTimeSlice = StandardLevelSectorTimeSliceType;
    pub type StandardLevelSectorTimeSliceTypeExtension =
        StandardLevelSectorTimeSliceTypeExtensionElementType;
    pub type StandardLevelSectorTypeTimeSlice = StandardLevelSectorTimeSlicePropertyType;
    pub type StandardLevelTable = StandardLevelTableType;
    pub type StandardLevelTableTimeSlice = StandardLevelTableTimeSliceType;
    pub type StandardLevelTableTimeSliceTypeExtension =
        StandardLevelTableTimeSliceTypeExtensionElementType;
    pub type StandardLevelTableTypeTimeSlice = StandardLevelTableTimeSlicePropertyType;
    pub type StandardLevelTypeExtension = StandardLevelTypeExtensionElementType;
    pub type StandbyPower = CodeStandbyPowerType;
    pub type Start = EnRouteSegmentPointPropertyType;
    pub type StartAimingPoint = TouchDownLiftOffPropertyType;
    pub type StartAirportReferencePoint = AirportHeliportPropertyType;
    pub type StartDate = DateMonthDayType;
    pub type StartEvent = CodeTimeEventType;
    pub type StartEventInterpretation = CodeTimeEventCombinationType;
    pub type StartFixDesignatedPoint = DesignatedPointPropertyType;
    pub type StartNavaidSystem = NavaidPropertyType;
    pub type StartPoint = TerminalSegmentPointPropertyType;
    pub type StartPosition = PointPropertyType;
    pub type StartRunwayPoint = RunwayCentrelinePointPropertyType;
    pub type StartTime = TimeType;
    pub type StartTimeRelativeEvent = ValDurationType;
    pub type StartingCurve = CurvePropertyType;
    pub type StartingElement = RunwayElementPropertyType;
    pub type StartingMeasurementPoint = CodeProcedureDistanceType;
    pub type Status = CodeStatusOperationsType;
    pub type StructureBeacon = VerticalStructurePropertyType;
    pub type Style = CodeMarkingStyleType;
    pub type SubCondition = ConditionCombinationPropertyType;
    pub type SupplyService = AirportSuppliesServicePropertyType;
    pub type SupportedGroundLight = GroundLightSystemPropertyType;
    pub type SupportedService = ServicePropertyType;
    pub type SurfaceCharacteristics = SurfaceCharacteristicsType;
    pub type SurfaceCharacteristicsTypeExtension = SurfaceCharacteristicsTypeExtensionElementType;
    pub type SurfaceCondition = CodeSurfaceConditionType;
    pub type SurfaceContaminationLayer = SurfaceContaminationLayerType;
    pub type SurfaceContaminationLayerTypeExtension =
        SurfaceContaminationLayerTypeExtensionElementType;
    pub type SurfaceExtent = ElevatedSurfacePropertyType;
    pub type SurfacePenetration = CodeYesNoType;
    pub type SurfaceProperties = SurfaceCharacteristicsPropertyType;
    pub type SurfaceZone = CodeObstructionIdSurfaceZoneType;
    pub type SurveillanceEquipment = CodeTransponderType;
    pub type SurveillanceGroundStation = SurveillanceGroundStationType;
    pub type SurveillanceGroundStationTypeExtension =
        SurveillanceGroundStationTypeExtensionElementType;
    pub type SurveyControlPoint = SurveyControlPointType;
    pub type SurveyControlPointTimeSlice = SurveyControlPointTimeSliceType;
    pub type SurveyControlPointTimeSliceTypeExtension =
        SurveyControlPointTimeSliceTypeExtensionElementType;
    pub type SurveyControlPointTypeTimeSlice = SurveyControlPointTimeSlicePropertyType;
    pub type SynchronisedLighting = CodeYesNoType;
    pub type SystemChain = SpecialNavigationSystemPropertyType;
    pub type Tacan = Tacantype;
    pub type TacantimeSlice = TacantimeSliceType;
    pub type TacantimeSliceTypeExtension = TacantimeSliceTypeExtensionElementType;
    pub type TacantypeTimeSlice = TacantimeSlicePropertyType;
    pub type Takeoff = LandingTakeoffAreaCollectionPropertyType;
    pub type TankerChannel = CodeTACANChannelType;
    pub type TaxiHolding = TaxiHoldingPositionPropertyType;
    pub type TaxiHoldingPosition = TaxiHoldingPositionType;
    pub type TaxiHoldingPositionLightSystem = TaxiHoldingPositionLightSystemType;
    pub type TaxiHoldingPositionLightSystemTimeSlice = TaxiHoldingPositionLightSystemTimeSliceType;
    pub type TaxiHoldingPositionLightSystemTimeSliceTypeExtension =
        TaxiHoldingPositionLightSystemTimeSliceTypeExtensionElementType;
    pub type TaxiHoldingPositionLightSystemTypeTimeSlice =
        TaxiHoldingPositionLightSystemTimeSlicePropertyType;
    pub type TaxiHoldingPositionMarking = TaxiHoldingPositionMarkingType;
    pub type TaxiHoldingPositionMarkingTimeSlice = TaxiHoldingPositionMarkingTimeSliceType;
    pub type TaxiHoldingPositionMarkingTimeSliceTypeExtension =
        TaxiHoldingPositionMarkingTimeSliceTypeExtensionElementType;
    pub type TaxiHoldingPositionMarkingTypeTimeSlice =
        TaxiHoldingPositionMarkingTimeSlicePropertyType;
    pub type TaxiHoldingPositionTimeSlice = TaxiHoldingPositionTimeSliceType;
    pub type TaxiHoldingPositionTimeSliceTypeExtension =
        TaxiHoldingPositionTimeSliceTypeExtensionElementType;
    pub type TaxiHoldingPositionTypeTimeSlice = TaxiHoldingPositionTimeSlicePropertyType;
    pub type Taxiway = TaxiwayType;
    pub type TaxiwayAvailable = CodeYesNoType;
    pub type TaxiwayContamination = TaxiwayContaminationType;
    pub type TaxiwayContaminationTypeExtension = TaxiwayContaminationTypeExtensionElementType;
    pub type TaxiwayElement = TaxiwayElementType;
    pub type TaxiwayElementTimeSlice = TaxiwayElementTimeSliceType;
    pub type TaxiwayElementTimeSliceTypeExtension = TaxiwayElementTimeSliceTypeExtensionElementType;
    pub type TaxiwayElementTypeTimeSlice = TaxiwayElementTimeSlicePropertyType;
    pub type TaxiwayLightSystem = TaxiwayLightSystemType;
    pub type TaxiwayLightSystemTimeSlice = TaxiwayLightSystemTimeSliceType;
    pub type TaxiwayLightSystemTimeSliceTypeExtension =
        TaxiwayLightSystemTimeSliceTypeExtensionElementType;
    pub type TaxiwayLightSystemTypeTimeSlice = TaxiwayLightSystemTimeSlicePropertyType;
    pub type TaxiwayLocation = TaxiwayPropertyType;
    pub type TaxiwayMarking = TaxiwayMarkingType;
    pub type TaxiwayMarkingTimeSlice = TaxiwayMarkingTimeSliceType;
    pub type TaxiwayMarkingTimeSliceTypeExtension = TaxiwayMarkingTimeSliceTypeExtensionElementType;
    pub type TaxiwayMarkingTypeTimeSlice = TaxiwayMarkingTimeSlicePropertyType;
    pub type TaxiwayTimeSlice = TaxiwayTimeSliceType;
    pub type TaxiwayTimeSliceTypeExtension = TaxiwayTimeSliceTypeExtensionElementType;
    pub type TaxiwayTypeTimeSlice = TaxiwayTimeSlicePropertyType;
    pub type TelephoneContact = TelephoneContactType;
    pub type TelephoneContactTypeExtension = TelephoneContactTypeExtensionElementType;
    pub type TerminalArrivalArea = TerminalArrivalAreaType;
    pub type TerminalArrivalAreaSector = TerminalArrivalAreaSectorType;
    #[derive(Debug, Clone)]
    pub struct TerminalArrivalAreaSectorType {
        pub id: String,
        pub content: Vec<TerminalArrivalAreaSectorTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TerminalArrivalAreaSectorTypeContent {
        Content3(gml::AbstractGMLContent3Type),
        Content3224(TerminalArrivalAreaSectorContent3224Type),
        Extension(TerminalArrivalAreaSectorTypeExtensionElementType),
    }
    #[derive(Debug, Clone)]
    pub enum TerminalArrivalAreaSectorContent3224Type {
        FlyByCode(CodeYesNoType),
        ProcedureTurnRequired(CodeYesNoType),
        AltitudeDescription(CodeAltitudeUseType),
        SectorDefinition(CircleSectorPropertyType),
        Extent(ElevatedSurfacePropertyType),
        SignificantObstacle(ObstructionPropertyType),
        Annotation(NotePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TerminalArrivalAreaSectorTypeExtensionElementType {
        pub owns: bool,
        pub content: TerminalArrivalAreaSectorTypeExtensionElementTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TerminalArrivalAreaSectorTypeExtensionElementTypeContent {
        AbstractTerminalArrivalAreaSectorExtension(AbstractTerminalArrivalAreaSectorExtension),
    }
    impl TerminalArrivalAreaSectorTypeExtensionElementType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type TerminalArrivalAreaSectorTypeExtension =
        TerminalArrivalAreaSectorTypeExtensionElementType;
    pub type TerminalArrivalAreaTimeSlice = TerminalArrivalAreaTimeSliceType;
    pub type TerminalArrivalAreaTimeSliceTypeExtension =
        TerminalArrivalAreaTimeSliceTypeExtensionElementType;
    pub type TerminalArrivalAreaTypeTimeSlice = TerminalArrivalAreaTimeSlicePropertyType;
    pub type TerminalSegmentPoint = TerminalSegmentPointType;
    pub type TerminalSegmentPointTypeExtension = TerminalSegmentPointTypeExtensionElementType;
    pub type TerminationAltitude = ValDistanceVerticalType;
    pub type TheAirspace = AirspacePropertyType;
    pub type TheAirspaceVolume = AirspaceVolumePropertyType;
    pub type TheAngleIndication = AngleIndicationPropertyType;
    pub type TheHoldingPattern = HoldingPatternPropertyType;
    pub type TheNavaidEquipment = NavaidEquipmentPropertyType;
    pub type TheOrganisationAuthority = OrganisationAuthorityPropertyType;
    pub type TheRadarEquipment = RadarEquipmentPropertyType;
    pub type TheSeaplaneLandingArea = SeaplaneLandingAreaPropertyType;
    pub type TheSegmentLeg = SegmentLegPropertyType;
    pub type TheUnit = UnitPropertyType;
    pub type TheVerticalStructure = VerticalStructurePropertyType;
    pub type ThresholdAfterMAPT = CodeYesNoType;
    pub type ThresholdCourseWidth = ValDistanceType;
    pub type TiltAngle = ValAngleType;
    pub type Time = ValDurationType;
    pub type TimeInterval = TimesheetPropertyType;
    pub type TimeReference = CodeTimeReferenceType;
    pub type Timesheet = TimesheetType;
    pub type TimesheetTypeExtension = TimesheetTypeExtensionElementType;
    pub type Timing = ApproachTimingTablePropertyType;
    pub type Title = TextNameType;
    pub type Tlof = TouchDownLiftOffPropertyType;
    pub type ToAngle = ValBearingType;
    pub type ToTrack = ValBearingType;
    pub type TouchDownLiftOff = TouchDownLiftOffType;
    pub type TouchDownLiftOffContamination = TouchDownLiftOffContaminationType;
    pub type TouchDownLiftOffContaminationTypeExtension =
        TouchDownLiftOffContaminationTypeExtensionElementType;
    pub type TouchDownLiftOffLightSystem = TouchDownLiftOffLightSystemType;
    pub type TouchDownLiftOffLightSystemTimeSlice = TouchDownLiftOffLightSystemTimeSliceType;
    pub type TouchDownLiftOffLightSystemTimeSliceTypeExtension =
        TouchDownLiftOffLightSystemTimeSliceTypeExtensionElementType;
    pub type TouchDownLiftOffLightSystemTypeTimeSlice =
        TouchDownLiftOffLightSystemTimeSlicePropertyType;
    pub type TouchDownLiftOffMarking = TouchDownLiftOffMarkingType;
    pub type TouchDownLiftOffMarkingTimeSlice = TouchDownLiftOffMarkingTimeSliceType;
    pub type TouchDownLiftOffMarkingTimeSliceTypeExtension =
        TouchDownLiftOffMarkingTimeSliceTypeExtensionElementType;
    pub type TouchDownLiftOffMarkingTypeTimeSlice = TouchDownLiftOffMarkingTimeSlicePropertyType;
    pub type TouchDownLiftOffSafeArea = TouchDownLiftOffSafeAreaType;
    pub type TouchDownLiftOffSafeAreaTimeSlice = TouchDownLiftOffSafeAreaTimeSliceType;
    pub type TouchDownLiftOffSafeAreaTimeSliceTypeExtension =
        TouchDownLiftOffSafeAreaTimeSliceTypeExtensionElementType;
    pub type TouchDownLiftOffSafeAreaTypeTimeSlice = TouchDownLiftOffSafeAreaTimeSlicePropertyType;
    pub type TouchDownLiftOffTimeSlice = TouchDownLiftOffTimeSliceType;
    pub type TouchDownLiftOffTimeSliceTypeExtension =
        TouchDownLiftOffTimeSliceTypeExtensionElementType;
    pub type TouchDownLiftOffTypeTimeSlice = TouchDownLiftOffTimeSlicePropertyType;
    pub type TouchdownReflector = ElevatedPointPropertyType;
    pub type TowingAvailability = CodeYesNoType;
    pub type Track = AerialRefuellingTrackPropertyType;
    pub type TrafficDirection = CodeCommunicationDirectionType;
    pub type Trajectory = CurvePropertyType;
    pub type TransitionAltitude = ValDistanceVerticalType;
    pub type TransitionId = CodeDesignatedPointDesignatorType;
    pub type TransitionLeg = ProcedureTransitionLegPropertyType;
    pub type TransitionLevel = ValFLType;
    pub type TranslatedNote = LinguisticNotePropertyType;
    pub type Transponder = CodeTransponderType;
    pub type TrueAngle = ValBearingType;
    pub type TrueBearing = ValBearingType;
    pub type TrueBearingAccuracy = ValAngleType;
    pub type TrueTrack = ValBearingType;
    pub type TurbulentAir = CodeYesNoType;
    pub type TurnDirection = CodeDirectionTurnType;
    pub type TurnPermitted = CodeYesNoType;
    pub type TurnRadius = ValDistanceType;
    pub type Type = CodeRunwayProtectionAreaType;
    pub type TypeAircraftICAO = CodeAircraftICAOType;
    pub type TyrePressureSIWL = ValPressureType;
    pub type Unit = UnitType;
    pub type UnitAvailability = UnitAvailabilityType;
    pub type UnitAvailabilityTypeExtension = UnitAvailabilityTypeExtensionElementType;
    pub type UnitDependency = UnitDependencyType;
    pub type UnitDependencyTypeExtension = UnitDependencyTypeExtensionElementType;
    pub type UnitOfMeasurement = UomDistanceVerticalType;
    pub type UnitTimeSlice = UnitTimeSliceType;
    pub type UnitTimeSliceTypeExtension = UnitTimeSliceTypeExtensionElementType;
    pub type UnitTypeTimeSlice = UnitTimeSlicePropertyType;
    pub type UnplannedHolding = UnplannedHoldingPropertyType;
    pub type UnplannedHoldingTimeSlice = UnplannedHoldingTimeSliceType;
    pub type UnplannedHoldingTimeSliceTypeExtension =
        UnplannedHoldingTimeSliceTypeExtensionElementType;
    pub type UnplannedHoldingTypeTimeSlice = UnplannedHoldingTimeSlicePropertyType;
    #[derive(Debug, Clone)]
    pub struct UnplannedHoldingTimeSlicePropertyType {
        pub owns: bool,
        pub content: UnplannedHoldingTimeSlicePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum UnplannedHoldingTimeSlicePropertyTypeContent {
        UnplannedHoldingTimeSlice(UnplannedHoldingTimeSliceType),
    }
    impl UnplannedHoldingTimeSlicePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type UpperLevel = ValDistanceVerticalType;
    pub type UpperLevelReference = CodeVerticalReferenceType;
    pub type UpperLimit = ValDistanceVerticalType;
    pub type UpperLimitAltitude = ValDistanceVerticalType;
    pub type UpperLimitReference = CodeVerticalReferenceType;
    pub type UpperLowerSeparation = ValFLType;
    pub type Usage = ManoeuvringAreaUsagePropertyType;
    pub type UsageDirection = CodeDirectionType;
    pub type UsageType = CodeAerialRefuellingPointType;
    pub type UsedRunway = RunwayPropertyType;
    pub type UsedRunwayDirection = RunwayDirectionPropertyType;
    pub type User = OrganisationAuthorityPropertyType;
    pub type UserOrganisation = OrganisationAuthorityPropertyType;
    pub type Vor = Vortype;
    pub type VortimeSlice = VortimeSliceType;
    pub type ValueHAT = ValDistanceVerticalType;
    pub type VectorHeading = ValBearingType;
    pub type VerticalAccuracy = ValDistanceType;
    pub type VerticalAlarmLimit = ValAlarmLimitType;
    pub type VerticalAngle = ValAngleType;
    pub type VerticalCoverageAltitude = ValDistanceVerticalType;
    pub type VerticalCoverageAzimuth = ValBearingType;
    pub type VerticalCoverageDistance = ValDistanceType;
    pub type VerticalDatum = CodeVerticalDatumType;
    pub type VerticalDistance = ValDistanceVerticalType;
    pub type VerticalExtent = ValDistanceType;
    pub type VerticalExtentAccuracy = ValDistanceType;
    pub type VerticalSeparationCapability = CodeRVSMType;
    pub type VerticalStructure = VerticalStructureType;
    pub type VerticalStructureLightingStatus = VerticalStructureLightingStatusType;
    pub type VerticalStructureLightingStatusTypeExtension =
        VerticalStructureLightingStatusTypeExtensionElementType;
    pub type VerticalStructurePart = VerticalStructurePartType;
    pub type VerticalStructurePartTypeExtension = VerticalStructurePartTypeExtensionElementType;
    pub type VerticalStructureTimeSlice = VerticalStructureTimeSliceType;
    pub type VerticalStructureTimeSliceTypeExtension =
        VerticalStructureTimeSliceTypeExtensionElementType;
    pub type VerticalStructureTypeTimeSlice = VerticalStructureTimeSlicePropertyType;
    pub type VideoMap = CodeYesNoType;
    pub type Visibility = ValDistanceType;
    pub type VisibilityAdjustment = ValDistanceVerticalType;
    pub type VisibilityInterpretation = CodeValueInterpretationType;
    pub type VisibleMaterial = CodeVerticalStructureMaterialType;
    pub type VisualDescentPoint = TerminalSegmentPointPropertyType;
    pub type VisualDockingSystem = CodeVisualDockingGuidanceType;
    pub type VisualGlideSlopeIndicator = VisualGlideSlopeIndicatorType;
    pub type VisualGlideSlopeIndicatorTimeSlice = VisualGlideSlopeIndicatorTimeSliceType;
    pub type VisualGlideSlopeIndicatorTimeSliceTypeExtension =
        VisualGlideSlopeIndicatorTimeSliceTypeExtensionElementType;
    pub type VisualGlideSlopeIndicatorTypeTimeSlice =
        VisualGlideSlopeIndicatorTimeSlicePropertyType;
    pub type Voice = TextPhoneType;
    pub type VortimeSliceTypeExtension = VortimeSliceTypeExtensionElementType;
    pub type VortypeTimeSlice = VortimeSlicePropertyType;
    pub type Waasreliable = CodeYesNoType;
    pub type WakeTurbulence = CodeWakeTurbulenceType;
    pub type Warning = CodeAirportWarningType;
    pub type Waypoint = CodeYesNoType;
    pub type Weather = MeteorologyPropertyType;
    pub type Weight = ValWeightType;
    pub type WeightAUW = ValWeightType;
    pub type WeightInterpretation = CodeValueInterpretationType;
    pub type WeightSIWL = ValWeightType;
    pub type Width = ValDistanceType;
    pub type WidthAccuracy = ValDistanceType;
    pub type WidthCourse = ValAngleType;
    pub type WidthCourseAccuracy = ValAngleType;
    pub type WidthLeft = ValDistanceType;
    pub type WidthOffset = ValDistanceSignedType;
    pub type WidthRight = ValDistanceType;
    pub type WidthShoulder = ValDistanceType;
    pub type WidthStrip = ValDistanceType;
    pub type WindDirectionIndicator = CodeYesNoType;
    pub type WingSpan = ValDistanceType;
    pub type WingSpanInterpretation = CodeValueInterpretationType;
    pub type WorkArea = WorkAreaType;
    pub type WorkAreaTimeSlice = WorkAreaTimeSliceType;
    pub type WorkAreaTimeSliceTypeExtension = WorkAreaTimeSliceTypeExtensionElementType;
    pub type WorkAreaTypeTimeSlice = WorkAreaTimeSlicePropertyType;
    pub type WorkareaActivity = WorkareaActivityType;
    pub type WorkareaActivityTypeExtension = WorkareaActivityTypeExtensionElementType;
    pub type XbandRadarSetting = NoNumberType;
    pub type ZeroBearingDirection = CodeNorthReferenceType;
    pub type CorrectionNumber = u32;
    pub type FeatureLifetime = gml::TimePrimitivePropertyType;
    pub type Interpretation = InterpretationElementType;
    pub type SequenceNumber = u32;
}
pub mod gml {
    use super::*;
    #[derive(Debug, Clone)]
    pub enum NilReasonEnumerationType {
        Inapplicable,
        Missing,
        Template,
        Unknown,
        Withheld,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractFeature(pub Box<dyn AbstractFeatureTrait>);
    pub trait AbstractFeatureTrait: AbstractGMLTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractGML(pub Box<dyn AbstractGMLTrait>);
    pub trait AbstractGMLTrait: AbstractObjectTrait {}
    #[derive(Debug, Clone)]
    pub struct DynamicFeatureType {
        pub id: String,
        pub content: Vec<DynamicFeatureTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DynamicFeatureTypeContent {
        Content3(AbstractGMLContent3Type),
        BoundedBy(BoundingShapeType),
        Location(Location),
        ValidTime(TimePrimitivePropertyType),
        History(History),
        DataSource(StringOrRefType),
        DataSourceReference(ReferenceType),
    }
    impl AbstractFeatureTrait for DynamicFeatureType {}
    impl AbstractGMLTrait for DynamicFeatureType {}
    impl AbstractObjectTrait for DynamicFeatureType {}
    impl DynamicFeatureTrait for DynamicFeatureType {}
    impl xsd_parser::AsAny for DynamicFeatureType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DynamicFeatureCollectionType {
        pub id: String,
        pub content: Vec<DynamicFeatureCollectionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DynamicFeatureCollectionTypeContent {
        Content3(AbstractGMLContent3Type),
        BoundedBy(BoundingShapeType),
        Location(Location),
        ValidTime(TimePrimitivePropertyType),
        History(History),
        DataSource(StringOrRefType),
        DataSourceReference(ReferenceType),
        DynamicMembers(DynamicFeatureMemberType),
    }
    impl AbstractFeatureTrait for DynamicFeatureCollectionType {}
    impl AbstractGMLTrait for DynamicFeatureCollectionType {}
    impl AbstractObjectTrait for DynamicFeatureCollectionType {}
    impl DynamicFeatureTrait for DynamicFeatureCollectionType {}
    impl xsd_parser::AsAny for DynamicFeatureCollectionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractCoverageType {
        pub id: String,
        pub content: Vec<AbstractCoverageTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractCoverageTypeContent {
        Content3(AbstractGMLContent3Type),
        BoundedBy(BoundingShapeType),
        Location(Location),
        DomainSet(DomainSet),
        RangeSet(RangeSetType),
    }
    impl AbstractFeatureTrait for AbstractCoverageType {}
    impl AbstractGMLTrait for AbstractCoverageType {}
    impl AbstractObjectTrait for AbstractCoverageType {}
    impl xsd_parser::AsAny for AbstractCoverageType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DiscreteCoverageType {
        pub id: String,
        pub content: Vec<DiscreteCoverageTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DiscreteCoverageTypeContent {
        Content3(AbstractGMLContent3Type),
        BoundedBy(BoundingShapeType),
        Location(Location),
        DomainSet(DomainSet),
        RangeSet(RangeSetType),
        CoverageFunction(CoverageFunctionType),
    }
    impl AbstractCoverageTrait for DiscreteCoverageType {}
    impl AbstractDiscreteCoverageTrait for DiscreteCoverageType {}
    impl AbstractFeatureTrait for DiscreteCoverageType {}
    impl AbstractGMLTrait for DiscreteCoverageType {}
    impl AbstractObjectTrait for DiscreteCoverageType {}
    impl xsd_parser::AsAny for DiscreteCoverageType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractContinuousCoverageType {
        pub id: String,
        pub content: Vec<AbstractContinuousCoverageTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractContinuousCoverageTypeContent {
        Content3(AbstractGMLContent3Type),
        BoundedBy(BoundingShapeType),
        Location(Location),
        DomainSet(DomainSet),
        RangeSet(RangeSetType),
        CoverageFunction(CoverageFunctionType),
    }
    impl AbstractFeatureTrait for AbstractContinuousCoverageType {}
    impl AbstractGMLTrait for AbstractContinuousCoverageType {}
    impl AbstractObjectTrait for AbstractContinuousCoverageType {}
    impl xsd_parser::AsAny for AbstractContinuousCoverageType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ObservationType {
        pub id: String,
        pub content: Vec<ObservationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ObservationTypeContent {
        Content3(AbstractGMLContent3Type),
        BoundedBy(BoundingShapeType),
        Location(Location),
        ValidTime(TimePrimitivePropertyType),
        Using(ProcedurePropertyType),
        Target(Target),
        ResultOf(ResultType),
    }
    impl AbstractFeatureTrait for ObservationType {}
    impl AbstractGMLTrait for ObservationType {}
    impl AbstractObjectTrait for ObservationType {}
    impl ObservationTrait for ObservationType {}
    impl xsd_parser::AsAny for ObservationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DirectedObservationType {
        pub id: String,
        pub content: Vec<DirectedObservationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DirectedObservationTypeContent {
        Content3(AbstractGMLContent3Type),
        BoundedBy(BoundingShapeType),
        Location(Location),
        ValidTime(TimePrimitivePropertyType),
        Using(ProcedurePropertyType),
        Target(Target),
        ResultOf(ResultType),
        Direction(DirectionPropertyType),
    }
    impl AbstractFeatureTrait for DirectedObservationType {}
    impl AbstractGMLTrait for DirectedObservationType {}
    impl AbstractObjectTrait for DirectedObservationType {}
    impl DirectedObservationTrait for DirectedObservationType {}
    impl ObservationTrait for DirectedObservationType {}
    impl xsd_parser::AsAny for DirectedObservationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DirectedObservationAtDistanceType {
        pub id: String,
        pub content: Vec<DirectedObservationAtDistanceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DirectedObservationAtDistanceTypeContent {
        Content3(AbstractGMLContent3Type),
        BoundedBy(BoundingShapeType),
        Location(Location),
        ValidTime(TimePrimitivePropertyType),
        Using(ProcedurePropertyType),
        Target(Target),
        ResultOf(ResultType),
        Direction(DirectionPropertyType),
        Distance(MeasureType),
    }
    impl AbstractFeatureTrait for DirectedObservationAtDistanceType {}
    impl AbstractGMLTrait for DirectedObservationAtDistanceType {}
    impl AbstractObjectTrait for DirectedObservationAtDistanceType {}
    impl DirectedObservationTrait for DirectedObservationAtDistanceType {}
    impl ObservationTrait for DirectedObservationAtDistanceType {}
    impl xsd_parser::AsAny for DirectedObservationAtDistanceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractFeatureCollectionType {
        pub id: String,
        pub content: Vec<AbstractFeatureCollectionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractFeatureCollectionTypeContent {
        Content3(AbstractGMLContent3Type),
        BoundedBy(BoundingShapeType),
        Location(Location),
        FeatureMember(FeaturePropertyType),
        FeatureMembers(FeatureArrayPropertyType),
    }
    impl AbstractFeatureTrait for AbstractFeatureCollectionType {}
    impl AbstractGMLTrait for AbstractFeatureCollectionType {}
    impl AbstractObjectTrait for AbstractFeatureCollectionType {}
    impl xsd_parser::AsAny for AbstractFeatureCollectionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct FeatureCollectionType {
        pub id: String,
        pub content: Vec<FeatureCollectionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FeatureCollectionTypeContent {
        Content3(AbstractGMLContent3Type),
        BoundedBy(BoundingShapeType),
        Location(Location),
        FeatureMember(FeaturePropertyType),
        FeatureMembers(FeatureArrayPropertyType),
    }
    impl AbstractFeatureTrait for FeatureCollectionType {}
    impl AbstractGMLTrait for FeatureCollectionType {}
    impl AbstractObjectTrait for FeatureCollectionType {}
    impl xsd_parser::AsAny for FeatureCollectionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum AbstractGMLContent3Type {
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractObject(pub Box<dyn AbstractObjectTrait>);
    pub trait AbstractObjectTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct AbstractFeatureType {
        pub id: String,
        pub content: Vec<AbstractFeatureTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractFeatureTypeContent {
        Content3(AbstractGMLContent3Type),
        BoundedBy(BoundingShapeType),
        Location(Location),
    }
    impl AbstractGMLTrait for AbstractFeatureType {}
    impl AbstractObjectTrait for AbstractFeatureType {}
    impl xsd_parser::AsAny for AbstractFeatureType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTimeSliceType {
        pub id: String,
        pub content: Vec<AbstractTimeSliceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractTimeSliceTypeContent {
        Content3(AbstractGMLContent3Type),
        ValidTime(TimePrimitivePropertyType),
        DataSource(StringOrRefType),
    }
    impl AbstractGMLTrait for AbstractTimeSliceType {}
    impl AbstractObjectTrait for AbstractTimeSliceType {}
    impl xsd_parser::AsAny for AbstractTimeSliceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractGeometryType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub content: AbstractGeometryTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractGeometryTypeContent {
        Content3(AbstractGMLContent3Type),
    }
    impl AbstractGMLTrait for AbstractGeometryType {}
    impl AbstractGeometryTrait for AbstractGeometryType {}
    impl AbstractObjectTrait for AbstractGeometryType {}
    impl xsd_parser::AsAny for AbstractGeometryType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractGeometricPrimitiveType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub content: AbstractGeometricPrimitiveTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractGeometricPrimitiveTypeContent {
        Content3(AbstractGMLContent3Type),
    }
    impl AbstractGMLTrait for AbstractGeometricPrimitiveType {}
    impl AbstractGeometryTrait for AbstractGeometricPrimitiveType {}
    impl AbstractObjectTrait for AbstractGeometricPrimitiveType {}
    impl xsd_parser::AsAny for AbstractGeometricPrimitiveType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractCurveType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub content: AbstractCurveTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractCurveTypeContent {
        Content3(AbstractGMLContent3Type),
    }
    impl AbstractGMLTrait for AbstractCurveType {}
    impl AbstractGeometricPrimitiveTrait for AbstractCurveType {}
    impl AbstractGeometryTrait for AbstractCurveType {}
    impl AbstractObjectTrait for AbstractCurveType {}
    impl xsd_parser::AsAny for AbstractCurveType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CurveType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub content: [CurveTypeContent; 2usize],
    }
    #[derive(Debug, Clone)]
    pub enum CurveTypeContent {
        Content3(AbstractGMLContent3Type),
        Segments(CurveSegmentArrayPropertyType),
    }
    impl AbstractCurveTrait for CurveType {}
    impl AbstractGMLTrait for CurveType {}
    impl AbstractGeometricPrimitiveTrait for CurveType {}
    impl AbstractGeometryTrait for CurveType {}
    impl AbstractObjectTrait for CurveType {}
    impl CurveTrait for CurveType {}
    impl xsd_parser::AsAny for CurveType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct PointType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub content: [PointTypeContent; 2usize],
    }
    #[derive(Debug, Clone)]
    pub enum PointTypeContent {
        Content3(AbstractGMLContent3Type),
        Content1425(PointContent1425Type),
    }
    impl AbstractGMLTrait for PointType {}
    impl AbstractGeometricPrimitiveTrait for PointType {}
    impl AbstractGeometryTrait for PointType {}
    impl AbstractObjectTrait for PointType {}
    impl PointTrait for PointType {}
    impl xsd_parser::AsAny for PointType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSurfaceType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub content: AbstractSurfaceTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractSurfaceTypeContent {
        Content3(AbstractGMLContent3Type),
    }
    impl AbstractGMLTrait for AbstractSurfaceType {}
    impl AbstractGeometricPrimitiveTrait for AbstractSurfaceType {}
    impl AbstractGeometryTrait for AbstractSurfaceType {}
    impl AbstractObjectTrait for AbstractSurfaceType {}
    impl xsd_parser::AsAny for AbstractSurfaceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SurfaceType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub content: [SurfaceTypeContent; 2usize],
    }
    #[derive(Debug, Clone)]
    pub enum SurfaceTypeContent {
        Content3(AbstractGMLContent3Type),
        Patches(Patches),
    }
    impl AbstractGMLTrait for SurfaceType {}
    impl AbstractGeometricPrimitiveTrait for SurfaceType {}
    impl AbstractGeometryTrait for SurfaceType {}
    impl AbstractObjectTrait for SurfaceType {}
    impl AbstractSurfaceTrait for SurfaceType {}
    impl SurfaceTrait for SurfaceType {}
    impl TriangulatedSurfaceTrait for SurfaceType {}
    impl xsd_parser::AsAny for SurfaceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractGMLType {
        pub id: String,
        pub content: AbstractGMLTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractGMLTypeContent {
        Content3(AbstractGMLContent3Type),
    }
    impl AbstractGMLTrait for AbstractGMLType {}
    impl AbstractObjectTrait for AbstractGMLType {}
    impl xsd_parser::AsAny for AbstractGMLType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTopologyType {
        pub id: String,
        pub content: AbstractTopologyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractTopologyTypeContent {
        Content3(AbstractGMLContent3Type),
    }
    impl AbstractGMLTrait for AbstractTopologyType {}
    impl AbstractObjectTrait for AbstractTopologyType {}
    impl xsd_parser::AsAny for AbstractTopologyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTopoPrimitiveType {
        pub id: String,
        pub content: AbstractTopoPrimitiveTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractTopoPrimitiveTypeContent {
        Content3(AbstractGMLContent3Type),
    }
    impl AbstractGMLTrait for AbstractTopoPrimitiveType {}
    impl AbstractObjectTrait for AbstractTopoPrimitiveType {}
    impl AbstractTopologyTrait for AbstractTopoPrimitiveType {}
    impl xsd_parser::AsAny for AbstractTopoPrimitiveType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct NodeType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<NodeTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NodeTypeContent {
        Content3(AbstractGMLContent3Type),
        Container(FaceOrTopoSolidPropertyType),
        DirectedEdge(DirectedEdgePropertyType),
        PointProperty(PointPropertyType),
    }
    impl AbstractGMLTrait for NodeType {}
    impl AbstractObjectTrait for NodeType {}
    impl AbstractTopoPrimitiveTrait for NodeType {}
    impl AbstractTopologyTrait for NodeType {}
    impl xsd_parser::AsAny for NodeType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct EdgeType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<EdgeTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum EdgeTypeContent {
        Content3(AbstractGMLContent3Type),
        Container(TopoSolidPropertyType),
        DirectedNode(DirectedNodePropertyType),
        DirectedFace(DirectedFacePropertyType),
        CurveProperty(CurvePropertyType),
    }
    impl AbstractGMLTrait for EdgeType {}
    impl AbstractObjectTrait for EdgeType {}
    impl AbstractTopoPrimitiveTrait for EdgeType {}
    impl AbstractTopologyTrait for EdgeType {}
    impl xsd_parser::AsAny for EdgeType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct FaceType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub universal: bool,
        pub content: Vec<FaceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FaceTypeContent {
        Content3(AbstractGMLContent3Type),
        Isolated(NodePropertyType),
        DirectedEdge(DirectedEdgePropertyType),
        DirectedTopoSolid(DirectedTopoSolidPropertyType),
        SurfaceProperty(SurfacePropertyType),
    }
    impl AbstractGMLTrait for FaceType {}
    impl AbstractObjectTrait for FaceType {}
    impl AbstractTopoPrimitiveTrait for FaceType {}
    impl AbstractTopologyTrait for FaceType {}
    impl xsd_parser::AsAny for FaceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl FaceType {
        #[must_use]
        pub fn default_universal() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TopoSolidType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub universal: bool,
        pub content: Vec<TopoSolidTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TopoSolidTypeContent {
        Content3(AbstractGMLContent3Type),
        Isolated(NodeOrEdgePropertyType),
        DirectedFace(DirectedFacePropertyType),
        SolidProperty(SolidPropertyType),
    }
    impl AbstractGMLTrait for TopoSolidType {}
    impl AbstractObjectTrait for TopoSolidType {}
    impl AbstractTopoPrimitiveTrait for TopoSolidType {}
    impl AbstractTopologyTrait for TopoSolidType {}
    impl xsd_parser::AsAny for TopoSolidType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl TopoSolidType {
        #[must_use]
        pub fn default_universal() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TopoComplexType {
        pub id: String,
        pub is_maximal: bool,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<TopoComplexTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TopoComplexTypeContent {
        Content3(AbstractGMLContent3Type),
        MaximalComplex(TopoComplexPropertyType),
        SuperComplex(TopoComplexPropertyType),
        SubComplex(TopoComplexPropertyType),
        TopoPrimitiveMember(TopoPrimitiveMemberType),
        TopoPrimitiveMembers(TopoPrimitiveArrayAssociationType),
    }
    impl AbstractGMLTrait for TopoComplexType {}
    impl AbstractObjectTrait for TopoComplexType {}
    impl AbstractTopologyTrait for TopoComplexType {}
    impl xsd_parser::AsAny for TopoComplexType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl TopoComplexType {
        #[must_use]
        pub fn default_is_maximal() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct DefinitionType {
        pub id: String,
        pub content: Vec<DefinitionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DefinitionTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
    }
    impl AbstractGMLTrait for DefinitionType {}
    impl AbstractObjectTrait for DefinitionType {}
    impl DefinitionTrait for DefinitionType {}
    impl xsd_parser::AsAny for DefinitionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractCRSType {
        pub id: String,
        pub content: Vec<AbstractCRSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractCRSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
    }
    impl AbstractCRSTrait for AbstractCRSType {}
    impl AbstractGMLTrait for AbstractCRSType {}
    impl AbstractObjectTrait for AbstractCRSType {}
    impl DefinitionTrait for AbstractCRSType {}
    impl xsd_parser::AsAny for AbstractCRSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractGeneralDerivedCRSType {
        pub id: String,
        pub content: Vec<AbstractGeneralDerivedCRSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractGeneralDerivedCRSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
        Conversion(Conversion),
    }
    impl AbstractCRSTrait for AbstractGeneralDerivedCRSType {}
    impl AbstractGMLTrait for AbstractGeneralDerivedCRSType {}
    impl AbstractObjectTrait for AbstractGeneralDerivedCRSType {}
    impl AbstractSingleCRSTrait for AbstractGeneralDerivedCRSType {}
    impl DefinitionTrait for AbstractGeneralDerivedCRSType {}
    impl xsd_parser::AsAny for AbstractGeneralDerivedCRSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CompoundCRSType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<CompoundCRSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CompoundCRSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
        ComponentReferenceSystem(ComponentReferenceSystem),
    }
    impl AbstractCRSTrait for CompoundCRSType {}
    impl AbstractGMLTrait for CompoundCRSType {}
    impl AbstractObjectTrait for CompoundCRSType {}
    impl DefinitionTrait for CompoundCRSType {}
    impl xsd_parser::AsAny for CompoundCRSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GeodeticCRSType {
        pub id: String,
        pub content: Vec<GeodeticCRSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GeodeticCRSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
        Content4996(GeodeticCRSContent4996Type),
        GeodeticDatum(GeodeticDatum),
    }
    impl AbstractCRSTrait for GeodeticCRSType {}
    impl AbstractGMLTrait for GeodeticCRSType {}
    impl AbstractObjectTrait for GeodeticCRSType {}
    impl AbstractSingleCRSTrait for GeodeticCRSType {}
    impl DefinitionTrait for GeodeticCRSType {}
    impl xsd_parser::AsAny for GeodeticCRSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct VerticalCRSType {
        pub id: String,
        pub content: Vec<VerticalCRSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum VerticalCRSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
        VerticalCS(VerticalCS),
        VerticalDatum(VerticalDatum),
    }
    impl AbstractCRSTrait for VerticalCRSType {}
    impl AbstractGMLTrait for VerticalCRSType {}
    impl AbstractObjectTrait for VerticalCRSType {}
    impl AbstractSingleCRSTrait for VerticalCRSType {}
    impl DefinitionTrait for VerticalCRSType {}
    impl xsd_parser::AsAny for VerticalCRSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ProjectedCRSType {
        pub id: String,
        pub content: Vec<ProjectedCRSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ProjectedCRSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
        Conversion(Conversion),
        Content5003(ProjectedCRSContent5003Type),
        CartesianCS(CartesianCS),
    }
    impl AbstractCRSTrait for ProjectedCRSType {}
    impl AbstractGMLTrait for ProjectedCRSType {}
    impl AbstractGeneralDerivedCRSTrait for ProjectedCRSType {}
    impl AbstractObjectTrait for ProjectedCRSType {}
    impl AbstractSingleCRSTrait for ProjectedCRSType {}
    impl DefinitionTrait for ProjectedCRSType {}
    impl xsd_parser::AsAny for ProjectedCRSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DerivedCRSType {
        pub id: String,
        pub content: Vec<DerivedCRSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DerivedCRSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
        Conversion(Conversion),
        BaseCRS(SingleCRSPropertyType),
        DerivedCRSType(CodeType),
        CoordinateSystem(CoordinateSystem),
    }
    impl AbstractCRSTrait for DerivedCRSType {}
    impl AbstractGMLTrait for DerivedCRSType {}
    impl AbstractGeneralDerivedCRSTrait for DerivedCRSType {}
    impl AbstractObjectTrait for DerivedCRSType {}
    impl AbstractSingleCRSTrait for DerivedCRSType {}
    impl DefinitionTrait for DerivedCRSType {}
    impl xsd_parser::AsAny for DerivedCRSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct EngineeringCRSType {
        pub id: String,
        pub content: Vec<EngineeringCRSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum EngineeringCRSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
        Content5010(EngineeringCRSContent5010Type),
        EngineeringDatum(EngineeringDatum),
    }
    impl AbstractCRSTrait for EngineeringCRSType {}
    impl AbstractGMLTrait for EngineeringCRSType {}
    impl AbstractObjectTrait for EngineeringCRSType {}
    impl AbstractSingleCRSTrait for EngineeringCRSType {}
    impl DefinitionTrait for EngineeringCRSType {}
    impl xsd_parser::AsAny for EngineeringCRSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ImageCRSType {
        pub id: String,
        pub content: Vec<ImageCRSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ImageCRSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
        Content5014(ImageCRSContent5014Type),
        ImageDatum(ImageDatum),
    }
    impl AbstractCRSTrait for ImageCRSType {}
    impl AbstractGMLTrait for ImageCRSType {}
    impl AbstractObjectTrait for ImageCRSType {}
    impl AbstractSingleCRSTrait for ImageCRSType {}
    impl DefinitionTrait for ImageCRSType {}
    impl xsd_parser::AsAny for ImageCRSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TemporalCRSType {
        pub id: String,
        pub content: Vec<TemporalCRSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TemporalCRSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
        Content5018(TemporalCRSContent5018Type),
        TemporalDatum(TemporalDatum),
    }
    impl AbstractCRSTrait for TemporalCRSType {}
    impl AbstractGMLTrait for TemporalCRSType {}
    impl AbstractObjectTrait for TemporalCRSType {}
    impl AbstractSingleCRSTrait for TemporalCRSType {}
    impl DefinitionTrait for TemporalCRSType {}
    impl xsd_parser::AsAny for TemporalCRSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TimeReferenceSystemType {
        pub id: String,
        pub content: Vec<TimeReferenceSystemTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeReferenceSystemTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(String),
    }
    impl AbstractGMLTrait for TimeReferenceSystemType {}
    impl AbstractObjectTrait for TimeReferenceSystemType {}
    impl DefinitionTrait for TimeReferenceSystemType {}
    impl TimeReferenceSystemTrait for TimeReferenceSystemType {}
    impl xsd_parser::AsAny for TimeReferenceSystemType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TimeCoordinateSystemType {
        pub id: String,
        pub content: Vec<TimeCoordinateSystemTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeCoordinateSystemTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(String),
        Content5035(TimeCoordinateSystemContent5035Type),
        Interval(TimeIntervalLengthType),
    }
    impl AbstractGMLTrait for TimeCoordinateSystemType {}
    impl AbstractObjectTrait for TimeCoordinateSystemType {}
    impl DefinitionTrait for TimeCoordinateSystemType {}
    impl TimeReferenceSystemTrait for TimeCoordinateSystemType {}
    impl xsd_parser::AsAny for TimeCoordinateSystemType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TimeCalendarType {
        pub id: String,
        pub content: Vec<TimeCalendarTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeCalendarTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(String),
        ReferenceFrame(TimeCalendarEraPropertyType),
    }
    impl AbstractGMLTrait for TimeCalendarType {}
    impl AbstractObjectTrait for TimeCalendarType {}
    impl DefinitionTrait for TimeCalendarType {}
    impl TimeReferenceSystemTrait for TimeCalendarType {}
    impl xsd_parser::AsAny for TimeCalendarType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TimeClockType {
        pub id: String,
        pub content: Vec<TimeClockTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeClockTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(String),
        ReferenceEvent(StringOrRefType),
        ReferenceTime(String),
        UtcReference(String),
        DateBasis(TimeCalendarPropertyType),
    }
    impl AbstractGMLTrait for TimeClockType {}
    impl AbstractObjectTrait for TimeClockType {}
    impl DefinitionTrait for TimeClockType {}
    impl TimeReferenceSystemTrait for TimeClockType {}
    impl xsd_parser::AsAny for TimeClockType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TimeOrdinalReferenceSystemType {
        pub id: String,
        pub content: Vec<TimeOrdinalReferenceSystemTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeOrdinalReferenceSystemTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(String),
        Component(TimeOrdinalEraPropertyType),
    }
    impl AbstractGMLTrait for TimeOrdinalReferenceSystemType {}
    impl AbstractObjectTrait for TimeOrdinalReferenceSystemType {}
    impl DefinitionTrait for TimeOrdinalReferenceSystemType {}
    impl TimeReferenceSystemTrait for TimeOrdinalReferenceSystemType {}
    impl xsd_parser::AsAny for TimeOrdinalReferenceSystemType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractCoordinateOperationType {
        pub id: String,
        pub content: Vec<AbstractCoordinateOperationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractCoordinateOperationTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
        OperationVersion(String),
        CoordinateOperationAccuracy(CoordinateOperationAccuracyElementType),
        SourceCRS(CrspropertyType),
        TargetCRS(CrspropertyType),
    }
    impl AbstractCoordinateOperationTrait for AbstractCoordinateOperationType {}
    impl AbstractGMLTrait for AbstractCoordinateOperationType {}
    impl AbstractObjectTrait for AbstractCoordinateOperationType {}
    impl AbstractOperationTrait for AbstractCoordinateOperationType {}
    impl AbstractSingleOperationTrait for AbstractCoordinateOperationType {}
    impl DefinitionTrait for AbstractCoordinateOperationType {}
    impl xsd_parser::AsAny for AbstractCoordinateOperationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractCoordinateSystemType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<AbstractCoordinateSystemTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractCoordinateSystemTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        Axis(Axis),
    }
    impl AbstractGMLTrait for AbstractCoordinateSystemType {}
    impl AbstractObjectTrait for AbstractCoordinateSystemType {}
    impl DefinitionTrait for AbstractCoordinateSystemType {}
    impl xsd_parser::AsAny for AbstractCoordinateSystemType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TemporalCSType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<TemporalCSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TemporalCSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        Axis(Axis),
    }
    impl AbstractCoordinateSystemTrait for TemporalCSType {}
    impl AbstractGMLTrait for TemporalCSType {}
    impl AbstractObjectTrait for TemporalCSType {}
    impl DefinitionTrait for TemporalCSType {}
    impl xsd_parser::AsAny for TemporalCSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ObliqueCartesianCSType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<ObliqueCartesianCSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ObliqueCartesianCSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        Axis(Axis),
    }
    impl AbstractCoordinateSystemTrait for ObliqueCartesianCSType {}
    impl AbstractGMLTrait for ObliqueCartesianCSType {}
    impl AbstractObjectTrait for ObliqueCartesianCSType {}
    impl DefinitionTrait for ObliqueCartesianCSType {}
    impl xsd_parser::AsAny for ObliqueCartesianCSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GeographicCRSType {
        pub id: String,
        pub content: Vec<GeographicCRSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GeographicCRSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
        UsesEllipsoidalCS(EllipsoidalCSPropertyType),
        UsesGeodeticDatum(GeodeticDatumPropertyType),
    }
    impl AbstractCRSTrait for GeographicCRSType {}
    impl AbstractGMLTrait for GeographicCRSType {}
    impl AbstractObjectTrait for GeographicCRSType {}
    impl AbstractSingleCRSTrait for GeographicCRSType {}
    impl DefinitionTrait for GeographicCRSType {}
    impl xsd_parser::AsAny for GeographicCRSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GeocentricCRSType {
        pub id: String,
        pub content: Vec<GeocentricCRSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GeocentricCRSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
        Content5081(GeocentricCRSContent5081Type),
        UsesGeodeticDatum(GeodeticDatumPropertyType),
    }
    impl AbstractCRSTrait for GeocentricCRSType {}
    impl AbstractGMLTrait for GeocentricCRSType {}
    impl AbstractObjectTrait for GeocentricCRSType {}
    impl AbstractSingleCRSTrait for GeocentricCRSType {}
    impl DefinitionTrait for GeocentricCRSType {}
    impl xsd_parser::AsAny for GeocentricCRSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct BagType {
        pub id: String,
        pub content: Vec<BagTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum BagTypeContent {
        Content3(AbstractGMLContent3Type),
        Member(AssociationRoleType),
        Members(ArrayAssociationType),
    }
    impl AbstractGMLTrait for BagType {}
    impl AbstractObjectTrait for BagType {}
    impl xsd_parser::AsAny for BagType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ArrayType {
        pub id: String,
        pub content: Vec<ArrayTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ArrayTypeContent {
        Content3(AbstractGMLContent3Type),
        Members(ArrayAssociationType),
    }
    impl AbstractGMLTrait for ArrayType {}
    impl AbstractObjectTrait for ArrayType {}
    impl xsd_parser::AsAny for ArrayType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DictionaryType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<DictionaryTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DictionaryTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        Content5348(DictionaryContent5348Type),
    }
    impl AbstractGMLTrait for DictionaryType {}
    impl AbstractObjectTrait for DictionaryType {}
    impl DefinitionTrait for DictionaryType {}
    impl xsd_parser::AsAny for DictionaryType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DefinitionProxyType {
        pub id: String,
        pub content: Vec<DefinitionProxyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DefinitionProxyTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DefinitionRef(ReferenceType),
    }
    impl AbstractGMLTrait for DefinitionProxyType {}
    impl AbstractObjectTrait for DefinitionProxyType {}
    impl DefinitionTrait for DefinitionProxyType {}
    impl xsd_parser::AsAny for DefinitionProxyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MovingObjectStatusType {
        pub id: String,
        pub content: Vec<MovingObjectStatusTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MovingObjectStatusTypeContent {
        Content3(AbstractGMLContent3Type),
        ValidTime(TimePrimitivePropertyType),
        DataSource(StringOrRefType),
        Content5110(MovingObjectStatusContent5110Type),
        Speed(MeasureType),
        Bearing(DirectionPropertyType),
        Acceleration(MeasureType),
        Elevation(MeasureType),
        Status(StringOrRefType),
        StatusReference(ReferenceType),
    }
    impl AbstractGMLTrait for MovingObjectStatusType {}
    impl AbstractObjectTrait for MovingObjectStatusType {}
    impl AbstractTimeSliceTrait for MovingObjectStatusType {}
    impl xsd_parser::AsAny for MovingObjectStatusType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GeometricComplexType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<GeometricComplexTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GeometricComplexTypeContent {
        Content3(AbstractGMLContent3Type),
        Element(GeometricPrimitivePropertyType),
    }
    impl AbstractGMLTrait for GeometricComplexType {}
    impl AbstractGeometryTrait for GeometricComplexType {}
    impl AbstractObjectTrait for GeometricComplexType {}
    impl xsd_parser::AsAny for GeometricComplexType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CompositeCurveType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<CompositeCurveTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CompositeCurveTypeContent {
        Content3(AbstractGMLContent3Type),
        CurveMember(CurvePropertyType),
    }
    impl AbstractCurveTrait for CompositeCurveType {}
    impl AbstractGMLTrait for CompositeCurveType {}
    impl AbstractGeometricPrimitiveTrait for CompositeCurveType {}
    impl AbstractGeometryTrait for CompositeCurveType {}
    impl AbstractObjectTrait for CompositeCurveType {}
    impl xsd_parser::AsAny for CompositeCurveType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CompositeSurfaceType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<CompositeSurfaceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CompositeSurfaceTypeContent {
        Content3(AbstractGMLContent3Type),
        SurfaceMember(SurfacePropertyType),
    }
    impl AbstractGMLTrait for CompositeSurfaceType {}
    impl AbstractGeometricPrimitiveTrait for CompositeSurfaceType {}
    impl AbstractGeometryTrait for CompositeSurfaceType {}
    impl AbstractObjectTrait for CompositeSurfaceType {}
    impl AbstractSurfaceTrait for CompositeSurfaceType {}
    impl xsd_parser::AsAny for CompositeSurfaceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSolidType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub content: AbstractSolidTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractSolidTypeContent {
        Content3(AbstractGMLContent3Type),
    }
    impl AbstractGMLTrait for AbstractSolidType {}
    impl AbstractGeometricPrimitiveTrait for AbstractSolidType {}
    impl AbstractGeometryTrait for AbstractSolidType {}
    impl AbstractObjectTrait for AbstractSolidType {}
    impl xsd_parser::AsAny for AbstractSolidType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CompositeSolidType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<CompositeSolidTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CompositeSolidTypeContent {
        Content3(AbstractGMLContent3Type),
        SolidMember(SolidPropertyType),
    }
    impl AbstractGMLTrait for CompositeSolidType {}
    impl AbstractGeometricPrimitiveTrait for CompositeSolidType {}
    impl AbstractGeometryTrait for CompositeSolidType {}
    impl AbstractObjectTrait for CompositeSolidType {}
    impl AbstractSolidTrait for CompositeSolidType {}
    impl xsd_parser::AsAny for CompositeSolidType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GridType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub dimension: usize,
        pub content: [GridTypeContent; 3usize],
    }
    #[derive(Debug, Clone)]
    pub enum GridTypeContent {
        Content3(AbstractGMLContent3Type),
        Limits(GridLimitsType),
        Content5199(GridContent5199Type),
    }
    impl AbstractGMLTrait for GridType {}
    impl AbstractGeometryTrait for GridType {}
    impl AbstractImplicitGeometryTrait for GridType {}
    impl AbstractObjectTrait for GridType {}
    impl GridTrait for GridType {}
    impl xsd_parser::AsAny for GridType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RectifiedGridType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub dimension: usize,
        pub content: Vec<RectifiedGridTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RectifiedGridTypeContent {
        Content3(AbstractGMLContent3Type),
        Limits(GridLimitsType),
        Content5199(GridContent5199Type),
        Origin(PointPropertyType),
        OffsetVector(DirectPositionType),
    }
    impl AbstractGMLTrait for RectifiedGridType {}
    impl AbstractGeometryTrait for RectifiedGridType {}
    impl AbstractImplicitGeometryTrait for RectifiedGridType {}
    impl AbstractObjectTrait for RectifiedGridType {}
    impl GridTrait for RectifiedGridType {}
    impl xsd_parser::AsAny for RectifiedGridType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractGeometricAggregateType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub aggregation_type: Option<AggregationType>,
        pub content: AbstractGeometricAggregateTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractGeometricAggregateTypeContent {
        Content3(AbstractGMLContent3Type),
    }
    impl AbstractGMLTrait for AbstractGeometricAggregateType {}
    impl AbstractGeometryTrait for AbstractGeometricAggregateType {}
    impl AbstractObjectTrait for AbstractGeometricAggregateType {}
    impl xsd_parser::AsAny for AbstractGeometricAggregateType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MultiGeometryType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<MultiGeometryTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MultiGeometryTypeContent {
        Content3(AbstractGMLContent3Type),
        GeometryMember(GeometryPropertyType),
        GeometryMembers(GeometryArrayPropertyType),
    }
    impl AbstractGMLTrait for MultiGeometryType {}
    impl AbstractGeometricAggregateTrait for MultiGeometryType {}
    impl AbstractGeometryTrait for MultiGeometryType {}
    impl AbstractObjectTrait for MultiGeometryType {}
    impl xsd_parser::AsAny for MultiGeometryType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MultiPointType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<MultiPointTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MultiPointTypeContent {
        Content3(AbstractGMLContent3Type),
        PointMember(PointPropertyType),
        PointMembers(PointArrayPropertyType),
    }
    impl AbstractGMLTrait for MultiPointType {}
    impl AbstractGeometricAggregateTrait for MultiPointType {}
    impl AbstractGeometryTrait for MultiPointType {}
    impl AbstractObjectTrait for MultiPointType {}
    impl xsd_parser::AsAny for MultiPointType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MultiCurveType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<MultiCurveTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MultiCurveTypeContent {
        Content3(AbstractGMLContent3Type),
        CurveMember(CurvePropertyType),
        CurveMembers(CurveArrayPropertyType),
    }
    impl AbstractGMLTrait for MultiCurveType {}
    impl AbstractGeometricAggregateTrait for MultiCurveType {}
    impl AbstractGeometryTrait for MultiCurveType {}
    impl AbstractObjectTrait for MultiCurveType {}
    impl xsd_parser::AsAny for MultiCurveType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MultiSurfaceType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<MultiSurfaceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MultiSurfaceTypeContent {
        Content3(AbstractGMLContent3Type),
        SurfaceMember(SurfacePropertyType),
        SurfaceMembers(SurfaceArrayPropertyType),
    }
    impl AbstractGMLTrait for MultiSurfaceType {}
    impl AbstractGeometricAggregateTrait for MultiSurfaceType {}
    impl AbstractGeometryTrait for MultiSurfaceType {}
    impl AbstractObjectTrait for MultiSurfaceType {}
    impl xsd_parser::AsAny for MultiSurfaceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MultiSolidType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<MultiSolidTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MultiSolidTypeContent {
        Content3(AbstractGMLContent3Type),
        SolidMember(SolidPropertyType),
        SolidMembers(SolidArrayPropertyType),
    }
    impl AbstractGMLTrait for MultiSolidType {}
    impl AbstractGeometricAggregateTrait for MultiSolidType {}
    impl AbstractGeometryTrait for MultiSolidType {}
    impl AbstractObjectTrait for MultiSolidType {}
    impl xsd_parser::AsAny for MultiSolidType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CoordinateSystemAxisType {
        pub id: String,
        pub uom: String,
        pub content: Vec<CoordinateSystemAxisTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CoordinateSystemAxisTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        AxisAbbrev(CodeType),
        AxisDirection(CodeType),
        MinimumValue(f64),
        MaximumValue(f64),
        RangeMeaning(CodeType),
    }
    impl AbstractGMLTrait for CoordinateSystemAxisType {}
    impl AbstractObjectTrait for CoordinateSystemAxisType {}
    impl DefinitionTrait for CoordinateSystemAxisType {}
    impl xsd_parser::AsAny for CoordinateSystemAxisType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct EllipsoidalCSType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<EllipsoidalCSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum EllipsoidalCSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        Axis(Axis),
    }
    impl AbstractCoordinateSystemTrait for EllipsoidalCSType {}
    impl AbstractGMLTrait for EllipsoidalCSType {}
    impl AbstractObjectTrait for EllipsoidalCSType {}
    impl DefinitionTrait for EllipsoidalCSType {}
    impl xsd_parser::AsAny for EllipsoidalCSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CartesianCSType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<CartesianCSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CartesianCSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        Axis(Axis),
    }
    impl AbstractCoordinateSystemTrait for CartesianCSType {}
    impl AbstractGMLTrait for CartesianCSType {}
    impl AbstractObjectTrait for CartesianCSType {}
    impl DefinitionTrait for CartesianCSType {}
    impl xsd_parser::AsAny for CartesianCSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct VerticalCSType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<VerticalCSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum VerticalCSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        Axis(Axis),
    }
    impl AbstractCoordinateSystemTrait for VerticalCSType {}
    impl AbstractGMLTrait for VerticalCSType {}
    impl AbstractObjectTrait for VerticalCSType {}
    impl DefinitionTrait for VerticalCSType {}
    impl xsd_parser::AsAny for VerticalCSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TimeCSType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<TimeCSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeCSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        Axis(Axis),
    }
    impl AbstractCoordinateSystemTrait for TimeCSType {}
    impl AbstractGMLTrait for TimeCSType {}
    impl AbstractObjectTrait for TimeCSType {}
    impl DefinitionTrait for TimeCSType {}
    impl xsd_parser::AsAny for TimeCSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct LinearCSType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<LinearCSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum LinearCSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        Axis(Axis),
    }
    impl AbstractCoordinateSystemTrait for LinearCSType {}
    impl AbstractGMLTrait for LinearCSType {}
    impl AbstractObjectTrait for LinearCSType {}
    impl DefinitionTrait for LinearCSType {}
    impl xsd_parser::AsAny for LinearCSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct UserDefinedCSType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<UserDefinedCSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum UserDefinedCSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        Axis(Axis),
    }
    impl AbstractCoordinateSystemTrait for UserDefinedCSType {}
    impl AbstractGMLTrait for UserDefinedCSType {}
    impl AbstractObjectTrait for UserDefinedCSType {}
    impl DefinitionTrait for UserDefinedCSType {}
    impl xsd_parser::AsAny for UserDefinedCSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SphericalCSType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<SphericalCSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SphericalCSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        Axis(Axis),
    }
    impl AbstractCoordinateSystemTrait for SphericalCSType {}
    impl AbstractGMLTrait for SphericalCSType {}
    impl AbstractObjectTrait for SphericalCSType {}
    impl DefinitionTrait for SphericalCSType {}
    impl xsd_parser::AsAny for SphericalCSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct PolarCSType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<PolarCSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PolarCSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        Axis(Axis),
    }
    impl AbstractCoordinateSystemTrait for PolarCSType {}
    impl AbstractGMLTrait for PolarCSType {}
    impl AbstractObjectTrait for PolarCSType {}
    impl DefinitionTrait for PolarCSType {}
    impl xsd_parser::AsAny for PolarCSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CylindricalCSType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<CylindricalCSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CylindricalCSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        Axis(Axis),
    }
    impl AbstractCoordinateSystemTrait for CylindricalCSType {}
    impl AbstractGMLTrait for CylindricalCSType {}
    impl AbstractObjectTrait for CylindricalCSType {}
    impl DefinitionTrait for CylindricalCSType {}
    impl xsd_parser::AsAny for CylindricalCSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AffineCSType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<AffineCSTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AffineCSTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        Axis(Axis),
    }
    impl AbstractCoordinateSystemTrait for AffineCSType {}
    impl AbstractGMLTrait for AffineCSType {}
    impl AbstractObjectTrait for AffineCSType {}
    impl DefinitionTrait for AffineCSType {}
    impl xsd_parser::AsAny for AffineCSType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractDatumType {
        pub id: String,
        pub content: Vec<AbstractDatumTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractDatumTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
        AnchorDefinition(AnchorDefinition),
        RealizationEpoch(String),
    }
    impl AbstractGMLTrait for AbstractDatumType {}
    impl AbstractObjectTrait for AbstractDatumType {}
    impl DefinitionTrait for AbstractDatumType {}
    impl xsd_parser::AsAny for AbstractDatumType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GeodeticDatumType {
        pub id: String,
        pub content: Vec<GeodeticDatumTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GeodeticDatumTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
        AnchorDefinition(AnchorDefinition),
        RealizationEpoch(String),
        PrimeMeridian(PrimeMeridian),
        Ellipsoid(Ellipsoid),
    }
    impl AbstractDatumTrait for GeodeticDatumType {}
    impl AbstractGMLTrait for GeodeticDatumType {}
    impl AbstractObjectTrait for GeodeticDatumType {}
    impl DefinitionTrait for GeodeticDatumType {}
    impl xsd_parser::AsAny for GeodeticDatumType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct EllipsoidType {
        pub id: String,
        pub content: Vec<EllipsoidTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum EllipsoidTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        SemiMajorAxis(MeasureType),
        SecondDefiningParameter(SecondDefiningParameterElementType),
    }
    impl AbstractGMLTrait for EllipsoidType {}
    impl AbstractObjectTrait for EllipsoidType {}
    impl DefinitionTrait for EllipsoidType {}
    impl xsd_parser::AsAny for EllipsoidType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct PrimeMeridianType {
        pub id: String,
        pub content: Vec<PrimeMeridianTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PrimeMeridianTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        GreenwichLongitude(AngleType),
    }
    impl AbstractGMLTrait for PrimeMeridianType {}
    impl AbstractObjectTrait for PrimeMeridianType {}
    impl DefinitionTrait for PrimeMeridianType {}
    impl xsd_parser::AsAny for PrimeMeridianType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct EngineeringDatumType {
        pub id: String,
        pub content: Vec<EngineeringDatumTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum EngineeringDatumTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
        AnchorDefinition(AnchorDefinition),
        RealizationEpoch(String),
    }
    impl AbstractDatumTrait for EngineeringDatumType {}
    impl AbstractGMLTrait for EngineeringDatumType {}
    impl AbstractObjectTrait for EngineeringDatumType {}
    impl DefinitionTrait for EngineeringDatumType {}
    impl xsd_parser::AsAny for EngineeringDatumType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ImageDatumType {
        pub id: String,
        pub content: Vec<ImageDatumTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ImageDatumTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
        AnchorDefinition(AnchorDefinition),
        RealizationEpoch(String),
        PixelInCell(CodeType),
    }
    impl AbstractDatumTrait for ImageDatumType {}
    impl AbstractGMLTrait for ImageDatumType {}
    impl AbstractObjectTrait for ImageDatumType {}
    impl DefinitionTrait for ImageDatumType {}
    impl xsd_parser::AsAny for ImageDatumType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct VerticalDatumType {
        pub id: String,
        pub content: Vec<VerticalDatumTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum VerticalDatumTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
        AnchorDefinition(AnchorDefinition),
        RealizationEpoch(String),
    }
    impl AbstractDatumTrait for VerticalDatumType {}
    impl AbstractGMLTrait for VerticalDatumType {}
    impl AbstractObjectTrait for VerticalDatumType {}
    impl DefinitionTrait for VerticalDatumType {}
    impl xsd_parser::AsAny for VerticalDatumType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TemporalDatumType {
        pub id: String,
        pub content: Vec<TemporalDatumTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TemporalDatumTypeContent {
        Content3(AbstractGMLContent3Type),
        Identifier(CodeType),
        Scope(String),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Origin(String),
    }
    impl AbstractDatumTrait for TemporalDatumType {}
    impl AbstractGMLTrait for TemporalDatumType {}
    impl AbstractObjectTrait for TemporalDatumType {}
    impl DefinitionTrait for TemporalDatumType {}
    impl xsd_parser::AsAny for TemporalDatumType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ConcatenatedOperationType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<ConcatenatedOperationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ConcatenatedOperationTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
        OperationVersion(String),
        CoordinateOperationAccuracy(CoordinateOperationAccuracyElementType),
        SourceCRS(CrspropertyType),
        TargetCRS(CrspropertyType),
        CoordOperation(CoordOperation),
    }
    impl AbstractCoordinateOperationTrait for ConcatenatedOperationType {}
    impl AbstractGMLTrait for ConcatenatedOperationType {}
    impl AbstractObjectTrait for ConcatenatedOperationType {}
    impl DefinitionTrait for ConcatenatedOperationType {}
    impl xsd_parser::AsAny for ConcatenatedOperationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct PassThroughOperationType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<PassThroughOperationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PassThroughOperationTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        Scope(String),
        OperationVersion(String),
        CoordinateOperationAccuracy(CoordinateOperationAccuracyElementType),
        SourceCRS(CrspropertyType),
        TargetCRS(CrspropertyType),
        ModifiedCoordinate(usize),
        CoordOperation(CoordOperation),
    }
    impl AbstractCoordinateOperationTrait for PassThroughOperationType {}
    impl AbstractGMLTrait for PassThroughOperationType {}
    impl AbstractObjectTrait for PassThroughOperationType {}
    impl AbstractSingleOperationTrait for PassThroughOperationType {}
    impl DefinitionTrait for PassThroughOperationType {}
    impl xsd_parser::AsAny for PassThroughOperationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ConversionType {
        pub id: String,
        pub content: Vec<ConversionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ConversionTypeContent {
        Content3(AbstractGMLContent3Type),
        Identifier(CodeType),
        Scope(String),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        CoordinateOperationAccuracy(CoordinateOperationAccuracyElementType),
        Method(Method),
        ParameterValue(ParameterValue),
    }
    impl AbstractCoordinateOperationTrait for ConversionType {}
    impl AbstractGMLTrait for ConversionType {}
    impl AbstractGeneralConversionTrait for ConversionType {}
    impl AbstractObjectTrait for ConversionType {}
    impl AbstractOperationTrait for ConversionType {}
    impl AbstractSingleOperationTrait for ConversionType {}
    impl DefinitionTrait for ConversionType {}
    impl xsd_parser::AsAny for ConversionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TransformationType {
        pub id: String,
        pub content: Vec<TransformationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TransformationTypeContent {
        Content3(AbstractGMLContent3Type),
        Identifier(CodeType),
        Scope(String),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Name(CodeType),
        Remarks(String),
        DomainOfValidity(DomainOfValidityElementType),
        OperationVersion(String),
        CoordinateOperationAccuracy(CoordinateOperationAccuracyElementType),
        SourceCRS(CrspropertyType),
        TargetCRS(CrspropertyType),
        Method(Method),
        ParameterValue(ParameterValue),
    }
    impl AbstractCoordinateOperationTrait for TransformationType {}
    impl AbstractGMLTrait for TransformationType {}
    impl AbstractGeneralTransformationTrait for TransformationType {}
    impl AbstractObjectTrait for TransformationType {}
    impl AbstractOperationTrait for TransformationType {}
    impl AbstractSingleOperationTrait for TransformationType {}
    impl DefinitionTrait for TransformationType {}
    impl xsd_parser::AsAny for TransformationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct OperationMethodType {
        pub id: String,
        pub content: Vec<OperationMethodTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum OperationMethodTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        Content5310(OperationMethodContent5310Type),
        SourceDimensions(usize),
        TargetDimensions(usize),
        Parameter(Parameter),
    }
    impl AbstractGMLTrait for OperationMethodType {}
    impl AbstractObjectTrait for OperationMethodType {}
    impl DefinitionTrait for OperationMethodType {}
    impl xsd_parser::AsAny for OperationMethodType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractGeneralOperationParameterType {
        pub id: String,
        pub content: Vec<AbstractGeneralOperationParameterTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractGeneralOperationParameterTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        MinimumOccurs(usize),
    }
    impl AbstractGMLTrait for AbstractGeneralOperationParameterType {}
    impl AbstractObjectTrait for AbstractGeneralOperationParameterType {}
    impl DefinitionTrait for AbstractGeneralOperationParameterType {}
    impl xsd_parser::AsAny for AbstractGeneralOperationParameterType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct OperationParameterType {
        pub id: String,
        pub content: Vec<OperationParameterTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum OperationParameterTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        MinimumOccurs(usize),
    }
    impl AbstractGMLTrait for OperationParameterType {}
    impl AbstractGeneralOperationParameterTrait for OperationParameterType {}
    impl AbstractObjectTrait for OperationParameterType {}
    impl DefinitionTrait for OperationParameterType {}
    impl xsd_parser::AsAny for OperationParameterType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct OperationParameterGroupType {
        pub id: String,
        pub content: Vec<OperationParameterGroupTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum OperationParameterGroupTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        MinimumOccurs(usize),
        MaximumOccurs(usize),
        Parameter(Parameter),
    }
    impl AbstractGMLTrait for OperationParameterGroupType {}
    impl AbstractGeneralOperationParameterTrait for OperationParameterGroupType {}
    impl AbstractObjectTrait for OperationParameterGroupType {}
    impl DefinitionTrait for OperationParameterGroupType {}
    impl xsd_parser::AsAny for OperationParameterGroupType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTimeObjectType {
        pub id: String,
        pub content: AbstractTimeObjectTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractTimeObjectTypeContent {
        Content3(AbstractGMLContent3Type),
    }
    impl AbstractGMLTrait for AbstractTimeObjectType {}
    impl AbstractObjectTrait for AbstractTimeObjectType {}
    impl xsd_parser::AsAny for AbstractTimeObjectType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTimePrimitiveType {
        pub id: String,
        pub content: Vec<AbstractTimePrimitiveTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractTimePrimitiveTypeContent {
        Content3(AbstractGMLContent3Type),
        RelatedTime(RelatedTimeType),
    }
    impl AbstractGMLTrait for AbstractTimePrimitiveType {}
    impl AbstractObjectTrait for AbstractTimePrimitiveType {}
    impl AbstractTimeObjectTrait for AbstractTimePrimitiveType {}
    impl xsd_parser::AsAny for AbstractTimePrimitiveType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTimeTopologyPrimitiveType {
        pub id: String,
        pub content: Vec<AbstractTimeTopologyPrimitiveTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractTimeTopologyPrimitiveTypeContent {
        Content3(AbstractGMLContent3Type),
        RelatedTime(RelatedTimeType),
        Complex(ReferenceType),
    }
    impl AbstractGMLTrait for AbstractTimeTopologyPrimitiveType {}
    impl AbstractObjectTrait for AbstractTimeTopologyPrimitiveType {}
    impl AbstractTimeObjectTrait for AbstractTimeTopologyPrimitiveType {}
    impl AbstractTimePrimitiveTrait for AbstractTimeTopologyPrimitiveType {}
    impl xsd_parser::AsAny for AbstractTimeTopologyPrimitiveType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTimeComplexType {
        pub id: String,
        pub content: AbstractTimeComplexTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractTimeComplexTypeContent {
        Content3(AbstractGMLContent3Type),
    }
    impl AbstractGMLTrait for AbstractTimeComplexType {}
    impl AbstractObjectTrait for AbstractTimeComplexType {}
    impl AbstractTimeObjectTrait for AbstractTimeComplexType {}
    impl xsd_parser::AsAny for AbstractTimeComplexType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TimeTopologyComplexType {
        pub id: String,
        pub content: Vec<TimeTopologyComplexTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeTopologyComplexTypeContent {
        Content3(AbstractGMLContent3Type),
        Primitive(TimeTopologyPrimitivePropertyType),
    }
    impl AbstractGMLTrait for TimeTopologyComplexType {}
    impl AbstractObjectTrait for TimeTopologyComplexType {}
    impl AbstractTimeComplexTrait for TimeTopologyComplexType {}
    impl AbstractTimeObjectTrait for TimeTopologyComplexType {}
    impl xsd_parser::AsAny for TimeTopologyComplexType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TimeNodeType {
        pub id: String,
        pub content: Vec<TimeNodeTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeNodeTypeContent {
        Content3(AbstractGMLContent3Type),
        RelatedTime(RelatedTimeType),
        Complex(ReferenceType),
        PreviousEdge(TimeEdgePropertyType),
        NextEdge(TimeEdgePropertyType),
        Position(TimeInstantPropertyType),
    }
    impl AbstractGMLTrait for TimeNodeType {}
    impl AbstractObjectTrait for TimeNodeType {}
    impl AbstractTimeObjectTrait for TimeNodeType {}
    impl AbstractTimePrimitiveTrait for TimeNodeType {}
    impl AbstractTimeTopologyPrimitiveTrait for TimeNodeType {}
    impl xsd_parser::AsAny for TimeNodeType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TimeEdgeType {
        pub id: String,
        pub content: Vec<TimeEdgeTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeEdgeTypeContent {
        Content3(AbstractGMLContent3Type),
        RelatedTime(RelatedTimeType),
        Complex(ReferenceType),
        Start(TimeNodePropertyType),
        End(TimeNodePropertyType),
        Extent(TimePeriodPropertyType),
    }
    impl AbstractGMLTrait for TimeEdgeType {}
    impl AbstractObjectTrait for TimeEdgeType {}
    impl AbstractTimeObjectTrait for TimeEdgeType {}
    impl AbstractTimePrimitiveTrait for TimeEdgeType {}
    impl AbstractTimeTopologyPrimitiveTrait for TimeEdgeType {}
    impl xsd_parser::AsAny for TimeEdgeType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTimeGeometricPrimitiveType {
        pub id: String,
        pub frame: String,
        pub content: Vec<AbstractTimeGeometricPrimitiveTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractTimeGeometricPrimitiveTypeContent {
        Content3(AbstractGMLContent3Type),
        RelatedTime(RelatedTimeType),
    }
    impl AbstractGMLTrait for AbstractTimeGeometricPrimitiveType {}
    impl AbstractObjectTrait for AbstractTimeGeometricPrimitiveType {}
    impl AbstractTimeObjectTrait for AbstractTimeGeometricPrimitiveType {}
    impl AbstractTimePrimitiveTrait for AbstractTimeGeometricPrimitiveType {}
    impl xsd_parser::AsAny for AbstractTimeGeometricPrimitiveType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl AbstractTimeGeometricPrimitiveType {
        #[must_use]
        pub fn default_frame() -> String {
            String::from("#ISO-8601")
        }
    }
    #[derive(Debug, Clone)]
    pub struct TimeInstantType {
        pub id: String,
        pub frame: String,
        pub content: Vec<TimeInstantTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeInstantTypeContent {
        Content3(AbstractGMLContent3Type),
        RelatedTime(RelatedTimeType),
        TimePosition(TimePositionType),
    }
    impl AbstractGMLTrait for TimeInstantType {}
    impl AbstractObjectTrait for TimeInstantType {}
    impl AbstractTimeGeometricPrimitiveTrait for TimeInstantType {}
    impl AbstractTimeObjectTrait for TimeInstantType {}
    impl AbstractTimePrimitiveTrait for TimeInstantType {}
    impl xsd_parser::AsAny for TimeInstantType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl TimeInstantType {
        #[must_use]
        pub fn default_frame() -> String {
            String::from("#ISO-8601")
        }
    }
    #[derive(Debug, Clone)]
    pub struct TimePeriodType {
        pub id: String,
        pub frame: String,
        pub content: Vec<TimePeriodTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimePeriodTypeContent {
        Content3(AbstractGMLContent3Type),
        RelatedTime(RelatedTimeType),
        Content5621(TimePeriodContent5621Type),
        Content5624(TimePeriodContent5624Type),
        Content5627(TimePeriodContent5627Type),
    }
    impl AbstractGMLTrait for TimePeriodType {}
    impl AbstractObjectTrait for TimePeriodType {}
    impl AbstractTimeGeometricPrimitiveTrait for TimePeriodType {}
    impl AbstractTimeObjectTrait for TimePeriodType {}
    impl AbstractTimePrimitiveTrait for TimePeriodType {}
    impl xsd_parser::AsAny for TimePeriodType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl TimePeriodType {
        #[must_use]
        pub fn default_frame() -> String {
            String::from("#ISO-8601")
        }
    }
    #[derive(Debug, Clone)]
    pub struct LineStringType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub content: [LineStringTypeContent; 2usize],
    }
    #[derive(Debug, Clone)]
    pub enum LineStringTypeContent {
        Content3(AbstractGMLContent3Type),
        Content5640(LineStringContent5640Type),
    }
    impl AbstractCurveTrait for LineStringType {}
    impl AbstractGMLTrait for LineStringType {}
    impl AbstractGeometricPrimitiveTrait for LineStringType {}
    impl AbstractGeometryTrait for LineStringType {}
    impl AbstractObjectTrait for LineStringType {}
    impl xsd_parser::AsAny for LineStringType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct OrientableCurveType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub orientation: SignType,
        pub content: [OrientableCurveTypeContent; 2usize],
    }
    #[derive(Debug, Clone)]
    pub enum OrientableCurveTypeContent {
        Content3(AbstractGMLContent3Type),
        BaseCurve(CurvePropertyType),
    }
    impl AbstractCurveTrait for OrientableCurveType {}
    impl AbstractGMLTrait for OrientableCurveType {}
    impl AbstractGeometricPrimitiveTrait for OrientableCurveType {}
    impl AbstractGeometryTrait for OrientableCurveType {}
    impl AbstractObjectTrait for OrientableCurveType {}
    impl xsd_parser::AsAny for OrientableCurveType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl OrientableCurveType {
        #[must_use]
        pub fn default_orientation() -> SignType {
            SignType::Plus
        }
    }
    #[derive(Debug, Clone)]
    pub struct OrientableSurfaceType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub orientation: SignType,
        pub content: [OrientableSurfaceTypeContent; 2usize],
    }
    #[derive(Debug, Clone)]
    pub enum OrientableSurfaceTypeContent {
        Content3(AbstractGMLContent3Type),
        BaseSurface(SurfacePropertyType),
    }
    impl AbstractGMLTrait for OrientableSurfaceType {}
    impl AbstractGeometricPrimitiveTrait for OrientableSurfaceType {}
    impl AbstractGeometryTrait for OrientableSurfaceType {}
    impl AbstractObjectTrait for OrientableSurfaceType {}
    impl AbstractSurfaceTrait for OrientableSurfaceType {}
    impl xsd_parser::AsAny for OrientableSurfaceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl OrientableSurfaceType {
        #[must_use]
        pub fn default_orientation() -> SignType {
            SignType::Plus
        }
    }
    #[derive(Debug, Clone)]
    pub struct TinType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub content: Vec<TinTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TinTypeContent {
        Content3(AbstractGMLContent3Type),
        Patches(Patches),
        StopLines(LineStringSegmentArrayPropertyType),
        BreakLines(LineStringSegmentArrayPropertyType),
        MaxLength(LengthType),
        ControlPoint(TinTypeControlPointElementType),
    }
    impl AbstractGMLTrait for TinType {}
    impl AbstractGeometricPrimitiveTrait for TinType {}
    impl AbstractGeometryTrait for TinType {}
    impl AbstractObjectTrait for TinType {}
    impl AbstractSurfaceTrait for TinType {}
    impl SurfaceTrait for TinType {}
    impl TriangulatedSurfaceTrait for TinType {}
    impl xsd_parser::AsAny for TinType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SolidType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub content: Vec<SolidTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SolidTypeContent {
        Content3(AbstractGMLContent3Type),
        Exterior(ShellPropertyType),
        Interior(ShellPropertyType),
    }
    impl AbstractGMLTrait for SolidType {}
    impl AbstractGeometricPrimitiveTrait for SolidType {}
    impl AbstractGeometryTrait for SolidType {}
    impl AbstractObjectTrait for SolidType {}
    impl AbstractSolidTrait for SolidType {}
    impl xsd_parser::AsAny for SolidType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct PolygonType {
        pub id: String,
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub content: Vec<PolygonTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PolygonTypeContent {
        Content3(AbstractGMLContent3Type),
        Exterior(AbstractRingPropertyType),
        Interior(AbstractRingPropertyType),
    }
    impl AbstractGMLTrait for PolygonType {}
    impl AbstractGeometricPrimitiveTrait for PolygonType {}
    impl AbstractGeometryTrait for PolygonType {}
    impl AbstractObjectTrait for PolygonType {}
    impl AbstractSurfaceTrait for PolygonType {}
    impl xsd_parser::AsAny for PolygonType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct UnitDefinitionType {
        pub id: String,
        pub content: Vec<UnitDefinitionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum UnitDefinitionTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        QuantityType(StringOrRefType),
        QuantityTypeReference(ReferenceType),
        CatalogSymbol(CodeType),
    }
    impl AbstractGMLTrait for UnitDefinitionType {}
    impl AbstractObjectTrait for UnitDefinitionType {}
    impl DefinitionTrait for UnitDefinitionType {}
    impl UnitDefinitionTrait for UnitDefinitionType {}
    impl xsd_parser::AsAny for UnitDefinitionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct BaseUnitType {
        pub id: String,
        pub content: Vec<BaseUnitTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum BaseUnitTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        QuantityType(StringOrRefType),
        QuantityTypeReference(ReferenceType),
        CatalogSymbol(CodeType),
        UnitsSystem(ReferenceType),
    }
    impl AbstractGMLTrait for BaseUnitType {}
    impl AbstractObjectTrait for BaseUnitType {}
    impl DefinitionTrait for BaseUnitType {}
    impl UnitDefinitionTrait for BaseUnitType {}
    impl xsd_parser::AsAny for BaseUnitType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DerivedUnitType {
        pub id: String,
        pub content: Vec<DerivedUnitTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DerivedUnitTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        QuantityType(StringOrRefType),
        QuantityTypeReference(ReferenceType),
        CatalogSymbol(CodeType),
        DerivationUnitTerm(DerivationUnitTermType),
    }
    impl AbstractGMLTrait for DerivedUnitType {}
    impl AbstractObjectTrait for DerivedUnitType {}
    impl DefinitionTrait for DerivedUnitType {}
    impl UnitDefinitionTrait for DerivedUnitType {}
    impl xsd_parser::AsAny for DerivedUnitType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ConventionalUnitType {
        pub id: String,
        pub content: Vec<ConventionalUnitTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ConventionalUnitTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        QuantityType(StringOrRefType),
        QuantityTypeReference(ReferenceType),
        CatalogSymbol(CodeType),
        Content5948(ConventionalUnitContent5948Type),
        DerivationUnitTerm(DerivationUnitTermType),
    }
    impl AbstractGMLTrait for ConventionalUnitType {}
    impl AbstractObjectTrait for ConventionalUnitType {}
    impl DefinitionTrait for ConventionalUnitType {}
    impl UnitDefinitionTrait for ConventionalUnitType {}
    impl xsd_parser::AsAny for ConventionalUnitType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct BoundingShapeType {
        pub nil_reason: Option<NilReasonType>,
        pub content: BoundingShapeTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum BoundingShapeTypeContent {
        Content5149(BoundingShapeContent5149Type),
    }
    #[derive(Debug, Clone)]
    pub struct Location(pub Box<dyn LocationTrait>);
    pub trait LocationTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct TimePrimitivePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<TimePrimitivePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimePrimitivePropertyTypeContent {
        AbstractTimePrimitive(AbstractTimePrimitive),
    }
    impl TimePrimitivePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct History(pub Box<dyn HistoryTrait>);
    pub trait HistoryTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct StringOrRefType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: String,
    }
    #[derive(Debug, Clone)]
    pub struct ReferenceType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl ReferenceType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct DynamicFeature(pub Box<dyn DynamicFeatureTrait>);
    pub trait DynamicFeatureTrait: AbstractFeatureTrait {}
    #[derive(Debug, Clone)]
    pub struct DynamicFeatureMemberType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Vec<DynamicFeatureMemberTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DynamicFeatureMemberTypeContent {
        DynamicFeature(DynamicFeature),
    }
    impl DynamicFeatureMemberType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct DomainSet(pub Box<dyn DomainSetTrait>);
    pub trait DomainSetTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub enum RangeSetType {
        ValueArray(ValueArrayType),
        AbstractScalarValueList(AbstractScalarValueList),
        DataBlock(DataBlockType),
        File(FileType),
    }
    #[derive(Debug, Clone)]
    pub enum CoverageFunctionType {
        MappingRule(StringOrRefType),
        CoverageMappingRule(MappingRuleType),
        GridFunction(GridFunctionType),
    }
    impl AbstractObjectTrait for CoverageFunctionType {}
    impl xsd_parser::AsAny for CoverageFunctionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractCoverage(pub Box<dyn AbstractCoverageTrait>);
    pub trait AbstractCoverageTrait: AbstractFeatureTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractDiscreteCoverage(pub Box<dyn AbstractDiscreteCoverageTrait>);
    pub trait AbstractDiscreteCoverageTrait: AbstractCoverageTrait {}
    #[derive(Debug, Clone)]
    pub struct ProcedurePropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<ProcedurePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ProcedurePropertyTypeContent {
        AbstractFeature(AbstractFeature),
    }
    impl ProcedurePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct Target(pub Box<dyn TargetTrait>);
    pub trait TargetTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct ResultType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl ResultType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct Observation(pub Box<dyn ObservationTrait>);
    pub trait ObservationTrait: AbstractFeatureTrait {}
    #[derive(Debug, Clone)]
    pub struct DirectionPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<DirectionPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DirectionPropertyTypeContent {
        DirectionVector(DirectionVectorType),
        DirectionDescription(DirectionDescriptionType),
        CompassPoint(CompassPointEnumerationType),
        DirectionKeyword(CodeType),
        DirectionString(StringOrRefType),
    }
    impl DirectionPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct DirectedObservation(pub Box<dyn DirectedObservationTrait>);
    pub trait DirectedObservationTrait: ObservationTrait {}
    #[derive(Debug, Clone)]
    pub struct MeasureType {
        pub uom: String,
        pub content: f64,
    }
    impl gco::MeasureTrait for MeasureType {}
    impl xsd_parser::AsAny for MeasureType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct FeaturePropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<FeaturePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FeaturePropertyTypeContent {
        AbstractFeature(AbstractFeature),
    }
    impl FeaturePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum FeatureArrayPropertyType {
        AbstractFeature(AbstractFeature),
    }
    #[derive(Debug, Clone)]
    pub struct MetaDataPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub about: Option<String>,
        pub content: Option<MetaDataPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MetaDataPropertyTypeContent {
        AbstractMetaData(AbstractMetaData),
    }
    #[derive(Debug, Clone)]
    pub struct CodeType {
        pub code_space: Option<String>,
        pub content: String,
    }
    impl AnchorDefinitionTrait for CodeType {}
    impl FormulaTrait for CodeType {}
    impl gco::AbstractGenericNameTrait for CodeType {}
    impl xsd_parser::AsAny for CodeType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum DataBlockType {
        RangeParameters(AssociationRoleType),
        Content4966(DataBlockContent4966Type),
    }
    impl AbstractObjectTrait for DataBlockType {}
    impl xsd_parser::AsAny for DataBlockType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum FileType {
        RangeParameters(AssociationRoleType),
        Content4968(FileContent4968Type),
        FileStructure(CodeType),
        MimeType(String),
        Compression(String),
    }
    impl AbstractObjectTrait for FileType {}
    impl xsd_parser::AsAny for FileType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum MappingRuleType {
        RuleDefinition(String),
        RuleReference(ReferenceType),
    }
    impl AbstractObjectTrait for MappingRuleType {}
    impl xsd_parser::AsAny for MappingRuleType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum GridFunctionType {
        SequenceRule(SequenceRuleType),
        StartPoint(IntegerListType),
    }
    impl AbstractObjectTrait for GridFunctionType {}
    impl xsd_parser::AsAny for GridFunctionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractMetaDataType {
        pub id: Option<String>,
    }
    impl AbstractObjectTrait for AbstractMetaDataType {}
    impl xsd_parser::AsAny for AbstractMetaDataType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GenericMetaDataType {
        pub id: Option<String>,
    }
    impl AbstractMetaDataTrait for GenericMetaDataType {}
    impl AbstractObjectTrait for GenericMetaDataType {}
    impl xsd_parser::AsAny for GenericMetaDataType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct EnvelopeType {
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub content: Vec<EnvelopeTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum EnvelopeTypeContent {
        Content5151(EnvelopeContent5151Type),
        Pos(DirectPositionType),
        Coordinates(CoordinatesType),
    }
    impl AbstractObjectTrait for EnvelopeType {}
    impl EnvelopeTrait for EnvelopeType {}
    impl xsd_parser::AsAny for EnvelopeType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct EnvelopeWithTimePeriodType {
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub frame: String,
        pub content: Vec<EnvelopeWithTimePeriodTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum EnvelopeWithTimePeriodTypeContent {
        Content5151(EnvelopeContent5151Type),
        Pos(DirectPositionType),
        Coordinates(CoordinatesType),
        Content5155(EnvelopeWithTimePeriodContent5155Type),
    }
    impl AbstractObjectTrait for EnvelopeWithTimePeriodType {}
    impl EnvelopeTrait for EnvelopeWithTimePeriodType {}
    impl xsd_parser::AsAny for EnvelopeWithTimePeriodType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl EnvelopeWithTimePeriodType {
        #[must_use]
        pub fn default_frame() -> String {
            String::from("#ISO-8601")
        }
    }
    #[derive(Debug, Clone)]
    pub struct BooleanElementType {
        pub nil_reason: Option<NilReasonType>,
        pub content: bool,
    }
    impl AbstractObjectTrait for BooleanElementType {}
    impl AbstractScalarValueTrait for BooleanElementType {}
    impl AbstractValueTrait for BooleanElementType {}
    impl xsd_parser::AsAny for BooleanElementType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone, Default)]
    pub struct BooleanOrNilReasonListType(pub Vec<BooleanOrNilReasonType>);
    impl AbstractObjectTrait for BooleanOrNilReasonListType {}
    impl AbstractScalarValueListTrait for BooleanOrNilReasonListType {}
    impl AbstractValueTrait for BooleanOrNilReasonListType {}
    impl xsd_parser::AsAny for BooleanOrNilReasonListType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CategoryElementType {
        pub code_space: Option<String>,
        pub nil_reason: Option<NilReasonType>,
        pub content: String,
    }
    impl AbstractObjectTrait for CategoryElementType {}
    impl AbstractScalarValueTrait for CategoryElementType {}
    impl AbstractValueTrait for CategoryElementType {}
    impl xsd_parser::AsAny for CategoryElementType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CodeOrNilReasonListType {
        pub code_space: Option<String>,
        pub content: NameOrNilReasonListType,
    }
    impl AbstractObjectTrait for CodeOrNilReasonListType {}
    impl AbstractScalarValueListTrait for CodeOrNilReasonListType {}
    impl AbstractValueTrait for CodeOrNilReasonListType {}
    impl xsd_parser::AsAny for CodeOrNilReasonListType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CountElementType {
        pub nil_reason: Option<NilReasonType>,
        pub content: i32,
    }
    impl AbstractObjectTrait for CountElementType {}
    impl AbstractScalarValueTrait for CountElementType {}
    impl AbstractValueTrait for CountElementType {}
    impl xsd_parser::AsAny for CountElementType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone, Default)]
    pub struct IntegerOrNilReasonListType(pub Vec<IntegerOrNilReasonType>);
    impl AbstractObjectTrait for IntegerOrNilReasonListType {}
    impl AbstractScalarValueListTrait for IntegerOrNilReasonListType {}
    impl AbstractValueTrait for IntegerOrNilReasonListType {}
    impl xsd_parser::AsAny for IntegerOrNilReasonListType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct QuantityElementType {
        pub uom: String,
        pub nil_reason: Option<NilReasonType>,
        pub content: f64,
    }
    impl AbstractObjectTrait for QuantityElementType {}
    impl AbstractScalarValueTrait for QuantityElementType {}
    impl AbstractValueTrait for QuantityElementType {}
    impl xsd_parser::AsAny for QuantityElementType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MeasureOrNilReasonListType {
        pub uom: String,
        pub content: DoubleOrNilReasonListType,
    }
    impl AbstractObjectTrait for MeasureOrNilReasonListType {}
    impl AbstractScalarValueListTrait for MeasureOrNilReasonListType {}
    impl AbstractValueTrait for MeasureOrNilReasonListType {}
    impl xsd_parser::AsAny for MeasureOrNilReasonListType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CompositeValueType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<CompositeValueTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CompositeValueTypeContent {
        Content3(AbstractGMLContent3Type),
        ValueComponent(ValuePropertyType),
        ValueComponents(ValueArrayPropertyType),
    }
    impl AbstractObjectTrait for CompositeValueType {}
    impl AbstractValueTrait for CompositeValueType {}
    impl CompositeValueTrait for CompositeValueType {}
    impl xsd_parser::AsAny for CompositeValueType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ValueArrayType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub code_space: Option<String>,
        pub uom: Option<String>,
        pub content: Vec<ValueArrayTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ValueArrayTypeContent {
        Content3(AbstractGMLContent3Type),
        ValueComponent(ValuePropertyType),
        ValueComponents(ValueArrayPropertyType),
    }
    impl AbstractObjectTrait for ValueArrayType {}
    impl AbstractValueTrait for ValueArrayType {}
    impl CompositeValueTrait for ValueArrayType {}
    impl xsd_parser::AsAny for ValueArrayType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone, Default)]
    pub struct CountExtentType(pub Vec<IntegerOrNilReasonType>);
    impl AbstractObjectTrait for CountExtentType {}
    impl AbstractValueTrait for CountExtentType {}
    impl xsd_parser::AsAny for CountExtentType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractGeneralParameterValueType {}
    impl AbstractObjectTrait for AbstractGeneralParameterValueType {}
    impl xsd_parser::AsAny for AbstractGeneralParameterValueType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum ParameterValueType {
        Content5306(ParameterValueContent5306Type),
        OperationParameter(OperationParameter),
    }
    impl AbstractGeneralParameterValueTrait for ParameterValueType {}
    impl AbstractObjectTrait for ParameterValueType {}
    impl xsd_parser::AsAny for ParameterValueType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum ParameterValueGroupType {
        ParameterValue(ParameterValue),
        Group(Group),
    }
    impl AbstractGeneralParameterValueTrait for ParameterValueGroupType {}
    impl AbstractObjectTrait for ParameterValueGroupType {}
    impl xsd_parser::AsAny for ParameterValueGroupType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractCurveSegmentType {
        pub num_derivatives_at_start: i32,
        pub num_derivatives_at_end: i32,
        pub num_derivative_interior: i32,
    }
    impl AbstractObjectTrait for AbstractCurveSegmentType {}
    impl xsd_parser::AsAny for AbstractCurveSegmentType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl AbstractCurveSegmentType {
        #[must_use]
        pub fn default_num_derivatives_at_start() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivatives_at_end() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivative_interior() -> i32 {
            0i32
        }
    }
    #[derive(Debug, Clone)]
    pub struct LineStringSegmentType {
        pub num_derivatives_at_start: i32,
        pub num_derivatives_at_end: i32,
        pub num_derivative_interior: i32,
        pub interpolation: Option<CurveInterpolationType>,
        pub content: LineStringSegmentTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum LineStringSegmentTypeContent {
        Content5646(LineStringSegmentContent5646Type),
    }
    impl AbstractCurveSegmentTrait for LineStringSegmentType {}
    impl AbstractObjectTrait for LineStringSegmentType {}
    impl xsd_parser::AsAny for LineStringSegmentType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl LineStringSegmentType {
        #[must_use]
        pub fn default_num_derivatives_at_start() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivatives_at_end() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivative_interior() -> i32 {
            0i32
        }
    }
    #[derive(Debug, Clone)]
    pub struct ArcStringType {
        pub num_derivatives_at_start: i32,
        pub num_derivatives_at_end: i32,
        pub num_derivative_interior: i32,
        pub interpolation: Option<CurveInterpolationType>,
        pub num_arc: Option<i32>,
        pub content: ArcStringTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ArcStringTypeContent {
        Content5649(ArcStringContent5649Type),
    }
    impl AbstractCurveSegmentTrait for ArcStringType {}
    impl AbstractObjectTrait for ArcStringType {}
    impl ArcTrait for ArcStringType {}
    impl ArcStringTrait for ArcStringType {}
    impl xsd_parser::AsAny for ArcStringType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl ArcStringType {
        #[must_use]
        pub fn default_num_derivatives_at_start() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivatives_at_end() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivative_interior() -> i32 {
            0i32
        }
    }
    #[derive(Debug, Clone)]
    pub struct CircleType {
        pub num_derivatives_at_start: i32,
        pub num_derivatives_at_end: i32,
        pub num_derivative_interior: i32,
        pub interpolation: Option<CurveInterpolationType>,
        pub num_arc: Option<i32>,
        pub content: [CircleTypeContent; 2usize],
    }
    #[derive(Debug, Clone)]
    pub enum CircleTypeContent {
        Content5649(ArcStringContent5649Type),
        Content5653(ArcContent5653Type),
    }
    impl AbstractCurveSegmentTrait for CircleType {}
    impl AbstractObjectTrait for CircleType {}
    impl ArcTrait for CircleType {}
    impl ArcStringTrait for CircleType {}
    impl xsd_parser::AsAny for CircleType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl CircleType {
        #[must_use]
        pub fn default_num_derivatives_at_start() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivatives_at_end() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivative_interior() -> i32 {
            0i32
        }
    }
    #[derive(Debug, Clone)]
    pub struct ArcStringByBulgeType {
        pub num_derivatives_at_start: i32,
        pub num_derivatives_at_end: i32,
        pub num_derivative_interior: i32,
        pub interpolation: Option<CurveInterpolationType>,
        pub num_arc: Option<i32>,
        pub content: Vec<ArcStringByBulgeTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ArcStringByBulgeTypeContent {
        Content5657(ArcStringByBulgeContent5657Type),
        Bulge(f64),
        Normal(DirectPositionType),
    }
    impl AbstractCurveSegmentTrait for ArcStringByBulgeType {}
    impl AbstractObjectTrait for ArcStringByBulgeType {}
    impl ArcStringByBulgeTrait for ArcStringByBulgeType {}
    impl xsd_parser::AsAny for ArcStringByBulgeType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl ArcStringByBulgeType {
        #[must_use]
        pub fn default_num_derivatives_at_start() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivatives_at_end() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivative_interior() -> i32 {
            0i32
        }
    }
    #[derive(Debug, Clone)]
    pub struct ArcByCenterPointType {
        pub num_derivatives_at_start: i32,
        pub num_derivatives_at_end: i32,
        pub num_derivative_interior: i32,
        pub interpolation: Option<CurveInterpolationType>,
        pub num_arc: i32,
        pub content: Vec<ArcByCenterPointTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ArcByCenterPointTypeContent {
        Content5668(ArcByCenterPointContent5668Type),
        Radius(LengthType),
        StartAngle(AngleType),
        EndAngle(AngleType),
    }
    impl AbstractCurveSegmentTrait for ArcByCenterPointType {}
    impl AbstractObjectTrait for ArcByCenterPointType {}
    impl ArcByCenterPointTrait for ArcByCenterPointType {}
    impl xsd_parser::AsAny for ArcByCenterPointType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl ArcByCenterPointType {
        #[must_use]
        pub fn default_num_derivatives_at_start() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivatives_at_end() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivative_interior() -> i32 {
            0i32
        }
    }
    #[derive(Debug, Clone)]
    pub struct CubicSplineType {
        pub num_derivatives_at_start: i32,
        pub num_derivatives_at_end: i32,
        pub num_derivative_interior: i32,
        pub interpolation: Option<CurveInterpolationType>,
        pub degree: Option<i32>,
        pub content: [CubicSplineTypeContent; 3usize],
    }
    #[derive(Debug, Clone)]
    pub enum CubicSplineTypeContent {
        Content5679(CubicSplineContent5679Type),
        VectorAtStart(DirectPositionType),
        VectorAtEnd(DirectPositionType),
    }
    impl AbstractCurveSegmentTrait for CubicSplineType {}
    impl AbstractObjectTrait for CubicSplineType {}
    impl xsd_parser::AsAny for CubicSplineType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl CubicSplineType {
        #[must_use]
        pub fn default_num_derivatives_at_start() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivatives_at_end() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivative_interior() -> i32 {
            0i32
        }
    }
    #[derive(Debug, Clone)]
    pub struct BsplineType {
        pub num_derivatives_at_start: i32,
        pub num_derivatives_at_end: i32,
        pub num_derivative_interior: i32,
        pub interpolation: CurveInterpolationType,
        pub is_polynomial: Option<bool>,
        pub knot_type: Option<KnotTypesType>,
        pub content: Vec<BsplineTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum BsplineTypeContent {
        Content5684(BsplineContent5684Type),
        Degree(usize),
        Knot(KnotPropertyType),
    }
    impl AbstractCurveSegmentTrait for BsplineType {}
    impl AbstractObjectTrait for BsplineType {}
    impl BsplineTrait for BsplineType {}
    impl xsd_parser::AsAny for BsplineType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl BsplineType {
        #[must_use]
        pub fn default_num_derivatives_at_start() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivatives_at_end() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivative_interior() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_interpolation() -> CurveInterpolationType {
            CurveInterpolationType::PolynomialSpline
        }
    }
    #[derive(Debug, Clone)]
    pub struct OffsetCurveType {
        pub num_derivatives_at_start: i32,
        pub num_derivatives_at_end: i32,
        pub num_derivative_interior: i32,
        pub content: Vec<OffsetCurveTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum OffsetCurveTypeContent {
        OffsetBase(CurvePropertyType),
        Distance(LengthType),
        RefDirection(DirectPositionType),
    }
    impl AbstractCurveSegmentTrait for OffsetCurveType {}
    impl AbstractObjectTrait for OffsetCurveType {}
    impl xsd_parser::AsAny for OffsetCurveType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl OffsetCurveType {
        #[must_use]
        pub fn default_num_derivatives_at_start() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivatives_at_end() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivative_interior() -> i32 {
            0i32
        }
    }
    #[derive(Debug, Clone)]
    pub enum AffinePlacementType {
        Location(DirectPositionType),
        RefDirection(DirectPositionType),
        InDimension(usize),
        OutDimension(usize),
    }
    impl AbstractObjectTrait for AffinePlacementType {}
    impl xsd_parser::AsAny for AffinePlacementType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ClothoidType {
        pub num_derivatives_at_start: i32,
        pub num_derivatives_at_end: i32,
        pub num_derivative_interior: i32,
        pub interpolation: Option<CurveInterpolationType>,
        pub content: [ClothoidTypeContent; 4usize],
    }
    #[derive(Debug, Clone)]
    pub enum ClothoidTypeContent {
        RefLocation(ClothoidTypeRefLocationElementType),
        ScaleFactor(f64),
        StartParameter(f64),
        EndParameter(f64),
    }
    impl AbstractCurveSegmentTrait for ClothoidType {}
    impl AbstractObjectTrait for ClothoidType {}
    impl xsd_parser::AsAny for ClothoidType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl ClothoidType {
        #[must_use]
        pub fn default_num_derivatives_at_start() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivatives_at_end() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivative_interior() -> i32 {
            0i32
        }
    }
    #[derive(Debug, Clone)]
    pub struct GeodesicStringType {
        pub num_derivatives_at_start: i32,
        pub num_derivatives_at_end: i32,
        pub num_derivative_interior: i32,
        pub interpolation: Option<CurveInterpolationType>,
        pub content: Vec<GeodesicStringTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GeodesicStringTypeContent {
        PosList(DirectPositionListType),
        Content5716(GeodesicStringContent5716Type),
    }
    impl AbstractCurveSegmentTrait for GeodesicStringType {}
    impl AbstractObjectTrait for GeodesicStringType {}
    impl GeodesicStringTrait for GeodesicStringType {}
    impl xsd_parser::AsAny for GeodesicStringType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl GeodesicStringType {
        #[must_use]
        pub fn default_num_derivatives_at_start() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivatives_at_end() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivative_interior() -> i32 {
            0i32
        }
    }
    #[derive(Debug, Clone)]
    pub struct GeodesicType {
        pub num_derivatives_at_start: i32,
        pub num_derivatives_at_end: i32,
        pub num_derivative_interior: i32,
        pub interpolation: Option<CurveInterpolationType>,
        pub content: Vec<GeodesicTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GeodesicTypeContent {
        PosList(DirectPositionListType),
        Content5716(GeodesicStringContent5716Type),
    }
    impl AbstractCurveSegmentTrait for GeodesicType {}
    impl AbstractObjectTrait for GeodesicType {}
    impl GeodesicStringTrait for GeodesicType {}
    impl xsd_parser::AsAny for GeodesicType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl GeodesicType {
        #[must_use]
        pub fn default_num_derivatives_at_start() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivatives_at_end() -> i32 {
            0i32
        }
        #[must_use]
        pub fn default_num_derivative_interior() -> i32 {
            0i32
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractRingType {}
    impl AbstractObjectTrait for AbstractRingType {}
    impl xsd_parser::AsAny for AbstractRingType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RingType {
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<RingTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RingTypeContent {
        CurveMember(CurvePropertyType),
    }
    impl AbstractObjectTrait for RingType {}
    impl AbstractRingTrait for RingType {}
    impl xsd_parser::AsAny for RingType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ShellType {
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<ShellTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ShellTypeContent {
        SurfaceMember(SurfacePropertyType),
    }
    impl AbstractObjectTrait for ShellType {}
    impl xsd_parser::AsAny for ShellType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum LinearRingType {
        Content5935(LinearRingContent5935Type),
    }
    impl AbstractObjectTrait for LinearRingType {}
    impl AbstractRingTrait for LinearRingType {}
    impl xsd_parser::AsAny for LinearRingType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTimeSlice(pub Box<dyn AbstractTimeSliceTrait>);
    pub trait AbstractTimeSliceTrait: AbstractGMLTrait {}
    #[derive(Debug, Clone, Default)]
    pub struct NcnameListType(pub Vec<xs::NcnameType>);
    #[derive(Debug, Clone)]
    pub struct AbstractGeometry(pub Box<dyn AbstractGeometryTrait>);
    pub trait AbstractGeometryTrait: AbstractGMLTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractGeometricPrimitive(pub Box<dyn AbstractGeometricPrimitiveTrait>);
    pub trait AbstractGeometricPrimitiveTrait: AbstractGeometryTrait {}
    #[derive(Debug, Clone)]
    pub enum CurveSegmentArrayPropertyType {
        AbstractCurveSegment(AbstractCurveSegment),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractCurve(pub Box<dyn AbstractCurveTrait>);
    pub trait AbstractCurveTrait: AbstractGeometricPrimitiveTrait {}
    #[derive(Debug, Clone)]
    pub struct Curve(pub Box<dyn CurveTrait>);
    pub trait CurveTrait: AbstractCurveTrait {}
    #[derive(Debug, Clone)]
    pub enum PointContent1425Type {
        Pos(DirectPositionType),
        Coordinates(CoordinatesType),
    }
    #[derive(Debug, Clone)]
    pub struct Point(pub Box<dyn PointTrait>);
    pub trait PointTrait: AbstractGeometricPrimitiveTrait {}
    #[derive(Debug, Clone)]
    pub struct Patches(pub Box<dyn PatchesTrait>);
    pub trait PatchesTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct AbstractSurface(pub Box<dyn AbstractSurfaceTrait>);
    pub trait AbstractSurfaceTrait: AbstractGeometricPrimitiveTrait {}
    #[derive(Debug, Clone)]
    pub struct Surface(pub Box<dyn SurfaceTrait>);
    pub trait SurfaceTrait: AbstractSurfaceTrait {}
    #[derive(Debug, Clone)]
    pub struct TriangulatedSurface(pub Box<dyn TriangulatedSurfaceTrait>);
    pub trait TriangulatedSurfaceTrait: SurfaceTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractTopology(pub Box<dyn AbstractTopologyTrait>);
    pub trait AbstractTopologyTrait: AbstractGMLTrait {}
    #[derive(Debug, Clone)]
    pub struct FaceOrTopoSolidPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<FaceOrTopoSolidPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FaceOrTopoSolidPropertyTypeContent {
        Face(FaceType),
        TopoSolid(TopoSolidType),
    }
    impl FaceOrTopoSolidPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct DirectedEdgePropertyType {
        pub orientation: SignType,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<DirectedEdgePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DirectedEdgePropertyTypeContent {
        Edge(EdgeType),
    }
    impl DirectedEdgePropertyType {
        #[must_use]
        pub fn default_orientation() -> SignType {
            SignType::Plus
        }
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct PointPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<PointPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PointPropertyTypeContent {
        Point(Point),
    }
    impl PointPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum AggregationType {
        Set,
        Bag,
        Sequence,
        Array,
        Record,
        Table,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTopoPrimitive(pub Box<dyn AbstractTopoPrimitiveTrait>);
    pub trait AbstractTopoPrimitiveTrait: AbstractTopologyTrait {}
    #[derive(Debug, Clone)]
    pub struct TopoSolidPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<TopoSolidPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TopoSolidPropertyTypeContent {
        TopoSolid(TopoSolidType),
    }
    impl TopoSolidPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct DirectedNodePropertyType {
        pub orientation: SignType,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<DirectedNodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DirectedNodePropertyTypeContent {
        Node(NodeType),
    }
    impl DirectedNodePropertyType {
        #[must_use]
        pub fn default_orientation() -> SignType {
            SignType::Plus
        }
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct DirectedFacePropertyType {
        pub orientation: SignType,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<DirectedFacePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DirectedFacePropertyTypeContent {
        Face(FaceType),
    }
    impl DirectedFacePropertyType {
        #[must_use]
        pub fn default_orientation() -> SignType {
            SignType::Plus
        }
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct CurvePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<CurvePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CurvePropertyTypeContent {
        AbstractCurve(AbstractCurve),
    }
    impl CurvePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct NodePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<NodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NodePropertyTypeContent {
        Node(NodeType),
    }
    impl NodePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct DirectedTopoSolidPropertyType {
        pub orientation: SignType,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<DirectedTopoSolidPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DirectedTopoSolidPropertyTypeContent {
        TopoSolid(TopoSolidType),
    }
    impl DirectedTopoSolidPropertyType {
        #[must_use]
        pub fn default_orientation() -> SignType {
            SignType::Plus
        }
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct SurfacePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<SurfacePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SurfacePropertyTypeContent {
        AbstractSurface(AbstractSurface),
    }
    impl SurfacePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct NodeOrEdgePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<NodeOrEdgePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum NodeOrEdgePropertyTypeContent {
        Node(NodeType),
        Edge(EdgeType),
    }
    impl NodeOrEdgePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct SolidPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<SolidPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SolidPropertyTypeContent {
        AbstractSolid(AbstractSolid),
    }
    impl SolidPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TopoComplexPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<TopoComplexPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TopoComplexPropertyTypeContent {
        TopoComplex(Box<TopoComplexType>),
    }
    #[derive(Debug, Clone)]
    pub struct TopoPrimitiveMemberType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<TopoPrimitiveMemberTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TopoPrimitiveMemberTypeContent {
        AbstractTopoPrimitive(AbstractTopoPrimitive),
    }
    impl TopoPrimitiveMemberType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TopoPrimitiveArrayAssociationType {
        pub owns: bool,
        pub content: Vec<TopoPrimitiveArrayAssociationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TopoPrimitiveArrayAssociationTypeContent {
        AbstractTopoPrimitive(AbstractTopoPrimitive),
    }
    impl TopoPrimitiveArrayAssociationType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct Definition(pub Box<dyn DefinitionTrait>);
    pub trait DefinitionTrait: AbstractGMLTrait {}
    #[derive(Debug, Clone)]
    pub struct DomainOfValidityElementType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<DomainOfValidityElementTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DomainOfValidityElementTypeContent {
        ExExtent(gmd::ExExtentType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractCRS(pub Box<dyn AbstractCRSTrait>);
    pub trait AbstractCRSTrait: DefinitionTrait {}
    #[derive(Debug, Clone)]
    pub struct Conversion(pub Box<dyn ConversionTrait>);
    pub trait ConversionTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct AbstractSingleCRS(pub Box<dyn AbstractSingleCRSTrait>);
    pub trait AbstractSingleCRSTrait: AbstractCRSTrait {}
    #[derive(Debug, Clone)]
    pub struct ComponentReferenceSystem(pub Box<dyn ComponentReferenceSystemTrait>);
    pub trait ComponentReferenceSystemTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub enum GeodeticCRSContent4996Type {
        EllipsoidalCS(EllipsoidalCS),
        CartesianCS(CartesianCS),
        SphericalCS(SphericalCS),
    }
    #[derive(Debug, Clone)]
    pub struct GeodeticDatum(pub Box<dyn GeodeticDatumTrait>);
    pub trait GeodeticDatumTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct VerticalCS(pub Box<dyn VerticalCSTrait>);
    pub trait VerticalCSTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct VerticalDatum(pub Box<dyn VerticalDatumTrait>);
    pub trait VerticalDatumTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub enum ProjectedCRSContent5003Type {
        BaseGeodeticCRS(GeodeticCRSPropertyType),
        BaseGeographicCRS(GeographicCRSPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CartesianCS(pub Box<dyn CartesianCSTrait>);
    pub trait CartesianCSTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct AbstractGeneralDerivedCRS(pub Box<dyn AbstractGeneralDerivedCRSTrait>);
    pub trait AbstractGeneralDerivedCRSTrait: AbstractSingleCRSTrait {}
    #[derive(Debug, Clone)]
    pub struct SingleCRSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<SingleCRSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SingleCRSPropertyTypeContent {
        AbstractSingleCRS(AbstractSingleCRS),
    }
    impl ComponentReferenceSystemTrait for SingleCRSPropertyType {}
    impl xsd_parser::AsAny for SingleCRSPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CoordinateSystem(pub Box<dyn CoordinateSystemTrait>);
    pub trait CoordinateSystemTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub enum EngineeringCRSContent5010Type {
        AffineCS(AffineCS),
        CartesianCS(CartesianCS),
        CylindricalCS(CylindricalCSPropertyType),
        LinearCS(LinearCSPropertyType),
        PolarCS(PolarCSPropertyType),
        SphericalCS(SphericalCS),
        UserDefinedCS(UserDefinedCSPropertyType),
        CoordinateSystem(CoordinateSystem),
    }
    #[derive(Debug, Clone)]
    pub struct EngineeringDatum(pub Box<dyn EngineeringDatumTrait>);
    pub trait EngineeringDatumTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub enum ImageCRSContent5014Type {
        CartesianCS(CartesianCS),
        AffineCS(AffineCS),
        UsesObliqueCartesianCS(ObliqueCartesianCSPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ImageDatum(pub Box<dyn ImageDatumTrait>);
    pub trait ImageDatumTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub enum TemporalCRSContent5018Type {
        TimeCS(TimeCS),
        UsesTemporalCS(TemporalCSPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TemporalDatum(pub Box<dyn TemporalDatumTrait>);
    pub trait TemporalDatumTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct TimeReferenceSystem(pub Box<dyn TimeReferenceSystemTrait>);
    pub trait TimeReferenceSystemTrait: DefinitionTrait {}
    #[derive(Debug, Clone)]
    pub enum TimeCoordinateSystemContent5035Type {
        OriginPosition(TimePositionType),
        Origin(TimeInstantPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TimeIntervalLengthType {
        pub unit: TimeUnitType,
        pub radix: Option<usize>,
        pub factor: Option<i32>,
        pub content: f64,
    }
    #[derive(Debug, Clone)]
    pub struct TimeCalendarEraPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<TimeCalendarEraPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeCalendarEraPropertyTypeContent {
        TimeCalendarEra(TimeCalendarEraType),
    }
    impl TimeCalendarEraPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TimeCalendarPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<TimeCalendarPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeCalendarPropertyTypeContent {
        TimeCalendar(TimeCalendarType),
    }
    impl TimeCalendarPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TimeOrdinalEraPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<TimeOrdinalEraPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeOrdinalEraPropertyTypeContent {
        TimeOrdinalEra(TimeOrdinalEraType),
    }
    impl TimeOrdinalEraPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct CoordinateOperationAccuracyElementType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<CoordinateOperationAccuracyElementTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CoordinateOperationAccuracyElementTypeContent {
        AbstractDQPositionalAccuracy(gmd::AbstractDQPositionalAccuracy),
    }
    #[derive(Debug, Clone)]
    pub struct CrspropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<CrspropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CrspropertyTypeContent {
        AbstractCRS(AbstractCRS),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractCoordinateOperation(pub Box<dyn AbstractCoordinateOperationTrait>);
    pub trait AbstractCoordinateOperationTrait: DefinitionTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractOperation(pub Box<dyn AbstractOperationTrait>);
    pub trait AbstractOperationTrait: AbstractSingleOperationTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractSingleOperation(pub Box<dyn AbstractSingleOperationTrait>);
    pub trait AbstractSingleOperationTrait: AbstractCoordinateOperationTrait {}
    #[derive(Debug, Clone)]
    pub struct Axis(pub Box<dyn AxisTrait>);
    pub trait AxisTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct AbstractCoordinateSystem(pub Box<dyn AbstractCoordinateSystemTrait>);
    pub trait AbstractCoordinateSystemTrait: DefinitionTrait {}
    #[derive(Debug, Clone)]
    pub struct EllipsoidalCSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<EllipsoidalCSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum EllipsoidalCSPropertyTypeContent {
        EllipsoidalCS(EllipsoidalCSType),
    }
    impl EllipsoidalCSTrait for EllipsoidalCSPropertyType {}
    impl xsd_parser::AsAny for EllipsoidalCSPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GeodeticDatumPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<GeodeticDatumPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GeodeticDatumPropertyTypeContent {
        GeodeticDatum(GeodeticDatumType),
    }
    impl GeodeticDatumTrait for GeodeticDatumPropertyType {}
    impl xsd_parser::AsAny for GeodeticDatumPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum GeocentricCRSContent5081Type {
        UsesCartesianCS(CartesianCSPropertyType),
        UsesSphericalCS(SphericalCSPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AssociationRoleType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
    }
    impl AssociationRoleType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct ArrayAssociationType {
        pub owns: bool,
        pub content: Vec<ArrayAssociationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ArrayAssociationTypeContent {
        AbstractObject(AbstractObject),
    }
    impl ArrayAssociationType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum DictionaryContent5348Type {
        DictionaryEntry(DictionaryEntry),
        IndirectEntry(IndirectEntryType),
    }
    #[derive(Debug, Clone)]
    pub enum MovingObjectStatusContent5110Type {
        Position(GeometryPropertyType),
        Pos(DirectPositionType),
        LocationName(CodeType),
        LocationReference(ReferenceType),
        Location(Location),
    }
    #[derive(Debug, Clone)]
    pub struct GeometricPrimitivePropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<GeometricPrimitivePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GeometricPrimitivePropertyTypeContent {
        AbstractGeometricPrimitive(AbstractGeometricPrimitive),
    }
    impl GeometricPrimitivePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSolid(pub Box<dyn AbstractSolidTrait>);
    pub trait AbstractSolidTrait: AbstractGeometricPrimitiveTrait {}
    #[derive(Debug, Clone)]
    pub enum GridLimitsType {
        GridEnvelope(GridEnvelopeType),
    }
    #[derive(Debug, Clone)]
    pub enum GridContent5199Type {
        AxisLabels(NcnameListType),
        AxisName(String),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractImplicitGeometry(pub Box<dyn AbstractImplicitGeometryTrait>);
    pub trait AbstractImplicitGeometryTrait: AbstractGeometryTrait {}
    #[derive(Debug, Clone)]
    pub struct Grid(pub Box<dyn GridTrait>);
    pub trait GridTrait: AbstractImplicitGeometryTrait {}
    #[derive(Debug, Clone)]
    pub struct DirectPositionType {
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub content: DoubleListType,
    }
    #[derive(Debug, Clone)]
    pub struct GeometryPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<GeometryPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GeometryPropertyTypeContent {
        AbstractGeometry(AbstractGeometry),
    }
    impl GeometryPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct GeometryArrayPropertyType {
        pub owns: bool,
        pub content: Vec<GeometryArrayPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GeometryArrayPropertyTypeContent {
        AbstractGeometry(AbstractGeometry),
    }
    impl GeometryArrayPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractGeometricAggregate(pub Box<dyn AbstractGeometricAggregateTrait>);
    pub trait AbstractGeometricAggregateTrait: AbstractGeometryTrait {}
    #[derive(Debug, Clone)]
    pub struct PointArrayPropertyType {
        pub owns: bool,
        pub content: Vec<PointArrayPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PointArrayPropertyTypeContent {
        Point(Point),
    }
    impl PointArrayPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct CurveArrayPropertyType {
        pub owns: bool,
        pub content: Vec<CurveArrayPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CurveArrayPropertyTypeContent {
        AbstractCurve(AbstractCurve),
    }
    impl CurveArrayPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct SurfaceArrayPropertyType {
        pub owns: bool,
        pub content: Vec<SurfaceArrayPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SurfaceArrayPropertyTypeContent {
        AbstractSurface(AbstractSurface),
    }
    impl SurfaceArrayPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct SolidArrayPropertyType {
        pub owns: bool,
        pub content: Vec<SolidArrayPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SolidArrayPropertyTypeContent {
        AbstractSolid(AbstractSolid),
    }
    impl SolidArrayPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AnchorDefinition(pub Box<dyn AnchorDefinitionTrait>);
    pub trait AnchorDefinitionTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct PrimeMeridian(pub Box<dyn PrimeMeridianTrait>);
    pub trait PrimeMeridianTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct Ellipsoid(pub Box<dyn EllipsoidTrait>);
    pub trait EllipsoidTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct AbstractDatum(pub Box<dyn AbstractDatumTrait>);
    pub trait AbstractDatumTrait: DefinitionTrait {}
    #[derive(Debug, Clone)]
    pub enum SecondDefiningParameterElementType {
        SecondDefiningParameter(SecondDefiningParameterElementType),
    }
    #[derive(Debug, Clone)]
    pub struct AngleType {
        pub uom: String,
        pub content: f64,
    }
    impl gco::MeasureTrait for AngleType {}
    impl xsd_parser::AsAny for AngleType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CoordOperation(pub Box<dyn CoordOperationTrait>);
    pub trait CoordOperationTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct Method(pub Box<dyn MethodTrait>);
    pub trait MethodTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct ParameterValue(pub Box<dyn ParameterValueTrait>);
    pub trait ParameterValueTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct AbstractGeneralConversion(pub Box<dyn AbstractGeneralConversionTrait>);
    pub trait AbstractGeneralConversionTrait: AbstractOperationTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractGeneralTransformation(pub Box<dyn AbstractGeneralTransformationTrait>);
    pub trait AbstractGeneralTransformationTrait: AbstractOperationTrait {}
    #[derive(Debug, Clone)]
    pub enum OperationMethodContent5310Type {
        FormulaCitation(FormulaCitationElementType),
        Formula(Formula),
    }
    #[derive(Debug, Clone)]
    pub struct Parameter(pub Box<dyn ParameterTrait>);
    pub trait ParameterTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct AbstractGeneralOperationParameter(
        pub Box<dyn AbstractGeneralOperationParameterTrait>,
    );
    pub trait AbstractGeneralOperationParameterTrait: DefinitionTrait {}
    #[derive(Debug, Clone)]
    pub struct RelatedTimeType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub relative_position: Option<RelatedTimeTypeRelativePositionType>,
        pub content: Option<RelatedTimeTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RelatedTimeTypeContent {
        AbstractTimePrimitive(AbstractTimePrimitive),
    }
    impl RelatedTimeType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTimeObject(pub Box<dyn AbstractTimeObjectTrait>);
    pub trait AbstractTimeObjectTrait: AbstractGMLTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractTimePrimitive(pub Box<dyn AbstractTimePrimitiveTrait>);
    pub trait AbstractTimePrimitiveTrait: AbstractTimeObjectTrait {}
    #[derive(Debug, Clone)]
    pub struct TimeTopologyPrimitivePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<TimeTopologyPrimitivePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeTopologyPrimitivePropertyTypeContent {
        AbstractTimeTopologyPrimitive(AbstractTimeTopologyPrimitive),
    }
    impl TimeTopologyPrimitivePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTimeComplex(pub Box<dyn AbstractTimeComplexTrait>);
    pub trait AbstractTimeComplexTrait: AbstractTimeObjectTrait {}
    #[derive(Debug, Clone)]
    pub struct TimeEdgePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<TimeEdgePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeEdgePropertyTypeContent {
        TimeEdge(TimeEdgeType),
    }
    impl TimeEdgePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TimeInstantPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<TimeInstantPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeInstantPropertyTypeContent {
        TimeInstant(TimeInstantType),
    }
    impl TimeInstantPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTimeTopologyPrimitive(pub Box<dyn AbstractTimeTopologyPrimitiveTrait>);
    pub trait AbstractTimeTopologyPrimitiveTrait: AbstractTimePrimitiveTrait {}
    #[derive(Debug, Clone)]
    pub struct TimeNodePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<TimeNodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeNodePropertyTypeContent {
        TimeNode(TimeNodeType),
    }
    impl TimeNodePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TimePeriodPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<TimePeriodPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimePeriodPropertyTypeContent {
        TimePeriod(TimePeriodType),
    }
    impl TimePeriodPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct TimePositionType {
        pub frame: String,
        pub calendar_era_name: Option<String>,
        pub indeterminate_position: Option<TimeIndeterminateValueType>,
        pub content: TimePositionUnionType,
    }
    impl TimePositionType {
        #[must_use]
        pub fn default_frame() -> String {
            String::from("#ISO-8601")
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractTimeGeometricPrimitive(pub Box<dyn AbstractTimeGeometricPrimitiveTrait>);
    pub trait AbstractTimeGeometricPrimitiveTrait: AbstractTimePrimitiveTrait {}
    #[derive(Debug, Clone)]
    pub enum TimePeriodContent5621Type {
        BeginPosition(TimePositionType),
        Begin(TimeInstantPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum TimePeriodContent5624Type {
        EndPosition(TimePositionType),
        End(TimeInstantPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum TimePeriodContent5627Type {
        Duration(String),
        TimeInterval(TimeIntervalLengthType),
    }
    #[derive(Debug, Clone)]
    pub enum LineStringContent5640Type {
        Content5641(LineStringContent5641Type),
        PosList(DirectPositionListType),
        Coordinates(CoordinatesType),
    }
    #[derive(Debug, Clone)]
    pub enum SignType {
        Minus,
        Plus,
    }
    #[derive(Debug, Clone)]
    pub enum LineStringSegmentArrayPropertyType {
        LineStringSegment(LineStringSegmentType),
    }
    #[derive(Debug, Clone)]
    pub struct LengthType {
        pub uom: String,
        pub content: f64,
    }
    impl gco::LengthTrait for LengthType {}
    impl gco::MeasureTrait for LengthType {}
    impl xsd_parser::AsAny for LengthType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum TinTypeControlPointElementType {
        PosList(DirectPositionListType),
        Content5744(TinTypeControlPointContent5744Type),
    }
    #[derive(Debug, Clone)]
    pub enum ShellPropertyType {
        Shell(ShellType),
    }
    #[derive(Debug, Clone)]
    pub enum AbstractRingPropertyType {
        AbstractRing(AbstractRing),
    }
    #[derive(Debug, Clone)]
    pub struct UnitDefinition(pub Box<dyn UnitDefinitionTrait>);
    pub trait UnitDefinitionTrait: DefinitionTrait {}
    #[derive(Debug, Clone)]
    pub struct DerivationUnitTermType {
        pub uom: String,
        pub exponent: Option<i32>,
    }
    #[derive(Debug, Clone)]
    pub enum ConventionalUnitContent5948Type {
        ConversionToPreferredUnit(ConversionToPreferredUnitType),
        RoughConversionToPreferredUnit(ConversionToPreferredUnitType),
    }
    #[derive(Debug, Clone)]
    pub enum BoundingShapeContent5149Type {
        Envelope(Envelope),
        Null(NilReasonType),
    }
    #[derive(Debug, Clone)]
    pub enum NilReasonType {
        Inapplicable,
        Missing,
        Template,
        Unknown,
        Withheld,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct LocationPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: LocationPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum LocationPropertyTypeContent {
        Content5096(LocationPropertyContent5096Type),
    }
    impl LocationTrait for LocationPropertyType {}
    impl xsd_parser::AsAny for LocationPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct PriorityLocationPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub priority: Option<String>,
        pub content: PriorityLocationPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum PriorityLocationPropertyTypeContent {
        Content5096(LocationPropertyContent5096Type),
    }
    impl LocationTrait for PriorityLocationPropertyType {}
    impl xsd_parser::AsAny for PriorityLocationPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct HistoryPropertyType {
        pub owns: bool,
        pub content: Vec<HistoryPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum HistoryPropertyTypeContent {
        AbstractTimeSlice(AbstractTimeSlice),
    }
    impl HistoryTrait for HistoryPropertyType {}
    impl xsd_parser::AsAny for HistoryPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl HistoryPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct DomainSetType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<DomainSetTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DomainSetTypeContent {
        Content4963(DomainSetContent4963Type),
    }
    impl DomainSetTrait for DomainSetType {}
    impl xsd_parser::AsAny for DomainSetType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl DomainSetType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractScalarValueList(pub Box<dyn AbstractScalarValueListTrait>);
    pub trait AbstractScalarValueListTrait: AbstractValueTrait {}
    #[derive(Debug, Clone)]
    pub struct TargetPropertyType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<TargetPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TargetPropertyTypeContent {
        AbstractFeature(AbstractFeature),
        AbstractGeometry(AbstractGeometry),
    }
    impl TargetTrait for TargetPropertyType {}
    impl xsd_parser::AsAny for TargetPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl TargetPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub enum DirectionVectorType {
        Vector(DirectPositionType),
        Content5165(DirectionVectorContent5165Type),
    }
    #[derive(Debug, Clone)]
    pub enum DirectionDescriptionType {
        CompassPoint(CompassPointEnumerationType),
        Keyword(CodeType),
        Description(String),
        Reference(ReferenceType),
    }
    #[derive(Debug, Clone)]
    pub enum CompassPointEnumerationType {
        N,
        Nne,
        Ne,
        Ene,
        E,
        Ese,
        Se,
        Sse,
        S,
        Ssw,
        Sw,
        Wsw,
        W,
        Wnw,
        Nw,
        Nnw,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractMetaData(pub Box<dyn AbstractMetaDataTrait>);
    pub trait AbstractMetaDataTrait: AbstractObjectTrait {}
    #[derive(Debug, Clone)]
    pub struct Formula(pub Box<dyn FormulaTrait>);
    pub trait FormulaTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub enum DataBlockContent4966Type {
        TupleList(CoordinatesType),
        DoubleOrNilReasonTupleList(DoubleOrNilReasonListType),
    }
    #[derive(Debug, Clone)]
    pub enum FileContent4968Type {
        FileName(String),
        FileReference(String),
    }
    #[derive(Debug, Clone)]
    pub struct SequenceRuleType {
        pub order: Option<IncrementOrderType>,
        pub axis_order: Option<AxisDirectionListType>,
        pub content: SequenceRuleEnumerationType,
    }
    #[derive(Debug, Clone, Default)]
    pub struct IntegerListType(pub Vec<xs::IntegerType>);
    #[derive(Debug, Clone)]
    pub enum EnvelopeContent5151Type {
        LowerCorner(DirectPositionType),
        UpperCorner(DirectPositionType),
    }
    #[derive(Debug, Clone)]
    pub struct CoordinatesType {
        pub decimal: String,
        pub cs: String,
        pub ts: String,
        pub content: String,
    }
    impl CoordinatesType {
        #[must_use]
        pub fn default_decimal() -> String {
            String::from(".")
        }
        #[must_use]
        pub fn default_cs() -> String {
            String::from(",")
        }
        #[must_use]
        pub fn default_ts() -> String {
            String::from("&#x20;")
        }
    }
    #[derive(Debug, Clone)]
    pub struct Envelope(pub Box<dyn EnvelopeTrait>);
    pub trait EnvelopeTrait: AbstractObjectTrait {}
    #[derive(Debug, Clone)]
    pub enum EnvelopeWithTimePeriodContent5155Type {
        BeginPosition(TimePositionType),
        EndPosition(TimePositionType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractValue(pub Box<dyn AbstractValueTrait>);
    pub trait AbstractValueTrait: AbstractObjectTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractScalarValue(pub Box<dyn AbstractScalarValueTrait>);
    pub trait AbstractScalarValueTrait: AbstractValueTrait {}
    #[derive(Debug, Clone)]
    pub enum BooleanOrNilReasonType {
        Inapplicable,
        Missing,
        Template,
        Unknown,
        Withheld,
        String(String),
        Bool(bool),
    }
    #[derive(Debug, Clone, Default)]
    pub struct NameOrNilReasonListType(pub Vec<NameOrNilReasonType>);
    #[derive(Debug, Clone)]
    pub enum IntegerOrNilReasonType {
        Inapplicable,
        Missing,
        Template,
        Unknown,
        Withheld,
        String(String),
        I32(i32),
    }
    #[derive(Debug, Clone, Default)]
    pub struct DoubleOrNilReasonListType(pub Vec<DoubleOrNilReasonType>);
    #[derive(Debug, Clone)]
    pub struct ValuePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<ValuePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ValuePropertyTypeContent {
        Content5186(ValuePropertyContent5186Type),
    }
    impl ValuePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct ValueArrayPropertyType {
        pub owns: bool,
        pub content: Vec<ValueArrayPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ValueArrayPropertyTypeContent {
        Content5188(ValueArrayPropertyContent5188Type),
    }
    impl ValueArrayPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct CompositeValue(pub Box<dyn CompositeValueTrait>);
    pub trait CompositeValueTrait: AbstractValueTrait {}
    #[derive(Debug, Clone)]
    pub enum ParameterValueContent5306Type {
        Value(MeasureType),
        DmsAngleValue(DmsangleType),
        StringValue(String),
        IntegerValue(usize),
        BooleanValue(bool),
        ValueList(MeasureListType),
        IntegerValueList(IntegerListType),
        ValueFile(String),
    }
    #[derive(Debug, Clone)]
    pub struct OperationParameter(pub Box<dyn OperationParameterTrait>);
    pub trait OperationParameterTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct AbstractGeneralParameterValue(pub Box<dyn AbstractGeneralParameterValueTrait>);
    pub trait AbstractGeneralParameterValueTrait: AbstractObjectTrait {}
    #[derive(Debug, Clone)]
    pub struct Group(pub Box<dyn GroupTrait>);
    pub trait GroupTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub enum LineStringSegmentContent5646Type {
        Content5647(LineStringSegmentContent5647Type),
        PosList(DirectPositionListType),
        Coordinates(CoordinatesType),
    }
    #[derive(Debug, Clone)]
    pub enum CurveInterpolationType {
        Linear,
        Geodesic,
        CircularArc3Points,
        CircularArc2PointWithBulge,
        CircularArcCenterPointWithRadius,
        Elliptical,
        Clothoid,
        Conic,
        PolynomialSpline,
        CubicSpline,
        RationalSpline,
    }
    #[derive(Debug, Clone)]
    pub struct AbstractCurveSegment(pub Box<dyn AbstractCurveSegmentTrait>);
    pub trait AbstractCurveSegmentTrait: AbstractObjectTrait {}
    #[derive(Debug, Clone)]
    pub enum ArcStringContent5649Type {
        Content5650(ArcStringContent5650Type),
        PosList(DirectPositionListType),
        Coordinates(CoordinatesType),
    }
    #[derive(Debug, Clone)]
    pub struct Arc(pub Box<dyn ArcTrait>);
    pub trait ArcTrait: ArcStringTrait {}
    #[derive(Debug, Clone)]
    pub struct ArcString(pub Box<dyn ArcStringTrait>);
    pub trait ArcStringTrait: AbstractCurveSegmentTrait {}
    #[derive(Debug, Clone)]
    pub enum ArcContent5653Type {
        Content5654(ArcContent5654Type),
        PosList(DirectPositionListType),
        Coordinates(CoordinatesType),
    }
    #[derive(Debug, Clone)]
    pub enum ArcStringByBulgeContent5657Type {
        Content5658(ArcStringByBulgeContent5658Type),
        PosList(DirectPositionListType),
        Coordinates(CoordinatesType),
    }
    #[derive(Debug, Clone)]
    pub struct ArcStringByBulge(pub Box<dyn ArcStringByBulgeTrait>);
    pub trait ArcStringByBulgeTrait: AbstractCurveSegmentTrait {}
    #[derive(Debug, Clone)]
    pub enum ArcByCenterPointContent5668Type {
        Content5669(ArcByCenterPointContent5669Type),
        PosList(DirectPositionListType),
        Coordinates(CoordinatesType),
    }
    #[derive(Debug, Clone)]
    pub struct ArcByCenterPoint(pub Box<dyn ArcByCenterPointTrait>);
    pub trait ArcByCenterPointTrait: AbstractCurveSegmentTrait {}
    #[derive(Debug, Clone)]
    pub enum CubicSplineContent5679Type {
        Content5680(CubicSplineContent5680Type),
        PosList(DirectPositionListType),
        Coordinates(CoordinatesType),
    }
    #[derive(Debug, Clone)]
    pub enum BsplineContent5684Type {
        Content5685(BsplineContent5685Type),
        PosList(DirectPositionListType),
        Coordinates(CoordinatesType),
    }
    #[derive(Debug, Clone)]
    pub enum KnotPropertyType {
        Knot(KnotType),
    }
    #[derive(Debug, Clone)]
    pub enum KnotTypesType {
        Uniform,
        QuasiUniform,
        PiecewiseBezier,
    }
    #[derive(Debug, Clone)]
    pub struct Bspline(pub Box<dyn BsplineTrait>);
    pub trait BsplineTrait: AbstractCurveSegmentTrait {}
    #[derive(Debug, Clone)]
    pub enum ClothoidTypeRefLocationElementType {
        AffinePlacement(AffinePlacementType),
    }
    #[derive(Debug, Clone)]
    pub struct DirectPositionListType {
        pub srs_name: Option<String>,
        pub srs_dimension: Option<usize>,
        pub axis_labels: Option<NcnameListType>,
        pub uom_labels: Option<NcnameListType>,
        pub count: Option<usize>,
        pub content: DoubleListType,
    }
    #[derive(Debug, Clone)]
    pub enum GeodesicStringContent5716Type {
        Pos(DirectPositionType),
        PointProperty(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct GeodesicString(pub Box<dyn GeodesicStringTrait>);
    pub trait GeodesicStringTrait: AbstractCurveSegmentTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractRing(pub Box<dyn AbstractRingTrait>);
    pub trait AbstractRingTrait: AbstractObjectTrait {}
    #[derive(Debug, Clone)]
    pub enum LinearRingContent5935Type {
        Content5936(LinearRingContent5936Type),
        PosList(DirectPositionListType),
        Coordinates(CoordinatesType),
    }
    #[derive(Debug, Clone)]
    pub enum SurfacePatchArrayPropertyType {
        AbstractSurfacePatch(AbstractSurfacePatch),
    }
    impl PatchesTrait for SurfacePatchArrayPropertyType {}
    impl xsd_parser::AsAny for SurfacePatchArrayPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GeneralConversionPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<GeneralConversionPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GeneralConversionPropertyTypeContent {
        AbstractGeneralConversion(AbstractGeneralConversion),
    }
    impl ConversionTrait for GeneralConversionPropertyType {}
    impl xsd_parser::AsAny for GeneralConversionPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct EllipsoidalCS(pub Box<dyn EllipsoidalCSTrait>);
    pub trait EllipsoidalCSTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct SphericalCS(pub Box<dyn SphericalCSTrait>);
    pub trait SphericalCSTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct VerticalCSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<VerticalCSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum VerticalCSPropertyTypeContent {
        VerticalCS(VerticalCSType),
    }
    impl VerticalCSTrait for VerticalCSPropertyType {}
    impl xsd_parser::AsAny for VerticalCSPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct VerticalDatumPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<VerticalDatumPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum VerticalDatumPropertyTypeContent {
        VerticalDatum(VerticalDatumType),
    }
    impl VerticalDatumTrait for VerticalDatumPropertyType {}
    impl xsd_parser::AsAny for VerticalDatumPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct GeodeticCRSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<GeodeticCRSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GeodeticCRSPropertyTypeContent {
        GeodeticCRS(GeodeticCRSType),
    }
    #[derive(Debug, Clone)]
    pub struct GeographicCRSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<GeographicCRSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GeographicCRSPropertyTypeContent {
        GeographicCRS(GeographicCRSType),
    }
    #[derive(Debug, Clone)]
    pub struct CartesianCSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<CartesianCSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CartesianCSPropertyTypeContent {
        CartesianCS(CartesianCSType),
    }
    impl CartesianCSTrait for CartesianCSPropertyType {}
    impl xsd_parser::AsAny for CartesianCSPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CoordinateSystemPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<CoordinateSystemPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CoordinateSystemPropertyTypeContent {
        AbstractCoordinateSystem(AbstractCoordinateSystem),
    }
    impl CoordinateSystemTrait for CoordinateSystemPropertyType {}
    impl xsd_parser::AsAny for CoordinateSystemPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AffineCS(pub Box<dyn AffineCSTrait>);
    pub trait AffineCSTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct CylindricalCSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<CylindricalCSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CylindricalCSPropertyTypeContent {
        CylindricalCS(CylindricalCSType),
    }
    #[derive(Debug, Clone)]
    pub struct LinearCSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<LinearCSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum LinearCSPropertyTypeContent {
        LinearCS(LinearCSType),
    }
    #[derive(Debug, Clone)]
    pub struct PolarCSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<PolarCSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PolarCSPropertyTypeContent {
        PolarCS(PolarCSType),
    }
    #[derive(Debug, Clone)]
    pub struct UserDefinedCSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<UserDefinedCSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum UserDefinedCSPropertyTypeContent {
        UserDefinedCS(UserDefinedCSType),
    }
    #[derive(Debug, Clone)]
    pub struct EngineeringDatumPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<EngineeringDatumPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum EngineeringDatumPropertyTypeContent {
        EngineeringDatum(EngineeringDatumType),
    }
    impl EngineeringDatumTrait for EngineeringDatumPropertyType {}
    impl xsd_parser::AsAny for EngineeringDatumPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ObliqueCartesianCSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<ObliqueCartesianCSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ObliqueCartesianCSPropertyTypeContent {
        ObliqueCartesianCS(ObliqueCartesianCSType),
    }
    #[derive(Debug, Clone)]
    pub struct ImageDatumPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<ImageDatumPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ImageDatumPropertyTypeContent {
        ImageDatum(ImageDatumType),
    }
    impl ImageDatumTrait for ImageDatumPropertyType {}
    impl xsd_parser::AsAny for ImageDatumPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TimeCS(pub Box<dyn TimeCSTrait>);
    pub trait TimeCSTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct TemporalCSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<TemporalCSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TemporalCSPropertyTypeContent {
        TemporalCS(TemporalCSType),
    }
    #[derive(Debug, Clone)]
    pub struct TemporalDatumPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<TemporalDatumPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TemporalDatumPropertyTypeContent {
        TemporalDatum(TemporalDatumType),
    }
    impl TemporalDatumTrait for TemporalDatumPropertyType {}
    impl xsd_parser::AsAny for TemporalDatumPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum TimeUnitType {
        Year,
        Month,
        Day,
        Hour,
        Minute,
        Second,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub struct TimeCalendarEraType {
        pub id: String,
        pub content: Vec<TimeCalendarEraTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeCalendarEraTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        ReferenceEvent(StringOrRefType),
        ReferenceDate(String),
        JulianReference(f64),
        EpochOfUse(TimePeriodPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TimeOrdinalEraType {
        pub id: String,
        pub content: Vec<TimeOrdinalEraTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeOrdinalEraTypeContent {
        Content3(AbstractGMLContent3Type),
        MetaDataProperty(MetaDataPropertyType),
        Description(StringOrRefType),
        DescriptionReference(ReferenceType),
        Identifier(CodeType),
        Name(CodeType),
        Remarks(String),
        RelatedTime(RelatedTimeType),
        Start(TimeNodePropertyType),
        End(TimeNodePropertyType),
        Extent(TimePeriodPropertyType),
        Member(TimeOrdinalEraPropertyType),
        Group(ReferenceType),
    }
    #[derive(Debug, Clone)]
    pub struct CoordinateSystemAxisPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<CoordinateSystemAxisPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CoordinateSystemAxisPropertyTypeContent {
        CoordinateSystemAxis(CoordinateSystemAxisType),
    }
    impl AxisTrait for CoordinateSystemAxisPropertyType {}
    impl xsd_parser::AsAny for CoordinateSystemAxisPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SphericalCSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<SphericalCSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SphericalCSPropertyTypeContent {
        SphericalCS(SphericalCSType),
    }
    impl SphericalCSTrait for SphericalCSPropertyType {}
    impl xsd_parser::AsAny for SphericalCSPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DictionaryEntry(pub Box<dyn DictionaryEntryTrait>);
    pub trait DictionaryEntryTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub enum IndirectEntryType {
        DefinitionProxy(DefinitionProxyType),
    }
    #[derive(Debug, Clone)]
    pub enum GridEnvelopeType {
        Low(IntegerListType),
        High(IntegerListType),
    }
    #[derive(Debug, Clone, Default)]
    pub struct DoubleListType(pub Vec<xs::DoubleType>);
    #[derive(Debug, Clone)]
    pub struct PrimeMeridianPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<PrimeMeridianPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PrimeMeridianPropertyTypeContent {
        PrimeMeridian(PrimeMeridianType),
    }
    impl PrimeMeridianTrait for PrimeMeridianPropertyType {}
    impl xsd_parser::AsAny for PrimeMeridianPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct EllipsoidPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<EllipsoidPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum EllipsoidPropertyTypeContent {
        Ellipsoid(EllipsoidType),
    }
    impl EllipsoidTrait for EllipsoidPropertyType {}
    impl xsd_parser::AsAny for EllipsoidPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum SecondDefiningParameterElementType {
        InverseFlattening(MeasureType),
        SemiMinorAxis(LengthType),
        IsSphere(bool),
    }
    #[derive(Debug, Clone)]
    pub struct CoordinateOperationPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<CoordinateOperationPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CoordinateOperationPropertyTypeContent {
        AbstractCoordinateOperation(AbstractCoordinateOperation),
    }
    impl CoordOperationTrait for CoordinateOperationPropertyType {}
    impl xsd_parser::AsAny for CoordinateOperationPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct OperationMethodPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<OperationMethodPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum OperationMethodPropertyTypeContent {
        OperationMethod(OperationMethodType),
    }
    impl MethodTrait for OperationMethodPropertyType {}
    impl xsd_parser::AsAny for OperationMethodPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum AbstractGeneralParameterValuePropertyType {
        AbstractGeneralParameterValue(AbstractGeneralParameterValue),
    }
    impl ParameterValueTrait for AbstractGeneralParameterValuePropertyType {}
    impl xsd_parser::AsAny for AbstractGeneralParameterValuePropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct FormulaCitationElementType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<FormulaCitationElementTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum FormulaCitationElementTypeContent {
        CiCitation(gmd::CiCitationType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractGeneralOperationParameterPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<AbstractGeneralOperationParameterPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractGeneralOperationParameterPropertyTypeContent {
        AbstractGeneralOperationParameter(AbstractGeneralOperationParameter),
    }
    impl GeneralOperationParameterTrait for AbstractGeneralOperationParameterPropertyType {}
    impl ParameterTrait for AbstractGeneralOperationParameterPropertyType {}
    impl xsd_parser::AsAny for AbstractGeneralOperationParameterPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum RelatedTimeTypeRelativePositionType {
        Before,
        After,
        Begins,
        Ends,
        During,
        Equals,
        Contains,
        Overlaps,
        Meets,
        OverlappedBy,
        MetBy,
        BegunBy,
        EndedBy,
    }
    #[derive(Debug, Clone)]
    pub enum TimeIndeterminateValueType {
        After,
        Before,
        Now,
        Unknown,
    }
    #[derive(Debug, Clone)]
    pub enum TimePositionUnionType {
        String(String),
        String(String),
        F64(f64),
    }
    #[derive(Debug, Clone)]
    pub enum LineStringContent5641Type {
        Pos(DirectPositionType),
        PointProperty(PointPropertyType),
        PointRep(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum TinTypeControlPointContent5744Type {
        Pos(DirectPositionType),
        PointProperty(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ConversionToPreferredUnitType {
        pub uom: String,
        pub content: ConversionToPreferredUnitTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ConversionToPreferredUnitTypeContent {
        Factor(f64),
        Formula(FormulaType),
    }
    #[derive(Debug, Clone)]
    pub enum LocationPropertyContent5096Type {
        AbstractGeometry(AbstractGeometry),
        LocationKeyWord(CodeType),
        LocationString(StringOrRefType),
        Null(NilReasonType),
    }
    #[derive(Debug, Clone)]
    pub enum DomainSetContent4963Type {
        AbstractGeometry(AbstractGeometry),
        AbstractTimeObject(AbstractTimeObject),
    }
    #[derive(Debug, Clone)]
    pub enum DirectionVectorContent5165Type {
        HorizontalAngle(AngleType),
        VerticalAngle(AngleType),
    }
    #[derive(Debug, Clone)]
    pub struct ScaleType {
        pub uom: String,
        pub content: f64,
    }
    impl gco::MeasureTrait for ScaleType {}
    impl xsd_parser::AsAny for ScaleType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum IncrementOrderType {
        Xy,
        Yx,
        Xy,
        Xy,
    }
    #[derive(Debug, Clone, Default)]
    pub struct AxisDirectionListType(pub Vec<AxisDirectionType>);
    #[derive(Debug, Clone)]
    pub enum SequenceRuleEnumerationType {
        Linear,
        Boustrophedonic,
        CantorDiagonal,
        Spiral,
        Morton,
        Hilbert,
    }
    #[derive(Debug, Clone)]
    pub enum NameOrNilReasonType {
        Inapplicable,
        Missing,
        Template,
        Unknown,
        Withheld,
        String(String),
    }
    #[derive(Debug, Clone)]
    pub enum DoubleOrNilReasonType {
        Inapplicable,
        Missing,
        Template,
        Unknown,
        Withheld,
        String(String),
        F64(f64),
    }
    #[derive(Debug, Clone)]
    pub enum ValuePropertyContent5186Type {
        AbstractValue(AbstractValue),
        AbstractGeometry(AbstractGeometry),
        AbstractTimeObject(AbstractTimeObject),
        Null(NilReasonType),
    }
    #[derive(Debug, Clone)]
    pub enum ValueArrayPropertyContent5188Type {
        AbstractValue(AbstractValue),
        AbstractGeometry(AbstractGeometry),
        AbstractTimeObject(AbstractTimeObject),
        Null(NilReasonType),
    }
    #[derive(Debug, Clone)]
    pub enum DmsangleType {
        Degrees(DegreesType),
        Content5084(DmsangleContent5084Type),
    }
    #[derive(Debug, Clone)]
    pub struct MeasureListType {
        pub uom: String,
        pub content: DoubleListType,
    }
    #[derive(Debug, Clone)]
    pub struct OperationParameterPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<OperationParameterPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum OperationParameterPropertyTypeContent {
        OperationParameter(OperationParameterType),
    }
    impl OperationParameterTrait for OperationParameterPropertyType {}
    impl xsd_parser::AsAny for OperationParameterPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct OperationParameterGroupPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<OperationParameterGroupPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum OperationParameterGroupPropertyTypeContent {
        OperationParameterGroup(OperationParameterGroupType),
    }
    impl GroupTrait for OperationParameterGroupPropertyType {}
    impl xsd_parser::AsAny for OperationParameterGroupPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum LineStringSegmentContent5647Type {
        Pos(DirectPositionType),
        PointProperty(PointPropertyType),
        PointRep(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum ArcStringContent5650Type {
        Pos(DirectPositionType),
        PointProperty(PointPropertyType),
        PointRep(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum ArcContent5654Type {
        Pos(DirectPositionType),
        PointProperty(PointPropertyType),
        PointRep(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum ArcStringByBulgeContent5658Type {
        Pos(DirectPositionType),
        PointProperty(PointPropertyType),
        PointRep(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum ArcByCenterPointContent5669Type {
        Pos(DirectPositionType),
        PointProperty(PointPropertyType),
        PointRep(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum CubicSplineContent5680Type {
        Pos(DirectPositionType),
        PointProperty(PointPropertyType),
        PointRep(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum BsplineContent5685Type {
        Pos(DirectPositionType),
        PointProperty(PointPropertyType),
        PointRep(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum KnotType {
        Value(f64),
        Multiplicity(usize),
        Weight(f64),
    }
    #[derive(Debug, Clone)]
    pub enum LinearRingContent5936Type {
        Pos(DirectPositionType),
        PointProperty(PointPropertyType),
        PointRep(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractSurfacePatch(pub Box<dyn AbstractSurfacePatchTrait>);
    pub trait AbstractSurfacePatchTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct AffineCSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<AffineCSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AffineCSPropertyTypeContent {
        AffineCS(AffineCSType),
    }
    impl AffineCSTrait for AffineCSPropertyType {}
    impl xsd_parser::AsAny for AffineCSPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TimeCSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<TimeCSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TimeCSPropertyTypeContent {
        TimeCS(TimeCSType),
    }
    impl TimeCSTrait for TimeCSPropertyType {}
    impl xsd_parser::AsAny for TimeCSPropertyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DictionaryEntryType {
        pub owns: bool,
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<DictionaryEntryTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DictionaryEntryTypeContent {
        Definition(Definition),
    }
    impl DictionaryEntryTrait for DictionaryEntryType {}
    impl xsd_parser::AsAny for DictionaryEntryType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    impl DictionaryEntryType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    #[derive(Debug, Clone)]
    pub struct GeneralOperationParameter(pub Box<dyn GeneralOperationParameterTrait>);
    pub trait GeneralOperationParameterTrait: ParameterTrait {}
    #[derive(Debug, Clone)]
    pub enum FormulaType {
        A(f64),
        B(f64),
        C(f64),
        D(f64),
    }
    pub type AxisDirectionType = String;
    #[derive(Debug, Clone)]
    pub struct DegreesType {
        pub direction: Option<DegreesTypeDirectionType>,
    }
    #[derive(Debug, Clone)]
    pub enum DmsangleContent5084Type {
        DecimalMinutes(f64),
        Content5085(DmsangleContent5085Type),
    }
    #[derive(Debug, Clone)]
    pub struct PolygonPatchType {
        pub interpolation: Option<SurfaceInterpolationType>,
        pub content: Vec<PolygonPatchTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PolygonPatchTypeContent {
        Exterior(AbstractRingPropertyType),
        Interior(AbstractRingPropertyType),
    }
    impl AbstractSurfacePatchTrait for PolygonPatchType {}
    impl xsd_parser::AsAny for PolygonPatchType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct TriangleType {
        pub interpolation: Option<SurfaceInterpolationType>,
        pub content: TriangleTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TriangleTypeContent {
        Exterior(AbstractRingPropertyType),
    }
    impl AbstractSurfacePatchTrait for TriangleType {}
    impl xsd_parser::AsAny for TriangleType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RectangleType {
        pub interpolation: Option<SurfaceInterpolationType>,
        pub content: RectangleTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum RectangleTypeContent {
        Exterior(AbstractRingPropertyType),
    }
    impl AbstractSurfacePatchTrait for RectangleType {}
    impl xsd_parser::AsAny for RectangleType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractParametricCurveSurfaceType {
        pub aggregation_type: Option<AggregationType>,
    }
    impl AbstractSurfacePatchTrait for AbstractParametricCurveSurfaceType {}
    impl xsd_parser::AsAny for AbstractParametricCurveSurfaceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractGriddedSurfaceType {
        pub aggregation_type: Option<AggregationType>,
        pub rows: Option<i32>,
        pub columns: Option<i32>,
        pub content: AbstractGriddedSurfaceTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractGriddedSurfaceTypeContent {
        Content5728(AbstractGriddedSurfaceContent5728Type),
    }
    impl AbstractParametricCurveSurfaceTrait for AbstractGriddedSurfaceType {}
    impl AbstractSurfacePatchTrait for AbstractGriddedSurfaceType {}
    impl xsd_parser::AsAny for AbstractGriddedSurfaceType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ConeType {
        pub aggregation_type: Option<AggregationType>,
        pub rows: Option<i32>,
        pub columns: Option<i32>,
        pub horizontal_curve_type: Option<CurveInterpolationType>,
        pub vertical_curve_type: Option<CurveInterpolationType>,
        pub content: ConeTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ConeTypeContent {
        Content5728(AbstractGriddedSurfaceContent5728Type),
    }
    impl AbstractGriddedSurfaceTrait for ConeType {}
    impl AbstractParametricCurveSurfaceTrait for ConeType {}
    impl AbstractSurfacePatchTrait for ConeType {}
    impl xsd_parser::AsAny for ConeType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CylinderType {
        pub aggregation_type: Option<AggregationType>,
        pub rows: Option<i32>,
        pub columns: Option<i32>,
        pub horizontal_curve_type: Option<CurveInterpolationType>,
        pub vertical_curve_type: Option<CurveInterpolationType>,
        pub content: CylinderTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum CylinderTypeContent {
        Content5728(AbstractGriddedSurfaceContent5728Type),
    }
    impl AbstractGriddedSurfaceTrait for CylinderType {}
    impl AbstractParametricCurveSurfaceTrait for CylinderType {}
    impl AbstractSurfacePatchTrait for CylinderType {}
    impl xsd_parser::AsAny for CylinderType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct SphereType {
        pub aggregation_type: Option<AggregationType>,
        pub rows: Option<i32>,
        pub columns: Option<i32>,
        pub horizontal_curve_type: Option<CurveInterpolationType>,
        pub vertical_curve_type: Option<CurveInterpolationType>,
        pub content: SphereTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum SphereTypeContent {
        Content5728(AbstractGriddedSurfaceContent5728Type),
    }
    impl AbstractGriddedSurfaceTrait for SphereType {}
    impl AbstractParametricCurveSurfaceTrait for SphereType {}
    impl AbstractSurfacePatchTrait for SphereType {}
    impl xsd_parser::AsAny for SphereType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum DegreesTypeDirectionType {
        N,
        E,
        S,
        W,
        Plus,
        Minus,
    }
    #[derive(Debug, Clone)]
    pub enum DmsangleContent5085Type {
        Minutes(usize),
        Seconds(f64),
    }
    #[derive(Debug, Clone)]
    pub enum SurfaceInterpolationType {
        None,
        Planar,
        Spherical,
        Elliptical,
        Conic,
        Tin,
        ParametricCurve,
        PolynomialSpline,
        RationalSpline,
        TriangulatedSpline,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractGriddedSurfaceContent5728Type {
        Rows(RowsElementType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractParametricCurveSurface(pub Box<dyn AbstractParametricCurveSurfaceTrait>);
    pub trait AbstractParametricCurveSurfaceTrait: AbstractSurfacePatchTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractGriddedSurface(pub Box<dyn AbstractGriddedSurfaceTrait>);
    pub trait AbstractGriddedSurfaceTrait: AbstractParametricCurveSurfaceTrait {}
    #[derive(Debug, Clone)]
    pub enum RowsElementType {
        Row(RowsRowElementType),
    }
    #[derive(Debug, Clone)]
    pub enum RowsRowElementType {
        PosList(DirectPositionListType),
        Content5733(RowsRowContent5733Type),
    }
    #[derive(Debug, Clone)]
    pub enum RowsRowContent5733Type {
        Pos(DirectPositionType),
        PointProperty(PointPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractContinuousCoverage(pub Box<dyn AbstractContinuousCoverageTrait>);
    pub trait AbstractContinuousCoverageTrait: AbstractFeatureTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractFeatureCollection(pub Box<dyn AbstractFeatureCollectionTrait>);
    pub trait AbstractFeatureCollectionTrait: AbstractFeatureTrait {}
    pub type AbstractTimePrimitiveTypeRelatedTime = RelatedTimeType;
    pub type AbstractTimeTopologyPrimitiveTypeComplex = ReferenceType;
    pub type AffineCS = AffineCSType;
    pub type AffinePlacement = AffinePlacementType;
    pub type AffinePlacementTypeInDimension = usize;
    pub type AffinePlacementTypeLocation = DirectPositionType;
    pub type AffinePlacementTypeOutDimension = usize;
    pub type AffinePlacementTypeRefDirection = DirectPositionType;
    pub type ArcByBulge = ArcStringByBulgeType;
    pub type ArcByBulgeTypeBulge = f64;
    pub type ArcByBulgeTypeNormal = DirectPositionType;
    pub type ArcByCenterPointTypeEndAngle = AngleType;
    pub type ArcByCenterPointTypeRadius = LengthType;
    pub type ArcByCenterPointTypeStartAngle = AngleType;
    pub type ArcStringByBulgeTypeBulge = f64;
    pub type ArcStringByBulgeTypeNormal = DirectPositionType;
    pub type Array = ArrayType;
    pub type Bag = BagType;
    pub type BaseUnit = BaseUnitType;
    pub type BaseUnitTypeUnitsSystem = ReferenceType;
    pub type Bezier = BsplineType;
    pub type BezierTypeDegree = usize;
    pub type BezierTypeKnot = KnotPropertyType;
    pub type Boolean = BooleanElementType;
    pub type BooleanList = BooleanOrNilReasonListType;
    pub type BsplineTypeDegree = usize;
    pub type BsplineTypeKnot = KnotPropertyType;
    pub type CartesianCS = CartesianCSType;
    pub type Category = CategoryElementType;
    pub type CategoryExtent = CodeOrNilReasonListType;
    pub type CategoryList = CodeOrNilReasonListType;
    pub type Circle = CircleType;
    pub type CircleByCenterPoint = ArcByCenterPointType;
    pub type CircleByCenterPointTypeRadius = LengthType;
    pub type Clothoid = ClothoidType;
    pub type ClothoidTypeEndParameter = f64;
    pub type ClothoidTypeRefLocation = ClothoidTypeRefLocationElementType;
    pub type ClothoidTypeScaleFactor = f64;
    pub type ClothoidTypeStartParameter = f64;
    pub type CompositeCurve = CompositeCurveType;
    pub type CompositeSolid = CompositeSolidType;
    pub type CompositeSurface = CompositeSurfaceType;
    pub type CompoundCRS = CompoundCRSType;
    pub type ConcatenatedOperation = ConcatenatedOperationType;
    pub type Cone = ConeType;
    pub type ConventionalUnit = ConventionalUnitType;
    pub type Conversion = ConversionType;
    pub type ConversionToPreferredUnitTypeFactor = f64;
    pub type ConversionToPreferredUnitTypeFormula = FormulaType;
    pub type CoordinateSystemAxis = CoordinateSystemAxisType;
    pub type Count = CountElementType;
    pub type CountExtent = CountExtentType;
    pub type CountList = IntegerOrNilReasonListType;
    pub type CoverageMappingRule = MappingRuleType;
    pub type CubicSpline = CubicSplineType;
    pub type CubicSplineTypeVectorAtEnd = DirectPositionType;
    pub type CubicSplineTypeVectorAtStart = DirectPositionType;
    pub type Cylinder = CylinderType;
    pub type CylindricalCS = CylindricalCSType;
    pub type DataBlock = DataBlockType;
    pub type DefinitionCollection = DictionaryType;
    pub type DefinitionProxy = DefinitionProxyType;
    pub type DerivedCRS = DerivedCRSType;
    pub type DerivedUnit = DerivedUnitType;
    pub type Dictionary = DictionaryType;
    pub type DirectedObservationAtDistance = DirectedObservationAtDistanceType;
    pub type DirectedObservationAtDistanceTypeDistance = MeasureType;
    pub type DirectionDescriptionTypeCompassPoint = CompassPointEnumerationType;
    pub type DirectionDescriptionTypeDescription = String;
    pub type DirectionDescriptionTypeKeyword = CodeType;
    pub type DirectionDescriptionTypeReference = ReferenceType;
    pub type DirectionPropertyTypeCompassPoint = CompassPointEnumerationType;
    pub type DirectionPropertyTypeDirectionDescription = DirectionDescriptionType;
    pub type DirectionPropertyTypeDirectionKeyword = CodeType;
    pub type DirectionPropertyTypeDirectionString = StringOrRefType;
    pub type DirectionPropertyTypeDirectionVector = DirectionVectorType;
    pub type DirectionVectorTypeHorizontalAngle = AngleType;
    pub type DirectionVectorTypeVerticalAngle = AngleType;
    pub type DynamicFeatureCollection = DynamicFeatureCollectionType;
    pub type Edge = EdgeType;
    pub type EdgeTypeContainer = TopoSolidPropertyType;
    pub type Ellipsoid = EllipsoidType;
    pub type EllipsoidalCS = EllipsoidalCSType;
    pub type EngineeringCRS = EngineeringCRSType;
    pub type EngineeringDatum = EngineeringDatumType;
    pub type EnvelopeTypeLowerCorner = DirectPositionType;
    pub type EnvelopeTypeUpperCorner = DirectPositionType;
    pub type EnvelopeWithTimePeriod = EnvelopeWithTimePeriodType;
    pub type EnvelopeWithTimePeriodTypeBeginPosition = TimePositionType;
    pub type EnvelopeWithTimePeriodTypeEndPosition = TimePositionType;
    pub type Face = FaceType;
    pub type FaceTypeIsolated = NodePropertyType;
    pub type FeatureCollection = FeatureCollectionType;
    pub type File = FileType;
    pub type FileTypeCompression = String;
    pub type FileTypeFileName = String;
    pub type FileTypeFileReference = String;
    pub type FileTypeFileStructure = CodeType;
    pub type FileTypeMimeType = String;
    pub type FormulaTypeA = f64;
    pub type FormulaTypeB = f64;
    pub type FormulaTypeC = f64;
    pub type FormulaTypeD = f64;
    pub type GenericMetaData = GenericMetaDataType;
    pub type GeocentricCRS = GeocentricCRSType;
    pub type Geodesic = GeodesicType;
    pub type GeodeticCRS = GeodeticCRSType;
    pub type GeodeticDatum = GeodeticDatumType;
    pub type GeographicCRS = GeographicCRSType;
    pub type GeometricComplex = GeometricComplexType;
    pub type GeometricComplexTypeElement = GeometricPrimitivePropertyType;
    pub type GridCoverage = DiscreteCoverageType;
    pub type GridEnvelopeTypeHigh = IntegerListType;
    pub type GridEnvelopeTypeLow = IntegerListType;
    pub type GridFunction = GridFunctionType;
    pub type GridFunctionTypeSequenceRule = SequenceRuleType;
    pub type GridFunctionTypeStartPoint = IntegerListType;
    pub type GridLimitsTypeGridEnvelope = GridEnvelopeType;
    pub type GridTypeAxisLabels = NcnameListType;
    pub type GridTypeAxisName = String;
    pub type GridTypeLimits = GridLimitsType;
    pub type ImageCRS = ImageCRSType;
    pub type ImageDatum = ImageDatumType;
    pub type KnotPropertyTypeKnot = KnotType;
    pub type KnotTypeMultiplicity = usize;
    pub type KnotTypeValue = f64;
    pub type KnotTypeWeight = f64;
    pub type LineString = LineStringType;
    pub type LineStringSegment = LineStringSegmentType;
    pub type LinearCS = LinearCSType;
    pub type LinearRing = LinearRingType;
    pub type LocationKeyWord = CodeType;
    pub type LocationString = StringOrRefType;
    pub type MappingRule = StringOrRefType;
    pub type MappingRuleTypeRuleDefinition = String;
    pub type MappingRuleTypeRuleReference = ReferenceType;
    pub type MovingObjectStatus = MovingObjectStatusType;
    pub type MovingObjectStatusTypeAcceleration = MeasureType;
    pub type MovingObjectStatusTypeBearing = DirectionPropertyType;
    pub type MovingObjectStatusTypeElevation = MeasureType;
    pub type MovingObjectStatusTypePosition = GeometryPropertyType;
    pub type MovingObjectStatusTypeSpeed = MeasureType;
    pub type MultiCurve = MultiCurveType;
    pub type MultiCurveCoverage = DiscreteCoverageType;
    pub type MultiGeometry = MultiGeometryType;
    pub type MultiPoint = MultiPointType;
    pub type MultiPointCoverage = DiscreteCoverageType;
    pub type MultiSolid = MultiSolidType;
    pub type MultiSolidCoverage = DiscreteCoverageType;
    pub type MultiSurface = MultiSurfaceType;
    pub type MultiSurfaceCoverage = DiscreteCoverageType;
    pub type Node = NodeType;
    pub type NodeTypeContainer = FaceOrTopoSolidPropertyType;
    pub type Null = NilReasonType;
    pub type ObliqueCartesianCS = ObliqueCartesianCSType;
    pub type OffsetCurve = OffsetCurveType;
    pub type OffsetCurveTypeDistance = LengthType;
    pub type OffsetCurveTypeOffsetBase = CurvePropertyType;
    pub type OffsetCurveTypeRefDirection = DirectPositionType;
    pub type OperationMethod = OperationMethodType;
    pub type OperationParameter = OperationParameterType;
    pub type OperationParameterGroup = OperationParameterGroupType;
    pub type OrientableCurve = OrientableCurveType;
    pub type OrientableSurface = OrientableSurfaceType;
    pub type ParameterValue = ParameterValueType;
    pub type ParameterValueGroup = ParameterValueGroupType;
    pub type PassThroughOperation = PassThroughOperationType;
    pub type PolarCS = PolarCSType;
    pub type Polygon = PolygonType;
    pub type PolygonPatch = PolygonPatchType;
    pub type PolyhedralSurface = SurfaceType;
    pub type PrimeMeridian = PrimeMeridianType;
    pub type ProjectedCRS = ProjectedCRSType;
    pub type Quantity = QuantityElementType;
    pub type QuantityExtent = MeasureOrNilReasonListType;
    pub type QuantityList = MeasureOrNilReasonListType;
    pub type Rectangle = RectangleType;
    pub type RectifiedGrid = RectifiedGridType;
    pub type RectifiedGridCoverage = DiscreteCoverageType;
    pub type RectifiedGridTypeOffsetVector = DirectPositionType;
    pub type RectifiedGridTypeOrigin = PointPropertyType;
    pub type Ring = RingType;
    pub type Rows = RowsElementType;
    pub type RowsRow = RowsRowElementType;
    pub type SecondDefiningParameter = SecondDefiningParameterElementType;
    pub type SecondDefiningParameterInverseFlattening = MeasureType;
    pub type SecondDefiningParameterIsSphere = bool;
    pub type SecondDefiningParameterSemiMinorAxis = LengthType;
    pub type Shell = ShellType;
    pub type Solid = SolidType;
    pub type SolidTypeExterior = ShellPropertyType;
    pub type SolidTypeInterior = ShellPropertyType;
    pub type Sphere = SphereType;
    pub type SphericalCS = SphericalCSType;
    pub type TemporalCRS = TemporalCRSType;
    pub type TemporalCS = TemporalCSType;
    pub type TemporalDatum = TemporalDatumType;
    pub type TimeCS = TimeCSType;
    pub type TimeCalendar = TimeCalendarType;
    pub type TimeCalendarEra = TimeCalendarEraType;
    pub type TimeCalendarEraTypeEpochOfUse = TimePeriodPropertyType;
    pub type TimeCalendarEraTypeJulianReference = f64;
    pub type TimeCalendarEraTypeReferenceDate = String;
    pub type TimeCalendarEraTypeReferenceEvent = StringOrRefType;
    pub type TimeCalendarTypeReferenceFrame = TimeCalendarEraPropertyType;
    pub type TimeClock = TimeClockType;
    pub type TimeClockTypeDateBasis = TimeCalendarPropertyType;
    pub type TimeClockTypeReferenceEvent = StringOrRefType;
    pub type TimeClockTypeReferenceTime = String;
    pub type TimeClockTypeUtcReference = String;
    pub type TimeCoordinateSystem = TimeCoordinateSystemType;
    pub type TimeCoordinateSystemTypeInterval = TimeIntervalLengthType;
    pub type TimeCoordinateSystemTypeOrigin = TimeInstantPropertyType;
    pub type TimeCoordinateSystemTypeOriginPosition = TimePositionType;
    pub type TimeEdge = TimeEdgeType;
    pub type TimeEdgeTypeEnd = TimeNodePropertyType;
    pub type TimeEdgeTypeExtent = TimePeriodPropertyType;
    pub type TimeEdgeTypeStart = TimeNodePropertyType;
    pub type TimeInstant = TimeInstantType;
    pub type TimeNode = TimeNodeType;
    pub type TimeNodeTypeNextEdge = TimeEdgePropertyType;
    pub type TimeNodeTypePosition = TimeInstantPropertyType;
    pub type TimeNodeTypePreviousEdge = TimeEdgePropertyType;
    pub type TimeOrdinalEra = TimeOrdinalEraType;
    pub type TimeOrdinalEraTypeEnd = TimeNodePropertyType;
    pub type TimeOrdinalEraTypeExtent = TimePeriodPropertyType;
    pub type TimeOrdinalEraTypeGroup = ReferenceType;
    pub type TimeOrdinalEraTypeMember = TimeOrdinalEraPropertyType;
    pub type TimeOrdinalEraTypeRelatedTime = RelatedTimeType;
    pub type TimeOrdinalEraTypeStart = TimeNodePropertyType;
    pub type TimeOrdinalReferenceSystem = TimeOrdinalReferenceSystemType;
    pub type TimeOrdinalReferenceSystemTypeComponent = TimeOrdinalEraPropertyType;
    pub type TimePeriod = TimePeriodType;
    pub type TimePeriodTypeBegin = TimeInstantPropertyType;
    pub type TimePeriodTypeBeginPosition = TimePositionType;
    pub type TimePeriodTypeEnd = TimeInstantPropertyType;
    pub type TimePeriodTypeEndPosition = TimePositionType;
    pub type TimeReferenceSystemTypeDomainOfValidity = String;
    pub type TimeTopologyComplex = TimeTopologyComplexType;
    pub type TimeTopologyComplexTypePrimitive = TimeTopologyPrimitivePropertyType;
    pub type Tin = TinType;
    pub type TinTypeBreakLines = LineStringSegmentArrayPropertyType;
    pub type TinTypeControlPoint = TinTypeControlPointElementType;
    pub type TinTypeMaxLength = LengthType;
    pub type TinTypeStopLines = LineStringSegmentArrayPropertyType;
    pub type TopoComplex = TopoComplexType;
    pub type TopoCurve = TopoCurveType;
    #[derive(Debug, Clone)]
    pub struct TopoCurveType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<TopoCurveTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TopoCurveTypeContent {
        Content3(AbstractGMLContent3Type),
        DirectedEdge(DirectedEdgePropertyType),
    }
    pub type TopoPoint = TopoPointType;
    #[derive(Debug, Clone)]
    pub struct TopoPointType {
        pub id: String,
        pub content: [TopoPointTypeContent; 2usize],
    }
    #[derive(Debug, Clone)]
    pub enum TopoPointTypeContent {
        Content3(AbstractGMLContent3Type),
        DirectedNode(DirectedNodePropertyType),
    }
    pub type TopoSolid = TopoSolidType;
    pub type TopoSolidTypeIsolated = NodeOrEdgePropertyType;
    pub type TopoSurface = TopoSurfaceType;
    #[derive(Debug, Clone)]
    pub struct TopoSurfaceType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<TopoSurfaceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TopoSurfaceTypeContent {
        Content3(AbstractGMLContent3Type),
        DirectedFace(DirectedFacePropertyType),
    }
    pub type TopoVolume = TopoVolumeType;
    #[derive(Debug, Clone)]
    pub struct TopoVolumeType {
        pub id: String,
        pub aggregation_type: Option<AggregationType>,
        pub content: Vec<TopoVolumeTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TopoVolumeTypeContent {
        Content3(AbstractGMLContent3Type),
        DirectedTopoSolid(DirectedTopoSolidPropertyType),
    }
    pub type Transformation = TransformationType;
    pub type Triangle = TriangleType;
    pub type UserDefinedCS = UserDefinedCSType;
    pub type ValueArray = ValueArrayType;
    pub type VerticalCRS = VerticalCRSType;
    pub type VerticalCS = VerticalCSType;
    pub type VerticalDatum = VerticalDatumType;
    #[derive(Debug, Clone)]
    pub struct AbstractAssociationRole(pub Box<dyn AbstractAssociationRoleTrait>);
    pub trait AbstractAssociationRoleTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    pub type AbstractGeneralOperationParameterRef = AbstractGeneralOperationParameterPropertyType;
    #[derive(Debug, Clone)]
    pub struct AbstractInlineProperty(pub Box<dyn AbstractInlinePropertyTrait>);
    pub trait AbstractInlinePropertyTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct AbstractReference(pub Box<dyn AbstractReferenceTrait>);
    pub trait AbstractReferenceTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct AbstractStrictAssociationRole(pub Box<dyn AbstractStrictAssociationRoleTrait>);
    pub trait AbstractStrictAssociationRoleTrait:
        core::fmt::Debug + Clone + xsd_parser::AsAny
    {
    }
    pub type AnchorPoint = CodeType;
    pub type Angle = AngleType;
    pub type AssociationName = String;
    pub type AxisAbbrev = CodeType;
    pub type AxisDirection = CodeType;
    pub type BaseCRS = SingleCRSPropertyType;
    pub type BaseCurve = CurvePropertyType;
    pub type BaseGeodeticCRS = GeodeticCRSPropertyType;
    pub type BaseGeographicCRS = GeographicCRSPropertyType;
    pub type BaseSurface = SurfacePropertyType;
    pub type BooleanValue = bool;
    pub type BoundedBy = BoundingShapeType;
    pub type CartesianCSRef = CartesianCSPropertyType;
    pub type CatalogSymbol = CodeType;
    pub type CenterLineOf = CurvePropertyType;
    pub type CenterOf = PointPropertyType;
    pub type CompoundCRSRef = CompoundCRSPropertyType;
    #[derive(Debug, Clone)]
    pub struct CompoundCRSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<CompoundCRSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CompoundCRSPropertyTypeContent {
        CompoundCRS(CompoundCRSType),
    }
    pub type ConcatenatedOperationRef = ConcatenatedOperationPropertyType;
    #[derive(Debug, Clone)]
    pub struct ConcatenatedOperationPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<ConcatenatedOperationPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ConcatenatedOperationPropertyTypeContent {
        ConcatenatedOperation(ConcatenatedOperationType),
    }
    pub type ConversionRef = ConversionPropertyType;
    #[derive(Debug, Clone)]
    pub struct ConversionPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<ConversionPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ConversionPropertyTypeContent {
        Conversion(ConversionType),
    }
    pub type ConversionToPreferredUnit = ConversionToPreferredUnitType;
    pub type CoordinateOperationAccuracy = CoordinateOperationAccuracyElementType;
    pub type CoordinateOperationRef = CoordinateOperationPropertyType;
    pub type CoordinateSystemAxisRef = CoordinateSystemAxisPropertyType;
    pub type CoordinateSystemRef = CoordinateSystemPropertyType;
    pub type Coordinates = CoordinatesType;
    pub type CoverageFunction = CoverageFunctionType;
    pub type CrsRef = CrspropertyType;
    pub type CurveArrayProperty = CurveArrayPropertyType;
    pub type CurveMember = CurvePropertyType;
    pub type CurveMembers = CurveArrayPropertyType;
    pub type CurveProperty = CurvePropertyType;
    pub type CylindricalCS = CylindricalCSPropertyType;
    pub type CylindricalCSRef = CylindricalCSPropertyType;
    pub type DataSource = StringOrRefType;
    pub type DataSourceReference = ReferenceType;
    pub type DatumRef = DatumPropertyType;
    #[derive(Debug, Clone)]
    pub struct DatumPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<DatumPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DatumPropertyTypeContent {
        AbstractDatum(AbstractDatum),
    }
    pub type DecimalMinutes = f64;
    pub type DefaultCodeSpace = String;
    pub type DefinedByConversion = GeneralConversionPropertyType;
    pub type DefinitionMember = DictionaryEntryType;
    pub type DefinitionRef = ReferenceType;
    pub type Degrees = DegreesType;
    pub type DerivationUnitTerm = DerivationUnitTermType;
    pub type DerivedCRSRef = DerivedCRSPropertyType;
    #[derive(Debug, Clone)]
    pub struct DerivedCRSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<DerivedCRSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DerivedCRSPropertyTypeContent {
        DerivedCRS(DerivedCRSType),
    }
    pub type DerivedCRSType = CodeType;
    pub type Description = StringOrRefType;
    pub type DescriptionReference = ReferenceType;
    pub type DirectedEdge = DirectedEdgePropertyType;
    pub type DirectedFace = DirectedFacePropertyType;
    pub type DirectedNode = DirectedNodePropertyType;
    pub type DirectedTopoSolid = DirectedTopoSolidPropertyType;
    pub type Direction = DirectionPropertyType;
    pub type DmsAngle = DmsangleType;
    pub type DmsAngleValue = DmsangleType;
    pub type DomainOfValidity = DomainOfValidityElementType;
    pub type DoubleOrNilReasonTupleList = DoubleOrNilReasonListType;
    pub type Duration = String;
    pub type DynamicMembers = DynamicFeatureMemberType;
    pub type EdgeOf = CurvePropertyType;
    pub type EllipsoidRef = EllipsoidPropertyType;
    pub type EllipsoidalCSRef = EllipsoidalCSPropertyType;
    pub type EngineeringCRSRef = EngineeringCRSPropertyType;
    #[derive(Debug, Clone)]
    pub struct EngineeringCRSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<EngineeringCRSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum EngineeringCRSPropertyTypeContent {
        EngineeringCRS(EngineeringCRSType),
    }
    pub type EngineeringDatumRef = EngineeringDatumPropertyType;
    pub type ExtentOf = SurfacePropertyType;
    pub type Exterior = AbstractRingPropertyType;
    pub type FeatureMember = FeaturePropertyType;
    pub type FeatureMembers = FeatureArrayPropertyType;
    pub type FeatureProperty = FeaturePropertyType;
    pub type FormulaCitation = FormulaCitationElementType;
    pub type GeneralConversionRef = GeneralConversionPropertyType;
    pub type GeneralTransformationRef = GeneralTransformationPropertyType;
    #[derive(Debug, Clone)]
    pub struct GeneralTransformationPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<GeneralTransformationPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GeneralTransformationPropertyTypeContent {
        AbstractGeneralTransformation(AbstractGeneralTransformation),
    }
    pub type GeocentricCRSRef = GeocentricCRSPropertyType;
    #[derive(Debug, Clone)]
    pub struct GeocentricCRSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<GeocentricCRSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GeocentricCRSPropertyTypeContent {
        GeocentricCRS(GeocentricCRSType),
    }
    pub type GeodeticDatumRef = GeodeticDatumPropertyType;
    pub type GeographicCRSRef = GeographicCRSPropertyType;
    pub type GeometryMember = GeometryPropertyType;
    pub type GeometryMembers = GeometryArrayPropertyType;
    pub type GmlProfileSchema = String;
    pub type GreenwichLongitude = AngleType;
    pub type GridDomain = DomainSetType;
    pub type Identifier = CodeType;
    pub type ImageCRSRef = ImageCRSPropertyType;
    #[derive(Debug, Clone)]
    pub struct ImageCRSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<ImageCRSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ImageCRSPropertyTypeContent {
        ImageCRS(ImageCRSType),
    }
    pub type ImageDatumRef = ImageDatumPropertyType;
    pub type IncludesParameter = AbstractGeneralOperationParameterPropertyType;
    pub type IncludesSingleCRS = SingleCRSPropertyType;
    pub type IncludesValue = AbstractGeneralParameterValuePropertyType;
    pub type IndirectEntry = IndirectEntryType;
    pub type IntegerValue = usize;
    pub type IntegerValueList = IntegerListType;
    pub type Interior = AbstractRingPropertyType;
    pub type LinearCS = LinearCSPropertyType;
    pub type LinearCSRef = LinearCSPropertyType;
    pub type LocationName = CodeType;
    pub type LocationReference = ReferenceType;
    pub type MaximalComplex = TopoComplexPropertyType;
    pub type MaximumOccurs = usize;
    pub type MaximumValue = f64;
    pub type Measure = MeasureType;
    pub type Member = AssociationRoleType;
    pub type Members = ArrayAssociationType;
    pub type MetaDataProperty = MetaDataPropertyType;
    pub type MethodFormula = CodeType;
    pub type MinimumOccurs = usize;
    pub type MinimumValue = f64;
    pub type Minutes = usize;
    pub type ModifiedCoordinate = usize;
    pub type MultiCenterLineOf = MultiCurvePropertyType;
    #[derive(Debug, Clone)]
    pub struct MultiCurvePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<MultiCurvePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MultiCurvePropertyTypeContent {
        MultiCurve(MultiCurveType),
    }
    impl MultiCurvePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type MultiCenterOf = MultiPointPropertyType;
    #[derive(Debug, Clone)]
    pub struct MultiPointPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<MultiPointPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MultiPointPropertyTypeContent {
        MultiPoint(MultiPointType),
    }
    impl MultiPointPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type MultiCoverage = MultiSurfacePropertyType;
    #[derive(Debug, Clone)]
    pub struct MultiSurfacePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<MultiSurfacePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MultiSurfacePropertyTypeContent {
        MultiSurface(MultiSurfaceType),
    }
    impl MultiSurfacePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type MultiCurveDomain = DomainSetType;
    pub type MultiCurveProperty = MultiCurvePropertyType;
    pub type MultiEdgeOf = MultiCurvePropertyType;
    pub type MultiExtentOf = MultiSurfacePropertyType;
    pub type MultiGeometryProperty = MultiGeometryPropertyType;
    #[derive(Debug, Clone)]
    pub struct MultiGeometryPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<MultiGeometryPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MultiGeometryPropertyTypeContent {
        AbstractGeometricAggregate(AbstractGeometricAggregate),
    }
    impl MultiGeometryPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type MultiLocation = MultiPointPropertyType;
    pub type MultiPointDomain = DomainSetType;
    pub type MultiPointProperty = MultiPointPropertyType;
    pub type MultiPosition = MultiPointPropertyType;
    pub type MultiSolidDomain = DomainSetType;
    pub type MultiSolidProperty = MultiSolidPropertyType;
    #[derive(Debug, Clone)]
    pub struct MultiSolidPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub owns: bool,
        pub content: Option<MultiSolidPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MultiSolidPropertyTypeContent {
        MultiSolid(MultiSolidType),
    }
    impl MultiSolidPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type MultiSurfaceDomain = DomainSetType;
    pub type MultiSurfaceProperty = MultiSurfacePropertyType;
    pub type Name = CodeType;
    pub type ObliqueCartesianCSRef = ObliqueCartesianCSPropertyType;
    pub type OperationMethodRef = OperationMethodPropertyType;
    pub type OperationParameterGroupRef = OperationParameterPropertyType;
    pub type OperationParameterRef = OperationParameterPropertyType;
    pub type OperationRef = OperationPropertyType;
    #[derive(Debug, Clone)]
    pub struct OperationPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<OperationPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum OperationPropertyTypeContent {
        AbstractOperation(AbstractOperation),
    }
    pub type OperationVersion = String;
    pub type Origin = String;
    pub type PassThroughOperationRef = PassThroughOperationPropertyType;
    #[derive(Debug, Clone)]
    pub struct PassThroughOperationPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<PassThroughOperationPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PassThroughOperationPropertyTypeContent {
        PassThroughOperation(PassThroughOperationType),
    }
    pub type PixelInCell = CodeType;
    pub type PointArrayProperty = PointArrayPropertyType;
    pub type PointMember = PointPropertyType;
    pub type PointMembers = PointArrayPropertyType;
    pub type PointProperty = PointPropertyType;
    pub type PointRep = PointPropertyType;
    pub type PolarCS = PolarCSPropertyType;
    pub type PolarCSRef = PolarCSPropertyType;
    pub type PolygonPatches = SurfacePatchArrayPropertyType;
    pub type Pos = DirectPositionType;
    pub type PosList = DirectPositionListType;
    pub type Position = PointPropertyType;
    pub type PrimeMeridianRef = PrimeMeridianPropertyType;
    pub type PriorityLocation = PriorityLocationPropertyType;
    pub type ProjectedCRSRef = ProjectedCRSPropertyType;
    #[derive(Debug, Clone)]
    pub struct ProjectedCRSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<ProjectedCRSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ProjectedCRSPropertyTypeContent {
        ProjectedCRS(ProjectedCRSType),
    }
    pub type QuantityType = StringOrRefType;
    pub type QuantityTypeReference = ReferenceType;
    pub type RangeMeaning = CodeType;
    pub type RangeParameters = AssociationRoleType;
    pub type RangeSet = RangeSetType;
    pub type RealizationEpoch = String;
    pub type RectifiedGridDomain = DomainSetType;
    pub type ReferenceSystemRef = CrspropertyType;
    pub type Remarks = String;
    pub type ResultOf = ResultType;
    pub type ReversePropertyName = String;
    pub type RoughConversionToPreferredUnit = ConversionToPreferredUnitType;
    pub type Scope = String;
    pub type SecondDefiningParameter = SecondDefiningParameterElementType;
    pub type Seconds = f64;
    pub type Segments = CurveSegmentArrayPropertyType;
    pub type SemiMajorAxis = MeasureType;
    pub type SingleCRSRef = SingleCRSPropertyType;
    pub type SingleOperationRef = SingleOperationPropertyType;
    #[derive(Debug, Clone)]
    pub struct SingleOperationPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<SingleOperationPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum SingleOperationPropertyTypeContent {
        AbstractSingleOperation(AbstractSingleOperation),
    }
    pub type SolidArrayProperty = SolidArrayPropertyType;
    pub type SolidMember = SolidPropertyType;
    pub type SolidMembers = SolidArrayPropertyType;
    pub type SolidProperty = SolidPropertyType;
    pub type SourceCRS = CrspropertyType;
    pub type SourceDimensions = usize;
    pub type SphericalCSRef = SphericalCSPropertyType;
    pub type Status = StringOrRefType;
    pub type StatusReference = ReferenceType;
    pub type StringValue = String;
    pub type SubComplex = TopoComplexPropertyType;
    pub type Subject = TargetPropertyType;
    pub type SuperComplex = TopoComplexPropertyType;
    pub type SurfaceArrayProperty = SurfaceArrayPropertyType;
    pub type SurfaceMember = SurfacePropertyType;
    pub type SurfaceMembers = SurfaceArrayPropertyType;
    pub type SurfaceProperty = SurfacePropertyType;
    pub type TargetCRS = CrspropertyType;
    pub type TargetDimensions = usize;
    pub type TargetElement = String;
    pub type TemporalCRSRef = TemporalCRSPropertyType;
    #[derive(Debug, Clone)]
    pub struct TemporalCRSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<TemporalCRSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TemporalCRSPropertyTypeContent {
        TemporalCRS(TemporalCRSType),
    }
    pub type TemporalCSRef = TemporalCSPropertyType;
    pub type TemporalDatumRef = TemporalDatumPropertyType;
    pub type TimeInterval = TimeIntervalLengthType;
    pub type TimePosition = TimePositionType;
    pub type TopoComplexProperty = TopoComplexPropertyType;
    pub type TopoCurveProperty = TopoCurvePropertyType;
    #[derive(Debug, Clone)]
    pub struct TopoCurvePropertyType {
        pub owns: bool,
        pub content: TopoCurvePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TopoCurvePropertyTypeContent {
        TopoCurve(TopoCurveType),
    }
    impl TopoCurvePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type TopoPointProperty = TopoPointPropertyType;
    #[derive(Debug, Clone)]
    pub struct TopoPointPropertyType {
        pub owns: bool,
        pub content: TopoPointPropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TopoPointPropertyTypeContent {
        TopoPoint(TopoPointType),
    }
    impl TopoPointPropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type TopoPrimitiveMember = TopoPrimitiveMemberType;
    pub type TopoPrimitiveMembers = TopoPrimitiveArrayAssociationType;
    pub type TopoSurfaceProperty = TopoSurfacePropertyType;
    #[derive(Debug, Clone)]
    pub struct TopoSurfacePropertyType {
        pub owns: bool,
        pub content: TopoSurfacePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TopoSurfacePropertyTypeContent {
        TopoSurface(TopoSurfaceType),
    }
    impl TopoSurfacePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type TopoVolumeProperty = TopoVolumePropertyType;
    #[derive(Debug, Clone)]
    pub struct TopoVolumePropertyType {
        pub owns: bool,
        pub content: TopoVolumePropertyTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TopoVolumePropertyTypeContent {
        TopoVolume(TopoVolumeType),
    }
    impl TopoVolumePropertyType {
        #[must_use]
        pub fn default_owns() -> bool {
            false
        }
    }
    pub type Track = HistoryPropertyType;
    pub type TransformationRef = TransformationPropertyType;
    #[derive(Debug, Clone)]
    pub struct TransformationPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<TransformationPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TransformationPropertyTypeContent {
        Transformation(TransformationType),
    }
    pub type TrianglePatches = SurfacePatchArrayPropertyType;
    pub type TupleList = CoordinatesType;
    pub type UnitOfMeasure = UnitOfMeasureType;
    #[derive(Debug, Clone)]
    pub struct UnitOfMeasureType {
        pub uom: String,
    }
    pub type UserDefinedCS = UserDefinedCSPropertyType;
    pub type UserDefinedCSRef = UserDefinedCSPropertyType;
    pub type UsesAffineCS = AffineCSPropertyType;
    pub type UsesAxis = CoordinateSystemAxisPropertyType;
    pub type UsesCS = CoordinateSystemPropertyType;
    pub type UsesCartesianCS = CartesianCSPropertyType;
    pub type UsesEllipsoid = EllipsoidPropertyType;
    pub type UsesEllipsoidalCS = EllipsoidalCSPropertyType;
    pub type UsesEngineeringDatum = EngineeringDatumPropertyType;
    pub type UsesGeodeticDatum = GeodeticDatumPropertyType;
    pub type UsesImageDatum = ImageDatumPropertyType;
    pub type UsesMethod = OperationMethodPropertyType;
    pub type UsesObliqueCartesianCS = ObliqueCartesianCSPropertyType;
    pub type UsesOperation = CoordinateOperationPropertyType;
    pub type UsesParameter = AbstractGeneralOperationParameterPropertyType;
    pub type UsesPrimeMeridian = PrimeMeridianPropertyType;
    pub type UsesSingleOperation = CoordinateOperationPropertyType;
    pub type UsesSphericalCS = SphericalCSPropertyType;
    pub type UsesTemporalCS = TemporalCSPropertyType;
    pub type UsesTemporalDatum = TemporalDatumPropertyType;
    pub type UsesTimeCS = TimeCSPropertyType;
    pub type UsesValue = AbstractGeneralParameterValuePropertyType;
    pub type UsesVerticalCS = VerticalCSPropertyType;
    pub type UsesVerticalDatum = VerticalDatumPropertyType;
    pub type Using = ProcedurePropertyType;
    pub type ValidTime = TimePrimitivePropertyType;
    pub type Value = MeasureType;
    pub type ValueComponent = ValuePropertyType;
    pub type ValueComponents = ValueArrayPropertyType;
    pub type ValueFile = String;
    pub type ValueList = MeasureListType;
    pub type ValueOfParameter = OperationParameterPropertyType;
    pub type ValueProperty = ValuePropertyType;
    pub type ValuesOfGroup = OperationParameterGroupPropertyType;
    pub type Vector = DirectPositionType;
    pub type VerticalCRSRef = VerticalCRSPropertyType;
    #[derive(Debug, Clone)]
    pub struct VerticalCRSPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub nil_reason: Option<NilReasonType>,
        pub remote_schema: Option<String>,
        pub content: Option<VerticalCRSPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum VerticalCRSPropertyTypeContent {
        VerticalCRS(VerticalCRSType),
    }
    pub type VerticalCSRef = VerticalCSPropertyType;
    pub type VerticalDatumRef = VerticalDatumPropertyType;
}
pub mod xlink {
    use super::*;
    #[derive(Debug, Clone)]
    pub enum Show {
        New,
        Replace,
        Embed,
        Other,
        None,
    }
    #[derive(Debug, Clone)]
    pub enum Actuate {
        OnLoad,
        OnRequest,
        Other,
        None,
    }
}
pub mod gmd {
    use super::*;
    #[derive(Debug, Clone)]
    pub struct MdMetadataType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdMetadataTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdMetadataTypeContent {
        FileIdentifier(gco::CharacterStringPropertyType),
        Language(gco::CharacterStringPropertyType),
        CharacterSet(MdCharacterSetCodePropertyType),
        ParentIdentifier(gco::CharacterStringPropertyType),
        HierarchyLevel(MdScopeCodePropertyType),
        HierarchyLevelName(gco::CharacterStringPropertyType),
        Contact(CiResponsiblePartyPropertyType),
        DateStamp(gco::DatePropertyType),
        MetadataStandardName(gco::CharacterStringPropertyType),
        MetadataStandardVersion(gco::CharacterStringPropertyType),
        DataSetURI(gco::CharacterStringPropertyType),
        Locale(PtLocalePropertyType),
        SpatialRepresentationInfo(MdSpatialRepresentationPropertyType),
        ReferenceSystemInfo(MdReferenceSystemPropertyType),
        MetadataExtensionInfo(MdMetadataExtensionInformationPropertyType),
        IdentificationInfo(MdIdentificationPropertyType),
        ContentInfo(MdContentInformationPropertyType),
        DistributionInfo(MdDistributionPropertyType),
        DataQualityInfo(DqDataQualityPropertyType),
        PortrayalCatalogueInfo(MdPortrayalCatalogueReferencePropertyType),
        MetadataConstraints(MdConstraintsPropertyType),
        ApplicationSchemaInfo(MdApplicationSchemaInformationPropertyType),
        MetadataMaintenance(MdMaintenanceInformationPropertyType),
        Series(DsAggregatePropertyType),
        Describes(DsDataSetPropertyType),
        PropertyType(gco::ObjectReferencePropertyType),
        FeatureType(gco::ObjectReferencePropertyType),
        FeatureAttribute(gco::ObjectReferencePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdCharacterSetCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdCharacterSetCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdCharacterSetCodePropertyTypeContent {
        MdCharacterSetCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct MdScopeCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdScopeCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdScopeCodePropertyTypeContent {
        MdScopeCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct CiResponsiblePartyPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<CiResponsiblePartyPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CiResponsiblePartyPropertyTypeContent {
        CiResponsibleParty(CiResponsiblePartyType),
    }
    #[derive(Debug, Clone)]
    pub struct PtLocalePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<PtLocalePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PtLocalePropertyTypeContent {
        PtLocale(PtLocaleType),
    }
    #[derive(Debug, Clone)]
    pub struct MdSpatialRepresentationPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdSpatialRepresentationPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdSpatialRepresentationPropertyTypeContent {
        AbstractMDSpatialRepresentation(AbstractMDSpatialRepresentation),
    }
    #[derive(Debug, Clone)]
    pub struct MdReferenceSystemPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdReferenceSystemPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdReferenceSystemPropertyTypeContent {
        MdReferenceSystem(MdReferenceSystemType),
    }
    #[derive(Debug, Clone)]
    pub struct MdMetadataExtensionInformationPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdMetadataExtensionInformationPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdMetadataExtensionInformationPropertyTypeContent {
        MdMetadataExtensionInformation(MdMetadataExtensionInformationType),
    }
    #[derive(Debug, Clone)]
    pub struct MdIdentificationPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdIdentificationPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdIdentificationPropertyTypeContent {
        AbstractMDIdentification(AbstractMDIdentification),
    }
    #[derive(Debug, Clone)]
    pub struct MdContentInformationPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdContentInformationPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdContentInformationPropertyTypeContent {
        AbstractMDContentInformation(AbstractMDContentInformation),
    }
    #[derive(Debug, Clone)]
    pub struct MdDistributionPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdDistributionPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdDistributionPropertyTypeContent {
        MdDistribution(MdDistributionType),
    }
    #[derive(Debug, Clone)]
    pub struct DqDataQualityPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<DqDataQualityPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqDataQualityPropertyTypeContent {
        DqDataQuality(DqDataQualityType),
    }
    #[derive(Debug, Clone)]
    pub struct MdPortrayalCatalogueReferencePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdPortrayalCatalogueReferencePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdPortrayalCatalogueReferencePropertyTypeContent {
        MdPortrayalCatalogueReference(MdPortrayalCatalogueReferenceType),
    }
    #[derive(Debug, Clone)]
    pub struct MdConstraintsPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdConstraintsPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdConstraintsPropertyTypeContent {
        MdConstraints(MdConstraints),
    }
    #[derive(Debug, Clone)]
    pub struct MdApplicationSchemaInformationPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdApplicationSchemaInformationPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdApplicationSchemaInformationPropertyTypeContent {
        MdApplicationSchemaInformation(MdApplicationSchemaInformationType),
    }
    #[derive(Debug, Clone)]
    pub struct MdMaintenanceInformationPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdMaintenanceInformationPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdMaintenanceInformationPropertyTypeContent {
        MdMaintenanceInformation(MdMaintenanceInformationType),
    }
    #[derive(Debug, Clone)]
    pub struct DsAggregatePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<DsAggregatePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DsAggregatePropertyTypeContent {
        AbstractDSAggregate(AbstractDSAggregate),
    }
    #[derive(Debug, Clone)]
    pub struct DsDataSetPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<DsDataSetPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DsDataSetPropertyTypeContent {
        DsDataSet(DsDataSetType),
    }
    #[derive(Debug, Clone)]
    pub struct ExExtentType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<ExExtentTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ExExtentTypeContent {
        Description(gco::CharacterStringPropertyType),
        GeographicElement(ExGeographicExtentPropertyType),
        TemporalElement(ExTemporalExtentPropertyType),
        VerticalElement(ExVerticalExtentPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractDQPositionalAccuracy(pub Box<dyn AbstractDQPositionalAccuracyTrait>);
    pub trait AbstractDQPositionalAccuracyTrait: AbstractDQElementTrait {}
    #[derive(Debug, Clone)]
    pub struct CiResponsiblePartyType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<CiResponsiblePartyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CiResponsiblePartyTypeContent {
        IndividualName(gco::CharacterStringPropertyType),
        OrganisationName(gco::CharacterStringPropertyType),
        PositionName(gco::CharacterStringPropertyType),
        ContactInfo(CiContactPropertyType),
        Role(CiRoleCodePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct PtLocaleType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<PtLocaleTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PtLocaleTypeContent {
        LanguageCode(LanguageCodePropertyType),
        Country(CountryPropertyType),
        CharacterEncoding(MdCharacterSetCodePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractMDSpatialRepresentation(pub Box<dyn AbstractMDSpatialRepresentationTrait>);
    pub trait AbstractMDSpatialRepresentationTrait:
        core::fmt::Debug + Clone + xsd_parser::AsAny
    {
    }
    #[derive(Debug, Clone)]
    pub struct MdReferenceSystemType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Option<MdReferenceSystemTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdReferenceSystemTypeContent {
        ReferenceSystemIdentifier(RsIdentifierPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdMetadataExtensionInformationType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdMetadataExtensionInformationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdMetadataExtensionInformationTypeContent {
        ExtensionOnLineResource(CiOnlineResourcePropertyType),
        ExtendedElementInformation(MdExtendedElementInformationPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractMDIdentification(pub Box<dyn AbstractMDIdentificationTrait>);
    pub trait AbstractMDIdentificationTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct AbstractMDContentInformation(pub Box<dyn AbstractMDContentInformationTrait>);
    pub trait AbstractMDContentInformationTrait:
        core::fmt::Debug + Clone + xsd_parser::AsAny
    {
    }
    #[derive(Debug, Clone)]
    pub struct MdDistributionType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdDistributionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdDistributionTypeContent {
        DistributionFormat(MdFormatPropertyType),
        Distributor(MdDistributorPropertyType),
        TransferOptions(MdDigitalTransferOptionsPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct DqDataQualityType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DqDataQualityTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqDataQualityTypeContent {
        Scope(DqScopePropertyType),
        Report(DqElementPropertyType),
        Lineage(LiLineagePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdPortrayalCatalogueReferenceType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdPortrayalCatalogueReferenceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdPortrayalCatalogueReferenceTypeContent {
        PortrayalCatalogueCitation(CiCitationPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdConstraints(pub Box<dyn MdConstraintsTrait>);
    pub trait MdConstraintsTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct MdApplicationSchemaInformationType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdApplicationSchemaInformationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdApplicationSchemaInformationTypeContent {
        Name(CiCitationPropertyType),
        SchemaLanguage(gco::CharacterStringPropertyType),
        ConstraintLanguage(gco::CharacterStringPropertyType),
        SchemaAscii(gco::CharacterStringPropertyType),
        GraphicsFile(gco::BinaryPropertyType),
        SoftwareDevelopmentFile(gco::BinaryPropertyType),
        SoftwareDevelopmentFileFormat(gco::CharacterStringPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdMaintenanceInformationType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdMaintenanceInformationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdMaintenanceInformationTypeContent {
        MaintenanceAndUpdateFrequency(MdMaintenanceFrequencyCodePropertyType),
        DateOfNextUpdate(gco::DatePropertyType),
        UserDefinedMaintenanceFrequency(gts::TmPeriodDurationPropertyType),
        UpdateScope(MdScopeCodePropertyType),
        UpdateScopeDescription(MdScopeDescriptionPropertyType),
        MaintenanceNote(gco::CharacterStringPropertyType),
        Contact(CiResponsiblePartyPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractDSAggregate(pub Box<dyn AbstractDSAggregateTrait>);
    pub trait AbstractDSAggregateTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct DsDataSetType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DsDataSetTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DsDataSetTypeContent {
        Has(MdMetadataPropertyType),
        PartOf(DsAggregatePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct ExGeographicExtentPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<ExGeographicExtentPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ExGeographicExtentPropertyTypeContent {
        AbstractEXGeographicExtent(AbstractEXGeographicExtent),
    }
    #[derive(Debug, Clone)]
    pub struct ExTemporalExtentPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<ExTemporalExtentPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ExTemporalExtentPropertyTypeContent {
        ExTemporalExtent(ExTemporalExtent),
    }
    #[derive(Debug, Clone)]
    pub struct ExVerticalExtentPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<ExVerticalExtentPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ExVerticalExtentPropertyTypeContent {
        ExVerticalExtent(ExVerticalExtentType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractDQElement(pub Box<dyn AbstractDQElementTrait>);
    pub trait AbstractDQElementTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct DqRelativeInternalPositionalAccuracyType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DqRelativeInternalPositionalAccuracyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqRelativeInternalPositionalAccuracyTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQElementTrait for DqRelativeInternalPositionalAccuracyType {}
    impl AbstractDQPositionalAccuracyTrait for DqRelativeInternalPositionalAccuracyType {}
    impl xsd_parser::AsAny for DqRelativeInternalPositionalAccuracyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DqGriddedDataPositionalAccuracyType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DqGriddedDataPositionalAccuracyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqGriddedDataPositionalAccuracyTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQElementTrait for DqGriddedDataPositionalAccuracyType {}
    impl AbstractDQPositionalAccuracyTrait for DqGriddedDataPositionalAccuracyType {}
    impl xsd_parser::AsAny for DqGriddedDataPositionalAccuracyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DqAbsoluteExternalPositionalAccuracyType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DqAbsoluteExternalPositionalAccuracyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqAbsoluteExternalPositionalAccuracyTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQElementTrait for DqAbsoluteExternalPositionalAccuracyType {}
    impl AbstractDQPositionalAccuracyTrait for DqAbsoluteExternalPositionalAccuracyType {}
    impl xsd_parser::AsAny for DqAbsoluteExternalPositionalAccuracyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CiCitationType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<CiCitationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CiCitationTypeContent {
        Title(gco::CharacterStringPropertyType),
        AlternateTitle(gco::CharacterStringPropertyType),
        Date(CiDatePropertyType),
        Edition(gco::CharacterStringPropertyType),
        EditionDate(gco::DatePropertyType),
        Identifier(MdIdentifierPropertyType),
        CitedResponsibleParty(CiResponsiblePartyPropertyType),
        PresentationForm(CiPresentationFormCodePropertyType),
        Series(CiSeriesPropertyType),
        OtherCitationDetails(gco::CharacterStringPropertyType),
        CollectiveTitle(gco::CharacterStringPropertyType),
        Isbn(gco::CharacterStringPropertyType),
        Issn(gco::CharacterStringPropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum MdPixelOrientationCodeType {
        Center,
        LowerLeft,
        LowerRight,
        UpperRight,
        UpperLeft,
    }
    impl gco::CharacterStringTrait for MdPixelOrientationCodeType {}
    impl xsd_parser::AsAny for MdPixelOrientationCodeType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum MdObligationCodeType {
        Mandatory,
        Optional,
        Conditional,
    }
    impl gco::CharacterStringTrait for MdObligationCodeType {}
    impl xsd_parser::AsAny for MdObligationCodeType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct LocalisedCharacterStringType {
        pub id: Option<String>,
        pub locale: Option<String>,
        pub content: String,
    }
    impl gco::CharacterStringTrait for LocalisedCharacterStringType {}
    impl xsd_parser::AsAny for LocalisedCharacterStringType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub enum MdTopicCategoryCodeType {
        Farming,
        Biota,
        Boundaries,
        ClimatologyMeteorologyAtmosphere,
        Economy,
        Elevation,
        Environment,
        GeoscientificInformation,
        Health,
        ImageryBaseMapsEarthCover,
        IntelligenceMilitary,
        InlandWaters,
        Location,
        Oceans,
        PlanningCadastre,
        Society,
        Structure,
        Transportation,
        UtilitiesCommunication,
    }
    impl gco::CharacterStringTrait for MdTopicCategoryCodeType {}
    impl xsd_parser::AsAny for MdTopicCategoryCodeType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CiContactPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<CiContactPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CiContactPropertyTypeContent {
        CiContact(CiContactType),
    }
    #[derive(Debug, Clone)]
    pub struct CiRoleCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<CiRoleCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CiRoleCodePropertyTypeContent {
        CiRoleCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct LanguageCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<LanguageCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum LanguageCodePropertyTypeContent {
        LanguageCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct CountryPropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<CountryPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CountryPropertyTypeContent {
        Country(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct MdGridSpatialRepresentationType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdGridSpatialRepresentationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdGridSpatialRepresentationTypeContent {
        NumberOfDimensions(gco::IntegerPropertyType),
        AxisDimensionProperties(MdDimensionPropertyType),
        CellGeometry(MdCellGeometryCodePropertyType),
        TransformationParameterAvailability(gco::BooleanPropertyType),
    }
    impl AbstractMDSpatialRepresentationTrait for MdGridSpatialRepresentationType {}
    impl MdGridSpatialRepresentationTrait for MdGridSpatialRepresentationType {}
    impl xsd_parser::AsAny for MdGridSpatialRepresentationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MdVectorSpatialRepresentationType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdVectorSpatialRepresentationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdVectorSpatialRepresentationTypeContent {
        TopologyLevel(MdTopologyLevelCodePropertyType),
        GeometricObjects(MdGeometricObjectsPropertyType),
    }
    impl AbstractMDSpatialRepresentationTrait for MdVectorSpatialRepresentationType {}
    impl xsd_parser::AsAny for MdVectorSpatialRepresentationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MdGeoreferenceableType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdGeoreferenceableTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdGeoreferenceableTypeContent {
        NumberOfDimensions(gco::IntegerPropertyType),
        AxisDimensionProperties(MdDimensionPropertyType),
        CellGeometry(MdCellGeometryCodePropertyType),
        TransformationParameterAvailability(gco::BooleanPropertyType),
        ControlPointAvailability(gco::BooleanPropertyType),
        OrientationParameterAvailability(gco::BooleanPropertyType),
        OrientationParameterDescription(gco::CharacterStringPropertyType),
        GeoreferencedParameters(gco::RecordPropertyType),
        ParameterCitation(CiCitationPropertyType),
    }
    impl AbstractMDSpatialRepresentationTrait for MdGeoreferenceableType {}
    impl MdGridSpatialRepresentationTrait for MdGeoreferenceableType {}
    impl xsd_parser::AsAny for MdGeoreferenceableType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MdGeorectifiedType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdGeorectifiedTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdGeorectifiedTypeContent {
        NumberOfDimensions(gco::IntegerPropertyType),
        AxisDimensionProperties(MdDimensionPropertyType),
        CellGeometry(MdCellGeometryCodePropertyType),
        TransformationParameterAvailability(gco::BooleanPropertyType),
        CheckPointAvailability(gco::BooleanPropertyType),
        CheckPointDescription(gco::CharacterStringPropertyType),
        CornerPoints(gss::GmPointPropertyType),
        CenterPoint(gss::GmPointPropertyType),
        PointInPixel(MdPixelOrientationCodePropertyType),
        TransformationDimensionDescription(gco::CharacterStringPropertyType),
        TransformationDimensionMapping(gco::CharacterStringPropertyType),
    }
    impl AbstractMDSpatialRepresentationTrait for MdGeorectifiedType {}
    impl MdGridSpatialRepresentationTrait for MdGeorectifiedType {}
    impl xsd_parser::AsAny for MdGeorectifiedType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct RsIdentifierPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<RsIdentifierPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RsIdentifierPropertyTypeContent {
        RsIdentifier(RsIdentifierType),
    }
    #[derive(Debug, Clone)]
    pub struct CiOnlineResourcePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<CiOnlineResourcePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CiOnlineResourcePropertyTypeContent {
        CiOnlineResource(CiOnlineResourceType),
    }
    #[derive(Debug, Clone)]
    pub struct MdExtendedElementInformationPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdExtendedElementInformationPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdExtendedElementInformationPropertyTypeContent {
        MdExtendedElementInformation(MdExtendedElementInformationType),
    }
    #[derive(Debug, Clone)]
    pub struct MdDataIdentificationType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdDataIdentificationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdDataIdentificationTypeContent {
        Citation(CiCitationPropertyType),
        Abstract(gco::CharacterStringPropertyType),
        Purpose(gco::CharacterStringPropertyType),
        Credit(gco::CharacterStringPropertyType),
        Status(MdProgressCodePropertyType),
        PointOfContact(CiResponsiblePartyPropertyType),
        ResourceMaintenance(MdMaintenanceInformationPropertyType),
        GraphicOverview(MdBrowseGraphicPropertyType),
        ResourceFormat(MdFormatPropertyType),
        DescriptiveKeywords(MdKeywordsPropertyType),
        ResourceSpecificUsage(MdUsagePropertyType),
        ResourceConstraints(MdConstraintsPropertyType),
        AggregationInfo(MdAggregateInformationPropertyType),
        SpatialRepresentationType(MdSpatialRepresentationTypeCodePropertyType),
        SpatialResolution(MdResolutionPropertyType),
        Language(gco::CharacterStringPropertyType),
        CharacterSet(MdCharacterSetCodePropertyType),
        TopicCategory(MdTopicCategoryCodePropertyType),
        EnvironmentDescription(gco::CharacterStringPropertyType),
        Extent(ExExtentPropertyType),
        SupplementalInformation(gco::CharacterStringPropertyType),
    }
    impl AbstractMDIdentificationTrait for MdDataIdentificationType {}
    impl xsd_parser::AsAny for MdDataIdentificationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MdServiceIdentificationType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdServiceIdentificationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdServiceIdentificationTypeContent {
        Citation(CiCitationPropertyType),
        Abstract(gco::CharacterStringPropertyType),
        Purpose(gco::CharacterStringPropertyType),
        Credit(gco::CharacterStringPropertyType),
        Status(MdProgressCodePropertyType),
        PointOfContact(CiResponsiblePartyPropertyType),
        ResourceMaintenance(MdMaintenanceInformationPropertyType),
        GraphicOverview(MdBrowseGraphicPropertyType),
        ResourceFormat(MdFormatPropertyType),
        DescriptiveKeywords(MdKeywordsPropertyType),
        ResourceSpecificUsage(MdUsagePropertyType),
        ResourceConstraints(MdConstraintsPropertyType),
        AggregationInfo(MdAggregateInformationPropertyType),
    }
    impl AbstractMDIdentificationTrait for MdServiceIdentificationType {}
    impl xsd_parser::AsAny for MdServiceIdentificationType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MdFeatureCatalogueDescriptionType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdFeatureCatalogueDescriptionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdFeatureCatalogueDescriptionTypeContent {
        ComplianceCode(gco::BooleanPropertyType),
        Language(gco::CharacterStringPropertyType),
        IncludedWithDataset(gco::BooleanPropertyType),
        FeatureTypes(gco::GenericNamePropertyType),
        FeatureCatalogueCitation(CiCitationPropertyType),
    }
    impl AbstractMDContentInformationTrait for MdFeatureCatalogueDescriptionType {}
    impl xsd_parser::AsAny for MdFeatureCatalogueDescriptionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MdCoverageDescriptionType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdCoverageDescriptionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdCoverageDescriptionTypeContent {
        AttributeDescription(gco::RecordTypePropertyType),
        ContentType(MdCoverageContentTypeCodePropertyType),
        Dimension(MdRangeDimensionPropertyType),
    }
    impl AbstractMDContentInformationTrait for MdCoverageDescriptionType {}
    impl MdCoverageDescriptionTrait for MdCoverageDescriptionType {}
    impl xsd_parser::AsAny for MdCoverageDescriptionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MdImageDescriptionType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdImageDescriptionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdImageDescriptionTypeContent {
        AttributeDescription(gco::RecordTypePropertyType),
        ContentType(MdCoverageContentTypeCodePropertyType),
        Dimension(MdRangeDimensionPropertyType),
        IlluminationElevationAngle(gco::RealPropertyType),
        IlluminationAzimuthAngle(gco::RealPropertyType),
        ImagingCondition(MdImagingConditionCodePropertyType),
        ImageQualityCode(MdIdentifierPropertyType),
        CloudCoverPercentage(gco::RealPropertyType),
        ProcessingLevelCode(MdIdentifierPropertyType),
        CompressionGenerationQuantity(gco::IntegerPropertyType),
        TriangulationIndicator(gco::BooleanPropertyType),
        RadiometricCalibrationDataAvailability(gco::BooleanPropertyType),
        CameraCalibrationInformationAvailability(gco::BooleanPropertyType),
        FilmDistortionInformationAvailability(gco::BooleanPropertyType),
        LensDistortionInformationAvailability(gco::BooleanPropertyType),
    }
    impl AbstractMDContentInformationTrait for MdImageDescriptionType {}
    impl MdCoverageDescriptionTrait for MdImageDescriptionType {}
    impl xsd_parser::AsAny for MdImageDescriptionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MdFormatPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdFormatPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdFormatPropertyTypeContent {
        MdFormat(MdFormatType),
    }
    #[derive(Debug, Clone)]
    pub struct MdDistributorPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdDistributorPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdDistributorPropertyTypeContent {
        MdDistributor(MdDistributorType),
    }
    #[derive(Debug, Clone)]
    pub struct MdDigitalTransferOptionsPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdDigitalTransferOptionsPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdDigitalTransferOptionsPropertyTypeContent {
        MdDigitalTransferOptions(MdDigitalTransferOptionsType),
    }
    #[derive(Debug, Clone)]
    pub struct DqScopePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<DqScopePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqScopePropertyTypeContent {
        DqScope(DqScopeType),
    }
    #[derive(Debug, Clone)]
    pub struct DqElementPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<DqElementPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqElementPropertyTypeContent {
        AbstractDQElement(AbstractDQElement),
    }
    #[derive(Debug, Clone)]
    pub struct LiLineagePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<LiLineagePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum LiLineagePropertyTypeContent {
        LiLineage(LiLineageType),
    }
    #[derive(Debug, Clone)]
    pub struct CiCitationPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<CiCitationPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CiCitationPropertyTypeContent {
        CiCitation(CiCitationType),
    }
    #[derive(Debug, Clone)]
    pub struct MdConstraintsType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdConstraintsTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdConstraintsTypeContent {
        UseLimitation(gco::CharacterStringPropertyType),
    }
    impl MdConstraintsTrait for MdConstraintsType {}
    impl xsd_parser::AsAny for MdConstraintsType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MdLegalConstraintsType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdLegalConstraintsTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdLegalConstraintsTypeContent {
        UseLimitation(gco::CharacterStringPropertyType),
        AccessConstraints(MdRestrictionCodePropertyType),
        UseConstraints(MdRestrictionCodePropertyType),
        OtherConstraints(gco::CharacterStringPropertyType),
    }
    impl MdConstraintsTrait for MdLegalConstraintsType {}
    impl xsd_parser::AsAny for MdLegalConstraintsType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MdSecurityConstraintsType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdSecurityConstraintsTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdSecurityConstraintsTypeContent {
        UseLimitation(gco::CharacterStringPropertyType),
        Classification(MdClassificationCodePropertyType),
        UserNote(gco::CharacterStringPropertyType),
        ClassificationSystem(gco::CharacterStringPropertyType),
        HandlingDescription(gco::CharacterStringPropertyType),
    }
    impl MdConstraintsTrait for MdSecurityConstraintsType {}
    impl xsd_parser::AsAny for MdSecurityConstraintsType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MdMaintenanceFrequencyCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdMaintenanceFrequencyCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdMaintenanceFrequencyCodePropertyTypeContent {
        MdMaintenanceFrequencyCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct MdScopeDescriptionPropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdScopeDescriptionPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdScopeDescriptionPropertyTypeContent {
        MdScopeDescription(MdScopeDescriptionType),
    }
    #[derive(Debug, Clone)]
    pub struct DsOtherAggregateType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DsOtherAggregateTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DsOtherAggregateTypeContent {
        ComposedOf(DsDataSetPropertyType),
        SeriesMetadata(MdMetadataPropertyType),
        Subset(DsAggregatePropertyType),
        Superset(DsAggregatePropertyType),
    }
    impl AbstractDSAggregateTrait for DsOtherAggregateType {}
    impl DsOtherAggregateTrait for DsOtherAggregateType {}
    impl xsd_parser::AsAny for DsOtherAggregateType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DsSeriesType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DsSeriesTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DsSeriesTypeContent {
        ComposedOf(DsDataSetPropertyType),
        SeriesMetadata(MdMetadataPropertyType),
        Subset(DsAggregatePropertyType),
        Superset(DsAggregatePropertyType),
    }
    impl AbstractDSAggregateTrait for DsSeriesType {}
    impl DsSeriesTrait for DsSeriesType {}
    impl xsd_parser::AsAny for DsSeriesType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DsInitiativeType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DsInitiativeTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DsInitiativeTypeContent {
        ComposedOf(DsDataSetPropertyType),
        SeriesMetadata(MdMetadataPropertyType),
        Subset(DsAggregatePropertyType),
        Superset(DsAggregatePropertyType),
    }
    impl AbstractDSAggregateTrait for DsInitiativeType {}
    impl xsd_parser::AsAny for DsInitiativeType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DsPlatformType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DsPlatformTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DsPlatformTypeContent {
        ComposedOf(DsDataSetPropertyType),
        SeriesMetadata(MdMetadataPropertyType),
        Subset(DsAggregatePropertyType),
        Superset(DsAggregatePropertyType),
    }
    impl AbstractDSAggregateTrait for DsPlatformType {}
    impl DsSeriesTrait for DsPlatformType {}
    impl xsd_parser::AsAny for DsPlatformType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DsSensorType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DsSensorTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DsSensorTypeContent {
        ComposedOf(DsDataSetPropertyType),
        SeriesMetadata(MdMetadataPropertyType),
        Subset(DsAggregatePropertyType),
        Superset(DsAggregatePropertyType),
    }
    impl AbstractDSAggregateTrait for DsSensorType {}
    impl DsSeriesTrait for DsSensorType {}
    impl xsd_parser::AsAny for DsSensorType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DsProductionSeriesType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DsProductionSeriesTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DsProductionSeriesTypeContent {
        ComposedOf(DsDataSetPropertyType),
        SeriesMetadata(MdMetadataPropertyType),
        Subset(DsAggregatePropertyType),
        Superset(DsAggregatePropertyType),
    }
    impl AbstractDSAggregateTrait for DsProductionSeriesType {}
    impl DsSeriesTrait for DsProductionSeriesType {}
    impl xsd_parser::AsAny for DsProductionSeriesType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DsStereoMateType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DsStereoMateTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DsStereoMateTypeContent {
        ComposedOf(DsDataSetPropertyType),
        SeriesMetadata(MdMetadataPropertyType),
        Subset(DsAggregatePropertyType),
        Superset(DsAggregatePropertyType),
    }
    impl AbstractDSAggregateTrait for DsStereoMateType {}
    impl DsOtherAggregateTrait for DsStereoMateType {}
    impl xsd_parser::AsAny for DsStereoMateType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MdMetadataPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdMetadataPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdMetadataPropertyTypeContent {
        MdMetadata(MdMetadataType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractEXGeographicExtent(pub Box<dyn AbstractEXGeographicExtentTrait>);
    pub trait AbstractEXGeographicExtentTrait:
        core::fmt::Debug + Clone + xsd_parser::AsAny
    {
    }
    #[derive(Debug, Clone)]
    pub struct ExTemporalExtent(pub Box<dyn ExTemporalExtentTrait>);
    pub trait ExTemporalExtentTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct ExVerticalExtentType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: [ExVerticalExtentTypeContent; 3usize],
    }
    #[derive(Debug, Clone)]
    pub enum ExVerticalExtentTypeContent {
        MinimumValue(gco::RealPropertyType),
        MaximumValue(gco::RealPropertyType),
        VerticalCRS(gsr::ScCrsPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractDQTemporalAccuracyType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<AbstractDQTemporalAccuracyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractDQTemporalAccuracyTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQElementTrait for AbstractDQTemporalAccuracyType {}
    impl xsd_parser::AsAny for AbstractDQTemporalAccuracyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DqTemporalValidityType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DqTemporalValidityTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqTemporalValidityTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQElementTrait for DqTemporalValidityType {}
    impl AbstractDQTemporalAccuracyTrait for DqTemporalValidityType {}
    impl xsd_parser::AsAny for DqTemporalValidityType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DqTemporalConsistencyType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DqTemporalConsistencyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqTemporalConsistencyTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQElementTrait for DqTemporalConsistencyType {}
    impl AbstractDQTemporalAccuracyTrait for DqTemporalConsistencyType {}
    impl xsd_parser::AsAny for DqTemporalConsistencyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DqAccuracyOfATimeMeasurementType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DqAccuracyOfATimeMeasurementTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqAccuracyOfATimeMeasurementTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQElementTrait for DqAccuracyOfATimeMeasurementType {}
    impl AbstractDQTemporalAccuracyTrait for DqAccuracyOfATimeMeasurementType {}
    impl xsd_parser::AsAny for DqAccuracyOfATimeMeasurementType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractDQThematicAccuracyType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<AbstractDQThematicAccuracyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractDQThematicAccuracyTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQElementTrait for AbstractDQThematicAccuracyType {}
    impl xsd_parser::AsAny for AbstractDQThematicAccuracyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DqQuantitativeAttributeAccuracyType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DqQuantitativeAttributeAccuracyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqQuantitativeAttributeAccuracyTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQElementTrait for DqQuantitativeAttributeAccuracyType {}
    impl AbstractDQThematicAccuracyTrait for DqQuantitativeAttributeAccuracyType {}
    impl xsd_parser::AsAny for DqQuantitativeAttributeAccuracyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DqNonQuantitativeAttributeAccuracyType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DqNonQuantitativeAttributeAccuracyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqNonQuantitativeAttributeAccuracyTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQElementTrait for DqNonQuantitativeAttributeAccuracyType {}
    impl AbstractDQThematicAccuracyTrait for DqNonQuantitativeAttributeAccuracyType {}
    impl xsd_parser::AsAny for DqNonQuantitativeAttributeAccuracyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DqThematicClassificationCorrectnessType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DqThematicClassificationCorrectnessTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqThematicClassificationCorrectnessTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQElementTrait for DqThematicClassificationCorrectnessType {}
    impl AbstractDQThematicAccuracyTrait for DqThematicClassificationCorrectnessType {}
    impl xsd_parser::AsAny for DqThematicClassificationCorrectnessType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractDQPositionalAccuracyType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<AbstractDQPositionalAccuracyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractDQPositionalAccuracyTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQElementTrait for AbstractDQPositionalAccuracyType {}
    impl xsd_parser::AsAny for AbstractDQPositionalAccuracyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractDQLogicalConsistencyType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<AbstractDQLogicalConsistencyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractDQLogicalConsistencyTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQElementTrait for AbstractDQLogicalConsistencyType {}
    impl xsd_parser::AsAny for AbstractDQLogicalConsistencyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DqTopologicalConsistencyType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DqTopologicalConsistencyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqTopologicalConsistencyTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQElementTrait for DqTopologicalConsistencyType {}
    impl AbstractDQLogicalConsistencyTrait for DqTopologicalConsistencyType {}
    impl xsd_parser::AsAny for DqTopologicalConsistencyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DqFormatConsistencyType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DqFormatConsistencyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqFormatConsistencyTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQElementTrait for DqFormatConsistencyType {}
    impl AbstractDQLogicalConsistencyTrait for DqFormatConsistencyType {}
    impl xsd_parser::AsAny for DqFormatConsistencyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DqDomainConsistencyType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DqDomainConsistencyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqDomainConsistencyTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQElementTrait for DqDomainConsistencyType {}
    impl AbstractDQLogicalConsistencyTrait for DqDomainConsistencyType {}
    impl xsd_parser::AsAny for DqDomainConsistencyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DqConceptualConsistencyType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DqConceptualConsistencyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqConceptualConsistencyTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQElementTrait for DqConceptualConsistencyType {}
    impl AbstractDQLogicalConsistencyTrait for DqConceptualConsistencyType {}
    impl xsd_parser::AsAny for DqConceptualConsistencyType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractDQCompletenessType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<AbstractDQCompletenessTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum AbstractDQCompletenessTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQElementTrait for AbstractDQCompletenessType {}
    impl xsd_parser::AsAny for AbstractDQCompletenessType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DqCompletenessOmissionType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DqCompletenessOmissionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqCompletenessOmissionTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQCompletenessTrait for DqCompletenessOmissionType {}
    impl AbstractDQElementTrait for DqCompletenessOmissionType {}
    impl xsd_parser::AsAny for DqCompletenessOmissionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DqCompletenessCommissionType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DqCompletenessCommissionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqCompletenessCommissionTypeContent {
        NameOfMeasure(gco::CharacterStringPropertyType),
        MeasureIdentification(MdIdentifierPropertyType),
        MeasureDescription(gco::CharacterStringPropertyType),
        EvaluationMethodType(DqEvaluationMethodTypeCodePropertyType),
        EvaluationMethodDescription(gco::CharacterStringPropertyType),
        EvaluationProcedure(CiCitationPropertyType),
        DateTime(gco::DateTimePropertyType),
        Result(DqResultPropertyType),
    }
    impl AbstractDQCompletenessTrait for DqCompletenessCommissionType {}
    impl AbstractDQElementTrait for DqCompletenessCommissionType {}
    impl xsd_parser::AsAny for DqCompletenessCommissionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MdIdentifierPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdIdentifierPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdIdentifierPropertyTypeContent {
        MdIdentifier(MdIdentifier),
    }
    #[derive(Debug, Clone)]
    pub struct DqEvaluationMethodTypeCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<DqEvaluationMethodTypeCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqEvaluationMethodTypeCodePropertyTypeContent {
        DqEvaluationMethodTypeCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct DqResultPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<DqResultPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqResultPropertyTypeContent {
        AbstractDQResult(AbstractDQResult),
    }
    #[derive(Debug, Clone)]
    pub struct CiDatePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<CiDatePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CiDatePropertyTypeContent {
        CiDate(CiDateType),
    }
    #[derive(Debug, Clone)]
    pub struct CiPresentationFormCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<CiPresentationFormCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CiPresentationFormCodePropertyTypeContent {
        CiPresentationFormCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct CiSeriesPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<CiSeriesPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CiSeriesPropertyTypeContent {
        CiSeries(CiSeriesType),
    }
    #[derive(Debug, Clone)]
    pub struct CiContactType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<CiContactTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CiContactTypeContent {
        Phone(CiTelephonePropertyType),
        Address(CiAddressPropertyType),
        OnlineResource(CiOnlineResourcePropertyType),
        HoursOfService(gco::CharacterStringPropertyType),
        ContactInstructions(gco::CharacterStringPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdDimensionPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdDimensionPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdDimensionPropertyTypeContent {
        MdDimension(MdDimensionType),
    }
    #[derive(Debug, Clone)]
    pub struct MdCellGeometryCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdCellGeometryCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdCellGeometryCodePropertyTypeContent {
        MdCellGeometryCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct MdGridSpatialRepresentation(pub Box<dyn MdGridSpatialRepresentationTrait>);
    pub trait MdGridSpatialRepresentationTrait: AbstractMDSpatialRepresentationTrait {}
    #[derive(Debug, Clone)]
    pub struct MdTopologyLevelCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdTopologyLevelCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdTopologyLevelCodePropertyTypeContent {
        MdTopologyLevelCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct MdGeometricObjectsPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdGeometricObjectsPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdGeometricObjectsPropertyTypeContent {
        MdGeometricObjects(MdGeometricObjectsType),
    }
    #[derive(Debug, Clone)]
    pub struct MdPixelOrientationCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdPixelOrientationCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdPixelOrientationCodePropertyTypeContent {
        MdPixelOrientationCode(MdPixelOrientationCodeType),
    }
    #[derive(Debug, Clone)]
    pub struct RsIdentifierType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<RsIdentifierTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RsIdentifierTypeContent {
        Authority(CiCitationPropertyType),
        Code(gco::CharacterStringPropertyType),
        CodeSpace(gco::CharacterStringPropertyType),
        Version(gco::CharacterStringPropertyType),
    }
    impl MdIdentifierTrait for RsIdentifierType {}
    impl xsd_parser::AsAny for RsIdentifierType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CiOnlineResourceType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<CiOnlineResourceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CiOnlineResourceTypeContent {
        Linkage(UrlPropertyType),
        Protocol(gco::CharacterStringPropertyType),
        ApplicationProfile(gco::CharacterStringPropertyType),
        Name(gco::CharacterStringPropertyType),
        Description(gco::CharacterStringPropertyType),
        Function(CiOnLineFunctionCodePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdExtendedElementInformationType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdExtendedElementInformationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdExtendedElementInformationTypeContent {
        Name(gco::CharacterStringPropertyType),
        ShortName(gco::CharacterStringPropertyType),
        DomainCode(gco::IntegerPropertyType),
        Definition(gco::CharacterStringPropertyType),
        Obligation(MdObligationCodePropertyType),
        Condition(gco::CharacterStringPropertyType),
        DataType(MdDatatypeCodePropertyType),
        MaximumOccurrence(gco::CharacterStringPropertyType),
        DomainValue(gco::CharacterStringPropertyType),
        ParentEntity(gco::CharacterStringPropertyType),
        Rule(gco::CharacterStringPropertyType),
        Rationale(gco::CharacterStringPropertyType),
        Source(CiResponsiblePartyPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdProgressCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdProgressCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdProgressCodePropertyTypeContent {
        MdProgressCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct MdBrowseGraphicPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdBrowseGraphicPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdBrowseGraphicPropertyTypeContent {
        MdBrowseGraphic(MdBrowseGraphicType),
    }
    #[derive(Debug, Clone)]
    pub struct MdKeywordsPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdKeywordsPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdKeywordsPropertyTypeContent {
        MdKeywords(MdKeywordsType),
    }
    #[derive(Debug, Clone)]
    pub struct MdUsagePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdUsagePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdUsagePropertyTypeContent {
        MdUsage(MdUsageType),
    }
    #[derive(Debug, Clone)]
    pub struct MdAggregateInformationPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdAggregateInformationPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdAggregateInformationPropertyTypeContent {
        MdAggregateInformation(MdAggregateInformationType),
    }
    #[derive(Debug, Clone)]
    pub struct MdSpatialRepresentationTypeCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdSpatialRepresentationTypeCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdSpatialRepresentationTypeCodePropertyTypeContent {
        MdSpatialRepresentationTypeCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct MdResolutionPropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdResolutionPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdResolutionPropertyTypeContent {
        MdResolution(MdResolutionType),
    }
    #[derive(Debug, Clone)]
    pub struct MdTopicCategoryCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdTopicCategoryCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdTopicCategoryCodePropertyTypeContent {
        MdTopicCategoryCode(MdTopicCategoryCodeType),
    }
    #[derive(Debug, Clone)]
    pub struct ExExtentPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<ExExtentPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ExExtentPropertyTypeContent {
        ExExtent(ExExtentType),
    }
    #[derive(Debug, Clone)]
    pub struct MdCoverageContentTypeCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdCoverageContentTypeCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdCoverageContentTypeCodePropertyTypeContent {
        MdCoverageContentTypeCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct MdRangeDimensionPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdRangeDimensionPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdRangeDimensionPropertyTypeContent {
        MdRangeDimension(MdRangeDimension),
    }
    #[derive(Debug, Clone)]
    pub struct MdCoverageDescription(pub Box<dyn MdCoverageDescriptionTrait>);
    pub trait MdCoverageDescriptionTrait: AbstractMDContentInformationTrait {}
    #[derive(Debug, Clone)]
    pub struct MdImagingConditionCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdImagingConditionCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdImagingConditionCodePropertyTypeContent {
        MdImagingConditionCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct MdFormatType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdFormatTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdFormatTypeContent {
        Name(gco::CharacterStringPropertyType),
        Version(gco::CharacterStringPropertyType),
        AmendmentNumber(gco::CharacterStringPropertyType),
        Specification(gco::CharacterStringPropertyType),
        FileDecompressionTechnique(gco::CharacterStringPropertyType),
        FormatDistributor(MdDistributorPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdDistributorType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdDistributorTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdDistributorTypeContent {
        DistributorContact(CiResponsiblePartyPropertyType),
        DistributionOrderProcess(MdStandardOrderProcessPropertyType),
        DistributorFormat(MdFormatPropertyType),
        DistributorTransferOptions(MdDigitalTransferOptionsPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdDigitalTransferOptionsType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdDigitalTransferOptionsTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdDigitalTransferOptionsTypeContent {
        UnitsOfDistribution(gco::CharacterStringPropertyType),
        TransferSize(gco::RealPropertyType),
        OnLine(CiOnlineResourcePropertyType),
        OffLine(MdMediumPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct DqScopeType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DqScopeTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqScopeTypeContent {
        Level(MdScopeCodePropertyType),
        Extent(ExExtentPropertyType),
        LevelDescription(MdScopeDescriptionPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct LiLineageType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<LiLineageTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum LiLineageTypeContent {
        Statement(gco::CharacterStringPropertyType),
        ProcessStep(LiProcessStepPropertyType),
        Source(LiSourcePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdRestrictionCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdRestrictionCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdRestrictionCodePropertyTypeContent {
        MdRestrictionCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct MdClassificationCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdClassificationCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdClassificationCodePropertyTypeContent {
        MdClassificationCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub enum MdScopeDescriptionType {
        Attributes(gco::ObjectReferencePropertyType),
        Features(gco::ObjectReferencePropertyType),
        FeatureInstances(gco::ObjectReferencePropertyType),
        AttributeInstances(gco::ObjectReferencePropertyType),
        Dataset(gco::CharacterStringPropertyType),
        Other(gco::CharacterStringPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct DsOtherAggregate(pub Box<dyn DsOtherAggregateTrait>);
    pub trait DsOtherAggregateTrait: AbstractDSAggregateTrait {}
    #[derive(Debug, Clone)]
    pub struct DsSeries(pub Box<dyn DsSeriesTrait>);
    pub trait DsSeriesTrait: AbstractDSAggregateTrait {}
    #[derive(Debug, Clone)]
    pub struct ExBoundingPolygonType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<ExBoundingPolygonTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ExBoundingPolygonTypeContent {
        ExtentTypeCode(gco::BooleanPropertyType),
        Polygon(gss::GmObjectPropertyType),
    }
    impl AbstractEXGeographicExtentTrait for ExBoundingPolygonType {}
    impl xsd_parser::AsAny for ExBoundingPolygonType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ExGeographicBoundingBoxType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<ExGeographicBoundingBoxTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ExGeographicBoundingBoxTypeContent {
        ExtentTypeCode(gco::BooleanPropertyType),
        WestBoundLongitude(gco::DecimalPropertyType),
        EastBoundLongitude(gco::DecimalPropertyType),
        SouthBoundLatitude(gco::DecimalPropertyType),
        NorthBoundLatitude(gco::DecimalPropertyType),
    }
    impl AbstractEXGeographicExtentTrait for ExGeographicBoundingBoxType {}
    impl xsd_parser::AsAny for ExGeographicBoundingBoxType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ExGeographicDescriptionType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<ExGeographicDescriptionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ExGeographicDescriptionTypeContent {
        ExtentTypeCode(gco::BooleanPropertyType),
        GeographicIdentifier(MdIdentifierPropertyType),
    }
    impl AbstractEXGeographicExtentTrait for ExGeographicDescriptionType {}
    impl xsd_parser::AsAny for ExGeographicDescriptionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ExTemporalExtentType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: ExTemporalExtentTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum ExTemporalExtentTypeContent {
        Extent(gts::TmPrimitivePropertyType),
    }
    impl ExTemporalExtentTrait for ExTemporalExtentType {}
    impl xsd_parser::AsAny for ExTemporalExtentType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct ExSpatialTemporalExtentType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<ExSpatialTemporalExtentTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ExSpatialTemporalExtentTypeContent {
        Extent(gts::TmPrimitivePropertyType),
        SpatialExtent(ExGeographicExtentPropertyType),
    }
    impl ExTemporalExtentTrait for ExSpatialTemporalExtentType {}
    impl xsd_parser::AsAny for ExSpatialTemporalExtentType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct AbstractDQTemporalAccuracy(pub Box<dyn AbstractDQTemporalAccuracyTrait>);
    pub trait AbstractDQTemporalAccuracyTrait: AbstractDQElementTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractDQThematicAccuracy(pub Box<dyn AbstractDQThematicAccuracyTrait>);
    pub trait AbstractDQThematicAccuracyTrait: AbstractDQElementTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractDQLogicalConsistency(pub Box<dyn AbstractDQLogicalConsistencyTrait>);
    pub trait AbstractDQLogicalConsistencyTrait: AbstractDQElementTrait {}
    #[derive(Debug, Clone)]
    pub struct AbstractDQCompleteness(pub Box<dyn AbstractDQCompletenessTrait>);
    pub trait AbstractDQCompletenessTrait: AbstractDQElementTrait {}
    #[derive(Debug, Clone)]
    pub struct MdIdentifier(pub Box<dyn MdIdentifierTrait>);
    pub trait MdIdentifierTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct AbstractDQResult(pub Box<dyn AbstractDQResultTrait>);
    pub trait AbstractDQResultTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct CiDateType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: [CiDateTypeContent; 2usize],
    }
    #[derive(Debug, Clone)]
    pub enum CiDateTypeContent {
        Date(gco::DatePropertyType),
        DateType(CiDateTypeCodePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CiSeriesType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<CiSeriesTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CiSeriesTypeContent {
        Name(gco::CharacterStringPropertyType),
        IssueIdentification(gco::CharacterStringPropertyType),
        Page(gco::CharacterStringPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CiTelephonePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<CiTelephonePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CiTelephonePropertyTypeContent {
        CiTelephone(CiTelephoneType),
    }
    #[derive(Debug, Clone)]
    pub struct CiAddressPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<CiAddressPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CiAddressPropertyTypeContent {
        CiAddress(CiAddressType),
    }
    #[derive(Debug, Clone)]
    pub struct MdDimensionType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdDimensionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdDimensionTypeContent {
        DimensionName(MdDimensionNameTypeCodePropertyType),
        DimensionSize(gco::IntegerPropertyType),
        Resolution(gco::MeasurePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdGeometricObjectsType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdGeometricObjectsTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdGeometricObjectsTypeContent {
        GeometricObjectType(MdGeometricObjectTypeCodePropertyType),
        GeometricObjectCount(gco::IntegerPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct UrlPropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<UrlPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum UrlPropertyTypeContent {
        Url(String),
    }
    #[derive(Debug, Clone)]
    pub struct CiOnLineFunctionCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<CiOnLineFunctionCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CiOnLineFunctionCodePropertyTypeContent {
        CiOnLineFunctionCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct MdObligationCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdObligationCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdObligationCodePropertyTypeContent {
        MdObligationCode(MdObligationCodeType),
    }
    #[derive(Debug, Clone)]
    pub struct MdDatatypeCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdDatatypeCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdDatatypeCodePropertyTypeContent {
        MdDatatypeCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct MdBrowseGraphicType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdBrowseGraphicTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdBrowseGraphicTypeContent {
        FileName(gco::CharacterStringPropertyType),
        FileDescription(gco::CharacterStringPropertyType),
        FileType(gco::CharacterStringPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdKeywordsType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdKeywordsTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdKeywordsTypeContent {
        Keyword(gco::CharacterStringPropertyType),
        Type(MdKeywordTypeCodePropertyType),
        ThesaurusName(CiCitationPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdUsageType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdUsageTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdUsageTypeContent {
        SpecificUsage(gco::CharacterStringPropertyType),
        UsageDateTime(gco::DateTimePropertyType),
        UserDeterminedLimitations(gco::CharacterStringPropertyType),
        UserContactInfo(CiResponsiblePartyPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdAggregateInformationType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdAggregateInformationTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdAggregateInformationTypeContent {
        AggregateDataSetName(CiCitationPropertyType),
        AggregateDataSetIdentifier(MdIdentifierPropertyType),
        AssociationType(DsAssociationTypeCodePropertyType),
        InitiativeType(DsInitiativeTypeCodePropertyType),
    }
    #[derive(Debug, Clone)]
    pub enum MdResolutionType {
        EquivalentScale(MdRepresentativeFractionPropertyType),
        Distance(gco::DistancePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdRangeDimension(pub Box<dyn MdRangeDimensionTrait>);
    pub trait MdRangeDimensionTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct MdStandardOrderProcessPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdStandardOrderProcessPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdStandardOrderProcessPropertyTypeContent {
        MdStandardOrderProcess(MdStandardOrderProcessType),
    }
    #[derive(Debug, Clone)]
    pub struct MdMediumPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdMediumPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdMediumPropertyTypeContent {
        MdMedium(MdMediumType),
    }
    #[derive(Debug, Clone)]
    pub struct LiProcessStepPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<LiProcessStepPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum LiProcessStepPropertyTypeContent {
        LiProcessStep(LiProcessStepType),
    }
    #[derive(Debug, Clone)]
    pub struct LiSourcePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<LiSourcePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum LiSourcePropertyTypeContent {
        LiSource(LiSourceType),
    }
    #[derive(Debug, Clone)]
    pub struct MdIdentifierType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdIdentifierTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdIdentifierTypeContent {
        Authority(CiCitationPropertyType),
        Code(gco::CharacterStringPropertyType),
    }
    impl MdIdentifierTrait for MdIdentifierType {}
    impl xsd_parser::AsAny for MdIdentifierType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DqConformanceResultType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: [DqConformanceResultTypeContent; 3usize],
    }
    #[derive(Debug, Clone)]
    pub enum DqConformanceResultTypeContent {
        Specification(CiCitationPropertyType),
        Explanation(gco::CharacterStringPropertyType),
        Pass(gco::BooleanPropertyType),
    }
    impl AbstractDQResultTrait for DqConformanceResultType {}
    impl xsd_parser::AsAny for DqConformanceResultType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct DqQuantitativeResultType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<DqQuantitativeResultTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DqQuantitativeResultTypeContent {
        ValueType(gco::RecordTypePropertyType),
        ValueUnit(gco::UnitOfMeasurePropertyType),
        ErrorStatistic(gco::CharacterStringPropertyType),
        Value(gco::RecordPropertyType),
    }
    impl AbstractDQResultTrait for DqQuantitativeResultType {}
    impl xsd_parser::AsAny for DqQuantitativeResultType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct CiDateTypeCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<CiDateTypeCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CiDateTypeCodePropertyTypeContent {
        CiDateTypeCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct CiTelephoneType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<CiTelephoneTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CiTelephoneTypeContent {
        Voice(gco::CharacterStringPropertyType),
        Facsimile(gco::CharacterStringPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct CiAddressType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<CiAddressTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CiAddressTypeContent {
        DeliveryPoint(gco::CharacterStringPropertyType),
        City(gco::CharacterStringPropertyType),
        AdministrativeArea(gco::CharacterStringPropertyType),
        PostalCode(gco::CharacterStringPropertyType),
        Country(gco::CharacterStringPropertyType),
        ElectronicMailAddress(gco::CharacterStringPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdDimensionNameTypeCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdDimensionNameTypeCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdDimensionNameTypeCodePropertyTypeContent {
        MdDimensionNameTypeCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct MdGeometricObjectTypeCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdGeometricObjectTypeCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdGeometricObjectTypeCodePropertyTypeContent {
        MdGeometricObjectTypeCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct MdKeywordTypeCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdKeywordTypeCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdKeywordTypeCodePropertyTypeContent {
        MdKeywordTypeCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct DsAssociationTypeCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<DsAssociationTypeCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DsAssociationTypeCodePropertyTypeContent {
        DsAssociationTypeCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct DsInitiativeTypeCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<DsInitiativeTypeCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DsInitiativeTypeCodePropertyTypeContent {
        DsInitiativeTypeCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct MdRepresentativeFractionPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdRepresentativeFractionPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdRepresentativeFractionPropertyTypeContent {
        MdRepresentativeFraction(MdRepresentativeFractionType),
    }
    #[derive(Debug, Clone)]
    pub struct MdRangeDimensionType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdRangeDimensionTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdRangeDimensionTypeContent {
        SequenceIdentifier(gco::MemberNamePropertyType),
        Descriptor(gco::CharacterStringPropertyType),
    }
    impl MdRangeDimensionTrait for MdRangeDimensionType {}
    impl xsd_parser::AsAny for MdRangeDimensionType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MdBandType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdBandTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdBandTypeContent {
        SequenceIdentifier(gco::MemberNamePropertyType),
        Descriptor(gco::CharacterStringPropertyType),
        MaxValue(gco::RealPropertyType),
        MinValue(gco::RealPropertyType),
        Units(gco::UomLengthPropertyType),
        PeakResponse(gco::RealPropertyType),
        BitsPerValue(gco::IntegerPropertyType),
        ToneGradation(gco::IntegerPropertyType),
        ScaleFactor(gco::RealPropertyType),
        Offset(gco::RealPropertyType),
    }
    impl MdRangeDimensionTrait for MdBandType {}
    impl xsd_parser::AsAny for MdBandType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct MdStandardOrderProcessType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdStandardOrderProcessTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdStandardOrderProcessTypeContent {
        Fees(gco::CharacterStringPropertyType),
        PlannedAvailableDateTime(gco::DateTimePropertyType),
        OrderingInstructions(gco::CharacterStringPropertyType),
        Turnaround(gco::CharacterStringPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdMediumType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MdMediumTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdMediumTypeContent {
        Name(MdMediumNameCodePropertyType),
        Density(gco::RealPropertyType),
        DensityUnits(gco::CharacterStringPropertyType),
        Volumes(gco::IntegerPropertyType),
        MediumFormat(MdMediumFormatCodePropertyType),
        MediumNote(gco::CharacterStringPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct LiProcessStepType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<LiProcessStepTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum LiProcessStepTypeContent {
        Description(gco::CharacterStringPropertyType),
        Rationale(gco::CharacterStringPropertyType),
        DateTime(gco::DateTimePropertyType),
        Processor(CiResponsiblePartyPropertyType),
        Source(LiSourcePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct LiSourceType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<LiSourceTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum LiSourceTypeContent {
        Description(gco::CharacterStringPropertyType),
        ScaleDenominator(MdRepresentativeFractionPropertyType),
        SourceReferenceSystem(MdReferenceSystemPropertyType),
        SourceCitation(CiCitationPropertyType),
        SourceExtent(ExExtentPropertyType),
        SourceStep(LiProcessStepPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdRepresentativeFractionType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: MdRepresentativeFractionTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum MdRepresentativeFractionTypeContent {
        Denominator(gco::IntegerPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MdMediumNameCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdMediumNameCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdMediumNameCodePropertyTypeContent {
        MdMediumNameCode(gco::CodeListValueType),
    }
    #[derive(Debug, Clone)]
    pub struct MdMediumFormatCodePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MdMediumFormatCodePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MdMediumFormatCodePropertyTypeContent {
        MdMediumFormatCode(gco::CodeListValueType),
    }
    pub type AbstractDQElementTypeDateTime = gco::DateTimePropertyType;
    pub type AbstractDQElementTypeEvaluationMethodDescription = gco::CharacterStringPropertyType;
    pub type AbstractDQElementTypeEvaluationMethodType = DqEvaluationMethodTypeCodePropertyType;
    pub type AbstractDQElementTypeEvaluationProcedure = CiCitationPropertyType;
    pub type AbstractDQElementTypeMeasureDescription = gco::CharacterStringPropertyType;
    pub type AbstractDQElementTypeMeasureIdentification = MdIdentifierPropertyType;
    pub type AbstractDQElementTypeNameOfMeasure = gco::CharacterStringPropertyType;
    pub type AbstractDQElementTypeResult = DqResultPropertyType;
    pub type AbstractDSAggregateTypeComposedOf = DsDataSetPropertyType;
    pub type AbstractDSAggregateTypeSeriesMetadata = MdMetadataPropertyType;
    pub type AbstractDSAggregateTypeSubset = DsAggregatePropertyType;
    pub type AbstractDSAggregateTypeSuperset = DsAggregatePropertyType;
    pub type AbstractEXGeographicExtentTypeExtentTypeCode = gco::BooleanPropertyType;
    pub type AbstractMDIdentificationTypeAbstract = gco::CharacterStringPropertyType;
    pub type AbstractMDIdentificationTypeAggregationInfo = MdAggregateInformationPropertyType;
    pub type AbstractMDIdentificationTypeCitation = CiCitationPropertyType;
    pub type AbstractMDIdentificationTypeCredit = gco::CharacterStringPropertyType;
    pub type AbstractMDIdentificationTypeDescriptiveKeywords = MdKeywordsPropertyType;
    pub type AbstractMDIdentificationTypeGraphicOverview = MdBrowseGraphicPropertyType;
    pub type AbstractMDIdentificationTypePointOfContact = CiResponsiblePartyPropertyType;
    pub type AbstractMDIdentificationTypePurpose = gco::CharacterStringPropertyType;
    pub type AbstractMDIdentificationTypeResourceConstraints = MdConstraintsPropertyType;
    pub type AbstractMDIdentificationTypeResourceFormat = MdFormatPropertyType;
    pub type AbstractMDIdentificationTypeResourceMaintenance = MdMaintenanceInformationPropertyType;
    pub type AbstractMDIdentificationTypeResourceSpecificUsage = MdUsagePropertyType;
    pub type AbstractMDIdentificationTypeStatus = MdProgressCodePropertyType;
    pub type AbstractRSReferenceSystemTypeDomainOfValidity = ExExtentPropertyType;
    pub type AbstractRSReferenceSystemTypeName = RsIdentifierPropertyType;
    #[derive(Debug, Clone)]
    pub struct AbstractRSReferenceSystem(pub Box<dyn AbstractRSReferenceSystemTrait>);
    pub trait AbstractRSReferenceSystemTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    pub type CiAddress = CiAddressType;
    pub type CiCitation = CiCitationType;
    pub type CiContact = CiContactType;
    pub type CiDate = CiDateType;
    pub type CiDateTypeCode = gco::CodeListValueType;
    pub type CiOnLineFunctionCode = gco::CodeListValueType;
    pub type CiOnlineResource = CiOnlineResourceType;
    pub type CiPresentationFormCode = gco::CodeListValueType;
    pub type CiResponsibleParty = CiResponsiblePartyType;
    pub type CiRoleCode = gco::CodeListValueType;
    pub type CiSeries = CiSeriesType;
    pub type CiTelephone = CiTelephoneType;
    pub type CiAddressTypeAdministrativeArea = gco::CharacterStringPropertyType;
    pub type CiAddressTypeCity = gco::CharacterStringPropertyType;
    pub type CiAddressTypeCountry = gco::CharacterStringPropertyType;
    pub type CiAddressTypeDeliveryPoint = gco::CharacterStringPropertyType;
    pub type CiAddressTypeElectronicMailAddress = gco::CharacterStringPropertyType;
    pub type CiAddressTypePostalCode = gco::CharacterStringPropertyType;
    pub type CiCitationTypeAlternateTitle = gco::CharacterStringPropertyType;
    pub type CiCitationTypeCitedResponsibleParty = CiResponsiblePartyPropertyType;
    pub type CiCitationTypeCollectiveTitle = gco::CharacterStringPropertyType;
    pub type CiCitationTypeDate = CiDatePropertyType;
    pub type CiCitationTypeEdition = gco::CharacterStringPropertyType;
    pub type CiCitationTypeEditionDate = gco::DatePropertyType;
    pub type CiCitationTypeIdentifier = MdIdentifierPropertyType;
    pub type CiCitationTypeIsbn = gco::CharacterStringPropertyType;
    pub type CiCitationTypeIssn = gco::CharacterStringPropertyType;
    pub type CiCitationTypeOtherCitationDetails = gco::CharacterStringPropertyType;
    pub type CiCitationTypePresentationForm = CiPresentationFormCodePropertyType;
    pub type CiCitationTypeSeries = CiSeriesPropertyType;
    pub type CiCitationTypeTitle = gco::CharacterStringPropertyType;
    pub type CiContactTypeAddress = CiAddressPropertyType;
    pub type CiContactTypeContactInstructions = gco::CharacterStringPropertyType;
    pub type CiContactTypeHoursOfService = gco::CharacterStringPropertyType;
    pub type CiContactTypeOnlineResource = CiOnlineResourcePropertyType;
    pub type CiContactTypePhone = CiTelephonePropertyType;
    pub type CiDateTypeDate = gco::DatePropertyType;
    pub type CiDateTypeDateType = CiDateTypeCodePropertyType;
    pub type CiOnlineResourceTypeApplicationProfile = gco::CharacterStringPropertyType;
    pub type CiOnlineResourceTypeDescription = gco::CharacterStringPropertyType;
    pub type CiOnlineResourceTypeFunction = CiOnLineFunctionCodePropertyType;
    pub type CiOnlineResourceTypeLinkage = UrlPropertyType;
    pub type CiOnlineResourceTypeName = gco::CharacterStringPropertyType;
    pub type CiOnlineResourceTypeProtocol = gco::CharacterStringPropertyType;
    pub type CiResponsiblePartyTypeContactInfo = CiContactPropertyType;
    pub type CiResponsiblePartyTypeIndividualName = gco::CharacterStringPropertyType;
    pub type CiResponsiblePartyTypeOrganisationName = gco::CharacterStringPropertyType;
    pub type CiResponsiblePartyTypePositionName = gco::CharacterStringPropertyType;
    pub type CiResponsiblePartyTypeRole = CiRoleCodePropertyType;
    pub type CiSeriesTypeIssueIdentification = gco::CharacterStringPropertyType;
    pub type CiSeriesTypeName = gco::CharacterStringPropertyType;
    pub type CiSeriesTypePage = gco::CharacterStringPropertyType;
    pub type CiTelephoneTypeFacsimile = gco::CharacterStringPropertyType;
    pub type CiTelephoneTypeVoice = gco::CharacterStringPropertyType;
    pub type Country = gco::CodeListValueType;
    pub type DqAbsoluteExternalPositionalAccuracy = DqAbsoluteExternalPositionalAccuracyType;
    pub type DqAccuracyOfATimeMeasurement = DqAccuracyOfATimeMeasurementType;
    pub type DqCompletenessCommission = DqCompletenessCommissionType;
    pub type DqCompletenessOmission = DqCompletenessOmissionType;
    pub type DqConceptualConsistency = DqConceptualConsistencyType;
    pub type DqConformanceResult = DqConformanceResultType;
    pub type DqDataQuality = DqDataQualityType;
    pub type DqDomainConsistency = DqDomainConsistencyType;
    pub type DqEvaluationMethodTypeCode = gco::CodeListValueType;
    pub type DqFormatConsistency = DqFormatConsistencyType;
    pub type DqGriddedDataPositionalAccuracy = DqGriddedDataPositionalAccuracyType;
    pub type DqNonQuantitativeAttributeAccuracy = DqNonQuantitativeAttributeAccuracyType;
    pub type DqQuantitativeAttributeAccuracy = DqQuantitativeAttributeAccuracyType;
    pub type DqQuantitativeResult = DqQuantitativeResultType;
    pub type DqRelativeInternalPositionalAccuracy = DqRelativeInternalPositionalAccuracyType;
    pub type DqScope = DqScopeType;
    pub type DqTemporalConsistency = DqTemporalConsistencyType;
    pub type DqTemporalValidity = DqTemporalValidityType;
    pub type DqThematicClassificationCorrectness = DqThematicClassificationCorrectnessType;
    pub type DqTopologicalConsistency = DqTopologicalConsistencyType;
    pub type DsAssociation = DsAssociationType;
    #[derive(Debug, Clone)]
    pub struct DsAssociationType {
        pub id: Option<String>,
        pub uuid: Option<String>,
    }
    pub type DsAssociationTypeCode = gco::CodeListValueType;
    pub type DsDataSet = DsDataSetType;
    pub type DsInitiative = DsInitiativeType;
    pub type DsInitiativeTypeCode = gco::CodeListValueType;
    pub type DsPlatform = DsPlatformType;
    pub type DsProductionSeries = DsProductionSeriesType;
    pub type DsSensor = DsSensorType;
    pub type DsStereoMate = DsStereoMateType;
    pub type DqConformanceResultTypeExplanation = gco::CharacterStringPropertyType;
    pub type DqConformanceResultTypePass = gco::BooleanPropertyType;
    pub type DqConformanceResultTypeSpecification = CiCitationPropertyType;
    pub type DqDataQualityTypeLineage = LiLineagePropertyType;
    pub type DqDataQualityTypeReport = DqElementPropertyType;
    pub type DqDataQualityTypeScope = DqScopePropertyType;
    pub type DqQuantitativeResultTypeErrorStatistic = gco::CharacterStringPropertyType;
    pub type DqQuantitativeResultTypeValue = gco::RecordPropertyType;
    pub type DqQuantitativeResultTypeValueType = gco::RecordTypePropertyType;
    pub type DqQuantitativeResultTypeValueUnit = gco::UnitOfMeasurePropertyType;
    pub type DqScopeTypeExtent = ExExtentPropertyType;
    pub type DqScopeTypeLevel = MdScopeCodePropertyType;
    pub type DqScopeTypeLevelDescription = MdScopeDescriptionPropertyType;
    pub type DsDataSetTypeHas = MdMetadataPropertyType;
    pub type DsDataSetTypePartOf = DsAggregatePropertyType;
    pub type ExBoundingPolygon = ExBoundingPolygonType;
    pub type ExExtent = ExExtentType;
    pub type ExGeographicBoundingBox = ExGeographicBoundingBoxType;
    pub type ExGeographicDescription = ExGeographicDescriptionType;
    pub type ExSpatialTemporalExtent = ExSpatialTemporalExtentType;
    pub type ExVerticalExtent = ExVerticalExtentType;
    pub type ExBoundingPolygonTypePolygon = gss::GmObjectPropertyType;
    pub type ExExtentTypeDescription = gco::CharacterStringPropertyType;
    pub type ExExtentTypeGeographicElement = ExGeographicExtentPropertyType;
    pub type ExExtentTypeTemporalElement = ExTemporalExtentPropertyType;
    pub type ExExtentTypeVerticalElement = ExVerticalExtentPropertyType;
    pub type ExGeographicBoundingBoxTypeEastBoundLongitude = gco::DecimalPropertyType;
    pub type ExGeographicBoundingBoxTypeNorthBoundLatitude = gco::DecimalPropertyType;
    pub type ExGeographicBoundingBoxTypeSouthBoundLatitude = gco::DecimalPropertyType;
    pub type ExGeographicBoundingBoxTypeWestBoundLongitude = gco::DecimalPropertyType;
    pub type ExGeographicDescriptionTypeGeographicIdentifier = MdIdentifierPropertyType;
    pub type ExSpatialTemporalExtentTypeSpatialExtent = ExGeographicExtentPropertyType;
    pub type ExTemporalExtentTypeExtent = gts::TmPrimitivePropertyType;
    pub type ExVerticalExtentTypeMaximumValue = gco::RealPropertyType;
    pub type ExVerticalExtentTypeMinimumValue = gco::RealPropertyType;
    pub type ExVerticalExtentTypeVerticalCRS = gsr::ScCrsPropertyType;
    pub type LiLineage = LiLineageType;
    pub type LiProcessStep = LiProcessStepType;
    pub type LiSource = LiSourceType;
    pub type LanguageCode = gco::CodeListValueType;
    pub type LiLineageTypeProcessStep = LiProcessStepPropertyType;
    pub type LiLineageTypeSource = LiSourcePropertyType;
    pub type LiLineageTypeStatement = gco::CharacterStringPropertyType;
    pub type LiProcessStepTypeDateTime = gco::DateTimePropertyType;
    pub type LiProcessStepTypeDescription = gco::CharacterStringPropertyType;
    pub type LiProcessStepTypeProcessor = CiResponsiblePartyPropertyType;
    pub type LiProcessStepTypeRationale = gco::CharacterStringPropertyType;
    pub type LiProcessStepTypeSource = LiSourcePropertyType;
    pub type LiSourceTypeDescription = gco::CharacterStringPropertyType;
    pub type LiSourceTypeScaleDenominator = MdRepresentativeFractionPropertyType;
    pub type LiSourceTypeSourceCitation = CiCitationPropertyType;
    pub type LiSourceTypeSourceExtent = ExExtentPropertyType;
    pub type LiSourceTypeSourceReferenceSystem = MdReferenceSystemPropertyType;
    pub type LiSourceTypeSourceStep = LiProcessStepPropertyType;
    pub type LocalisedCharacterString = LocalisedCharacterStringType;
    pub type MdAggregateInformation = MdAggregateInformationType;
    pub type MdApplicationSchemaInformation = MdApplicationSchemaInformationType;
    pub type MdBand = MdBandType;
    pub type MdBrowseGraphic = MdBrowseGraphicType;
    pub type MdCellGeometryCode = gco::CodeListValueType;
    pub type MdCharacterSetCode = gco::CodeListValueType;
    pub type MdClassificationCode = gco::CodeListValueType;
    pub type MdCoverageContentTypeCode = gco::CodeListValueType;
    pub type MdDataIdentification = MdDataIdentificationType;
    pub type MdDatatypeCode = gco::CodeListValueType;
    pub type MdDigitalTransferOptions = MdDigitalTransferOptionsType;
    pub type MdDimension = MdDimensionType;
    pub type MdDimensionNameTypeCode = gco::CodeListValueType;
    pub type MdDistribution = MdDistributionType;
    pub type MdDistributionUnits = gco::CodeListValueType;
    pub type MdDistributor = MdDistributorType;
    pub type MdExtendedElementInformation = MdExtendedElementInformationType;
    pub type MdFeatureCatalogueDescription = MdFeatureCatalogueDescriptionType;
    pub type MdFormat = MdFormatType;
    pub type MdGeometricObjectTypeCode = gco::CodeListValueType;
    pub type MdGeometricObjects = MdGeometricObjectsType;
    pub type MdGeorectified = MdGeorectifiedType;
    pub type MdGeoreferenceable = MdGeoreferenceableType;
    pub type MdImageDescription = MdImageDescriptionType;
    pub type MdImagingConditionCode = gco::CodeListValueType;
    pub type MdKeywordTypeCode = gco::CodeListValueType;
    pub type MdKeywords = MdKeywordsType;
    pub type MdLegalConstraints = MdLegalConstraintsType;
    pub type MdMaintenanceFrequencyCode = gco::CodeListValueType;
    pub type MdMaintenanceInformation = MdMaintenanceInformationType;
    pub type MdMedium = MdMediumType;
    pub type MdMediumFormatCode = gco::CodeListValueType;
    pub type MdMediumNameCode = gco::CodeListValueType;
    pub type MdMetadata = MdMetadataType;
    pub type MdMetadataExtensionInformation = MdMetadataExtensionInformationType;
    pub type MdObligationCode = MdObligationCodeType;
    pub type MdPixelOrientationCode = MdPixelOrientationCodeType;
    pub type MdPortrayalCatalogueReference = MdPortrayalCatalogueReferenceType;
    pub type MdProgressCode = gco::CodeListValueType;
    pub type MdReferenceSystem = MdReferenceSystemType;
    pub type MdRepresentativeFraction = MdRepresentativeFractionType;
    pub type MdResolution = MdResolutionType;
    pub type MdRestrictionCode = gco::CodeListValueType;
    pub type MdScopeCode = gco::CodeListValueType;
    pub type MdScopeDescription = MdScopeDescriptionType;
    pub type MdSecurityConstraints = MdSecurityConstraintsType;
    pub type MdServiceIdentification = MdServiceIdentificationType;
    pub type MdSpatialRepresentationTypeCode = gco::CodeListValueType;
    pub type MdStandardOrderProcess = MdStandardOrderProcessType;
    pub type MdTopicCategoryCode = MdTopicCategoryCodeType;
    pub type MdTopologyLevelCode = gco::CodeListValueType;
    pub type MdUsage = MdUsageType;
    pub type MdVectorSpatialRepresentation = MdVectorSpatialRepresentationType;
    pub type MdAggregateInformationTypeAggregateDataSetIdentifier = MdIdentifierPropertyType;
    pub type MdAggregateInformationTypeAggregateDataSetName = CiCitationPropertyType;
    pub type MdAggregateInformationTypeAssociationType = DsAssociationTypeCodePropertyType;
    pub type MdAggregateInformationTypeInitiativeType = DsInitiativeTypeCodePropertyType;
    pub type MdApplicationSchemaInformationTypeConstraintLanguage =
        gco::CharacterStringPropertyType;
    pub type MdApplicationSchemaInformationTypeGraphicsFile = gco::BinaryPropertyType;
    pub type MdApplicationSchemaInformationTypeName = CiCitationPropertyType;
    pub type MdApplicationSchemaInformationTypeSchemaAscii = gco::CharacterStringPropertyType;
    pub type MdApplicationSchemaInformationTypeSchemaLanguage = gco::CharacterStringPropertyType;
    pub type MdApplicationSchemaInformationTypeSoftwareDevelopmentFile = gco::BinaryPropertyType;
    pub type MdApplicationSchemaInformationTypeSoftwareDevelopmentFileFormat =
        gco::CharacterStringPropertyType;
    pub type MdBandTypeBitsPerValue = gco::IntegerPropertyType;
    pub type MdBandTypeMaxValue = gco::RealPropertyType;
    pub type MdBandTypeMinValue = gco::RealPropertyType;
    pub type MdBandTypeOffset = gco::RealPropertyType;
    pub type MdBandTypePeakResponse = gco::RealPropertyType;
    pub type MdBandTypeScaleFactor = gco::RealPropertyType;
    pub type MdBandTypeToneGradation = gco::IntegerPropertyType;
    pub type MdBandTypeUnits = gco::UomLengthPropertyType;
    pub type MdBrowseGraphicTypeFileDescription = gco::CharacterStringPropertyType;
    pub type MdBrowseGraphicTypeFileName = gco::CharacterStringPropertyType;
    pub type MdBrowseGraphicTypeFileType = gco::CharacterStringPropertyType;
    pub type MdConstraintsTypeUseLimitation = gco::CharacterStringPropertyType;
    pub type MdCoverageDescriptionTypeAttributeDescription = gco::RecordTypePropertyType;
    pub type MdCoverageDescriptionTypeContentType = MdCoverageContentTypeCodePropertyType;
    pub type MdCoverageDescriptionTypeDimension = MdRangeDimensionPropertyType;
    pub type MdDataIdentificationTypeCharacterSet = MdCharacterSetCodePropertyType;
    pub type MdDataIdentificationTypeEnvironmentDescription = gco::CharacterStringPropertyType;
    pub type MdDataIdentificationTypeExtent = ExExtentPropertyType;
    pub type MdDataIdentificationTypeLanguage = gco::CharacterStringPropertyType;
    pub type MdDataIdentificationTypeSpatialRepresentationType =
        MdSpatialRepresentationTypeCodePropertyType;
    pub type MdDataIdentificationTypeSpatialResolution = MdResolutionPropertyType;
    pub type MdDataIdentificationTypeSupplementalInformation = gco::CharacterStringPropertyType;
    pub type MdDataIdentificationTypeTopicCategory = MdTopicCategoryCodePropertyType;
    pub type MdDigitalTransferOptionsTypeOffLine = MdMediumPropertyType;
    pub type MdDigitalTransferOptionsTypeOnLine = CiOnlineResourcePropertyType;
    pub type MdDigitalTransferOptionsTypeTransferSize = gco::RealPropertyType;
    pub type MdDigitalTransferOptionsTypeUnitsOfDistribution = gco::CharacterStringPropertyType;
    pub type MdDimensionTypeDimensionName = MdDimensionNameTypeCodePropertyType;
    pub type MdDimensionTypeDimensionSize = gco::IntegerPropertyType;
    pub type MdDimensionTypeResolution = gco::MeasurePropertyType;
    pub type MdDistributionTypeDistributionFormat = MdFormatPropertyType;
    pub type MdDistributionTypeDistributor = MdDistributorPropertyType;
    pub type MdDistributionTypeTransferOptions = MdDigitalTransferOptionsPropertyType;
    pub type MdDistributorTypeDistributionOrderProcess = MdStandardOrderProcessPropertyType;
    pub type MdDistributorTypeDistributorContact = CiResponsiblePartyPropertyType;
    pub type MdDistributorTypeDistributorFormat = MdFormatPropertyType;
    pub type MdDistributorTypeDistributorTransferOptions = MdDigitalTransferOptionsPropertyType;
    pub type MdExtendedElementInformationTypeCondition = gco::CharacterStringPropertyType;
    pub type MdExtendedElementInformationTypeDataType = MdDatatypeCodePropertyType;
    pub type MdExtendedElementInformationTypeDefinition = gco::CharacterStringPropertyType;
    pub type MdExtendedElementInformationTypeDomainCode = gco::IntegerPropertyType;
    pub type MdExtendedElementInformationTypeDomainValue = gco::CharacterStringPropertyType;
    pub type MdExtendedElementInformationTypeMaximumOccurrence = gco::CharacterStringPropertyType;
    pub type MdExtendedElementInformationTypeName = gco::CharacterStringPropertyType;
    pub type MdExtendedElementInformationTypeObligation = MdObligationCodePropertyType;
    pub type MdExtendedElementInformationTypeParentEntity = gco::CharacterStringPropertyType;
    pub type MdExtendedElementInformationTypeRationale = gco::CharacterStringPropertyType;
    pub type MdExtendedElementInformationTypeRule = gco::CharacterStringPropertyType;
    pub type MdExtendedElementInformationTypeShortName = gco::CharacterStringPropertyType;
    pub type MdExtendedElementInformationTypeSource = CiResponsiblePartyPropertyType;
    pub type MdFeatureCatalogueDescriptionTypeComplianceCode = gco::BooleanPropertyType;
    pub type MdFeatureCatalogueDescriptionTypeFeatureCatalogueCitation = CiCitationPropertyType;
    pub type MdFeatureCatalogueDescriptionTypeFeatureTypes = gco::GenericNamePropertyType;
    pub type MdFeatureCatalogueDescriptionTypeIncludedWithDataset = gco::BooleanPropertyType;
    pub type MdFeatureCatalogueDescriptionTypeLanguage = gco::CharacterStringPropertyType;
    pub type MdFormatTypeAmendmentNumber = gco::CharacterStringPropertyType;
    pub type MdFormatTypeFileDecompressionTechnique = gco::CharacterStringPropertyType;
    pub type MdFormatTypeFormatDistributor = MdDistributorPropertyType;
    pub type MdFormatTypeName = gco::CharacterStringPropertyType;
    pub type MdFormatTypeSpecification = gco::CharacterStringPropertyType;
    pub type MdFormatTypeVersion = gco::CharacterStringPropertyType;
    pub type MdGeometricObjectsTypeGeometricObjectCount = gco::IntegerPropertyType;
    pub type MdGeometricObjectsTypeGeometricObjectType = MdGeometricObjectTypeCodePropertyType;
    pub type MdGeorectifiedTypeCenterPoint = gss::GmPointPropertyType;
    pub type MdGeorectifiedTypeCheckPointAvailability = gco::BooleanPropertyType;
    pub type MdGeorectifiedTypeCheckPointDescription = gco::CharacterStringPropertyType;
    pub type MdGeorectifiedTypeCornerPoints = gss::GmPointPropertyType;
    pub type MdGeorectifiedTypePointInPixel = MdPixelOrientationCodePropertyType;
    pub type MdGeorectifiedTypeTransformationDimensionDescription =
        gco::CharacterStringPropertyType;
    pub type MdGeorectifiedTypeTransformationDimensionMapping = gco::CharacterStringPropertyType;
    pub type MdGeoreferenceableTypeControlPointAvailability = gco::BooleanPropertyType;
    pub type MdGeoreferenceableTypeGeoreferencedParameters = gco::RecordPropertyType;
    pub type MdGeoreferenceableTypeOrientationParameterAvailability = gco::BooleanPropertyType;
    pub type MdGeoreferenceableTypeOrientationParameterDescription =
        gco::CharacterStringPropertyType;
    pub type MdGeoreferenceableTypeParameterCitation = CiCitationPropertyType;
    pub type MdGridSpatialRepresentationTypeAxisDimensionProperties = MdDimensionPropertyType;
    pub type MdGridSpatialRepresentationTypeCellGeometry = MdCellGeometryCodePropertyType;
    pub type MdGridSpatialRepresentationTypeNumberOfDimensions = gco::IntegerPropertyType;
    pub type MdGridSpatialRepresentationTypeTransformationParameterAvailability =
        gco::BooleanPropertyType;
    pub type MdIdentifierTypeAuthority = CiCitationPropertyType;
    pub type MdIdentifierTypeCode = gco::CharacterStringPropertyType;
    pub type MdImageDescriptionTypeCameraCalibrationInformationAvailability =
        gco::BooleanPropertyType;
    pub type MdImageDescriptionTypeCloudCoverPercentage = gco::RealPropertyType;
    pub type MdImageDescriptionTypeCompressionGenerationQuantity = gco::IntegerPropertyType;
    pub type MdImageDescriptionTypeFilmDistortionInformationAvailability = gco::BooleanPropertyType;
    pub type MdImageDescriptionTypeIlluminationAzimuthAngle = gco::RealPropertyType;
    pub type MdImageDescriptionTypeIlluminationElevationAngle = gco::RealPropertyType;
    pub type MdImageDescriptionTypeImageQualityCode = MdIdentifierPropertyType;
    pub type MdImageDescriptionTypeImagingCondition = MdImagingConditionCodePropertyType;
    pub type MdImageDescriptionTypeLensDistortionInformationAvailability = gco::BooleanPropertyType;
    pub type MdImageDescriptionTypeProcessingLevelCode = MdIdentifierPropertyType;
    pub type MdImageDescriptionTypeRadiometricCalibrationDataAvailability =
        gco::BooleanPropertyType;
    pub type MdImageDescriptionTypeTriangulationIndicator = gco::BooleanPropertyType;
    pub type MdKeywordsTypeKeyword = gco::CharacterStringPropertyType;
    pub type MdKeywordsTypeThesaurusName = CiCitationPropertyType;
    pub type MdKeywordsTypeType = MdKeywordTypeCodePropertyType;
    pub type MdLegalConstraintsTypeAccessConstraints = MdRestrictionCodePropertyType;
    pub type MdLegalConstraintsTypeOtherConstraints = gco::CharacterStringPropertyType;
    pub type MdLegalConstraintsTypeUseConstraints = MdRestrictionCodePropertyType;
    pub type MdMaintenanceInformationTypeContact = CiResponsiblePartyPropertyType;
    pub type MdMaintenanceInformationTypeDateOfNextUpdate = gco::DatePropertyType;
    pub type MdMaintenanceInformationTypeMaintenanceAndUpdateFrequency =
        MdMaintenanceFrequencyCodePropertyType;
    pub type MdMaintenanceInformationTypeMaintenanceNote = gco::CharacterStringPropertyType;
    pub type MdMaintenanceInformationTypeUpdateScope = MdScopeCodePropertyType;
    pub type MdMaintenanceInformationTypeUpdateScopeDescription = MdScopeDescriptionPropertyType;
    pub type MdMaintenanceInformationTypeUserDefinedMaintenanceFrequency =
        gts::TmPeriodDurationPropertyType;
    pub type MdMediumTypeDensity = gco::RealPropertyType;
    pub type MdMediumTypeDensityUnits = gco::CharacterStringPropertyType;
    pub type MdMediumTypeMediumFormat = MdMediumFormatCodePropertyType;
    pub type MdMediumTypeMediumNote = gco::CharacterStringPropertyType;
    pub type MdMediumTypeName = MdMediumNameCodePropertyType;
    pub type MdMediumTypeVolumes = gco::IntegerPropertyType;
    pub type MdMetadataExtensionInformationTypeExtendedElementInformation =
        MdExtendedElementInformationPropertyType;
    pub type MdMetadataExtensionInformationTypeExtensionOnLineResource =
        CiOnlineResourcePropertyType;
    pub type MdMetadataTypeApplicationSchemaInfo = MdApplicationSchemaInformationPropertyType;
    pub type MdMetadataTypeCharacterSet = MdCharacterSetCodePropertyType;
    pub type MdMetadataTypeContact = CiResponsiblePartyPropertyType;
    pub type MdMetadataTypeContentInfo = MdContentInformationPropertyType;
    pub type MdMetadataTypeDataQualityInfo = DqDataQualityPropertyType;
    pub type MdMetadataTypeDataSetURI = gco::CharacterStringPropertyType;
    pub type MdMetadataTypeDateStamp = gco::DatePropertyType;
    pub type MdMetadataTypeDescribes = DsDataSetPropertyType;
    pub type MdMetadataTypeDistributionInfo = MdDistributionPropertyType;
    pub type MdMetadataTypeFeatureAttribute = gco::ObjectReferencePropertyType;
    pub type MdMetadataTypeFeatureType = gco::ObjectReferencePropertyType;
    pub type MdMetadataTypeFileIdentifier = gco::CharacterStringPropertyType;
    pub type MdMetadataTypeHierarchyLevel = MdScopeCodePropertyType;
    pub type MdMetadataTypeHierarchyLevelName = gco::CharacterStringPropertyType;
    pub type MdMetadataTypeIdentificationInfo = MdIdentificationPropertyType;
    pub type MdMetadataTypeLanguage = gco::CharacterStringPropertyType;
    pub type MdMetadataTypeLocale = PtLocalePropertyType;
    pub type MdMetadataTypeMetadataConstraints = MdConstraintsPropertyType;
    pub type MdMetadataTypeMetadataExtensionInfo = MdMetadataExtensionInformationPropertyType;
    pub type MdMetadataTypeMetadataMaintenance = MdMaintenanceInformationPropertyType;
    pub type MdMetadataTypeMetadataStandardName = gco::CharacterStringPropertyType;
    pub type MdMetadataTypeMetadataStandardVersion = gco::CharacterStringPropertyType;
    pub type MdMetadataTypeParentIdentifier = gco::CharacterStringPropertyType;
    pub type MdMetadataTypePortrayalCatalogueInfo = MdPortrayalCatalogueReferencePropertyType;
    pub type MdMetadataTypePropertyType = gco::ObjectReferencePropertyType;
    pub type MdMetadataTypeReferenceSystemInfo = MdReferenceSystemPropertyType;
    pub type MdMetadataTypeSeries = DsAggregatePropertyType;
    pub type MdMetadataTypeSpatialRepresentationInfo = MdSpatialRepresentationPropertyType;
    pub type MdPortrayalCatalogueReferenceTypePortrayalCatalogueCitation = CiCitationPropertyType;
    pub type MdRangeDimensionTypeDescriptor = gco::CharacterStringPropertyType;
    pub type MdRangeDimensionTypeSequenceIdentifier = gco::MemberNamePropertyType;
    pub type MdReferenceSystemTypeReferenceSystemIdentifier = RsIdentifierPropertyType;
    pub type MdRepresentativeFractionTypeDenominator = gco::IntegerPropertyType;
    pub type MdResolutionTypeDistance = gco::DistancePropertyType;
    pub type MdResolutionTypeEquivalentScale = MdRepresentativeFractionPropertyType;
    pub type MdScopeDescriptionTypeAttributeInstances = gco::ObjectReferencePropertyType;
    pub type MdScopeDescriptionTypeAttributes = gco::ObjectReferencePropertyType;
    pub type MdScopeDescriptionTypeDataset = gco::CharacterStringPropertyType;
    pub type MdScopeDescriptionTypeFeatureInstances = gco::ObjectReferencePropertyType;
    pub type MdScopeDescriptionTypeFeatures = gco::ObjectReferencePropertyType;
    pub type MdScopeDescriptionTypeOther = gco::CharacterStringPropertyType;
    pub type MdSecurityConstraintsTypeClassification = MdClassificationCodePropertyType;
    pub type MdSecurityConstraintsTypeClassificationSystem = gco::CharacterStringPropertyType;
    pub type MdSecurityConstraintsTypeHandlingDescription = gco::CharacterStringPropertyType;
    pub type MdSecurityConstraintsTypeUserNote = gco::CharacterStringPropertyType;
    pub type MdStandardOrderProcessTypeFees = gco::CharacterStringPropertyType;
    pub type MdStandardOrderProcessTypeOrderingInstructions = gco::CharacterStringPropertyType;
    pub type MdStandardOrderProcessTypePlannedAvailableDateTime = gco::DateTimePropertyType;
    pub type MdStandardOrderProcessTypeTurnaround = gco::CharacterStringPropertyType;
    pub type MdUsageTypeSpecificUsage = gco::CharacterStringPropertyType;
    pub type MdUsageTypeUsageDateTime = gco::DateTimePropertyType;
    pub type MdUsageTypeUserContactInfo = CiResponsiblePartyPropertyType;
    pub type MdUsageTypeUserDeterminedLimitations = gco::CharacterStringPropertyType;
    pub type MdVectorSpatialRepresentationTypeGeometricObjects = MdGeometricObjectsPropertyType;
    pub type MdVectorSpatialRepresentationTypeTopologyLevel = MdTopologyLevelCodePropertyType;
    pub type PtFreeText = PtFreeTextType;
    #[derive(Debug, Clone)]
    pub struct PtFreeTextType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<PtFreeTextTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum PtFreeTextTypeContent {
        TextGroup(LocalisedCharacterStringPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct LocalisedCharacterStringPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<LocalisedCharacterStringPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum LocalisedCharacterStringPropertyTypeContent {
        LocalisedCharacterString(LocalisedCharacterStringType),
    }
    pub type PtLocale = PtLocaleType;
    pub type PtLocaleContainer = PtLocaleContainerType;
    #[derive(Debug, Clone)]
    pub enum PtLocaleContainerType {
        Description(gco::CharacterStringPropertyType),
        Locale(PtLocalePropertyType),
        Date(CiDatePropertyType),
        ResponsibleParty(CiResponsiblePartyPropertyType),
        LocalisedString(LocalisedCharacterStringPropertyType),
    }
    pub type PtFreeTextTypeTextGroup = LocalisedCharacterStringPropertyType;
    pub type PtLocaleContainerTypeDate = CiDatePropertyType;
    pub type PtLocaleContainerTypeDescription = gco::CharacterStringPropertyType;
    pub type PtLocaleContainerTypeLocale = PtLocalePropertyType;
    pub type PtLocaleContainerTypeLocalisedString = LocalisedCharacterStringPropertyType;
    pub type PtLocaleContainerTypeResponsibleParty = CiResponsiblePartyPropertyType;
    pub type PtLocaleTypeCharacterEncoding = MdCharacterSetCodePropertyType;
    pub type PtLocaleTypeCountry = CountryPropertyType;
    pub type PtLocaleTypeLanguageCode = LanguageCodePropertyType;
    pub type RsIdentifier = RsIdentifierType;
    pub type RsIdentifierTypeCodeSpace = gco::CharacterStringPropertyType;
    pub type RsIdentifierTypeVersion = gco::CharacterStringPropertyType;
    pub type Url = String;
}
pub mod gco {
    use super::*;
    #[derive(Debug, Clone)]
    pub struct Measure(pub Box<dyn MeasureTrait>);
    pub trait MeasureTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct AbstractGenericName(pub Box<dyn AbstractGenericNameTrait>);
    pub trait AbstractGenericNameTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct CharacterStringPropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<CharacterStringPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum CharacterStringPropertyTypeContent {
        CharacterString(CharacterString),
    }
    #[derive(Debug, Clone)]
    pub struct DatePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<DatePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DatePropertyTypeContent {
        Date(String),
        DateTime(String),
    }
    #[derive(Debug, Clone)]
    pub struct ObjectReferencePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
    }
    #[derive(Debug, Clone)]
    pub struct Length(pub Box<dyn LengthTrait>);
    pub trait LengthTrait: MeasureTrait {}
    #[derive(Debug, Clone)]
    pub struct CharacterString(pub Box<dyn CharacterStringTrait>);
    pub trait CharacterStringTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    #[derive(Debug, Clone)]
    pub struct CodeListValueType {
        pub code_list: String,
        pub code_list_value: String,
        pub code_space: Option<String>,
        pub content: String,
    }
    impl CharacterStringTrait for CodeListValueType {}
    impl xsd_parser::AsAny for CodeListValueType {
        fn as_any(&self) -> &dyn core::any::Any {
            self
        }
        fn as_any_mut(&mut self) -> &mut dyn core::any::Any {
            self
        }
    }
    #[derive(Debug, Clone)]
    pub struct BinaryPropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<BinaryPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum BinaryPropertyTypeContent {
        Binary(BinaryType),
    }
    #[derive(Debug, Clone)]
    pub struct DateTimePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<DateTimePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DateTimePropertyTypeContent {
        DateTime(String),
    }
    #[derive(Debug, Clone)]
    pub struct IntegerPropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<IntegerPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum IntegerPropertyTypeContent {
        Integer(i32),
    }
    #[derive(Debug, Clone)]
    pub struct BooleanPropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<BooleanPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum BooleanPropertyTypeContent {
        Boolean(bool),
    }
    #[derive(Debug, Clone)]
    pub struct RecordPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<RecordPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RecordPropertyTypeContent {
        Record(xs::AnyType),
    }
    #[derive(Debug, Clone)]
    pub struct GenericNamePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<GenericNamePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GenericNamePropertyTypeContent {
        AbstractGenericName(AbstractGenericName),
    }
    #[derive(Debug, Clone)]
    pub struct RecordTypePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<RecordTypePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RecordTypePropertyTypeContent {
        RecordType(RecordTypeType),
    }
    #[derive(Debug, Clone)]
    pub struct RealPropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<RealPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum RealPropertyTypeContent {
        Real(f64),
    }
    #[derive(Debug, Clone)]
    pub struct BinaryType {
        pub src: Option<String>,
        pub content: String,
    }
    #[derive(Debug, Clone)]
    pub struct RecordTypeType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub content: String,
    }
    #[derive(Debug, Clone)]
    pub struct DecimalPropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<DecimalPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DecimalPropertyTypeContent {
        Decimal(f64),
    }
    #[derive(Debug, Clone)]
    pub struct MeasurePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MeasurePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MeasurePropertyTypeContent {
        Measure(Measure),
    }
    #[derive(Debug, Clone)]
    pub struct DistancePropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<DistancePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum DistancePropertyTypeContent {
        Distance(gml::LengthType),
    }
    #[derive(Debug, Clone)]
    pub struct UnitOfMeasurePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<UnitOfMeasurePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum UnitOfMeasurePropertyTypeContent {
        UnitDefinition(gml::UnitDefinition),
    }
    #[derive(Debug, Clone)]
    pub struct MemberNamePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MemberNamePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MemberNamePropertyTypeContent {
        MemberName(MemberNameType),
    }
    #[derive(Debug, Clone)]
    pub struct UomLengthPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<UomLengthPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum UomLengthPropertyTypeContent {
        UnitDefinition(gml::UnitDefinition),
    }
    #[derive(Debug, Clone)]
    pub struct MemberNameType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: [MemberNameTypeContent; 2usize],
    }
    #[derive(Debug, Clone)]
    pub enum MemberNameTypeContent {
        Aname(CharacterStringPropertyType),
        AttributeType(TypeNamePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct TypeNamePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<TypeNamePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TypeNamePropertyTypeContent {
        TypeName(TypeNameType),
    }
    #[derive(Debug, Clone)]
    pub struct TypeNameType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: TypeNameTypeContent,
    }
    #[derive(Debug, Clone)]
    pub enum TypeNameTypeContent {
        Aname(CharacterStringPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct AbstractObject(pub Box<dyn AbstractObjectTrait>);
    pub trait AbstractObjectTrait: core::fmt::Debug + Clone + xsd_parser::AsAny {}
    pub type Angle = gml::AngleType;
    pub type Binary = BinaryType;
    pub type Boolean = bool;
    pub type Date = String;
    pub type DateTime = String;
    pub type Decimal = f64;
    pub type Distance = gml::LengthType;
    pub type Integer = i32;
    pub type LocalName = gml::CodeType;
    pub type MemberName = MemberNameType;
    pub type MemberNameTypeAname = CharacterStringPropertyType;
    pub type MemberNameTypeAttributeType = TypeNamePropertyType;
    pub type Multiplicity = MultiplicityType;
    #[derive(Debug, Clone)]
    pub struct MultiplicityType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: Vec<MultiplicityTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MultiplicityTypeContent {
        Range(MultiplicityRangePropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct MultiplicityRangePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<MultiplicityRangePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum MultiplicityRangePropertyTypeContent {
        MultiplicityRange(MultiplicityRangeType),
    }
    #[derive(Debug, Clone)]
    pub struct MultiplicityRangeType {
        pub id: Option<String>,
        pub uuid: Option<String>,
        pub content: [MultiplicityRangeTypeContent; 2usize],
    }
    #[derive(Debug, Clone)]
    pub enum MultiplicityRangeTypeContent {
        Lower(IntegerPropertyType),
        Upper(UnlimitedIntegerPropertyType),
    }
    #[derive(Debug, Clone)]
    pub struct UnlimitedIntegerPropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<UnlimitedIntegerPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum UnlimitedIntegerPropertyTypeContent {
        UnlimitedInteger(UnlimitedIntegerType),
    }
    #[derive(Debug, Clone)]
    pub struct UnlimitedIntegerType {
        pub is_infinite: Option<bool>,
        pub content: usize,
    }
    pub type MultiplicityRange = MultiplicityRangeType;
    pub type MultiplicityRangeTypeLower = IntegerPropertyType;
    pub type MultiplicityRangeTypeUpper = UnlimitedIntegerPropertyType;
    pub type MultiplicityTypeRange = MultiplicityRangePropertyType;
    pub type Real = f64;
    pub type Record = xs::AnyType;
    pub type RecordType = RecordTypeType;
    pub type Scale = gml::ScaleType;
    pub type ScopedName = gml::CodeType;
    pub type TypeName = TypeNameType;
    pub type TypeNameTypeAname = CharacterStringPropertyType;
    pub type UnlimitedInteger = UnlimitedIntegerType;
}
pub mod gss {
    use super::*;
    #[derive(Debug, Clone)]
    pub struct GmPointPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<GmPointPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GmPointPropertyTypeContent {
        Point(gml::Point),
    }
    #[derive(Debug, Clone)]
    pub struct GmObjectPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<GmObjectPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum GmObjectPropertyTypeContent {
        AbstractGeometry(gml::AbstractGeometry),
    }
}
pub mod gts {
    use super::*;
    #[derive(Debug, Clone)]
    pub struct TmPeriodDurationPropertyType {
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<TmPeriodDurationPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TmPeriodDurationPropertyTypeContent {
        TmPeriodDuration(String),
    }
    #[derive(Debug, Clone)]
    pub struct TmPrimitivePropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<TmPrimitivePropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum TmPrimitivePropertyTypeContent {
        AbstractTimePrimitive(gml::AbstractTimePrimitive),
    }
    pub type TmPeriodDuration = String;
}
pub mod gsr {
    use super::*;
    #[derive(Debug, Clone)]
    pub struct ScCrsPropertyType {
        pub type_: Option<String>,
        pub href: Option<String>,
        pub role: Option<String>,
        pub arcrole: Option<String>,
        pub title: Option<String>,
        pub show: Option<xlink::Show>,
        pub actuate: Option<xlink::Actuate>,
        pub uuidref: Option<String>,
        pub nil_reason: Option<gml::NilReasonType>,
        pub content: Option<ScCrsPropertyTypeContent>,
    }
    #[derive(Debug, Clone)]
    pub enum ScCrsPropertyTypeContent {
        AbstractCRS(gml::AbstractCRS),
    }
}
