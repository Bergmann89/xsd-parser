pub mod aixm {
    use core::fmt::Debug;
    use serde::{de::DeserializeOwned, Deserialize, Serialize};
    use xsd_parser::AsAny;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAixmFeatureXElement(pub Box<dyn AbstractAixmFeatureXElementTrait>);
    pub trait AbstractAixmFeatureXElementTrait: super::gml::AbstractFeatureXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAixmFeatureBaseTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAixmFeatureTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AbstractAixmFeatureTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AbstractAixmFeatureTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AbstractAixmFeatureTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAixmMessageBaseTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "messageMetadata")]
        pub message_metadata: Option<MessageMetadataPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAixmMessageTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<super::gml::AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "messageMetadata")]
        pub message_metadata: Option<MessageMetadataPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAixmObjectXElement(pub Box<dyn AbstractAixmObjectXElementTrait>);
    pub trait AbstractAixmObjectXElementTrait: super::gml::AbstractGmlXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAixmObjectTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
    }
    impl super::gml::AbstractGmlXElementTrait for AbstractAixmObjectTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AbstractAixmObjectTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAixmPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAixmTimeSliceBaseTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAixmTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAerialRefuellingAnchorExtensionXElement(
        pub Box<dyn AbstractAerialRefuellingAnchorExtensionXElementTrait>,
    );
    pub trait AbstractAerialRefuellingAnchorExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAerialRefuellingExtensionXElement(
        pub Box<dyn AbstractAerialRefuellingExtensionXElementTrait>,
    );
    pub trait AbstractAerialRefuellingExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAerialRefuellingPointExtensionXElement(
        pub Box<dyn AbstractAerialRefuellingPointExtensionXElementTrait>,
    );
    pub trait AbstractAerialRefuellingPointExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAerialRefuellingTrackExtensionXElement(
        pub Box<dyn AbstractAerialRefuellingTrackExtensionXElementTrait>,
    );
    pub trait AbstractAerialRefuellingTrackExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAeronauticalGroundLightExtensionXElement(
        pub Box<dyn AbstractAeronauticalGroundLightExtensionXElementTrait>,
    );
    pub trait AbstractAeronauticalGroundLightExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirTrafficControlServiceExtensionXElement(
        pub Box<dyn AbstractAirTrafficControlServiceExtensionXElementTrait>,
    );
    pub trait AbstractAirTrafficControlServiceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirTrafficManagementServiceExtensionXElement(
        pub Box<dyn AbstractAirTrafficManagementServiceExtensionXElementTrait>,
    );
    pub trait AbstractAirTrafficManagementServiceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAircraftCharacteristicExtensionXElement(
        pub Box<dyn AbstractAircraftCharacteristicExtensionXElementTrait>,
    );
    pub trait AbstractAircraftCharacteristicExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAircraftGroundServiceExtensionXElement(
        pub Box<dyn AbstractAircraftGroundServiceExtensionXElementTrait>,
    );
    pub trait AbstractAircraftGroundServiceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAircraftStandContaminationExtensionXElement(
        pub Box<dyn AbstractAircraftStandContaminationExtensionXElementTrait>,
    );
    pub trait AbstractAircraftStandContaminationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAircraftStandExtensionXElement(
        pub Box<dyn AbstractAircraftStandExtensionXElementTrait>,
    );
    pub trait AbstractAircraftStandExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirportClearanceServiceExtensionXElement(
        pub Box<dyn AbstractAirportClearanceServiceExtensionXElementTrait>,
    );
    pub trait AbstractAirportClearanceServiceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirportGroundServiceXElement(
        pub Box<dyn AbstractAirportGroundServiceXElementTrait>,
    );
    pub trait AbstractAirportGroundServiceXElementTrait: AbstractServiceXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirportGroundServiceExtensionXElement(
        pub Box<dyn AbstractAirportGroundServiceExtensionXElementTrait>,
    );
    pub trait AbstractAirportGroundServiceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirportGroundServiceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AbstractAirportGroundServiceTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AbstractAirportGroundServiceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AbstractAirportGroundServiceTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AbstractAirportGroundServiceTypeXType {}
    impl AbstractServiceXElementTrait for AbstractAirportGroundServiceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirportHeliportAvailabilityExtensionXElement(
        pub Box<dyn AbstractAirportHeliportAvailabilityExtensionXElementTrait>,
    );
    pub trait AbstractAirportHeliportAvailabilityExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirportHeliportCollocationExtensionXElement(
        pub Box<dyn AbstractAirportHeliportCollocationExtensionXElementTrait>,
    );
    pub trait AbstractAirportHeliportCollocationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirportHeliportContaminationExtensionXElement(
        pub Box<dyn AbstractAirportHeliportContaminationExtensionXElementTrait>,
    );
    pub trait AbstractAirportHeliportContaminationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirportHeliportExtensionXElement(
        pub Box<dyn AbstractAirportHeliportExtensionXElementTrait>,
    );
    pub trait AbstractAirportHeliportExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirportHeliportProtectionAreaXElement(
        pub Box<dyn AbstractAirportHeliportProtectionAreaXElementTrait>,
    );
    pub trait AbstractAirportHeliportProtectionAreaXElementTrait:
        AbstractAixmFeatureXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirportHeliportProtectionAreaExtensionXElement(
        pub Box<dyn AbstractAirportHeliportProtectionAreaExtensionXElementTrait>,
    );
    pub trait AbstractAirportHeliportProtectionAreaExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirportHeliportProtectionAreaTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AbstractAirportHeliportProtectionAreaTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AbstractAirportHeliportProtectionAreaTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AbstractAirportHeliportProtectionAreaTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AbstractAirportHeliportProtectionAreaTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirportHeliportResponsibilityOrganisationExtensionXElement(
        pub Box<dyn AbstractAirportHeliportResponsibilityOrganisationExtensionXElementTrait>,
    );
    pub trait AbstractAirportHeliportResponsibilityOrganisationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirportHeliportUsageExtensionXElement(
        pub Box<dyn AbstractAirportHeliportUsageExtensionXElementTrait>,
    );
    pub trait AbstractAirportHeliportUsageExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirportHotSpotExtensionXElement(
        pub Box<dyn AbstractAirportHotSpotExtensionXElementTrait>,
    );
    pub trait AbstractAirportHotSpotExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirportProtectionAreaMarkingExtensionXElement(
        pub Box<dyn AbstractAirportProtectionAreaMarkingExtensionXElementTrait>,
    );
    pub trait AbstractAirportProtectionAreaMarkingExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirportSuppliesServiceExtensionXElement(
        pub Box<dyn AbstractAirportSuppliesServiceExtensionXElementTrait>,
    );
    pub trait AbstractAirportSuppliesServiceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirspaceActivationExtensionXElement(
        pub Box<dyn AbstractAirspaceActivationExtensionXElementTrait>,
    );
    pub trait AbstractAirspaceActivationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirspaceBorderCrossingExtensionXElement(
        pub Box<dyn AbstractAirspaceBorderCrossingExtensionXElementTrait>,
    );
    pub trait AbstractAirspaceBorderCrossingExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirspaceExtensionXElement(
        pub Box<dyn AbstractAirspaceExtensionXElementTrait>,
    );
    pub trait AbstractAirspaceExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirspaceGeometryComponentExtensionXElement(
        pub Box<dyn AbstractAirspaceGeometryComponentExtensionXElementTrait>,
    );
    pub trait AbstractAirspaceGeometryComponentExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirspaceLayerClassExtensionXElement(
        pub Box<dyn AbstractAirspaceLayerClassExtensionXElementTrait>,
    );
    pub trait AbstractAirspaceLayerClassExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirspaceLayerExtensionXElement(
        pub Box<dyn AbstractAirspaceLayerExtensionXElementTrait>,
    );
    pub trait AbstractAirspaceLayerExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirspaceVolumeDependencyExtensionXElement(
        pub Box<dyn AbstractAirspaceVolumeDependencyExtensionXElementTrait>,
    );
    pub trait AbstractAirspaceVolumeDependencyExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAirspaceVolumeExtensionXElement(
        pub Box<dyn AbstractAirspaceVolumeExtensionXElementTrait>,
    );
    pub trait AbstractAirspaceVolumeExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAltimeterSourceExtensionXElement(
        pub Box<dyn AbstractAltimeterSourceExtensionXElementTrait>,
    );
    pub trait AbstractAltimeterSourceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAltimeterSourceStatusExtensionXElement(
        pub Box<dyn AbstractAltimeterSourceStatusExtensionXElementTrait>,
    );
    pub trait AbstractAltimeterSourceStatusExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAltitudeAdjustmentExtensionXElement(
        pub Box<dyn AbstractAltitudeAdjustmentExtensionXElementTrait>,
    );
    pub trait AbstractAltitudeAdjustmentExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAngleIndicationExtensionXElement(
        pub Box<dyn AbstractAngleIndicationExtensionXElementTrait>,
    );
    pub trait AbstractAngleIndicationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAngleUseExtensionXElement(
        pub Box<dyn AbstractAngleUseExtensionXElementTrait>,
    );
    pub trait AbstractAngleUseExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractApproachAltitudeTableExtensionXElement(
        pub Box<dyn AbstractApproachAltitudeTableExtensionXElementTrait>,
    );
    pub trait AbstractApproachAltitudeTableExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractApproachConditionExtensionXElement(
        pub Box<dyn AbstractApproachConditionExtensionXElementTrait>,
    );
    pub trait AbstractApproachConditionExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractApproachDistanceTableExtensionXElement(
        pub Box<dyn AbstractApproachDistanceTableExtensionXElementTrait>,
    );
    pub trait AbstractApproachDistanceTableExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractApproachLegXElement(pub Box<dyn AbstractApproachLegXElementTrait>);
    pub trait AbstractApproachLegXElementTrait: AbstractSegmentLegXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractApproachLegExtensionXElement(
        pub Box<dyn AbstractApproachLegExtensionXElementTrait>,
    );
    pub trait AbstractApproachLegExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractApproachLegTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AbstractApproachLegTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AbstractApproachLegTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AbstractApproachLegTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AbstractApproachLegTypeXType {}
    impl AbstractSegmentLegXElementTrait for AbstractApproachLegTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractApproachLightingSystemExtensionXElement(
        pub Box<dyn AbstractApproachLightingSystemExtensionXElementTrait>,
    );
    pub trait AbstractApproachLightingSystemExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractApproachTimingTableExtensionXElement(
        pub Box<dyn AbstractApproachTimingTableExtensionXElementTrait>,
    );
    pub trait AbstractApproachTimingTableExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractApronAreaAvailabilityExtensionXElement(
        pub Box<dyn AbstractApronAreaAvailabilityExtensionXElementTrait>,
    );
    pub trait AbstractApronAreaAvailabilityExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractApronAreaUsageExtensionXElement(
        pub Box<dyn AbstractApronAreaUsageExtensionXElementTrait>,
    );
    pub trait AbstractApronAreaUsageExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractApronContaminationExtensionXElement(
        pub Box<dyn AbstractApronContaminationExtensionXElementTrait>,
    );
    pub trait AbstractApronContaminationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractApronElementExtensionXElement(
        pub Box<dyn AbstractApronElementExtensionXElementTrait>,
    );
    pub trait AbstractApronElementExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractApronExtensionXElement(pub Box<dyn AbstractApronExtensionXElementTrait>);
    pub trait AbstractApronExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractApronLightSystemExtensionXElement(
        pub Box<dyn AbstractApronLightSystemExtensionXElementTrait>,
    );
    pub trait AbstractApronLightSystemExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractApronMarkingExtensionXElement(
        pub Box<dyn AbstractApronMarkingExtensionXElementTrait>,
    );
    pub trait AbstractApronMarkingExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractArrestingGearExtensionXElement(
        pub Box<dyn AbstractArrestingGearExtensionXElementTrait>,
    );
    pub trait AbstractArrestingGearExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractArrivalFeederLegExtensionXElement(
        pub Box<dyn AbstractArrivalFeederLegExtensionXElementTrait>,
    );
    pub trait AbstractArrivalFeederLegExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractArrivalLegExtensionXElement(
        pub Box<dyn AbstractArrivalLegExtensionXElementTrait>,
    );
    pub trait AbstractArrivalLegExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAuthorityForAerialRefuellingExtensionXElement(
        pub Box<dyn AbstractAuthorityForAerialRefuellingExtensionXElementTrait>,
    );
    pub trait AbstractAuthorityForAerialRefuellingExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAuthorityForAirspaceExtensionXElement(
        pub Box<dyn AbstractAuthorityForAirspaceExtensionXElementTrait>,
    );
    pub trait AbstractAuthorityForAirspaceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAuthorityForNavaidEquipmentExtensionXElement(
        pub Box<dyn AbstractAuthorityForNavaidEquipmentExtensionXElementTrait>,
    );
    pub trait AbstractAuthorityForNavaidEquipmentExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAuthorityForSpecialNavigationStationExtensionXElement(
        pub Box<dyn AbstractAuthorityForSpecialNavigationStationExtensionXElementTrait>,
    );
    pub trait AbstractAuthorityForSpecialNavigationStationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAuthorityForSpecialNavigationSystemExtensionXElement(
        pub Box<dyn AbstractAuthorityForSpecialNavigationSystemExtensionXElementTrait>,
    );
    pub trait AbstractAuthorityForSpecialNavigationSystemExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAzimuthExtensionXElement(pub Box<dyn AbstractAzimuthExtensionXElementTrait>);
    pub trait AbstractAzimuthExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractCallsignDetailExtensionXElement(
        pub Box<dyn AbstractCallsignDetailExtensionXElementTrait>,
    );
    pub trait AbstractCallsignDetailExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractChangeOverPointExtensionXElement(
        pub Box<dyn AbstractChangeOverPointExtensionXElementTrait>,
    );
    pub trait AbstractChangeOverPointExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractCheckpointInsExtensionXElement(
        pub Box<dyn AbstractCheckpointInsExtensionXElementTrait>,
    );
    pub trait AbstractCheckpointInsExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractCheckpointVorExtensionXElement(
        pub Box<dyn AbstractCheckpointVorExtensionXElementTrait>,
    );
    pub trait AbstractCheckpointVorExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractCircleSectorExtensionXElement(
        pub Box<dyn AbstractCircleSectorExtensionXElementTrait>,
    );
    pub trait AbstractCircleSectorExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractCirclingAreaExtensionXElement(
        pub Box<dyn AbstractCirclingAreaExtensionXElementTrait>,
    );
    pub trait AbstractCirclingAreaExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractCirclingRestrictionExtensionXElement(
        pub Box<dyn AbstractCirclingRestrictionExtensionXElementTrait>,
    );
    pub trait AbstractCirclingRestrictionExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractCityExtensionXElement(pub Box<dyn AbstractCityExtensionXElementTrait>);
    pub trait AbstractCityExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractConditionCombinationExtensionXElement(
        pub Box<dyn AbstractConditionCombinationExtensionXElementTrait>,
    );
    pub trait AbstractConditionCombinationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractContactInformationExtensionXElement(
        pub Box<dyn AbstractContactInformationExtensionXElementTrait>,
    );
    pub trait AbstractContactInformationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDmeExtensionXElement(pub Box<dyn AbstractDmeExtensionXElementTrait>);
    pub trait AbstractDmeExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDeicingAreaExtensionXElement(
        pub Box<dyn AbstractDeicingAreaExtensionXElementTrait>,
    );
    pub trait AbstractDeicingAreaExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDeicingAreaMarkingExtensionXElement(
        pub Box<dyn AbstractDeicingAreaMarkingExtensionXElementTrait>,
    );
    pub trait AbstractDeicingAreaMarkingExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDepartureArrivalConditionExtensionXElement(
        pub Box<dyn AbstractDepartureArrivalConditionExtensionXElementTrait>,
    );
    pub trait AbstractDepartureArrivalConditionExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDepartureLegExtensionXElement(
        pub Box<dyn AbstractDepartureLegExtensionXElementTrait>,
    );
    pub trait AbstractDepartureLegExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDesignatedPointExtensionXElement(
        pub Box<dyn AbstractDesignatedPointExtensionXElementTrait>,
    );
    pub trait AbstractDesignatedPointExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDirectFlightXElement(pub Box<dyn AbstractDirectFlightXElementTrait>);
    pub trait AbstractDirectFlightXElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDirectFlightClassExtensionXElement(
        pub Box<dyn AbstractDirectFlightClassExtensionXElementTrait>,
    );
    pub trait AbstractDirectFlightClassExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDirectFlightExtensionXElement(
        pub Box<dyn AbstractDirectFlightExtensionXElementTrait>,
    );
    pub trait AbstractDirectFlightExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDirectFlightSegmentExtensionXElement(
        pub Box<dyn AbstractDirectFlightSegmentExtensionXElementTrait>,
    );
    pub trait AbstractDirectFlightSegmentExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDirectFlightTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDirectionFinderExtensionXElement(
        pub Box<dyn AbstractDirectionFinderExtensionXElementTrait>,
    );
    pub trait AbstractDirectionFinderExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDistanceIndicationExtensionXElement(
        pub Box<dyn AbstractDistanceIndicationExtensionXElementTrait>,
    );
    pub trait AbstractDistanceIndicationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractElevatedCurveExtensionXElement(
        pub Box<dyn AbstractElevatedCurveExtensionXElementTrait>,
    );
    pub trait AbstractElevatedCurveExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractElevatedPointExtensionXElement(
        pub Box<dyn AbstractElevatedPointExtensionXElementTrait>,
    );
    pub trait AbstractElevatedPointExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractElevatedSurfaceExtensionXElement(
        pub Box<dyn AbstractElevatedSurfaceExtensionXElementTrait>,
    );
    pub trait AbstractElevatedSurfaceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractElevationExtensionXElement(
        pub Box<dyn AbstractElevationExtensionXElementTrait>,
    );
    pub trait AbstractElevationExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractEnRouteSegmentPointExtensionXElement(
        pub Box<dyn AbstractEnRouteSegmentPointExtensionXElementTrait>,
    );
    pub trait AbstractEnRouteSegmentPointExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractEquipmentUnavailableAdjustmentColumnExtensionXElement(
        pub Box<dyn AbstractEquipmentUnavailableAdjustmentColumnExtensionXElementTrait>,
    );
    pub trait AbstractEquipmentUnavailableAdjustmentColumnExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractEquipmentUnavailableAdjustmentExtensionXElement(
        pub Box<dyn AbstractEquipmentUnavailableAdjustmentExtensionXElementTrait>,
    );
    pub trait AbstractEquipmentUnavailableAdjustmentExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractExtensionXElement(pub Box<dyn AbstractExtensionXElementTrait>);
    pub trait AbstractExtensionXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractExtensionTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
    }
    impl AbstractExtensionXElementTrait for AbstractExtensionTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractFasDataBlockExtensionXElement(
        pub Box<dyn AbstractFasDataBlockExtensionXElementTrait>,
    );
    pub trait AbstractFasDataBlockExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractFinalLegExtensionXElement(
        pub Box<dyn AbstractFinalLegExtensionXElementTrait>,
    );
    pub trait AbstractFinalLegExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractFinalProfileExtensionXElement(
        pub Box<dyn AbstractFinalProfileExtensionXElementTrait>,
    );
    pub trait AbstractFinalProfileExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractFireFightingServiceExtensionXElement(
        pub Box<dyn AbstractFireFightingServiceExtensionXElementTrait>,
    );
    pub trait AbstractFireFightingServiceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractFlightCharacteristicExtensionXElement(
        pub Box<dyn AbstractFlightCharacteristicExtensionXElementTrait>,
    );
    pub trait AbstractFlightCharacteristicExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractFlightConditionCircumstanceExtensionXElement(
        pub Box<dyn AbstractFlightConditionCircumstanceExtensionXElementTrait>,
    );
    pub trait AbstractFlightConditionCircumstanceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractFlightConditionCombinationExtensionXElement(
        pub Box<dyn AbstractFlightConditionCombinationExtensionXElementTrait>,
    );
    pub trait AbstractFlightConditionCombinationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractFlightConditionElementExtensionXElement(
        pub Box<dyn AbstractFlightConditionElementExtensionXElementTrait>,
    );
    pub trait AbstractFlightConditionElementExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractFlightRestrictionExtensionXElement(
        pub Box<dyn AbstractFlightRestrictionExtensionXElementTrait>,
    );
    pub trait AbstractFlightRestrictionExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractFlightRestrictionLevelExtensionXElement(
        pub Box<dyn AbstractFlightRestrictionLevelExtensionXElementTrait>,
    );
    pub trait AbstractFlightRestrictionLevelExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractFlightRestrictionRouteExtensionXElement(
        pub Box<dyn AbstractFlightRestrictionRouteExtensionXElementTrait>,
    );
    pub trait AbstractFlightRestrictionRouteExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractFlightRoutingElementExtensionXElement(
        pub Box<dyn AbstractFlightRoutingElementExtensionXElementTrait>,
    );
    pub trait AbstractFlightRoutingElementExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractFloatingDockSiteExtensionXElement(
        pub Box<dyn AbstractFloatingDockSiteExtensionXElementTrait>,
    );
    pub trait AbstractFloatingDockSiteExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractFuelExtensionXElement(pub Box<dyn AbstractFuelExtensionXElementTrait>);
    pub trait AbstractFuelExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeoBorderExtensionXElement(
        pub Box<dyn AbstractGeoBorderExtensionXElementTrait>,
    );
    pub trait AbstractGeoBorderExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGlidepathExtensionXElement(
        pub Box<dyn AbstractGlidepathExtensionXElementTrait>,
    );
    pub trait AbstractGlidepathExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGroundLightSystemXElement(
        pub Box<dyn AbstractGroundLightSystemXElementTrait>,
    );
    pub trait AbstractGroundLightSystemXElementTrait: AbstractAixmFeatureXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGroundLightSystemExtensionXElement(
        pub Box<dyn AbstractGroundLightSystemExtensionXElementTrait>,
    );
    pub trait AbstractGroundLightSystemExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGroundLightSystemTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AbstractGroundLightSystemTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AbstractGroundLightSystemTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AbstractGroundLightSystemTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AbstractGroundLightSystemTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGroundLightingAvailabilityExtensionXElement(
        pub Box<dyn AbstractGroundLightingAvailabilityExtensionXElementTrait>,
    );
    pub trait AbstractGroundLightingAvailabilityExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGroundTrafficControlServiceExtensionXElement(
        pub Box<dyn AbstractGroundTrafficControlServiceExtensionXElementTrait>,
    );
    pub trait AbstractGroundTrafficControlServiceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGuidanceLineExtensionXElement(
        pub Box<dyn AbstractGuidanceLineExtensionXElementTrait>,
    );
    pub trait AbstractGuidanceLineExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGuidanceLineLightSystemExtensionXElement(
        pub Box<dyn AbstractGuidanceLineLightSystemExtensionXElementTrait>,
    );
    pub trait AbstractGuidanceLineLightSystemExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGuidanceLineMarkingExtensionXElement(
        pub Box<dyn AbstractGuidanceLineMarkingExtensionXElementTrait>,
    );
    pub trait AbstractGuidanceLineMarkingExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractHoldingAssessmentExtensionXElement(
        pub Box<dyn AbstractHoldingAssessmentExtensionXElementTrait>,
    );
    pub trait AbstractHoldingAssessmentExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractHoldingPatternDistanceExtensionXElement(
        pub Box<dyn AbstractHoldingPatternDistanceExtensionXElementTrait>,
    );
    pub trait AbstractHoldingPatternDistanceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractHoldingPatternDurationExtensionXElement(
        pub Box<dyn AbstractHoldingPatternDurationExtensionXElementTrait>,
    );
    pub trait AbstractHoldingPatternDurationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractHoldingPatternExtensionXElement(
        pub Box<dyn AbstractHoldingPatternExtensionXElementTrait>,
    );
    pub trait AbstractHoldingPatternExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractHoldingUseExtensionXElement(
        pub Box<dyn AbstractHoldingUseExtensionXElementTrait>,
    );
    pub trait AbstractHoldingUseExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractInformationServiceExtensionXElement(
        pub Box<dyn AbstractInformationServiceExtensionXElementTrait>,
    );
    pub trait AbstractInformationServiceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractInitialLegExtensionXElement(
        pub Box<dyn AbstractInitialLegExtensionXElementTrait>,
    );
    pub trait AbstractInitialLegExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractInstrumentApproachProcedureExtensionXElement(
        pub Box<dyn AbstractInstrumentApproachProcedureExtensionXElementTrait>,
    );
    pub trait AbstractInstrumentApproachProcedureExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractIntermediateLegExtensionXElement(
        pub Box<dyn AbstractIntermediateLegExtensionXElementTrait>,
    );
    pub trait AbstractIntermediateLegExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractLandingTakeoffAreaCollectionExtensionXElement(
        pub Box<dyn AbstractLandingTakeoffAreaCollectionExtensionXElementTrait>,
    );
    pub trait AbstractLandingTakeoffAreaCollectionExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractLightActivationExtensionXElement(
        pub Box<dyn AbstractLightActivationExtensionXElementTrait>,
    );
    pub trait AbstractLightActivationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractLightElementExtensionXElement(
        pub Box<dyn AbstractLightElementExtensionXElementTrait>,
    );
    pub trait AbstractLightElementExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractLightElementStatusExtensionXElement(
        pub Box<dyn AbstractLightElementStatusExtensionXElementTrait>,
    );
    pub trait AbstractLightElementStatusExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractLinguisticNoteExtensionXElement(
        pub Box<dyn AbstractLinguisticNoteExtensionXElementTrait>,
    );
    pub trait AbstractLinguisticNoteExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractLocalizerExtensionXElement(
        pub Box<dyn AbstractLocalizerExtensionXElementTrait>,
    );
    pub trait AbstractLocalizerExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractManoeuvringAreaAvailabilityExtensionXElement(
        pub Box<dyn AbstractManoeuvringAreaAvailabilityExtensionXElementTrait>,
    );
    pub trait AbstractManoeuvringAreaAvailabilityExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractManoeuvringAreaUsageExtensionXElement(
        pub Box<dyn AbstractManoeuvringAreaUsageExtensionXElementTrait>,
    );
    pub trait AbstractManoeuvringAreaUsageExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMarkerBeaconExtensionXElement(
        pub Box<dyn AbstractMarkerBeaconExtensionXElementTrait>,
    );
    pub trait AbstractMarkerBeaconExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMarkingXElement(pub Box<dyn AbstractMarkingXElementTrait>);
    pub trait AbstractMarkingXElementTrait: AbstractAixmFeatureXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMarkingBuoyExtensionXElement(
        pub Box<dyn AbstractMarkingBuoyExtensionXElementTrait>,
    );
    pub trait AbstractMarkingBuoyExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMarkingElementExtensionXElement(
        pub Box<dyn AbstractMarkingElementExtensionXElementTrait>,
    );
    pub trait AbstractMarkingElementExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMarkingExtensionXElement(pub Box<dyn AbstractMarkingExtensionXElementTrait>);
    pub trait AbstractMarkingExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMarkingTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AbstractMarkingTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AbstractMarkingTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AbstractMarkingTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AbstractMarkingTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMeteorologyExtensionXElement(
        pub Box<dyn AbstractMeteorologyExtensionXElementTrait>,
    );
    pub trait AbstractMeteorologyExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMinimaExtensionXElement(pub Box<dyn AbstractMinimaExtensionXElementTrait>);
    pub trait AbstractMinimaExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMissedApproachGroupExtensionXElement(
        pub Box<dyn AbstractMissedApproachGroupExtensionXElementTrait>,
    );
    pub trait AbstractMissedApproachGroupExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMissedApproachLegExtensionXElement(
        pub Box<dyn AbstractMissedApproachLegExtensionXElementTrait>,
    );
    pub trait AbstractMissedApproachLegExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractNdbExtensionXElement(pub Box<dyn AbstractNdbExtensionXElementTrait>);
    pub trait AbstractNdbExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractNavaidComponentExtensionXElement(
        pub Box<dyn AbstractNavaidComponentExtensionXElementTrait>,
    );
    pub trait AbstractNavaidComponentExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractNavaidEquipmentXElement(pub Box<dyn AbstractNavaidEquipmentXElementTrait>);
    pub trait AbstractNavaidEquipmentXElementTrait: AbstractAixmFeatureXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractNavaidEquipmentDistanceExtensionXElement(
        pub Box<dyn AbstractNavaidEquipmentDistanceExtensionXElementTrait>,
    );
    pub trait AbstractNavaidEquipmentDistanceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractNavaidEquipmentExtensionXElement(
        pub Box<dyn AbstractNavaidEquipmentExtensionXElementTrait>,
    );
    pub trait AbstractNavaidEquipmentExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractNavaidEquipmentMonitoringExtensionXElement(
        pub Box<dyn AbstractNavaidEquipmentMonitoringExtensionXElementTrait>,
    );
    pub trait AbstractNavaidEquipmentMonitoringExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractNavaidEquipmentTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AbstractNavaidEquipmentTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AbstractNavaidEquipmentTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AbstractNavaidEquipmentTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AbstractNavaidEquipmentTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractNavaidExtensionXElement(pub Box<dyn AbstractNavaidExtensionXElementTrait>);
    pub trait AbstractNavaidExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractNavaidOperationalStatusExtensionXElement(
        pub Box<dyn AbstractNavaidOperationalStatusExtensionXElementTrait>,
    );
    pub trait AbstractNavaidOperationalStatusExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractNavigationAreaExtensionXElement(
        pub Box<dyn AbstractNavigationAreaExtensionXElementTrait>,
    );
    pub trait AbstractNavigationAreaExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractNavigationAreaRestrictionExtensionXElement(
        pub Box<dyn AbstractNavigationAreaRestrictionExtensionXElementTrait>,
    );
    pub trait AbstractNavigationAreaRestrictionExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractNavigationAreaSectorExtensionXElement(
        pub Box<dyn AbstractNavigationAreaSectorExtensionXElementTrait>,
    );
    pub trait AbstractNavigationAreaSectorExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractNavigationSystemCheckpointXElement(
        pub Box<dyn AbstractNavigationSystemCheckpointXElementTrait>,
    );
    pub trait AbstractNavigationSystemCheckpointXElementTrait:
        AbstractAixmFeatureXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractNavigationSystemCheckpointExtensionXElement(
        pub Box<dyn AbstractNavigationSystemCheckpointExtensionXElementTrait>,
    );
    pub trait AbstractNavigationSystemCheckpointExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractNavigationSystemCheckpointTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AbstractNavigationSystemCheckpointTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AbstractNavigationSystemCheckpointTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AbstractNavigationSystemCheckpointTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AbstractNavigationSystemCheckpointTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractNitrogenExtensionXElement(
        pub Box<dyn AbstractNitrogenExtensionXElementTrait>,
    );
    pub trait AbstractNitrogenExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractNonMovementAreaExtensionXElement(
        pub Box<dyn AbstractNonMovementAreaExtensionXElementTrait>,
    );
    pub trait AbstractNonMovementAreaExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractNoteExtensionXElement(pub Box<dyn AbstractNoteExtensionXElementTrait>);
    pub trait AbstractNoteExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractObstacleAreaExtensionXElement(
        pub Box<dyn AbstractObstacleAreaExtensionXElementTrait>,
    );
    pub trait AbstractObstacleAreaExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractObstacleAssessmentAreaExtensionXElement(
        pub Box<dyn AbstractObstacleAssessmentAreaExtensionXElementTrait>,
    );
    pub trait AbstractObstacleAssessmentAreaExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractObstaclePlacementExtensionXElement(
        pub Box<dyn AbstractObstaclePlacementExtensionXElementTrait>,
    );
    pub trait AbstractObstaclePlacementExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractObstructionExtensionXElement(
        pub Box<dyn AbstractObstructionExtensionXElementTrait>,
    );
    pub trait AbstractObstructionExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractOilExtensionXElement(pub Box<dyn AbstractOilExtensionXElementTrait>);
    pub trait AbstractOilExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractOnlineContactExtensionXElement(
        pub Box<dyn AbstractOnlineContactExtensionXElementTrait>,
    );
    pub trait AbstractOnlineContactExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractOrganisationAuthorityAssociationExtensionXElement(
        pub Box<dyn AbstractOrganisationAuthorityAssociationExtensionXElementTrait>,
    );
    pub trait AbstractOrganisationAuthorityAssociationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractOrganisationAuthorityExtensionXElement(
        pub Box<dyn AbstractOrganisationAuthorityExtensionXElementTrait>,
    );
    pub trait AbstractOrganisationAuthorityExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractOxygenExtensionXElement(pub Box<dyn AbstractOxygenExtensionXElementTrait>);
    pub trait AbstractOxygenExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractPassengerLoadingBridgeExtensionXElement(
        pub Box<dyn AbstractPassengerLoadingBridgeExtensionXElementTrait>,
    );
    pub trait AbstractPassengerLoadingBridgeExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractPassengerServiceExtensionXElement(
        pub Box<dyn AbstractPassengerServiceExtensionXElementTrait>,
    );
    pub trait AbstractPassengerServiceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractPilotControlledLightingExtensionXElement(
        pub Box<dyn AbstractPilotControlledLightingExtensionXElementTrait>,
    );
    pub trait AbstractPilotControlledLightingExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractPointReferenceExtensionXElement(
        pub Box<dyn AbstractPointReferenceExtensionXElementTrait>,
    );
    pub trait AbstractPointReferenceExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractPostalAddressExtensionXElement(
        pub Box<dyn AbstractPostalAddressExtensionXElementTrait>,
    );
    pub trait AbstractPostalAddressExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractPrecisionApproachRadarExtensionXElement(
        pub Box<dyn AbstractPrecisionApproachRadarExtensionXElementTrait>,
    );
    pub trait AbstractPrecisionApproachRadarExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractPrimarySurveillanceRadarExtensionXElement(
        pub Box<dyn AbstractPrimarySurveillanceRadarExtensionXElementTrait>,
    );
    pub trait AbstractPrimarySurveillanceRadarExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractProcedureXElement(pub Box<dyn AbstractProcedureXElementTrait>);
    pub trait AbstractProcedureXElementTrait: AbstractAixmFeatureXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractProcedureAvailabilityExtensionXElement(
        pub Box<dyn AbstractProcedureAvailabilityExtensionXElementTrait>,
    );
    pub trait AbstractProcedureAvailabilityExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractProcedureDmeExtensionXElement(
        pub Box<dyn AbstractProcedureDmeExtensionXElementTrait>,
    );
    pub trait AbstractProcedureDmeExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractProcedureExtensionXElement(
        pub Box<dyn AbstractProcedureExtensionXElementTrait>,
    );
    pub trait AbstractProcedureExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractProcedureTransitionExtensionXElement(
        pub Box<dyn AbstractProcedureTransitionExtensionXElementTrait>,
    );
    pub trait AbstractProcedureTransitionExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractProcedureTransitionLegExtensionXElement(
        pub Box<dyn AbstractProcedureTransitionLegExtensionXElementTrait>,
    );
    pub trait AbstractProcedureTransitionLegExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractProcedureTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AbstractProcedureTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AbstractProcedureTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AbstractProcedureTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AbstractProcedureTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractPropertiesWithScheduleXElement(
        pub Box<dyn AbstractPropertiesWithScheduleXElementTrait>,
    );
    pub trait AbstractPropertiesWithScheduleXElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractPropertiesWithScheduleExtensionXElement(
        pub Box<dyn AbstractPropertiesWithScheduleExtensionXElementTrait>,
    );
    pub trait AbstractPropertiesWithScheduleExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractPropertiesWithScheduleTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRadarComponentExtensionXElement(
        pub Box<dyn AbstractRadarComponentExtensionXElementTrait>,
    );
    pub trait AbstractRadarComponentExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRadarEquipmentXElement(pub Box<dyn AbstractRadarEquipmentXElementTrait>);
    pub trait AbstractRadarEquipmentXElementTrait: AbstractAixmFeatureXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRadarEquipmentExtensionXElement(
        pub Box<dyn AbstractRadarEquipmentExtensionXElementTrait>,
    );
    pub trait AbstractRadarEquipmentExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRadarEquipmentTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AbstractRadarEquipmentTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AbstractRadarEquipmentTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AbstractRadarEquipmentTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AbstractRadarEquipmentTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRadarSystemExtensionXElement(
        pub Box<dyn AbstractRadarSystemExtensionXElementTrait>,
    );
    pub trait AbstractRadarSystemExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRadioCommunicationChannelExtensionXElement(
        pub Box<dyn AbstractRadioCommunicationChannelExtensionXElementTrait>,
    );
    pub trait AbstractRadioCommunicationChannelExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRadioCommunicationOperationalStatusExtensionXElement(
        pub Box<dyn AbstractRadioCommunicationOperationalStatusExtensionXElementTrait>,
    );
    pub trait AbstractRadioCommunicationOperationalStatusExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRadioFrequencyAreaExtensionXElement(
        pub Box<dyn AbstractRadioFrequencyAreaExtensionXElementTrait>,
    );
    pub trait AbstractRadioFrequencyAreaExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractReflectorExtensionXElement(
        pub Box<dyn AbstractReflectorExtensionXElementTrait>,
    );
    pub trait AbstractReflectorExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRidgeExtensionXElement(pub Box<dyn AbstractRidgeExtensionXElementTrait>);
    pub trait AbstractRidgeExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRoadExtensionXElement(pub Box<dyn AbstractRoadExtensionXElementTrait>);
    pub trait AbstractRoadExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRouteAvailabilityExtensionXElement(
        pub Box<dyn AbstractRouteAvailabilityExtensionXElementTrait>,
    );
    pub trait AbstractRouteAvailabilityExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRouteDmeExtensionXElement(
        pub Box<dyn AbstractRouteDmeExtensionXElementTrait>,
    );
    pub trait AbstractRouteDmeExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRouteExtensionXElement(pub Box<dyn AbstractRouteExtensionXElementTrait>);
    pub trait AbstractRouteExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRoutePortionExtensionXElement(
        pub Box<dyn AbstractRoutePortionExtensionXElementTrait>,
    );
    pub trait AbstractRoutePortionExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRouteSegmentExtensionXElement(
        pub Box<dyn AbstractRouteSegmentExtensionXElementTrait>,
    );
    pub trait AbstractRouteSegmentExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRulesProceduresExtensionXElement(
        pub Box<dyn AbstractRulesProceduresExtensionXElementTrait>,
    );
    pub trait AbstractRulesProceduresExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRunwayBlastPadExtensionXElement(
        pub Box<dyn AbstractRunwayBlastPadExtensionXElementTrait>,
    );
    pub trait AbstractRunwayBlastPadExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRunwayCentrelinePointExtensionXElement(
        pub Box<dyn AbstractRunwayCentrelinePointExtensionXElementTrait>,
    );
    pub trait AbstractRunwayCentrelinePointExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRunwayContaminationExtensionXElement(
        pub Box<dyn AbstractRunwayContaminationExtensionXElementTrait>,
    );
    pub trait AbstractRunwayContaminationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRunwayDeclaredDistanceExtensionXElement(
        pub Box<dyn AbstractRunwayDeclaredDistanceExtensionXElementTrait>,
    );
    pub trait AbstractRunwayDeclaredDistanceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRunwayDeclaredDistanceValueExtensionXElement(
        pub Box<dyn AbstractRunwayDeclaredDistanceValueExtensionXElementTrait>,
    );
    pub trait AbstractRunwayDeclaredDistanceValueExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRunwayDirectionExtensionXElement(
        pub Box<dyn AbstractRunwayDirectionExtensionXElementTrait>,
    );
    pub trait AbstractRunwayDirectionExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRunwayDirectionLightSystemExtensionXElement(
        pub Box<dyn AbstractRunwayDirectionLightSystemExtensionXElementTrait>,
    );
    pub trait AbstractRunwayDirectionLightSystemExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRunwayElementExtensionXElement(
        pub Box<dyn AbstractRunwayElementExtensionXElementTrait>,
    );
    pub trait AbstractRunwayElementExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRunwayExtensionXElement(pub Box<dyn AbstractRunwayExtensionXElementTrait>);
    pub trait AbstractRunwayExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRunwayMarkingExtensionXElement(
        pub Box<dyn AbstractRunwayMarkingExtensionXElementTrait>,
    );
    pub trait AbstractRunwayMarkingExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRunwayProtectAreaExtensionXElement(
        pub Box<dyn AbstractRunwayProtectAreaExtensionXElementTrait>,
    );
    pub trait AbstractRunwayProtectAreaExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRunwayProtectAreaLightSystemExtensionXElement(
        pub Box<dyn AbstractRunwayProtectAreaLightSystemExtensionXElementTrait>,
    );
    pub trait AbstractRunwayProtectAreaLightSystemExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRunwaySectionContaminationExtensionXElement(
        pub Box<dyn AbstractRunwaySectionContaminationExtensionXElementTrait>,
    );
    pub trait AbstractRunwaySectionContaminationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRunwayVisualRangeExtensionXElement(
        pub Box<dyn AbstractRunwayVisualRangeExtensionXElementTrait>,
    );
    pub trait AbstractRunwayVisualRangeExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSdfExtensionXElement(pub Box<dyn AbstractSdfExtensionXElementTrait>);
    pub trait AbstractSdfExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSafeAltitudeAreaExtensionXElement(
        pub Box<dyn AbstractSafeAltitudeAreaExtensionXElementTrait>,
    );
    pub trait AbstractSafeAltitudeAreaExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSafeAltitudeAreaSectorExtensionXElement(
        pub Box<dyn AbstractSafeAltitudeAreaSectorExtensionXElementTrait>,
    );
    pub trait AbstractSafeAltitudeAreaSectorExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSeaplaneLandingAreaExtensionXElement(
        pub Box<dyn AbstractSeaplaneLandingAreaExtensionXElementTrait>,
    );
    pub trait AbstractSeaplaneLandingAreaExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSeaplaneRampSiteExtensionXElement(
        pub Box<dyn AbstractSeaplaneRampSiteExtensionXElementTrait>,
    );
    pub trait AbstractSeaplaneRampSiteExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSearchRescueServiceExtensionXElement(
        pub Box<dyn AbstractSearchRescueServiceExtensionXElementTrait>,
    );
    pub trait AbstractSearchRescueServiceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSecondarySurveillanceRadarExtensionXElement(
        pub Box<dyn AbstractSecondarySurveillanceRadarExtensionXElementTrait>,
    );
    pub trait AbstractSecondarySurveillanceRadarExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSectorDesignExtensionXElement(
        pub Box<dyn AbstractSectorDesignExtensionXElementTrait>,
    );
    pub trait AbstractSectorDesignExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSegmentLegXElement(pub Box<dyn AbstractSegmentLegXElementTrait>);
    pub trait AbstractSegmentLegXElementTrait: AbstractAixmFeatureXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSegmentLegExtensionXElement(
        pub Box<dyn AbstractSegmentLegExtensionXElementTrait>,
    );
    pub trait AbstractSegmentLegExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSegmentLegTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AbstractSegmentLegTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AbstractSegmentLegTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AbstractSegmentLegTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AbstractSegmentLegTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSegmentPointXElement(pub Box<dyn AbstractSegmentPointXElementTrait>);
    pub trait AbstractSegmentPointXElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSegmentPointExtensionXElement(
        pub Box<dyn AbstractSegmentPointExtensionXElementTrait>,
    );
    pub trait AbstractSegmentPointExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSegmentPointTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractServiceXElement(pub Box<dyn AbstractServiceXElementTrait>);
    pub trait AbstractServiceXElementTrait: AbstractAixmFeatureXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractServiceExtensionXElement(pub Box<dyn AbstractServiceExtensionXElementTrait>);
    pub trait AbstractServiceExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractServiceOperationalStatusExtensionXElement(
        pub Box<dyn AbstractServiceOperationalStatusExtensionXElementTrait>,
    );
    pub trait AbstractServiceOperationalStatusExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractServiceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AbstractServiceTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AbstractServiceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AbstractServiceTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AbstractServiceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSignificantPointInAirspaceExtensionXElement(
        pub Box<dyn AbstractSignificantPointInAirspaceExtensionXElementTrait>,
    );
    pub trait AbstractSignificantPointInAirspaceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSpecialDateExtensionXElement(
        pub Box<dyn AbstractSpecialDateExtensionXElementTrait>,
    );
    pub trait AbstractSpecialDateExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSpecialNavigationStationExtensionXElement(
        pub Box<dyn AbstractSpecialNavigationStationExtensionXElementTrait>,
    );
    pub trait AbstractSpecialNavigationStationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSpecialNavigationStationStatusExtensionXElement(
        pub Box<dyn AbstractSpecialNavigationStationStatusExtensionXElementTrait>,
    );
    pub trait AbstractSpecialNavigationStationStatusExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSpecialNavigationSystemExtensionXElement(
        pub Box<dyn AbstractSpecialNavigationSystemExtensionXElementTrait>,
    );
    pub trait AbstractSpecialNavigationSystemExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractStandMarkingExtensionXElement(
        pub Box<dyn AbstractStandMarkingExtensionXElementTrait>,
    );
    pub trait AbstractStandMarkingExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractStandardInstrumentArrivalExtensionXElement(
        pub Box<dyn AbstractStandardInstrumentArrivalExtensionXElementTrait>,
    );
    pub trait AbstractStandardInstrumentArrivalExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractStandardInstrumentDepartureExtensionXElement(
        pub Box<dyn AbstractStandardInstrumentDepartureExtensionXElementTrait>,
    );
    pub trait AbstractStandardInstrumentDepartureExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractStandardLevelColumnExtensionXElement(
        pub Box<dyn AbstractStandardLevelColumnExtensionXElementTrait>,
    );
    pub trait AbstractStandardLevelColumnExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractStandardLevelExtensionXElement(
        pub Box<dyn AbstractStandardLevelExtensionXElementTrait>,
    );
    pub trait AbstractStandardLevelExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractStandardLevelSectorExtensionXElement(
        pub Box<dyn AbstractStandardLevelSectorExtensionXElementTrait>,
    );
    pub trait AbstractStandardLevelSectorExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractStandardLevelTableExtensionXElement(
        pub Box<dyn AbstractStandardLevelTableExtensionXElementTrait>,
    );
    pub trait AbstractStandardLevelTableExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSurfaceCharacteristicsExtensionXElement(
        pub Box<dyn AbstractSurfaceCharacteristicsExtensionXElementTrait>,
    );
    pub trait AbstractSurfaceCharacteristicsExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSurfaceContaminationXElement(
        pub Box<dyn AbstractSurfaceContaminationXElementTrait>,
    );
    pub trait AbstractSurfaceContaminationXElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSurfaceContaminationExtensionXElement(
        pub Box<dyn AbstractSurfaceContaminationExtensionXElementTrait>,
    );
    pub trait AbstractSurfaceContaminationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSurfaceContaminationLayerExtensionXElement(
        pub Box<dyn AbstractSurfaceContaminationLayerExtensionXElementTrait>,
    );
    pub trait AbstractSurfaceContaminationLayerExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSurfaceContaminationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSurveillanceGroundStationExtensionXElement(
        pub Box<dyn AbstractSurveillanceGroundStationExtensionXElementTrait>,
    );
    pub trait AbstractSurveillanceGroundStationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSurveillanceRadarXElement(
        pub Box<dyn AbstractSurveillanceRadarXElementTrait>,
    );
    pub trait AbstractSurveillanceRadarXElementTrait: AbstractRadarEquipmentXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSurveillanceRadarExtensionXElement(
        pub Box<dyn AbstractSurveillanceRadarExtensionXElementTrait>,
    );
    pub trait AbstractSurveillanceRadarExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSurveillanceRadarTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AbstractSurveillanceRadarTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AbstractSurveillanceRadarTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AbstractSurveillanceRadarTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AbstractSurveillanceRadarTypeXType {}
    impl AbstractRadarEquipmentXElementTrait for AbstractSurveillanceRadarTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSurveyControlPointExtensionXElement(
        pub Box<dyn AbstractSurveyControlPointExtensionXElementTrait>,
    );
    pub trait AbstractSurveyControlPointExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTacanExtensionXElement(pub Box<dyn AbstractTacanExtensionXElementTrait>);
    pub trait AbstractTacanExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTaxiHoldingPositionExtensionXElement(
        pub Box<dyn AbstractTaxiHoldingPositionExtensionXElementTrait>,
    );
    pub trait AbstractTaxiHoldingPositionExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTaxiHoldingPositionLightSystemExtensionXElement(
        pub Box<dyn AbstractTaxiHoldingPositionLightSystemExtensionXElementTrait>,
    );
    pub trait AbstractTaxiHoldingPositionLightSystemExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTaxiHoldingPositionMarkingExtensionXElement(
        pub Box<dyn AbstractTaxiHoldingPositionMarkingExtensionXElementTrait>,
    );
    pub trait AbstractTaxiHoldingPositionMarkingExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTaxiwayContaminationExtensionXElement(
        pub Box<dyn AbstractTaxiwayContaminationExtensionXElementTrait>,
    );
    pub trait AbstractTaxiwayContaminationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTaxiwayElementExtensionXElement(
        pub Box<dyn AbstractTaxiwayElementExtensionXElementTrait>,
    );
    pub trait AbstractTaxiwayElementExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTaxiwayExtensionXElement(pub Box<dyn AbstractTaxiwayExtensionXElementTrait>);
    pub trait AbstractTaxiwayExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTaxiwayLightSystemExtensionXElement(
        pub Box<dyn AbstractTaxiwayLightSystemExtensionXElementTrait>,
    );
    pub trait AbstractTaxiwayLightSystemExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTaxiwayMarkingExtensionXElement(
        pub Box<dyn AbstractTaxiwayMarkingExtensionXElementTrait>,
    );
    pub trait AbstractTaxiwayMarkingExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTelephoneContactExtensionXElement(
        pub Box<dyn AbstractTelephoneContactExtensionXElementTrait>,
    );
    pub trait AbstractTelephoneContactExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTerminalArrivalAreaExtensionXElement(
        pub Box<dyn AbstractTerminalArrivalAreaExtensionXElementTrait>,
    );
    pub trait AbstractTerminalArrivalAreaExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTerminalArrivalAreaSectorExtensionXElement(
        pub Box<dyn AbstractTerminalArrivalAreaSectorExtensionXElementTrait>,
    );
    pub trait AbstractTerminalArrivalAreaSectorExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTerminalSegmentPointExtensionXElement(
        pub Box<dyn AbstractTerminalSegmentPointExtensionXElementTrait>,
    );
    pub trait AbstractTerminalSegmentPointExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTimesheetExtensionXElement(
        pub Box<dyn AbstractTimesheetExtensionXElementTrait>,
    );
    pub trait AbstractTimesheetExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTouchDownLiftOffContaminationExtensionXElement(
        pub Box<dyn AbstractTouchDownLiftOffContaminationExtensionXElementTrait>,
    );
    pub trait AbstractTouchDownLiftOffContaminationExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTouchDownLiftOffExtensionXElement(
        pub Box<dyn AbstractTouchDownLiftOffExtensionXElementTrait>,
    );
    pub trait AbstractTouchDownLiftOffExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTouchDownLiftOffLightSystemExtensionXElement(
        pub Box<dyn AbstractTouchDownLiftOffLightSystemExtensionXElementTrait>,
    );
    pub trait AbstractTouchDownLiftOffLightSystemExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTouchDownLiftOffMarkingExtensionXElement(
        pub Box<dyn AbstractTouchDownLiftOffMarkingExtensionXElementTrait>,
    );
    pub trait AbstractTouchDownLiftOffMarkingExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTouchDownLiftOffSafeAreaExtensionXElement(
        pub Box<dyn AbstractTouchDownLiftOffSafeAreaExtensionXElementTrait>,
    );
    pub trait AbstractTouchDownLiftOffSafeAreaExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTrafficSeparationServiceXElement(
        pub Box<dyn AbstractTrafficSeparationServiceXElementTrait>,
    );
    pub trait AbstractTrafficSeparationServiceXElementTrait: AbstractServiceXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTrafficSeparationServiceExtensionXElement(
        pub Box<dyn AbstractTrafficSeparationServiceExtensionXElementTrait>,
    );
    pub trait AbstractTrafficSeparationServiceExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTrafficSeparationServiceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AbstractTrafficSeparationServiceTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AbstractTrafficSeparationServiceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AbstractTrafficSeparationServiceTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AbstractTrafficSeparationServiceTypeXType {}
    impl AbstractServiceXElementTrait for AbstractTrafficSeparationServiceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractUnitAvailabilityExtensionXElement(
        pub Box<dyn AbstractUnitAvailabilityExtensionXElementTrait>,
    );
    pub trait AbstractUnitAvailabilityExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractUnitDependencyExtensionXElement(
        pub Box<dyn AbstractUnitDependencyExtensionXElementTrait>,
    );
    pub trait AbstractUnitDependencyExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractUnitExtensionXElement(pub Box<dyn AbstractUnitExtensionXElementTrait>);
    pub trait AbstractUnitExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractUnplannedHoldingExtensionXElement(
        pub Box<dyn AbstractUnplannedHoldingExtensionXElementTrait>,
    );
    pub trait AbstractUnplannedHoldingExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractUsageConditionXElement(pub Box<dyn AbstractUsageConditionXElementTrait>);
    pub trait AbstractUsageConditionXElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractUsageConditionExtensionXElement(
        pub Box<dyn AbstractUsageConditionExtensionXElementTrait>,
    );
    pub trait AbstractUsageConditionExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractUsageConditionTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractVorExtensionXElement(pub Box<dyn AbstractVorExtensionXElementTrait>);
    pub trait AbstractVorExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractVerticalStructureExtensionXElement(
        pub Box<dyn AbstractVerticalStructureExtensionXElementTrait>,
    );
    pub trait AbstractVerticalStructureExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractVerticalStructureLightingStatusExtensionXElement(
        pub Box<dyn AbstractVerticalStructureLightingStatusExtensionXElementTrait>,
    );
    pub trait AbstractVerticalStructureLightingStatusExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractVerticalStructurePartExtensionXElement(
        pub Box<dyn AbstractVerticalStructurePartExtensionXElementTrait>,
    );
    pub trait AbstractVerticalStructurePartExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractVisualGlideSlopeIndicatorExtensionXElement(
        pub Box<dyn AbstractVisualGlideSlopeIndicatorExtensionXElementTrait>,
    );
    pub trait AbstractVisualGlideSlopeIndicatorExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractWorkAreaExtensionXElement(
        pub Box<dyn AbstractWorkAreaExtensionXElementTrait>,
    );
    pub trait AbstractWorkAreaExtensionXElementTrait: AbstractExtensionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractWorkareaActivityExtensionXElement(
        pub Box<dyn AbstractWorkareaActivityExtensionXElementTrait>,
    );
    pub trait AbstractWorkareaActivityExtensionXElementTrait:
        AbstractExtensionXElementTrait
    {
    }
    pub type AerialRefuellingXElement = AerialRefuellingTypeXType;
    pub type AerialRefuellingAnchorXElement = AerialRefuellingAnchorTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AerialRefuellingAnchorPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AerialRefuellingAnchor")]
        pub aerial_refuelling_anchor: AerialRefuellingAnchorXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AerialRefuellingAnchorTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content42")]
        pub content_42: AerialRefuellingAnchorContent42XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AerialRefuellingAnchorTypeExtensionXElement>,
    }
    pub type AerialRefuellingAnchorTypeExtensionXElement =
        AerialRefuellingAnchorTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AerialRefuellingAnchorTypeExtensionXElementType {
        #[serde(
            default = "AerialRefuellingAnchorTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AerialRefuellingAnchorTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AerialRefuellingAnchorTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAerialRefuellingAnchorExtension")]
        AbstractAerialRefuellingAnchorExtension(AbstractAerialRefuellingAnchorExtensionXElement),
    }
    pub type AerialRefuellingPointXElement = AerialRefuellingPointTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AerialRefuellingPointPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AerialRefuellingPoint")]
        pub aerial_refuelling_point: AerialRefuellingPointXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AerialRefuellingPointTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content49")]
        pub content_49: AerialRefuellingPointContent49XType,
        #[serde(rename = "Content51")]
        pub content_51: AerialRefuellingPointContent51XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AerialRefuellingPointTypeExtensionXElement>,
    }
    impl AbstractSegmentPointXElementTrait for AerialRefuellingPointTypeXType {}
    pub type AerialRefuellingPointTypeExtensionXElement =
        AerialRefuellingPointTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AerialRefuellingPointTypeExtensionXElementType {
        #[serde(
            default = "AerialRefuellingPointTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AerialRefuellingPointTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AerialRefuellingPointTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractSegmentPointExtension")]
        AbstractSegmentPointExtension(AbstractSegmentPointExtensionXElement),
        #[serde(rename = "AbstractAerialRefuellingPointExtension")]
        AbstractAerialRefuellingPointExtension(AbstractAerialRefuellingPointExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AerialRefuellingPropertyTypeXType {
        #[serde(
            default = "AerialRefuellingPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type AerialRefuellingTimeSliceXElement = AerialRefuellingTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AerialRefuellingTimeSlicePropertyTypeXType {
        #[serde(
            default = "AerialRefuellingTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AerialRefuellingTimeSlice")]
        pub aerial_refuelling_time_slice: AerialRefuellingTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AerialRefuellingTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content35")]
        pub content_35: AerialRefuellingTimeSliceContent35XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AerialRefuellingTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for AerialRefuellingTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AerialRefuellingTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for AerialRefuellingTimeSliceTypeXType {}
    pub type AerialRefuellingTimeSliceTypeExtensionXElement =
        AerialRefuellingTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AerialRefuellingTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "AerialRefuellingTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractAerialRefuellingExtension")]
        pub abstract_aerial_refuelling_extension: AbstractAerialRefuellingExtensionXElement,
    }
    pub type AerialRefuellingTrackXElement = AerialRefuellingTrackTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AerialRefuellingTrackPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AerialRefuellingTrack")]
        pub aerial_refuelling_track: AerialRefuellingTrackXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AerialRefuellingTrackTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content56")]
        pub content_56: AerialRefuellingTrackContent56XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AerialRefuellingTrackTypeExtensionXElement>,
    }
    pub type AerialRefuellingTrackTypeExtensionXElement =
        AerialRefuellingTrackTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AerialRefuellingTrackTypeExtensionXElementType {
        #[serde(
            default = "AerialRefuellingTrackTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AerialRefuellingTrackTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AerialRefuellingTrackTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAerialRefuellingTrackExtension")]
        AbstractAerialRefuellingTrackExtension(AbstractAerialRefuellingTrackExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AerialRefuellingTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<AerialRefuellingTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AerialRefuellingTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AerialRefuellingTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AerialRefuellingTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AerialRefuellingTypeXType {}
    pub type AeronauticalGroundLightXElement = AeronauticalGroundLightTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AeronauticalGroundLightPropertyTypeXType {
        #[serde(
            default = "AeronauticalGroundLightPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type AeronauticalGroundLightTimeSliceXElement = AeronauticalGroundLightTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AeronauticalGroundLightTimeSlicePropertyTypeXType {
        #[serde(
            default = "AeronauticalGroundLightTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AeronauticalGroundLightTimeSlice")]
        pub aeronautical_ground_light_time_slice: AeronauticalGroundLightTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AeronauticalGroundLightTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content931")]
        pub content_931: AeronauticalGroundLightTimeSliceContent931XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AeronauticalGroundLightTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for AeronauticalGroundLightTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AeronauticalGroundLightTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for AeronauticalGroundLightTimeSliceTypeXType {}
    pub type AeronauticalGroundLightTimeSliceTypeExtensionXElement =
        AeronauticalGroundLightTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AeronauticalGroundLightTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "AeronauticalGroundLightTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractAeronauticalGroundLightExtension")]
        pub abstract_aeronautical_ground_light_extension:
            AbstractAeronauticalGroundLightExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AeronauticalGroundLightTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<AeronauticalGroundLightTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AeronauticalGroundLightTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AeronauticalGroundLightTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AeronauticalGroundLightTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AeronauticalGroundLightTypeXType {}
    pub type AirTrafficControlServiceXElement = AirTrafficControlServiceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirTrafficControlServicePropertyTypeXType {
        #[serde(
            default = "AirTrafficControlServicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type AirTrafficControlServiceTimeSliceXElement = AirTrafficControlServiceTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirTrafficControlServiceTimeSlicePropertyTypeXType {
        #[serde(
            default = "AirTrafficControlServiceTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AirTrafficControlServiceTimeSlice")]
        pub air_traffic_control_service_time_slice: AirTrafficControlServiceTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirTrafficControlServiceTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1397")]
        pub content_1397: AirTrafficControlServiceTimeSliceContent1397XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirTrafficControlServiceTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for AirTrafficControlServiceTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirTrafficControlServiceTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for AirTrafficControlServiceTimeSliceTypeXType {}
    pub type AirTrafficControlServiceTimeSliceTypeExtensionXElement =
        AirTrafficControlServiceTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirTrafficControlServiceTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "AirTrafficControlServiceTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AirTrafficControlServiceTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AirTrafficControlServiceTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAirTrafficControlServiceExtension")]
        AbstractAirTrafficControlServiceExtension(
            AbstractAirTrafficControlServiceExtensionXElement,
        ),
        #[serde(rename = "AbstractTrafficSeparationServiceExtension")]
        AbstractTrafficSeparationServiceExtension(
            AbstractTrafficSeparationServiceExtensionXElement,
        ),
        #[serde(rename = "AbstractServiceExtension")]
        AbstractServiceExtension(AbstractServiceExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirTrafficControlServiceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<AirTrafficControlServiceTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AirTrafficControlServiceTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AirTrafficControlServiceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirTrafficControlServiceTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AirTrafficControlServiceTypeXType {}
    impl AbstractServiceXElementTrait for AirTrafficControlServiceTypeXType {}
    impl AbstractTrafficSeparationServiceXElementTrait for AirTrafficControlServiceTypeXType {}
    pub type AirTrafficManagementServiceXElement = AirTrafficManagementServiceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirTrafficManagementServicePropertyTypeXType {
        #[serde(
            default = "AirTrafficManagementServicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type AirTrafficManagementServiceTimeSliceXElement =
        AirTrafficManagementServiceTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirTrafficManagementServiceTimeSlicePropertyTypeXType {
        #[serde(
            default = "AirTrafficManagementServiceTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AirTrafficManagementServiceTimeSlice")]
        pub air_traffic_management_service_time_slice: AirTrafficManagementServiceTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirTrafficManagementServiceTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1406")]
        pub content_1406: AirTrafficManagementServiceTimeSliceContent1406XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirTrafficManagementServiceTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for AirTrafficManagementServiceTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirTrafficManagementServiceTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for AirTrafficManagementServiceTimeSliceTypeXType {}
    pub type AirTrafficManagementServiceTimeSliceTypeExtensionXElement =
        AirTrafficManagementServiceTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirTrafficManagementServiceTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "AirTrafficManagementServiceTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AirTrafficManagementServiceTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AirTrafficManagementServiceTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAirTrafficManagementServiceExtension")]
        AbstractAirTrafficManagementServiceExtension(
            AbstractAirTrafficManagementServiceExtensionXElement,
        ),
        #[serde(rename = "AbstractServiceExtension")]
        AbstractServiceExtension(AbstractServiceExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirTrafficManagementServiceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<AirTrafficManagementServiceTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AirTrafficManagementServiceTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AirTrafficManagementServiceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirTrafficManagementServiceTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AirTrafficManagementServiceTypeXType {}
    impl AbstractServiceXElementTrait for AirTrafficManagementServiceTypeXType {}
    pub type AircraftCharacteristicXElement = AircraftCharacteristicTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftCharacteristicPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AircraftCharacteristic")]
        pub aircraft_characteristic: AircraftCharacteristicXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftCharacteristicTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1528")]
        pub content_1528: AircraftCharacteristicContent1528XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AircraftCharacteristicTypeExtensionXElement>,
    }
    pub type AircraftCharacteristicTypeExtensionXElement =
        AircraftCharacteristicTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftCharacteristicTypeExtensionXElementType {
        #[serde(
            default = "AircraftCharacteristicTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AircraftCharacteristicTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AircraftCharacteristicTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAircraftCharacteristicExtension")]
        AbstractAircraftCharacteristicExtension(AbstractAircraftCharacteristicExtensionXElement),
    }
    pub type AircraftGroundServiceXElement = AircraftGroundServiceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftGroundServicePropertyTypeXType {
        #[serde(
            default = "AircraftGroundServicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type AircraftGroundServiceTimeSliceXElement = AircraftGroundServiceTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftGroundServiceTimeSlicePropertyTypeXType {
        #[serde(
            default = "AircraftGroundServiceTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AircraftGroundServiceTimeSlice")]
        pub aircraft_ground_service_time_slice: AircraftGroundServiceTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftGroundServiceTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1369")]
        pub content_1369: AircraftGroundServiceTimeSliceContent1369XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AircraftGroundServiceTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for AircraftGroundServiceTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AircraftGroundServiceTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for AircraftGroundServiceTimeSliceTypeXType {}
    pub type AircraftGroundServiceTimeSliceTypeExtensionXElement =
        AircraftGroundServiceTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftGroundServiceTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "AircraftGroundServiceTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AircraftGroundServiceTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AircraftGroundServiceTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAircraftGroundServiceExtension")]
        AbstractAircraftGroundServiceExtension(AbstractAircraftGroundServiceExtensionXElement),
        #[serde(rename = "AbstractAirportGroundServiceExtension")]
        AbstractAirportGroundServiceExtension(AbstractAirportGroundServiceExtensionXElement),
        #[serde(rename = "AbstractServiceExtension")]
        AbstractServiceExtension(AbstractServiceExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftGroundServiceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<AircraftGroundServiceTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AircraftGroundServiceTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AircraftGroundServiceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AircraftGroundServiceTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AircraftGroundServiceTypeXType {}
    impl AbstractAirportGroundServiceXElementTrait for AircraftGroundServiceTypeXType {}
    impl AbstractServiceXElementTrait for AircraftGroundServiceTypeXType {}
    pub type AircraftStandXElement = AircraftStandTypeXType;
    pub type AircraftStandContaminationXElement = AircraftStandContaminationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftStandContaminationPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AircraftStandContamination")]
        pub aircraft_stand_contamination: AircraftStandContaminationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftStandContaminationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content515")]
        pub content_515: AircraftStandContaminationContent515XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AircraftStandContaminationTypeExtensionXElement>,
    }
    impl AbstractSurfaceContaminationXElementTrait for AircraftStandContaminationTypeXType {}
    pub type AircraftStandContaminationTypeExtensionXElement =
        AircraftStandContaminationTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftStandContaminationTypeExtensionXElementType {
        #[serde(
            default = "AircraftStandContaminationTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AircraftStandContaminationTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AircraftStandContaminationTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractSurfaceContaminationExtension")]
        AbstractSurfaceContaminationExtension(AbstractSurfaceContaminationExtensionXElement),
        #[serde(rename = "AbstractAircraftStandContaminationExtension")]
        AbstractAircraftStandContaminationExtension(
            AbstractAircraftStandContaminationExtensionXElement,
        ),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftStandPropertyTypeXType {
        #[serde(
            default = "AircraftStandPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type AircraftStandTimeSliceXElement = AircraftStandTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftStandTimeSlicePropertyTypeXType {
        #[serde(
            default = "AircraftStandTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AircraftStandTimeSlice")]
        pub aircraft_stand_time_slice: AircraftStandTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftStandTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content170")]
        pub content_170: AircraftStandTimeSliceContent170XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AircraftStandTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for AircraftStandTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AircraftStandTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for AircraftStandTimeSliceTypeXType {}
    pub type AircraftStandTimeSliceTypeExtensionXElement =
        AircraftStandTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftStandTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "AircraftStandTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractAircraftStandExtension")]
        pub abstract_aircraft_stand_extension: AbstractAircraftStandExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftStandTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<AircraftStandTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AircraftStandTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AircraftStandTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AircraftStandTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AircraftStandTypeXType {}
    pub type AirportClearanceServiceXElement = AirportClearanceServiceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportClearanceServicePropertyTypeXType {
        #[serde(
            default = "AirportClearanceServicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type AirportClearanceServiceTimeSliceXElement = AirportClearanceServiceTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportClearanceServiceTimeSlicePropertyTypeXType {
        #[serde(
            default = "AirportClearanceServiceTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AirportClearanceServiceTimeSlice")]
        pub airport_clearance_service_time_slice: AirportClearanceServiceTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportClearanceServiceTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1378")]
        pub content_1378: AirportClearanceServiceTimeSliceContent1378XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirportClearanceServiceTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for AirportClearanceServiceTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirportClearanceServiceTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for AirportClearanceServiceTimeSliceTypeXType {}
    pub type AirportClearanceServiceTimeSliceTypeExtensionXElement =
        AirportClearanceServiceTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportClearanceServiceTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "AirportClearanceServiceTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AirportClearanceServiceTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AirportClearanceServiceTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAirportClearanceServiceExtension")]
        AbstractAirportClearanceServiceExtension(AbstractAirportClearanceServiceExtensionXElement),
        #[serde(rename = "AbstractAirportGroundServiceExtension")]
        AbstractAirportGroundServiceExtension(AbstractAirportGroundServiceExtensionXElement),
        #[serde(rename = "AbstractServiceExtension")]
        AbstractServiceExtension(AbstractServiceExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportClearanceServiceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<AirportClearanceServiceTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AirportClearanceServiceTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AirportClearanceServiceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirportClearanceServiceTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AirportClearanceServiceTypeXType {}
    impl AbstractAirportGroundServiceXElementTrait for AirportClearanceServiceTypeXType {}
    impl AbstractServiceXElementTrait for AirportClearanceServiceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportGroundServicePropertyTypeXType {
        #[serde(
            default = "AirportGroundServicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type AirportHeliportXElement = AirportHeliportTypeXType;
    pub type AirportHeliportAvailabilityXElement = AirportHeliportAvailabilityTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportAvailabilityPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AirportHeliportAvailability")]
        pub airport_heliport_availability: AirportHeliportAvailabilityXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportAvailabilityTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content75")]
        pub content_75: AirportHeliportAvailabilityContent75XType,
        #[serde(rename = "Content76")]
        pub content_76: AirportHeliportAvailabilityContent76XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirportHeliportAvailabilityTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for AirportHeliportAvailabilityTypeXType {}
    pub type AirportHeliportAvailabilityTypeExtensionXElement =
        AirportHeliportAvailabilityTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportAvailabilityTypeExtensionXElementType {
        #[serde(
            default = "AirportHeliportAvailabilityTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AirportHeliportAvailabilityTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AirportHeliportAvailabilityTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractAirportHeliportAvailabilityExtension")]
        AbstractAirportHeliportAvailabilityExtension(
            AbstractAirportHeliportAvailabilityExtensionXElement,
        ),
    }
    pub type AirportHeliportCollocationXElement = AirportHeliportCollocationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportCollocationPropertyTypeXType {
        #[serde(
            default = "AirportHeliportCollocationPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type AirportHeliportCollocationTimeSliceXElement =
        AirportHeliportCollocationTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportCollocationTimeSlicePropertyTypeXType {
        #[serde(
            default = "AirportHeliportCollocationTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AirportHeliportCollocationTimeSlice")]
        pub airport_heliport_collocation_time_slice: AirportHeliportCollocationTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportCollocationTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content84")]
        pub content_84: AirportHeliportCollocationTimeSliceContent84XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirportHeliportCollocationTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for AirportHeliportCollocationTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirportHeliportCollocationTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for AirportHeliportCollocationTimeSliceTypeXType {}
    pub type AirportHeliportCollocationTimeSliceTypeExtensionXElement =
        AirportHeliportCollocationTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportCollocationTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "AirportHeliportCollocationTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractAirportHeliportCollocationExtension")]
        pub abstract_airport_heliport_collocation_extension:
            AbstractAirportHeliportCollocationExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportCollocationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<AirportHeliportCollocationTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AirportHeliportCollocationTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AirportHeliportCollocationTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirportHeliportCollocationTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AirportHeliportCollocationTypeXType {}
    pub type AirportHeliportContaminationXElement = AirportHeliportContaminationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportContaminationPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AirportHeliportContamination")]
        pub airport_heliport_contamination: AirportHeliportContaminationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportContaminationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content521")]
        pub content_521: AirportHeliportContaminationContent521XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirportHeliportContaminationTypeExtensionXElement>,
    }
    impl AbstractSurfaceContaminationXElementTrait for AirportHeliportContaminationTypeXType {}
    pub type AirportHeliportContaminationTypeExtensionXElement =
        AirportHeliportContaminationTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportContaminationTypeExtensionXElementType {
        #[serde(
            default = "AirportHeliportContaminationTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AirportHeliportContaminationTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AirportHeliportContaminationTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractSurfaceContaminationExtension")]
        AbstractSurfaceContaminationExtension(AbstractSurfaceContaminationExtensionXElement),
        #[serde(rename = "AbstractAirportHeliportContaminationExtension")]
        AbstractAirportHeliportContaminationExtension(
            AbstractAirportHeliportContaminationExtensionXElement,
        ),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportPropertyTypeXType {
        #[serde(
            default = "AirportHeliportPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportProtectionAreaPropertyTypeXType {
        #[serde(
            default = "AirportHeliportProtectionAreaPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type AirportHeliportResponsibilityOrganisationXElement =
        AirportHeliportResponsibilityOrganisationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportResponsibilityOrganisationPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AirportHeliportResponsibilityOrganisation")]
        pub airport_heliport_responsibility_organisation:
            AirportHeliportResponsibilityOrganisationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportResponsibilityOrganisationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content89")]
        pub content_89: AirportHeliportResponsibilityOrganisationContent89XType,
        #[serde(rename = "Content90")]
        pub content_90: AirportHeliportResponsibilityOrganisationContent90XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirportHeliportResponsibilityOrganisationTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait
        for AirportHeliportResponsibilityOrganisationTypeXType
    {
    }
    pub type AirportHeliportResponsibilityOrganisationTypeExtensionXElement =
        AirportHeliportResponsibilityOrganisationTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportResponsibilityOrganisationTypeExtensionXElementType {
        #[serde(
            default = "AirportHeliportResponsibilityOrganisationTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AirportHeliportResponsibilityOrganisationTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AirportHeliportResponsibilityOrganisationTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractAirportHeliportResponsibilityOrganisationExtension")]
        AbstractAirportHeliportResponsibilityOrganisationExtension(
            AbstractAirportHeliportResponsibilityOrganisationExtensionXElement,
        ),
    }
    pub type AirportHeliportTimeSliceXElement = AirportHeliportTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportTimeSlicePropertyTypeXType {
        #[serde(
            default = "AirportHeliportTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AirportHeliportTimeSlice")]
        pub airport_heliport_time_slice: AirportHeliportTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content69")]
        pub content_69: AirportHeliportTimeSliceContent69XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirportHeliportTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for AirportHeliportTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirportHeliportTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for AirportHeliportTimeSliceTypeXType {}
    pub type AirportHeliportTimeSliceTypeExtensionXElement =
        AirportHeliportTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "AirportHeliportTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractAirportHeliportExtension")]
        pub abstract_airport_heliport_extension: AbstractAirportHeliportExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<AirportHeliportTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AirportHeliportTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AirportHeliportTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirportHeliportTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AirportHeliportTypeXType {}
    pub type AirportHeliportUsageXElement = AirportHeliportUsageTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportUsagePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AirportHeliportUsage")]
        pub airport_heliport_usage: AirportHeliportUsageXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportUsageTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content97")]
        pub content_97: AirportHeliportUsageContent97XType,
        #[serde(rename = "Content98")]
        pub content_98: AirportHeliportUsageContent98XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirportHeliportUsageTypeExtensionXElement>,
    }
    impl AbstractUsageConditionXElementTrait for AirportHeliportUsageTypeXType {}
    pub type AirportHeliportUsageTypeExtensionXElement =
        AirportHeliportUsageTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportUsageTypeExtensionXElementType {
        #[serde(
            default = "AirportHeliportUsageTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AirportHeliportUsageTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AirportHeliportUsageTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractUsageConditionExtension")]
        AbstractUsageConditionExtension(AbstractUsageConditionExtensionXElement),
        #[serde(rename = "AbstractAirportHeliportUsageExtension")]
        AbstractAirportHeliportUsageExtension(AbstractAirportHeliportUsageExtensionXElement),
    }
    pub type AirportHotSpotXElement = AirportHotSpotTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHotSpotPropertyTypeXType {
        #[serde(
            default = "AirportHotSpotPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type AirportHotSpotTimeSliceXElement = AirportHotSpotTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHotSpotTimeSlicePropertyTypeXType {
        #[serde(
            default = "AirportHotSpotTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AirportHotSpotTimeSlice")]
        pub airport_hot_spot_time_slice: AirportHotSpotTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHotSpotTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content106")]
        pub content_106: AirportHotSpotTimeSliceContent106XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirportHotSpotTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for AirportHotSpotTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirportHotSpotTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for AirportHotSpotTimeSliceTypeXType {}
    pub type AirportHotSpotTimeSliceTypeExtensionXElement =
        AirportHotSpotTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHotSpotTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "AirportHotSpotTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractAirportHotSpotExtension")]
        pub abstract_airport_hot_spot_extension: AbstractAirportHotSpotExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHotSpotTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<AirportHotSpotTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AirportHotSpotTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AirportHotSpotTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirportHotSpotTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AirportHotSpotTypeXType {}
    pub type AirportProtectionAreaMarkingXElement = AirportProtectionAreaMarkingTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportProtectionAreaMarkingPropertyTypeXType {
        #[serde(
            default = "AirportProtectionAreaMarkingPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type AirportProtectionAreaMarkingTimeSliceXElement =
        AirportProtectionAreaMarkingTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportProtectionAreaMarkingTimeSlicePropertyTypeXType {
        #[serde(
            default = "AirportProtectionAreaMarkingTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AirportProtectionAreaMarkingTimeSlice")]
        pub airport_protection_area_marking_time_slice:
            AirportProtectionAreaMarkingTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportProtectionAreaMarkingTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content316")]
        pub content_316: AirportProtectionAreaMarkingTimeSliceContent316XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirportProtectionAreaMarkingTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for AirportProtectionAreaMarkingTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirportProtectionAreaMarkingTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for AirportProtectionAreaMarkingTimeSliceTypeXType {}
    pub type AirportProtectionAreaMarkingTimeSliceTypeExtensionXElement =
        AirportProtectionAreaMarkingTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportProtectionAreaMarkingTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "AirportProtectionAreaMarkingTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AirportProtectionAreaMarkingTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AirportProtectionAreaMarkingTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAirportProtectionAreaMarkingExtension")]
        AbstractAirportProtectionAreaMarkingExtension(
            AbstractAirportProtectionAreaMarkingExtensionXElement,
        ),
        #[serde(rename = "AbstractMarkingExtension")]
        AbstractMarkingExtension(AbstractMarkingExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportProtectionAreaMarkingTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<AirportProtectionAreaMarkingTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AirportProtectionAreaMarkingTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AirportProtectionAreaMarkingTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirportProtectionAreaMarkingTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AirportProtectionAreaMarkingTypeXType {}
    impl AbstractMarkingXElementTrait for AirportProtectionAreaMarkingTypeXType {}
    pub type AirportSuppliesServiceXElement = AirportSuppliesServiceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportSuppliesServicePropertyTypeXType {
        #[serde(
            default = "AirportSuppliesServicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type AirportSuppliesServiceTimeSliceXElement = AirportSuppliesServiceTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportSuppliesServiceTimeSlicePropertyTypeXType {
        #[serde(
            default = "AirportSuppliesServiceTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AirportSuppliesServiceTimeSlice")]
        pub airport_supplies_service_time_slice: AirportSuppliesServiceTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportSuppliesServiceTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1387")]
        pub content_1387: AirportSuppliesServiceTimeSliceContent1387XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirportSuppliesServiceTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for AirportSuppliesServiceTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirportSuppliesServiceTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for AirportSuppliesServiceTimeSliceTypeXType {}
    pub type AirportSuppliesServiceTimeSliceTypeExtensionXElement =
        AirportSuppliesServiceTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportSuppliesServiceTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "AirportSuppliesServiceTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AirportSuppliesServiceTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AirportSuppliesServiceTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAirportSuppliesServiceExtension")]
        AbstractAirportSuppliesServiceExtension(AbstractAirportSuppliesServiceExtensionXElement),
        #[serde(rename = "AbstractAirportGroundServiceExtension")]
        AbstractAirportGroundServiceExtension(AbstractAirportGroundServiceExtensionXElement),
        #[serde(rename = "AbstractServiceExtension")]
        AbstractServiceExtension(AbstractServiceExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportSuppliesServiceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<AirportSuppliesServiceTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AirportSuppliesServiceTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AirportSuppliesServiceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirportSuppliesServiceTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AirportSuppliesServiceTypeXType {}
    impl AbstractAirportGroundServiceXElementTrait for AirportSuppliesServiceTypeXType {}
    impl AbstractServiceXElementTrait for AirportSuppliesServiceTypeXType {}
    pub type AirspaceXElement = AirspaceTypeXType;
    pub type AirspaceActivationXElement = AirspaceActivationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceActivationPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AirspaceActivation")]
        pub airspace_activation: AirspaceActivationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceActivationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content603")]
        pub content_603: AirspaceActivationContent603XType,
        #[serde(rename = "Content604")]
        pub content_604: AirspaceActivationContent604XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirspaceActivationTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for AirspaceActivationTypeXType {}
    pub type AirspaceActivationTypeExtensionXElement = AirspaceActivationTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceActivationTypeExtensionXElementType {
        #[serde(
            default = "AirspaceActivationTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AirspaceActivationTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AirspaceActivationTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractAirspaceActivationExtension")]
        AbstractAirspaceActivationExtension(AbstractAirspaceActivationExtensionXElement),
    }
    pub type AirspaceBorderCrossingXElement = AirspaceBorderCrossingTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceBorderCrossingPropertyTypeXType {
        #[serde(
            default = "AirspaceBorderCrossingPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type AirspaceBorderCrossingTimeSliceXElement = AirspaceBorderCrossingTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceBorderCrossingTimeSlicePropertyTypeXType {
        #[serde(
            default = "AirspaceBorderCrossingTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AirspaceBorderCrossingTimeSlice")]
        pub airspace_border_crossing_time_slice: AirspaceBorderCrossingTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceBorderCrossingTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1294")]
        pub content_1294: AirspaceBorderCrossingTimeSliceContent1294XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirspaceBorderCrossingTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for AirspaceBorderCrossingTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirspaceBorderCrossingTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for AirspaceBorderCrossingTimeSliceTypeXType {}
    pub type AirspaceBorderCrossingTimeSliceTypeExtensionXElement =
        AirspaceBorderCrossingTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceBorderCrossingTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "AirspaceBorderCrossingTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractAirspaceBorderCrossingExtension")]
        pub abstract_airspace_border_crossing_extension:
            AbstractAirspaceBorderCrossingExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceBorderCrossingTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<AirspaceBorderCrossingTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AirspaceBorderCrossingTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AirspaceBorderCrossingTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirspaceBorderCrossingTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AirspaceBorderCrossingTypeXType {}
    pub type AirspaceGeometryComponentXElement = AirspaceGeometryComponentTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceGeometryComponentPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AirspaceGeometryComponent")]
        pub airspace_geometry_component: AirspaceGeometryComponentXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceGeometryComponentTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content609")]
        pub content_609: AirspaceGeometryComponentContent609XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirspaceGeometryComponentTypeExtensionXElement>,
    }
    pub type AirspaceGeometryComponentTypeExtensionXElement =
        AirspaceGeometryComponentTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceGeometryComponentTypeExtensionXElementType {
        #[serde(
            default = "AirspaceGeometryComponentTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AirspaceGeometryComponentTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AirspaceGeometryComponentTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAirspaceGeometryComponentExtension")]
        AbstractAirspaceGeometryComponentExtension(
            AbstractAirspaceGeometryComponentExtensionXElement,
        ),
    }
    pub type AirspaceLayerXElement = AirspaceLayerTypeXType;
    pub type AirspaceLayerClassXElement = AirspaceLayerClassTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceLayerClassPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AirspaceLayerClass")]
        pub airspace_layer_class: AirspaceLayerClassXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceLayerClassTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content614")]
        pub content_614: AirspaceLayerClassContent614XType,
        #[serde(rename = "Content615")]
        pub content_615: AirspaceLayerClassContent615XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirspaceLayerClassTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for AirspaceLayerClassTypeXType {}
    pub type AirspaceLayerClassTypeExtensionXElement = AirspaceLayerClassTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceLayerClassTypeExtensionXElementType {
        #[serde(
            default = "AirspaceLayerClassTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AirspaceLayerClassTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AirspaceLayerClassTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractAirspaceLayerClassExtension")]
        AbstractAirspaceLayerClassExtension(AbstractAirspaceLayerClassExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceLayerPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AirspaceLayer")]
        pub airspace_layer: AirspaceLayerXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceLayerTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1538")]
        pub content_1538: AirspaceLayerContent1538XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirspaceLayerTypeExtensionXElement>,
    }
    pub type AirspaceLayerTypeExtensionXElement = AirspaceLayerTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceLayerTypeExtensionXElementType {
        #[serde(
            default = "AirspaceLayerTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AirspaceLayerTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AirspaceLayerTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAirspaceLayerExtension")]
        AbstractAirspaceLayerExtension(AbstractAirspaceLayerExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspacePropertyTypeXType {
        #[serde(default = "AirspacePropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type AirspaceTimeSliceXElement = AirspaceTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceTimeSlicePropertyTypeXType {
        #[serde(
            default = "AirspaceTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AirspaceTimeSlice")]
        pub airspace_time_slice: AirspaceTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content599")]
        pub content_599: AirspaceTimeSliceContent599XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirspaceTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for AirspaceTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirspaceTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for AirspaceTimeSliceTypeXType {}
    pub type AirspaceTimeSliceTypeExtensionXElement = AirspaceTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "AirspaceTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractAirspaceExtension")]
        pub abstract_airspace_extension: AbstractAirspaceExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<AirspaceTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AirspaceTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AirspaceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AirspaceTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AirspaceTypeXType {}
    pub type AirspaceVolumeXElement = AirspaceVolumeTypeXType;
    pub type AirspaceVolumeDependencyXElement = AirspaceVolumeDependencyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceVolumeDependencyPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AirspaceVolumeDependency")]
        pub airspace_volume_dependency: AirspaceVolumeDependencyXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceVolumeDependencyTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content625")]
        pub content_625: AirspaceVolumeDependencyContent625XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirspaceVolumeDependencyTypeExtensionXElement>,
    }
    pub type AirspaceVolumeDependencyTypeExtensionXElement =
        AirspaceVolumeDependencyTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceVolumeDependencyTypeExtensionXElementType {
        #[serde(
            default = "AirspaceVolumeDependencyTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AirspaceVolumeDependencyTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AirspaceVolumeDependencyTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAirspaceVolumeDependencyExtension")]
        AbstractAirspaceVolumeDependencyExtension(
            AbstractAirspaceVolumeDependencyExtensionXElement,
        ),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceVolumePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AirspaceVolume")]
        pub airspace_volume: AirspaceVolumeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceVolumeTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content620")]
        pub content_620: AirspaceVolumeContent620XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AirspaceVolumeTypeExtensionXElement>,
    }
    pub type AirspaceVolumeTypeExtensionXElement = AirspaceVolumeTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceVolumeTypeExtensionXElementType {
        #[serde(
            default = "AirspaceVolumeTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AirspaceVolumeTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AirspaceVolumeTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAirspaceVolumeExtension")]
        AbstractAirspaceVolumeExtension(AbstractAirspaceVolumeExtensionXElement),
    }
    pub type AlphaTypeXType = String;
    pub type AlphanumericTypeXType = String;
    pub type AltimeterSourceXElement = AltimeterSourceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AltimeterSourcePropertyTypeXType {
        #[serde(
            default = "AltimeterSourcePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type AltimeterSourceStatusXElement = AltimeterSourceStatusTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AltimeterSourceStatusPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AltimeterSourceStatus")]
        pub altimeter_source_status: AltimeterSourceStatusXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AltimeterSourceStatusTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content117")]
        pub content_117: AltimeterSourceStatusContent117XType,
        #[serde(rename = "Content118")]
        pub content_118: AltimeterSourceStatusContent118XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AltimeterSourceStatusTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for AltimeterSourceStatusTypeXType {}
    pub type AltimeterSourceStatusTypeExtensionXElement =
        AltimeterSourceStatusTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AltimeterSourceStatusTypeExtensionXElementType {
        #[serde(
            default = "AltimeterSourceStatusTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AltimeterSourceStatusTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AltimeterSourceStatusTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractAltimeterSourceStatusExtension")]
        AbstractAltimeterSourceStatusExtension(AbstractAltimeterSourceStatusExtensionXElement),
    }
    pub type AltimeterSourceTimeSliceXElement = AltimeterSourceTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AltimeterSourceTimeSlicePropertyTypeXType {
        #[serde(
            default = "AltimeterSourceTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AltimeterSourceTimeSlice")]
        pub altimeter_source_time_slice: AltimeterSourceTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AltimeterSourceTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content113")]
        pub content_113: AltimeterSourceTimeSliceContent113XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AltimeterSourceTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for AltimeterSourceTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AltimeterSourceTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for AltimeterSourceTimeSliceTypeXType {}
    pub type AltimeterSourceTimeSliceTypeExtensionXElement =
        AltimeterSourceTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AltimeterSourceTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "AltimeterSourceTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractAltimeterSourceExtension")]
        pub abstract_altimeter_source_extension: AbstractAltimeterSourceExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AltimeterSourceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<AltimeterSourceTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AltimeterSourceTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AltimeterSourceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AltimeterSourceTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AltimeterSourceTypeXType {}
    pub type AltitudeAdjustmentXElement = AltitudeAdjustmentTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AltitudeAdjustmentPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AltitudeAdjustment")]
        pub altitude_adjustment: AltitudeAdjustmentXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AltitudeAdjustmentTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1611")]
        pub content_1611: AltitudeAdjustmentContent1611XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AltitudeAdjustmentTypeExtensionXElement>,
    }
    pub type AltitudeAdjustmentTypeExtensionXElement = AltitudeAdjustmentTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AltitudeAdjustmentTypeExtensionXElementType {
        #[serde(
            default = "AltitudeAdjustmentTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AltitudeAdjustmentTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AltitudeAdjustmentTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAltitudeAdjustmentExtension")]
        AbstractAltitudeAdjustmentExtension(AbstractAltitudeAdjustmentExtensionXElement),
    }
    pub type AngleIndicationXElement = AngleIndicationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AngleIndicationPropertyTypeXType {
        #[serde(
            default = "AngleIndicationPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type AngleIndicationTimeSliceXElement = AngleIndicationTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AngleIndicationTimeSlicePropertyTypeXType {
        #[serde(
            default = "AngleIndicationTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AngleIndicationTimeSlice")]
        pub angle_indication_time_slice: AngleIndicationTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AngleIndicationTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content875")]
        pub content_875: AngleIndicationTimeSliceContent875XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AngleIndicationTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for AngleIndicationTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AngleIndicationTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for AngleIndicationTimeSliceTypeXType {}
    pub type AngleIndicationTimeSliceTypeExtensionXElement =
        AngleIndicationTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AngleIndicationTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "AngleIndicationTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractAngleIndicationExtension")]
        pub abstract_angle_indication_extension: AbstractAngleIndicationExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AngleIndicationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<AngleIndicationTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AngleIndicationTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AngleIndicationTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AngleIndicationTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AngleIndicationTypeXType {}
    pub type AngleUseXElement = AngleUseTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AngleUsePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AngleUse")]
        pub angle_use: AngleUseXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AngleUseTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content880")]
        pub content_880: AngleUseContent880XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AngleUseTypeExtensionXElement>,
    }
    pub type AngleUseTypeExtensionXElement = AngleUseTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AngleUseTypeExtensionXElementType {
        #[serde(
            default = "AngleUseTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AngleUseTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AngleUseTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAngleUseExtension")]
        AbstractAngleUseExtension(AbstractAngleUseExtensionXElement),
    }
    pub type ApproachAltitudeTableXElement = ApproachAltitudeTableTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachAltitudeTablePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ApproachAltitudeTable")]
        pub approach_altitude_table: ApproachAltitudeTableXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachAltitudeTableTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1003")]
        pub content_1003: ApproachAltitudeTableContent1003XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ApproachAltitudeTableTypeExtensionXElement>,
    }
    pub type ApproachAltitudeTableTypeExtensionXElement =
        ApproachAltitudeTableTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachAltitudeTableTypeExtensionXElementType {
        #[serde(
            default = "ApproachAltitudeTableTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ApproachAltitudeTableTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ApproachAltitudeTableTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractApproachAltitudeTableExtension")]
        AbstractApproachAltitudeTableExtension(AbstractApproachAltitudeTableExtensionXElement),
    }
    pub type ApproachConditionXElement = ApproachConditionTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachConditionPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ApproachCondition")]
        pub approach_condition: ApproachConditionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachConditionTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1008")]
        pub content_1008: ApproachConditionContent1008XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ApproachConditionTypeExtensionXElement>,
    }
    pub type ApproachConditionTypeExtensionXElement = ApproachConditionTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachConditionTypeExtensionXElementType {
        #[serde(
            default = "ApproachConditionTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ApproachConditionTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ApproachConditionTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractApproachConditionExtension")]
        AbstractApproachConditionExtension(AbstractApproachConditionExtensionXElement),
    }
    pub type ApproachDistanceTableXElement = ApproachDistanceTableTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachDistanceTablePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ApproachDistanceTable")]
        pub approach_distance_table: ApproachDistanceTableXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachDistanceTableTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1013")]
        pub content_1013: ApproachDistanceTableContent1013XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ApproachDistanceTableTypeExtensionXElement>,
    }
    pub type ApproachDistanceTableTypeExtensionXElement =
        ApproachDistanceTableTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachDistanceTableTypeExtensionXElementType {
        #[serde(
            default = "ApproachDistanceTableTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ApproachDistanceTableTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ApproachDistanceTableTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractApproachDistanceTableExtension")]
        AbstractApproachDistanceTableExtension(AbstractApproachDistanceTableExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachLegPropertyTypeXType {
        #[serde(
            default = "ApproachLegPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type ApproachLightingSystemXElement = ApproachLightingSystemTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachLightingSystemPropertyTypeXType {
        #[serde(
            default = "ApproachLightingSystemPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type ApproachLightingSystemTimeSliceXElement = ApproachLightingSystemTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachLightingSystemTimeSlicePropertyTypeXType {
        #[serde(
            default = "ApproachLightingSystemTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "ApproachLightingSystemTimeSlice")]
        pub approach_lighting_system_time_slice: ApproachLightingSystemTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachLightingSystemTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content240")]
        pub content_240: ApproachLightingSystemTimeSliceContent240XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ApproachLightingSystemTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for ApproachLightingSystemTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ApproachLightingSystemTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for ApproachLightingSystemTimeSliceTypeXType {}
    pub type ApproachLightingSystemTimeSliceTypeExtensionXElement =
        ApproachLightingSystemTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachLightingSystemTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "ApproachLightingSystemTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ApproachLightingSystemTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ApproachLightingSystemTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractApproachLightingSystemExtension")]
        AbstractApproachLightingSystemExtension(AbstractApproachLightingSystemExtensionXElement),
        #[serde(rename = "AbstractGroundLightSystemExtension")]
        AbstractGroundLightSystemExtension(AbstractGroundLightSystemExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachLightingSystemTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<ApproachLightingSystemTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for ApproachLightingSystemTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for ApproachLightingSystemTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ApproachLightingSystemTypeXType {}
    impl AbstractAixmFeatureXElementTrait for ApproachLightingSystemTypeXType {}
    impl AbstractGroundLightSystemXElementTrait for ApproachLightingSystemTypeXType {}
    pub type ApproachTimingTableXElement = ApproachTimingTableTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachTimingTablePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ApproachTimingTable")]
        pub approach_timing_table: ApproachTimingTableXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachTimingTableTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1018")]
        pub content_1018: ApproachTimingTableContent1018XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ApproachTimingTableTypeExtensionXElement>,
    }
    pub type ApproachTimingTableTypeExtensionXElement =
        ApproachTimingTableTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachTimingTableTypeExtensionXElementType {
        #[serde(
            default = "ApproachTimingTableTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ApproachTimingTableTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ApproachTimingTableTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractApproachTimingTableExtension")]
        AbstractApproachTimingTableExtension(AbstractApproachTimingTableExtensionXElement),
    }
    pub type ApronXElement = ApronTypeXType;
    pub type ApronAreaAvailabilityXElement = ApronAreaAvailabilityTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronAreaAvailabilityPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ApronAreaAvailability")]
        pub apron_area_availability: ApronAreaAvailabilityXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronAreaAvailabilityTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content181")]
        pub content_181: ApronAreaAvailabilityContent181XType,
        #[serde(rename = "Content182")]
        pub content_182: ApronAreaAvailabilityContent182XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ApronAreaAvailabilityTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for ApronAreaAvailabilityTypeXType {}
    pub type ApronAreaAvailabilityTypeExtensionXElement =
        ApronAreaAvailabilityTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronAreaAvailabilityTypeExtensionXElementType {
        #[serde(
            default = "ApronAreaAvailabilityTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ApronAreaAvailabilityTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ApronAreaAvailabilityTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractApronAreaAvailabilityExtension")]
        AbstractApronAreaAvailabilityExtension(AbstractApronAreaAvailabilityExtensionXElement),
    }
    pub type ApronAreaUsageXElement = ApronAreaUsageTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronAreaUsagePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ApronAreaUsage")]
        pub apron_area_usage: ApronAreaUsageXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronAreaUsageTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content187")]
        pub content_187: ApronAreaUsageContent187XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ApronAreaUsageTypeExtensionXElement>,
    }
    impl AbstractUsageConditionXElementTrait for ApronAreaUsageTypeXType {}
    pub type ApronAreaUsageTypeExtensionXElement = ApronAreaUsageTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronAreaUsageTypeExtensionXElementType {
        #[serde(
            default = "ApronAreaUsageTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ApronAreaUsageTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ApronAreaUsageTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractUsageConditionExtension")]
        AbstractUsageConditionExtension(AbstractUsageConditionExtensionXElement),
        #[serde(rename = "AbstractApronAreaUsageExtension")]
        AbstractApronAreaUsageExtension(AbstractApronAreaUsageExtensionXElement),
    }
    pub type ApronContaminationXElement = ApronContaminationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronContaminationPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ApronContamination")]
        pub apron_contamination: ApronContaminationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronContaminationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content527")]
        pub content_527: ApronContaminationContent527XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ApronContaminationTypeExtensionXElement>,
    }
    impl AbstractSurfaceContaminationXElementTrait for ApronContaminationTypeXType {}
    pub type ApronContaminationTypeExtensionXElement = ApronContaminationTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronContaminationTypeExtensionXElementType {
        #[serde(
            default = "ApronContaminationTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ApronContaminationTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ApronContaminationTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractSurfaceContaminationExtension")]
        AbstractSurfaceContaminationExtension(AbstractSurfaceContaminationExtensionXElement),
        #[serde(rename = "AbstractApronContaminationExtension")]
        AbstractApronContaminationExtension(AbstractApronContaminationExtensionXElement),
    }
    pub type ApronElementXElement = ApronElementTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronElementPropertyTypeXType {
        #[serde(
            default = "ApronElementPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type ApronElementTimeSliceXElement = ApronElementTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronElementTimeSlicePropertyTypeXType {
        #[serde(
            default = "ApronElementTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "ApronElementTimeSlice")]
        pub apron_element_time_slice: ApronElementTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronElementTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content196")]
        pub content_196: ApronElementTimeSliceContent196XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ApronElementTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for ApronElementTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ApronElementTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for ApronElementTimeSliceTypeXType {}
    pub type ApronElementTimeSliceTypeExtensionXElement =
        ApronElementTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronElementTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "ApronElementTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractApronElementExtension")]
        pub abstract_apron_element_extension: AbstractApronElementExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronElementTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<ApronElementTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for ApronElementTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for ApronElementTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ApronElementTypeXType {}
    impl AbstractAixmFeatureXElementTrait for ApronElementTypeXType {}
    pub type ApronLightSystemXElement = ApronLightSystemTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronLightSystemPropertyTypeXType {
        #[serde(
            default = "ApronLightSystemPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type ApronLightSystemTimeSliceXElement = ApronLightSystemTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronLightSystemTimeSlicePropertyTypeXType {
        #[serde(
            default = "ApronLightSystemTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "ApronLightSystemTimeSlice")]
        pub apron_light_system_time_slice: ApronLightSystemTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronLightSystemTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content248")]
        pub content_248: ApronLightSystemTimeSliceContent248XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ApronLightSystemTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for ApronLightSystemTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ApronLightSystemTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for ApronLightSystemTimeSliceTypeXType {}
    pub type ApronLightSystemTimeSliceTypeExtensionXElement =
        ApronLightSystemTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronLightSystemTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "ApronLightSystemTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ApronLightSystemTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ApronLightSystemTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractApronLightSystemExtension")]
        AbstractApronLightSystemExtension(AbstractApronLightSystemExtensionXElement),
        #[serde(rename = "AbstractGroundLightSystemExtension")]
        AbstractGroundLightSystemExtension(AbstractGroundLightSystemExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronLightSystemTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<ApronLightSystemTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for ApronLightSystemTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for ApronLightSystemTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ApronLightSystemTypeXType {}
    impl AbstractAixmFeatureXElementTrait for ApronLightSystemTypeXType {}
    impl AbstractGroundLightSystemXElementTrait for ApronLightSystemTypeXType {}
    pub type ApronMarkingXElement = ApronMarkingTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronMarkingPropertyTypeXType {
        #[serde(
            default = "ApronMarkingPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type ApronMarkingTimeSliceXElement = ApronMarkingTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronMarkingTimeSlicePropertyTypeXType {
        #[serde(
            default = "ApronMarkingTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "ApronMarkingTimeSlice")]
        pub apron_marking_time_slice: ApronMarkingTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronMarkingTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content324")]
        pub content_324: ApronMarkingTimeSliceContent324XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ApronMarkingTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for ApronMarkingTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ApronMarkingTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for ApronMarkingTimeSliceTypeXType {}
    pub type ApronMarkingTimeSliceTypeExtensionXElement =
        ApronMarkingTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronMarkingTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "ApronMarkingTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ApronMarkingTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ApronMarkingTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractApronMarkingExtension")]
        AbstractApronMarkingExtension(AbstractApronMarkingExtensionXElement),
        #[serde(rename = "AbstractMarkingExtension")]
        AbstractMarkingExtension(AbstractMarkingExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronMarkingTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<ApronMarkingTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for ApronMarkingTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for ApronMarkingTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ApronMarkingTypeXType {}
    impl AbstractAixmFeatureXElementTrait for ApronMarkingTypeXType {}
    impl AbstractMarkingXElementTrait for ApronMarkingTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronPropertyTypeXType {
        #[serde(default = "ApronPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type ApronTimeSliceXElement = ApronTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronTimeSlicePropertyTypeXType {
        #[serde(
            default = "ApronTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "ApronTimeSlice")]
        pub apron_time_slice: ApronTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content177")]
        pub content_177: ApronTimeSliceContent177XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ApronTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for ApronTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ApronTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for ApronTimeSliceTypeXType {}
    pub type ApronTimeSliceTypeExtensionXElement = ApronTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "ApronTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractApronExtension")]
        pub abstract_apron_extension: AbstractApronExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<ApronTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for ApronTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for ApronTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ApronTypeXType {}
    impl AbstractAixmFeatureXElementTrait for ApronTypeXType {}
    pub type ArrestingGearXElement = ArrestingGearTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrestingGearPropertyTypeXType {
        #[serde(
            default = "ArrestingGearPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type ArrestingGearTimeSliceXElement = ArrestingGearTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrestingGearTimeSlicePropertyTypeXType {
        #[serde(
            default = "ArrestingGearTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "ArrestingGearTimeSlice")]
        pub arresting_gear_time_slice: ArrestingGearTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrestingGearTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content394")]
        pub content_394: ArrestingGearTimeSliceContent394XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ArrestingGearTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for ArrestingGearTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ArrestingGearTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for ArrestingGearTimeSliceTypeXType {}
    pub type ArrestingGearTimeSliceTypeExtensionXElement =
        ArrestingGearTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrestingGearTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "ArrestingGearTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractArrestingGearExtension")]
        pub abstract_arresting_gear_extension: AbstractArrestingGearExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrestingGearTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<ArrestingGearTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for ArrestingGearTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for ArrestingGearTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ArrestingGearTypeXType {}
    impl AbstractAixmFeatureXElementTrait for ArrestingGearTypeXType {}
    pub type ArrivalFeederLegXElement = ArrivalFeederLegTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrivalFeederLegPropertyTypeXType {
        #[serde(
            default = "ArrivalFeederLegPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type ArrivalFeederLegTimeSliceXElement = ArrivalFeederLegTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrivalFeederLegTimeSlicePropertyTypeXType {
        #[serde(
            default = "ArrivalFeederLegTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "ArrivalFeederLegTimeSlice")]
        pub arrival_feeder_leg_time_slice: ArrivalFeederLegTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrivalFeederLegTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1149")]
        pub content_1149: ArrivalFeederLegTimeSliceContent1149XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ArrivalFeederLegTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for ArrivalFeederLegTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ArrivalFeederLegTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for ArrivalFeederLegTimeSliceTypeXType {}
    pub type ArrivalFeederLegTimeSliceTypeExtensionXElement =
        ArrivalFeederLegTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrivalFeederLegTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "ArrivalFeederLegTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ArrivalFeederLegTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ArrivalFeederLegTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractArrivalFeederLegExtension")]
        AbstractArrivalFeederLegExtension(AbstractArrivalFeederLegExtensionXElement),
        #[serde(rename = "AbstractApproachLegExtension")]
        AbstractApproachLegExtension(AbstractApproachLegExtensionXElement),
        #[serde(rename = "AbstractSegmentLegExtension")]
        AbstractSegmentLegExtension(AbstractSegmentLegExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrivalFeederLegTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<ArrivalFeederLegTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for ArrivalFeederLegTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for ArrivalFeederLegTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ArrivalFeederLegTypeXType {}
    impl AbstractAixmFeatureXElementTrait for ArrivalFeederLegTypeXType {}
    impl AbstractApproachLegXElementTrait for ArrivalFeederLegTypeXType {}
    impl AbstractSegmentLegXElementTrait for ArrivalFeederLegTypeXType {}
    pub type ArrivalLegXElement = ArrivalLegTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrivalLegPropertyTypeXType {
        #[serde(
            default = "ArrivalLegPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type ArrivalLegTimeSliceXElement = ArrivalLegTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrivalLegTimeSlicePropertyTypeXType {
        #[serde(
            default = "ArrivalLegTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "ArrivalLegTimeSlice")]
        pub arrival_leg_time_slice: ArrivalLegTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrivalLegTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1158")]
        pub content_1158: ArrivalLegTimeSliceContent1158XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ArrivalLegTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for ArrivalLegTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ArrivalLegTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for ArrivalLegTimeSliceTypeXType {}
    pub type ArrivalLegTimeSliceTypeExtensionXElement =
        ArrivalLegTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrivalLegTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "ArrivalLegTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ArrivalLegTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ArrivalLegTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractArrivalLegExtension")]
        AbstractArrivalLegExtension(AbstractArrivalLegExtensionXElement),
        #[serde(rename = "AbstractSegmentLegExtension")]
        AbstractSegmentLegExtension(AbstractSegmentLegExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrivalLegTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<ArrivalLegTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for ArrivalLegTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for ArrivalLegTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ArrivalLegTypeXType {}
    impl AbstractAixmFeatureXElementTrait for ArrivalLegTypeXType {}
    impl AbstractSegmentLegXElementTrait for ArrivalLegTypeXType {}
    pub type AuthorityForAerialRefuellingXElement = AuthorityForAerialRefuellingTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForAerialRefuellingPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AuthorityForAerialRefuelling")]
        pub authority_for_aerial_refuelling: AuthorityForAerialRefuellingXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForAerialRefuellingTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content61")]
        pub content_61: AuthorityForAerialRefuellingContent61XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AuthorityForAerialRefuellingTypeExtensionXElement>,
    }
    pub type AuthorityForAerialRefuellingTypeExtensionXElement =
        AuthorityForAerialRefuellingTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForAerialRefuellingTypeExtensionXElementType {
        #[serde(
            default = "AuthorityForAerialRefuellingTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AuthorityForAerialRefuellingTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AuthorityForAerialRefuellingTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAuthorityForAerialRefuellingExtension")]
        AbstractAuthorityForAerialRefuellingExtension(
            AbstractAuthorityForAerialRefuellingExtensionXElement,
        ),
    }
    pub type AuthorityForAirspaceXElement = AuthorityForAirspaceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForAirspacePropertyTypeXType {
        #[serde(
            default = "AuthorityForAirspacePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type AuthorityForAirspaceTimeSliceXElement = AuthorityForAirspaceTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForAirspaceTimeSlicePropertyTypeXType {
        #[serde(
            default = "AuthorityForAirspaceTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AuthorityForAirspaceTimeSlice")]
        pub authority_for_airspace_time_slice: AuthorityForAirspaceTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForAirspaceTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content633")]
        pub content_633: AuthorityForAirspaceTimeSliceContent633XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AuthorityForAirspaceTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for AuthorityForAirspaceTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AuthorityForAirspaceTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for AuthorityForAirspaceTimeSliceTypeXType {}
    pub type AuthorityForAirspaceTimeSliceTypeExtensionXElement =
        AuthorityForAirspaceTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForAirspaceTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "AuthorityForAirspaceTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractAuthorityForAirspaceExtension")]
        pub abstract_authority_for_airspace_extension:
            AbstractAuthorityForAirspaceExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForAirspaceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<AuthorityForAirspaceTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AuthorityForAirspaceTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AuthorityForAirspaceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AuthorityForAirspaceTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AuthorityForAirspaceTypeXType {}
    pub type AuthorityForNavaidEquipmentXElement = AuthorityForNavaidEquipmentTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForNavaidEquipmentPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AuthorityForNavaidEquipment")]
        pub authority_for_navaid_equipment: AuthorityForNavaidEquipmentXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForNavaidEquipmentTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content707")]
        pub content_707: AuthorityForNavaidEquipmentContent707XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AuthorityForNavaidEquipmentTypeExtensionXElement>,
    }
    pub type AuthorityForNavaidEquipmentTypeExtensionXElement =
        AuthorityForNavaidEquipmentTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForNavaidEquipmentTypeExtensionXElementType {
        #[serde(
            default = "AuthorityForNavaidEquipmentTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AuthorityForNavaidEquipmentTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AuthorityForNavaidEquipmentTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAuthorityForNavaidEquipmentExtension")]
        AbstractAuthorityForNavaidEquipmentExtension(
            AbstractAuthorityForNavaidEquipmentExtensionXElement,
        ),
    }
    pub type AuthorityForSpecialNavigationStationXElement =
        AuthorityForSpecialNavigationStationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForSpecialNavigationStationPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AuthorityForSpecialNavigationStation")]
        pub authority_for_special_navigation_station: AuthorityForSpecialNavigationStationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForSpecialNavigationStationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content712")]
        pub content_712: AuthorityForSpecialNavigationStationContent712XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AuthorityForSpecialNavigationStationTypeExtensionXElement>,
    }
    pub type AuthorityForSpecialNavigationStationTypeExtensionXElement =
        AuthorityForSpecialNavigationStationTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForSpecialNavigationStationTypeExtensionXElementType {
        #[serde(
            default = "AuthorityForSpecialNavigationStationTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AuthorityForSpecialNavigationStationTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AuthorityForSpecialNavigationStationTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAuthorityForSpecialNavigationStationExtension")]
        AbstractAuthorityForSpecialNavigationStationExtension(
            AbstractAuthorityForSpecialNavigationStationExtensionXElement,
        ),
    }
    pub type AuthorityForSpecialNavigationSystemXElement =
        AuthorityForSpecialNavigationSystemTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForSpecialNavigationSystemPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AuthorityForSpecialNavigationSystem")]
        pub authority_for_special_navigation_system: AuthorityForSpecialNavigationSystemXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForSpecialNavigationSystemTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content717")]
        pub content_717: AuthorityForSpecialNavigationSystemContent717XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AuthorityForSpecialNavigationSystemTypeExtensionXElement>,
    }
    pub type AuthorityForSpecialNavigationSystemTypeExtensionXElement =
        AuthorityForSpecialNavigationSystemTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForSpecialNavigationSystemTypeExtensionXElementType {
        #[serde(
            default = "AuthorityForSpecialNavigationSystemTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AuthorityForSpecialNavigationSystemTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AuthorityForSpecialNavigationSystemTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAuthorityForSpecialNavigationSystemExtension")]
        AbstractAuthorityForSpecialNavigationSystemExtension(
            AbstractAuthorityForSpecialNavigationSystemExtensionXElement,
        ),
    }
    pub type AzimuthXElement = AzimuthTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AzimuthPropertyTypeXType {
        #[serde(default = "AzimuthPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type AzimuthTimeSliceXElement = AzimuthTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AzimuthTimeSlicePropertyTypeXType {
        #[serde(
            default = "AzimuthTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AzimuthTimeSlice")]
        pub azimuth_time_slice: AzimuthTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AzimuthTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content726")]
        pub content_726: AzimuthTimeSliceContent726XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<AzimuthTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for AzimuthTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AzimuthTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for AzimuthTimeSliceTypeXType {}
    pub type AzimuthTimeSliceTypeExtensionXElement = AzimuthTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AzimuthTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "AzimuthTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: AzimuthTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AzimuthTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractAzimuthExtension")]
        AbstractAzimuthExtension(AbstractAzimuthExtensionXElement),
        #[serde(rename = "AbstractNavaidEquipmentExtension")]
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AzimuthTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<AzimuthTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for AzimuthTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AzimuthTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AzimuthTypeXType {}
    impl AbstractAixmFeatureXElementTrait for AzimuthTypeXType {}
    impl AbstractNavaidEquipmentXElementTrait for AzimuthTypeXType {}
    pub type CallsignDetailXElement = CallsignDetailTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CallsignDetailPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "CallsignDetail")]
        pub callsign_detail: CallsignDetailXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CallsignDetailTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1411")]
        pub content_1411: CallsignDetailContent1411XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<CallsignDetailTypeExtensionXElement>,
    }
    pub type CallsignDetailTypeExtensionXElement = CallsignDetailTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CallsignDetailTypeExtensionXElementType {
        #[serde(
            default = "CallsignDetailTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: CallsignDetailTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CallsignDetailTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractCallsignDetailExtension")]
        AbstractCallsignDetailExtension(AbstractCallsignDetailExtensionXElement),
    }
    pub type ChangeOverPointXElement = ChangeOverPointTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ChangeOverPointPropertyTypeXType {
        #[serde(
            default = "ChangeOverPointPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type ChangeOverPointTimeSliceXElement = ChangeOverPointTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ChangeOverPointTimeSlicePropertyTypeXType {
        #[serde(
            default = "ChangeOverPointTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "ChangeOverPointTimeSlice")]
        pub change_over_point_time_slice: ChangeOverPointTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ChangeOverPointTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1251")]
        pub content_1251: ChangeOverPointTimeSliceContent1251XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ChangeOverPointTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for ChangeOverPointTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ChangeOverPointTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for ChangeOverPointTimeSliceTypeXType {}
    pub type ChangeOverPointTimeSliceTypeExtensionXElement =
        ChangeOverPointTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ChangeOverPointTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "ChangeOverPointTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractChangeOverPointExtension")]
        pub abstract_change_over_point_extension: AbstractChangeOverPointExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ChangeOverPointTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<ChangeOverPointTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for ChangeOverPointTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for ChangeOverPointTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ChangeOverPointTypeXType {}
    impl AbstractAixmFeatureXElementTrait for ChangeOverPointTypeXType {}
    pub type Character1TypeXType = String;
    pub type Character2TypeXType = String;
    pub type Character3TypeXType = String;
    pub type CheckpointInsXElement = CheckpointInsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CheckpointInsPropertyTypeXType {
        #[serde(
            default = "CheckpointInsPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type CheckpointInsTimeSliceXElement = CheckpointInsTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CheckpointInsTimeSlicePropertyTypeXType {
        #[serde(
            default = "CheckpointInsTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "CheckpointINSTimeSlice")]
        pub checkpoint_ins_time_slice: CheckpointInsTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CheckpointInsTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content735")]
        pub content_735: CheckpointInsTimeSliceContent735XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<CheckpointInsTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for CheckpointInsTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for CheckpointInsTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for CheckpointInsTimeSliceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CheckpointInsTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<CheckpointInsTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for CheckpointInsTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for CheckpointInsTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for CheckpointInsTypeXType {}
    impl AbstractAixmFeatureXElementTrait for CheckpointInsTypeXType {}
    impl AbstractNavigationSystemCheckpointXElementTrait for CheckpointInsTypeXType {}
    pub type CheckpointInsTimeSliceTypeExtensionXElement =
        CheckpointInsTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CheckpointInsTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "CheckpointInsTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: CheckpointInsTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CheckpointInsTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractCheckpointINSExtension")]
        AbstractCheckpointInsExtension(AbstractCheckpointInsExtensionXElement),
        #[serde(rename = "AbstractNavigationSystemCheckpointExtension")]
        AbstractNavigationSystemCheckpointExtension(
            AbstractNavigationSystemCheckpointExtensionXElement,
        ),
    }
    pub type CheckpointVorXElement = CheckpointVorTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CheckpointVorPropertyTypeXType {
        #[serde(
            default = "CheckpointVorPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type CheckpointVorTimeSliceXElement = CheckpointVorTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CheckpointVorTimeSlicePropertyTypeXType {
        #[serde(
            default = "CheckpointVorTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "CheckpointVORTimeSlice")]
        pub checkpoint_vor_time_slice: CheckpointVorTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CheckpointVorTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content743")]
        pub content_743: CheckpointVorTimeSliceContent743XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<CheckpointVorTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for CheckpointVorTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for CheckpointVorTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for CheckpointVorTimeSliceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CheckpointVorTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<CheckpointVorTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for CheckpointVorTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for CheckpointVorTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for CheckpointVorTypeXType {}
    impl AbstractAixmFeatureXElementTrait for CheckpointVorTypeXType {}
    impl AbstractNavigationSystemCheckpointXElementTrait for CheckpointVorTypeXType {}
    pub type CheckpointVorTimeSliceTypeExtensionXElement =
        CheckpointVorTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CheckpointVorTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "CheckpointVorTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: CheckpointVorTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CheckpointVorTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractCheckpointVORExtension")]
        AbstractCheckpointVorExtension(AbstractCheckpointVorExtensionXElement),
        #[serde(rename = "AbstractNavigationSystemCheckpointExtension")]
        AbstractNavigationSystemCheckpointExtension(
            AbstractNavigationSystemCheckpointExtensionXElement,
        ),
    }
    pub type CircleSectorXElement = CircleSectorTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CircleSectorPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "CircleSector")]
        pub circle_sector: CircleSectorXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CircleSectorTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1543")]
        pub content_1543: CircleSectorContent1543XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<CircleSectorTypeExtensionXElement>,
    }
    pub type CircleSectorTypeExtensionXElement = CircleSectorTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CircleSectorTypeExtensionXElementType {
        #[serde(
            default = "CircleSectorTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: CircleSectorTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CircleSectorTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractCircleSectorExtension")]
        AbstractCircleSectorExtension(AbstractCircleSectorExtensionXElement),
    }
    pub type CirclingAreaXElement = CirclingAreaTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CirclingAreaPropertyTypeXType {
        #[serde(
            default = "CirclingAreaPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type CirclingAreaTimeSliceXElement = CirclingAreaTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CirclingAreaTimeSlicePropertyTypeXType {
        #[serde(
            default = "CirclingAreaTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "CirclingAreaTimeSlice")]
        pub circling_area_time_slice: CirclingAreaTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CirclingAreaTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1065")]
        pub content_1065: CirclingAreaTimeSliceContent1065XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<CirclingAreaTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for CirclingAreaTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for CirclingAreaTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for CirclingAreaTimeSliceTypeXType {}
    pub type CirclingAreaTimeSliceTypeExtensionXElement =
        CirclingAreaTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CirclingAreaTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "CirclingAreaTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractCirclingAreaExtension")]
        pub abstract_circling_area_extension: AbstractCirclingAreaExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CirclingAreaTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<CirclingAreaTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for CirclingAreaTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for CirclingAreaTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for CirclingAreaTypeXType {}
    impl AbstractAixmFeatureXElementTrait for CirclingAreaTypeXType {}
    pub type CirclingRestrictionXElement = CirclingRestrictionTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CirclingRestrictionPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "CirclingRestriction")]
        pub circling_restriction: CirclingRestrictionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CirclingRestrictionTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1069")]
        pub content_1069: CirclingRestrictionContent1069XType,
        #[serde(rename = "Content1070")]
        pub content_1070: CirclingRestrictionContent1070XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<CirclingRestrictionTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for CirclingRestrictionTypeXType {}
    pub type CirclingRestrictionTypeExtensionXElement =
        CirclingRestrictionTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CirclingRestrictionTypeExtensionXElementType {
        #[serde(
            default = "CirclingRestrictionTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: CirclingRestrictionTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CirclingRestrictionTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractCirclingRestrictionExtension")]
        AbstractCirclingRestrictionExtension(AbstractCirclingRestrictionExtensionXElement),
    }
    pub type CityXElement = CityTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CityPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "City")]
        pub city: CityXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CityTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content123")]
        pub content_123: CityContent123XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<CityTypeExtensionXElement>,
    }
    pub type CityTypeExtensionXElement = CityTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CityTypeExtensionXElementType {
        #[serde(
            default = "CityTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: CityTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CityTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractCityExtension")]
        AbstractCityExtension(AbstractCityExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAtcReportingBaseTypeXType {
        CodeAtcReportingBaseType1926(CodeAtcReportingBaseType1926XType),
        CodeAtcReportingBaseType1927(CodeAtcReportingBaseType1927XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAtcReportingTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAtcReportingBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAerialRefuellingBaseTypeXType {
        CodeAerialRefuellingBaseType1858(CodeAerialRefuellingBaseType1858XType),
        CodeAerialRefuellingBaseType1859(CodeAerialRefuellingBaseType1859XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAerialRefuellingBaseType1858XType {
        #[serde(rename = "TRACK")]
        Track,
        #[serde(rename = "ANCHOR")]
        Anchor,
        #[serde(rename = "BOTH")]
        Both,
    }
    pub type CodeAerialRefuellingBaseType1859XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAerialRefuellingPointBaseTypeXType {
        CodeAerialRefuellingPointBaseType1860(CodeAerialRefuellingPointBaseType1860XType),
        CodeAerialRefuellingPointBaseType1861(CodeAerialRefuellingPointBaseType1861XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAerialRefuellingPointBaseType1860XType {
        #[serde(rename = "INITIAL")]
        Initial,
        #[serde(rename = "CONTROL")]
        Control,
        #[serde(rename = "CHECK")]
        Check,
        #[serde(rename = "EXIT")]
        Exit,
        #[serde(rename = "ENTRY")]
        Entry,
        #[serde(rename = "ANCHOR")]
        Anchor,
        #[serde(rename = "PATTERN")]
        Pattern,
    }
    pub type CodeAerialRefuellingPointBaseType1861XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAerialRefuellingPointTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAerialRefuellingPointBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAerialRefuellingPrefixBaseTypeXType {
        CodeAerialRefuellingPrefixBaseType1862(CodeAerialRefuellingPrefixBaseType1862XType),
        CodeAerialRefuellingPrefixBaseType1863(CodeAerialRefuellingPrefixBaseType1863XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAerialRefuellingPrefixBaseType1862XType {
        #[serde(rename = "AR")]
        Ar,
    }
    pub type CodeAerialRefuellingPrefixBaseType1863XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAerialRefuellingPrefixTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAerialRefuellingPrefixBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAerialRefuellingTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAerialRefuellingBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAircraftBaseTypeXType {
        CodeAircraftBaseType1864(CodeAircraftBaseType1864XType),
        CodeAircraftBaseType1865(CodeAircraftBaseType1865XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAircraftBaseType1864XType {
        #[serde(rename = "LANDPLANE")]
        Landplane,
        #[serde(rename = "SEAPLANE")]
        Seaplane,
        #[serde(rename = "AMPHIBIAN")]
        Amphibian,
        #[serde(rename = "HELICOPTER")]
        Helicopter,
        #[serde(rename = "GYROCOPTER")]
        Gyrocopter,
        #[serde(rename = "TILT_WING")]
        TiltWing,
        #[serde(rename = "STOL")]
        Stol,
        #[serde(rename = "GLIDER")]
        Glider,
        #[serde(rename = "HANGGLIDER")]
        Hangglider,
        #[serde(rename = "PARAGLIDER")]
        Paraglider,
        #[serde(rename = "ULTRA_LIGHT")]
        UltraLight,
        #[serde(rename = "BALLOON")]
        Balloon,
        #[serde(rename = "UAV")]
        Uav,
        #[serde(rename = "ALL")]
        All,
    }
    pub type CodeAircraftBaseType1865XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAircraftCategoryBaseTypeXType {
        CodeAircraftCategoryBaseType1866(CodeAircraftCategoryBaseType1866XType),
        CodeAircraftCategoryBaseType1867(CodeAircraftCategoryBaseType1867XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAircraftCategoryBaseType1866XType {
        #[serde(rename = "A")]
        A,
        #[serde(rename = "B")]
        B,
        #[serde(rename = "C")]
        C,
        #[serde(rename = "D")]
        D,
        #[serde(rename = "E")]
        E,
        #[serde(rename = "H")]
        H,
        #[serde(rename = "ALL")]
        All,
    }
    pub type CodeAircraftCategoryBaseType1867XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAircraftCategoryTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAircraftCategoryBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAircraftEngineBaseTypeXType {
        CodeAircraftEngineBaseType1868(CodeAircraftEngineBaseType1868XType),
        CodeAircraftEngineBaseType1869(CodeAircraftEngineBaseType1869XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAircraftEngineBaseType1868XType {
        #[serde(rename = "JET")]
        Jet,
        #[serde(rename = "PISTON")]
        Piston,
        #[serde(rename = "TURBOPROP")]
        Turboprop,
        #[serde(rename = "ELECTRIC")]
        Electric,
        #[serde(rename = "ALL")]
        All,
    }
    pub type CodeAircraftEngineBaseType1869XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAircraftEngineNumberBaseTypeXType {
        CodeAircraftEngineNumberBaseType1870(CodeAircraftEngineNumberBaseType1870XType),
        CodeAircraftEngineNumberBaseType1871(CodeAircraftEngineNumberBaseType1871XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAircraftEngineNumberBaseType1870XType {
        #[serde(rename = "1")]
        _1,
        #[serde(rename = "2")]
        _2,
        #[serde(rename = "3")]
        _3,
        #[serde(rename = "4")]
        _4,
        #[serde(rename = "6")]
        _6,
        #[serde(rename = "8")]
        _8,
        #[serde(rename = "2C")]
        _2C,
    }
    pub type CodeAircraftEngineNumberBaseType1871XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAircraftEngineNumberTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAircraftEngineNumberBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAircraftEngineTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAircraftEngineBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAircraftGroundServiceBaseTypeXType {
        CodeAircraftGroundServiceBaseType1872(CodeAircraftGroundServiceBaseType1872XType),
        CodeAircraftGroundServiceBaseType1873(CodeAircraftGroundServiceBaseType1873XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAircraftGroundServiceBaseType1872XType {
        #[serde(rename = "DEICE")]
        Deice,
        #[serde(rename = "HAND")]
        Hand,
        #[serde(rename = "HANGAR")]
        Hangar,
        #[serde(rename = "REPAIR")]
        Repair,
        #[serde(rename = "REMOVE")]
        Remove,
    }
    pub type CodeAircraftGroundServiceBaseType1873XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAircraftGroundServiceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAircraftGroundServiceBaseTypeXType,
    }
    pub type CodeAircraftIcaoBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAircraftIcaoTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAircraftIcaoBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAircraftStandBaseTypeXType {
        CodeAircraftStandBaseType1874(CodeAircraftStandBaseType1874XType),
        CodeAircraftStandBaseType1875(CodeAircraftStandBaseType1875XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAircraftStandBaseType1874XType {
        #[serde(rename = "NI")]
        Ni,
        #[serde(rename = "ANG_NI")]
        AngNi,
        #[serde(rename = "ANG_NO")]
        AngNo,
        #[serde(rename = "PARL")]
        Parl,
        #[serde(rename = "RMT")]
        Rmt,
        #[serde(rename = "ISOL")]
        Isol,
    }
    pub type CodeAircraftStandBaseType1875XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAircraftStandTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAircraftStandBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAircraftTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAircraftBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAircraftWingspanClassBaseTypeXType {
        CodeAircraftWingspanClassBaseType1876(CodeAircraftWingspanClassBaseType1876XType),
        CodeAircraftWingspanClassBaseType1877(CodeAircraftWingspanClassBaseType1877XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAircraftWingspanClassBaseType1876XType {
        #[serde(rename = "I")]
        I,
        #[serde(rename = "II")]
        Ii,
        #[serde(rename = "III")]
        Iii,
        #[serde(rename = "IV")]
        Iv,
        #[serde(rename = "V")]
        V,
        #[serde(rename = "VI")]
        Vi,
    }
    pub type CodeAircraftWingspanClassBaseType1877XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAircraftWingspanClassTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAircraftWingspanClassBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirportHeliportBaseTypeXType {
        CodeAirportHeliportBaseType1878(CodeAirportHeliportBaseType1878XType),
        CodeAirportHeliportBaseType1879(CodeAirportHeliportBaseType1879XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirportHeliportBaseType1878XType {
        #[serde(rename = "AD")]
        Ad,
        #[serde(rename = "AH")]
        Ah,
        #[serde(rename = "HP")]
        Hp,
        #[serde(rename = "LS")]
        Ls,
    }
    pub type CodeAirportHeliportBaseType1879XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirportHeliportCollocationBaseTypeXType {
        CodeAirportHeliportCollocationBaseType1880(CodeAirportHeliportCollocationBaseType1880XType),
        CodeAirportHeliportCollocationBaseType1881(CodeAirportHeliportCollocationBaseType1881XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirportHeliportCollocationBaseType1880XType {
        #[serde(rename = "FULL")]
        Full,
        #[serde(rename = "RWY")]
        Rwy,
        #[serde(rename = "PARTIAL")]
        Partial,
        #[serde(rename = "UNILATERAL")]
        Unilateral,
        #[serde(rename = "SEPARATED")]
        Separated,
    }
    pub type CodeAirportHeliportCollocationBaseType1881XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAirportHeliportCollocationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAirportHeliportCollocationBaseTypeXType,
    }
    pub type CodeAirportHeliportDesignatorBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAirportHeliportDesignatorTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAirportHeliportDesignatorBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAirportHeliportTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAirportHeliportBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirportWarningBaseTypeXType {
        CodeAirportWarningBaseType1882(CodeAirportWarningBaseType1882XType),
        CodeAirportWarningBaseType1883(CodeAirportWarningBaseType1883XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirportWarningBaseType1882XType {
        #[serde(rename = "WIP")]
        Wip,
        #[serde(rename = "EQUIP")]
        Equip,
        #[serde(rename = "BIRD")]
        Bird,
        #[serde(rename = "ANIMAL")]
        Animal,
        #[serde(rename = "RUBBER_REMOVAL")]
        RubberRemoval,
        #[serde(rename = "PARKED_ACFT")]
        ParkedAcft,
        #[serde(rename = "RESURFACING")]
        Resurfacing,
        #[serde(rename = "PAVING")]
        Paving,
        #[serde(rename = "PAINTING")]
        Painting,
        #[serde(rename = "INSPECTION")]
        Inspection,
        #[serde(rename = "GRASS_CUTTING")]
        GrassCutting,
        #[serde(rename = "CALIBRATION")]
        Calibration,
    }
    pub type CodeAirportWarningBaseType1883XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAirportWarningTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAirportWarningBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirspaceActivityBaseTypeXType {
        CodeAirspaceActivityBaseType1884(CodeAirspaceActivityBaseType1884XType),
        CodeAirspaceActivityBaseType1885(CodeAirspaceActivityBaseType1885XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirspaceActivityBaseType1884XType {
        #[serde(rename = "AD_TFC")]
        AdTfc,
        #[serde(rename = "HELI_TFC")]
        HeliTfc,
        #[serde(rename = "TRAINING")]
        Training,
        #[serde(rename = "AEROBATICS")]
        Aerobatics,
        #[serde(rename = "AIRSHOW")]
        Airshow,
        #[serde(rename = "SPORT")]
        Sport,
        #[serde(rename = "ULM")]
        Ulm,
        #[serde(rename = "GLIDING")]
        Gliding,
        #[serde(rename = "PARAGLIDER")]
        Paraglider,
        #[serde(rename = "HANGGLIDING")]
        Hanggliding,
        #[serde(rename = "PARACHUTE")]
        Parachute,
        #[serde(rename = "AIR_DROP")]
        AirDrop,
        #[serde(rename = "BALLOON")]
        Balloon,
        #[serde(rename = "RADIOSONDE")]
        Radiosonde,
        #[serde(rename = "SPACE_FLIGHT")]
        SpaceFlight,
        #[serde(rename = "UAV")]
        Uav,
        #[serde(rename = "AERIAL_WORK")]
        AerialWork,
        #[serde(rename = "CROP_DUSTING")]
        CropDusting,
        #[serde(rename = "FIRE_FIGHTING")]
        FireFighting,
        #[serde(rename = "MILOPS")]
        Milops,
        #[serde(rename = "REFUEL")]
        Refuel,
        #[serde(rename = "JET_CLIMBING")]
        JetClimbing,
        #[serde(rename = "EXERCISE")]
        Exercise,
        #[serde(rename = "TOWING")]
        Towing,
        #[serde(rename = "NAVAL_EXER")]
        NavalExer,
        #[serde(rename = "MISSILES")]
        Missiles,
        #[serde(rename = "AIR_GUN")]
        AirGun,
        #[serde(rename = "ARTILLERY")]
        Artillery,
        #[serde(rename = "SHOOTING")]
        Shooting,
        #[serde(rename = "BLASTING")]
        Blasting,
        #[serde(rename = "WATER_BLASTING")]
        WaterBlasting,
        #[serde(rename = "ANTI_HAIL")]
        AntiHail,
        #[serde(rename = "BIRD")]
        Bird,
        #[serde(rename = "BIRD_MIGRATION")]
        BirdMigration,
        #[serde(rename = "FIREWORK")]
        Firework,
        #[serde(rename = "HI_RADIO")]
        HiRadio,
        #[serde(rename = "HI_LIGHT")]
        HiLight,
        #[serde(rename = "LASER")]
        Laser,
        #[serde(rename = "NATURE")]
        Nature,
        #[serde(rename = "FAUNA")]
        Fauna,
        #[serde(rename = "NO_NOISE")]
        NoNoise,
        #[serde(rename = "ACCIDENT")]
        Accident,
        #[serde(rename = "POPULATION")]
        Population,
        #[serde(rename = "VIP")]
        Vip,
        #[serde(rename = "VIP_PRES")]
        VipPres,
        #[serde(rename = "VIP_VICE")]
        VipVice,
        #[serde(rename = "OIL")]
        Oil,
        #[serde(rename = "GAS")]
        Gas,
        #[serde(rename = "REFINERY")]
        Refinery,
        #[serde(rename = "CHEMICAL")]
        Chemical,
        #[serde(rename = "NUCLEAR")]
        Nuclear,
        #[serde(rename = "TECHNICAL")]
        Technical,
        #[serde(rename = "ATS")]
        Ats,
        #[serde(rename = "PROCEDURE")]
        Procedure,
    }
    pub type CodeAirspaceActivityBaseType1885XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAirspaceActivityTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAirspaceActivityBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirspaceAggregationBaseTypeXType {
        CodeAirspaceAggregationBaseType1886(CodeAirspaceAggregationBaseType1886XType),
        CodeAirspaceAggregationBaseType1887(CodeAirspaceAggregationBaseType1887XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirspaceAggregationBaseType1886XType {
        #[serde(rename = "BASE")]
        Base,
        #[serde(rename = "UNION")]
        Union,
        #[serde(rename = "INTERS")]
        Inters,
        #[serde(rename = "SUBTR")]
        Subtr,
    }
    pub type CodeAirspaceAggregationBaseType1887XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAirspaceAggregationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAirspaceAggregationBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirspaceBaseTypeXType {
        CodeAirspaceBaseType1888(CodeAirspaceBaseType1888XType),
        CodeAirspaceBaseType1889(CodeAirspaceBaseType1889XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirspaceBaseType1888XType {
        #[serde(rename = "NAS")]
        Nas,
        #[serde(rename = "FIR")]
        Fir,
        #[serde(rename = "FIR_P")]
        FirP,
        #[serde(rename = "UIR")]
        Uir,
        #[serde(rename = "UIR_P")]
        UirP,
        #[serde(rename = "CTA")]
        Cta,
        #[serde(rename = "CTA_P")]
        CtaP,
        #[serde(rename = "OCA_P")]
        OcaP,
        #[serde(rename = "OCA")]
        Oca,
        #[serde(rename = "UTA")]
        Uta,
        #[serde(rename = "UTA_P")]
        UtaP,
        #[serde(rename = "TMA")]
        Tma,
        #[serde(rename = "TMA_P")]
        TmaP,
        #[serde(rename = "CTR")]
        Ctr,
        #[serde(rename = "CTR_P")]
        CtrP,
        #[serde(rename = "OTA")]
        Ota,
        #[serde(rename = "SECTOR")]
        Sector,
        #[serde(rename = "SECTOR_C")]
        SectorC,
        #[serde(rename = "TSA")]
        Tsa,
        #[serde(rename = "CBA")]
        Cba,
        #[serde(rename = "RCA")]
        Rca,
        #[serde(rename = "RAS")]
        Ras,
        #[serde(rename = "AWY")]
        Awy,
        #[serde(rename = "MTR")]
        Mtr,
        #[serde(rename = "P")]
        P,
        #[serde(rename = "R")]
        R,
        #[serde(rename = "D")]
        D,
        #[serde(rename = "ADIZ")]
        Adiz,
        #[serde(rename = "NO_FIR")]
        NoFir,
        #[serde(rename = "PART")]
        Part,
        #[serde(rename = "CLASS")]
        Class,
        #[serde(rename = "POLITICAL")]
        Political,
        #[serde(rename = "D_OTHER")]
        DOther,
        #[serde(rename = "TRA")]
        Tra,
        #[serde(rename = "A")]
        A,
        #[serde(rename = "W")]
        W,
        #[serde(rename = "PROTECT")]
        Protect,
        #[serde(rename = "AMA")]
        Ama,
        #[serde(rename = "ASR")]
        Asr,
        #[serde(rename = "ADV")]
        Adv,
        #[serde(rename = "UADV")]
        Uadv,
        #[serde(rename = "ATZ")]
        Atz,
        #[serde(rename = "ATZ_P")]
        AtzP,
        #[serde(rename = "HTZ")]
        Htz,
        #[serde(rename = "NAS_P")]
        NasP,
    }
    pub type CodeAirspaceBaseType1889XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirspaceClassificationBaseTypeXType {
        CodeAirspaceClassificationBaseType1890(CodeAirspaceClassificationBaseType1890XType),
        CodeAirspaceClassificationBaseType1891(CodeAirspaceClassificationBaseType1891XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirspaceClassificationBaseType1890XType {
        #[serde(rename = "A")]
        A,
        #[serde(rename = "B")]
        B,
        #[serde(rename = "C")]
        C,
        #[serde(rename = "D")]
        D,
        #[serde(rename = "E")]
        E,
        #[serde(rename = "F")]
        F,
        #[serde(rename = "G")]
        G,
    }
    pub type CodeAirspaceClassificationBaseType1891XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAirspaceClassificationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAirspaceClassificationBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirspaceDependencyBaseTypeXType {
        CodeAirspaceDependencyBaseType1892(CodeAirspaceDependencyBaseType1892XType),
        CodeAirspaceDependencyBaseType1893(CodeAirspaceDependencyBaseType1893XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirspaceDependencyBaseType1892XType {
        #[serde(rename = "FULL_GEOMETRY")]
        FullGeometry,
        #[serde(rename = "HORZ_PROJECTION")]
        HorzProjection,
    }
    pub type CodeAirspaceDependencyBaseType1893XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAirspaceDependencyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAirspaceDependencyBaseTypeXType,
    }
    pub type CodeAirspaceDesignatorBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAirspaceDesignatorTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAirspaceDesignatorBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirspacePointPositionBaseTypeXType {
        CodeAirspacePointPositionBaseType1894(CodeAirspacePointPositionBaseType1894XType),
        CodeAirspacePointPositionBaseType1895(CodeAirspacePointPositionBaseType1895XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirspacePointPositionBaseType1894XType {
        #[serde(rename = "IN")]
        In,
        #[serde(rename = "OUT")]
        Out,
        #[serde(rename = "BORDER")]
        Border,
    }
    pub type CodeAirspacePointPositionBaseType1895XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAirspacePointPositionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAirspacePointPositionBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirspacePointRoleBaseTypeXType {
        CodeAirspacePointRoleBaseType1896(CodeAirspacePointRoleBaseType1896XType),
        CodeAirspacePointRoleBaseType1897(CodeAirspacePointRoleBaseType1897XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAirspacePointRoleBaseType1896XType {
        #[serde(rename = "ENTRY")]
        Entry,
        #[serde(rename = "EXIT")]
        Exit,
        #[serde(rename = "ENTRY_EXIT")]
        EntryExit,
    }
    pub type CodeAirspacePointRoleBaseType1897XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAirspacePointRoleTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAirspacePointRoleBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAirspaceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAirspaceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAltitudeAdjustmentBaseTypeXType {
        CodeAltitudeAdjustmentBaseType1898(CodeAltitudeAdjustmentBaseType1898XType),
        CodeAltitudeAdjustmentBaseType1899(CodeAltitudeAdjustmentBaseType1899XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAltitudeAdjustmentBaseType1898XType {
        #[serde(rename = "RA")]
        Ra,
        #[serde(rename = "AS")]
        As,
        #[serde(rename = "AT")]
        At,
        #[serde(rename = "AC")]
        Ac,
        #[serde(rename = "SI")]
        Si,
        #[serde(rename = "XL")]
        Xl,
        #[serde(rename = "PR")]
        Pr,
        #[serde(rename = "HAA")]
        Haa,
        #[serde(rename = "MA")]
        Ma,
        #[serde(rename = "PT")]
        Pt,
        #[serde(rename = "DG")]
        Dg,
        #[serde(rename = "GS")]
        Gs,
        #[serde(rename = "CA")]
        Ca,
        #[serde(rename = "MT")]
        Mt,
        #[serde(rename = "MAH")]
        Mah,
        #[serde(rename = "SA")]
        Sa,
        #[serde(rename = "AAO")]
        Aao,
        #[serde(rename = "VA")]
        Va,
    }
    pub type CodeAltitudeAdjustmentBaseType1899XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAltitudeAdjustmentTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAltitudeAdjustmentBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAltitudeUseBaseTypeXType {
        CodeAltitudeUseBaseType1900(CodeAltitudeUseBaseType1900XType),
        CodeAltitudeUseBaseType1901(CodeAltitudeUseBaseType1901XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAltitudeUseBaseType1900XType {
        #[serde(rename = "ABOVE_LOWER")]
        AboveLower,
        #[serde(rename = "BELOW_UPPER")]
        BelowUpper,
        #[serde(rename = "AT_LOWER")]
        AtLower,
        #[serde(rename = "BETWEEN")]
        Between,
        #[serde(rename = "RECOMMENDED")]
        Recommended,
        #[serde(rename = "EXPECT_LOWER")]
        ExpectLower,
        #[serde(rename = "AS_ASSIGNED")]
        AsAssigned,
    }
    pub type CodeAltitudeUseBaseType1901XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAltitudeUseTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAltitudeUseBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeApproachBaseTypeXType {
        CodeApproachBaseType1902(CodeApproachBaseType1902XType),
        CodeApproachBaseType1903(CodeApproachBaseType1903XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeApproachBaseType1902XType {
        #[serde(rename = "ASR")]
        Asr,
        #[serde(rename = "ARA")]
        Ara,
        #[serde(rename = "ARSR")]
        Arsr,
        #[serde(rename = "PAR")]
        Par,
        #[serde(rename = "ILS")]
        Ils,
        #[serde(rename = "ILS_DME")]
        IlsDme,
        #[serde(rename = "ILS_PRM")]
        IlsPrm,
        #[serde(rename = "LDA")]
        Lda,
        #[serde(rename = "LDA_DME")]
        LdaDme,
        #[serde(rename = "LOC")]
        Loc,
        #[serde(rename = "LOC_BC")]
        LocBc,
        #[serde(rename = "LOC_DME")]
        LocDme,
        #[serde(rename = "LOC_DME_BC")]
        LocDmeBc,
        #[serde(rename = "MLS")]
        Mls,
        #[serde(rename = "MLS_DME")]
        MlsDme,
        #[serde(rename = "NDB")]
        Ndb,
        #[serde(rename = "NDB_DME")]
        NdbDme,
        #[serde(rename = "SDF")]
        Sdf,
        #[serde(rename = "TLS")]
        Tls,
        #[serde(rename = "VOR")]
        Vor,
        #[serde(rename = "VOR_DME")]
        VorDme,
        #[serde(rename = "TACAN")]
        Tacan,
        #[serde(rename = "VORTAC")]
        Vortac,
        #[serde(rename = "DME")]
        Dme,
        #[serde(rename = "DME_DME")]
        DmeDme,
        #[serde(rename = "RNP")]
        Rnp,
        #[serde(rename = "GPS")]
        Gps,
        #[serde(rename = "GLONASS")]
        Glonass,
        #[serde(rename = "GALILEO")]
        Galileo,
        #[serde(rename = "RNAV")]
        Rnav,
        #[serde(rename = "IGS")]
        Igs,
    }
    pub type CodeApproachBaseType1903XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeApproachEquipmentAdditionalBaseTypeXType {
        CodeApproachEquipmentAdditionalBaseType1904(
            CodeApproachEquipmentAdditionalBaseType1904XType,
        ),
        CodeApproachEquipmentAdditionalBaseType1905(
            CodeApproachEquipmentAdditionalBaseType1905XType,
        ),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeApproachEquipmentAdditionalBaseType1904XType {
        #[serde(rename = "ADF")]
        Adf,
        #[serde(rename = "DME")]
        Dme,
        #[serde(rename = "RADAR")]
        Radar,
        #[serde(rename = "RADARDME")]
        Radardme,
        #[serde(rename = "VORLOC")]
        Vorloc,
        #[serde(rename = "DUALVORDME")]
        Dualvordme,
        #[serde(rename = "DUALADF")]
        Dualadf,
        #[serde(rename = "ADFMA")]
        Adfma,
        #[serde(rename = "SPECIAL")]
        Special,
        #[serde(rename = "DUALVHF")]
        Dualvhf,
        #[serde(rename = "GPSRNP3")]
        Gpsrnp3,
        #[serde(rename = "ADFILS")]
        Adfils,
        #[serde(rename = "DUALADF_DME")]
        DualadfDme,
        #[serde(rename = "RADAR_RNAV")]
        RadarRnav,
    }
    pub type CodeApproachEquipmentAdditionalBaseType1905XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeApproachEquipmentAdditionalTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeApproachEquipmentAdditionalBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeApproachGuidanceBaseTypeXType {
        CodeApproachGuidanceBaseType1906(CodeApproachGuidanceBaseType1906XType),
        CodeApproachGuidanceBaseType1907(CodeApproachGuidanceBaseType1907XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeApproachGuidanceBaseType1906XType {
        #[serde(rename = "NON_PRECISION")]
        NonPrecision,
        #[serde(rename = "ILS_PRECISION_CAT_I")]
        IlsPrecisionCatI,
        #[serde(rename = "ILS_PRECISION_CAT_II")]
        IlsPrecisionCatIi,
        #[serde(rename = "ILS_PRECISION_CAT_IIIA")]
        IlsPrecisionCatIiia,
        #[serde(rename = "ILS_PRECISION_CAT_IIIB")]
        IlsPrecisionCatIiib,
        #[serde(rename = "ILS_PRECISION_CAT_IIIC")]
        IlsPrecisionCatIiic,
        #[serde(rename = "ILS_PRECISION_CAT_IIID")]
        IlsPrecisionCatIiid,
        #[serde(rename = "MLS_PRECISION")]
        MlsPrecision,
    }
    pub type CodeApproachGuidanceBaseType1907XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeApproachGuidanceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeApproachGuidanceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeApproachLightingBaseTypeXType {
        CodeApproachLightingBaseType1908(CodeApproachLightingBaseType1908XType),
        CodeApproachLightingBaseType1909(CodeApproachLightingBaseType1909XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeApproachLightingBaseType1908XType {
        #[serde(rename = "ALSAF")]
        Alsaf,
        #[serde(rename = "MALS")]
        Mals,
        #[serde(rename = "MALSR")]
        Malsr,
        #[serde(rename = "SALS")]
        Sals,
        #[serde(rename = "SSALS")]
        Ssals,
        #[serde(rename = "SSALR")]
        Ssalr,
        #[serde(rename = "LDIN")]
        Ldin,
        #[serde(rename = "ODALS")]
        Odals,
        #[serde(rename = "AFOVRN")]
        Afovrn,
        #[serde(rename = "MILOVRN")]
        Milovrn,
        #[serde(rename = "CALVERT")]
        Calvert,
    }
    pub type CodeApproachLightingBaseType1909XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeApproachLightingIcaoBaseTypeXType {
        CodeApproachLightingIcaoBaseType1910(CodeApproachLightingIcaoBaseType1910XType),
        CodeApproachLightingIcaoBaseType1911(CodeApproachLightingIcaoBaseType1911XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeApproachLightingIcaoTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeApproachLightingIcaoBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeApproachLightingIcaoBaseType1910XType {
        #[serde(rename = "SIMPLE")]
        Simple,
        #[serde(rename = "CAT1")]
        Cat1,
        #[serde(rename = "CAT23")]
        Cat23,
        #[serde(rename = "CIRCLING")]
        Circling,
        #[serde(rename = "LEADIN")]
        Leadin,
        #[serde(rename = "NONE")]
        None,
    }
    pub type CodeApproachLightingIcaoBaseType1911XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeApproachLightingTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeApproachLightingBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeApproachPrefixBaseTypeXType {
        CodeApproachPrefixBaseType1912(CodeApproachPrefixBaseType1912XType),
        CodeApproachPrefixBaseType1913(CodeApproachPrefixBaseType1913XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeApproachPrefixBaseType1912XType {
        #[serde(rename = "HI")]
        Hi,
        #[serde(rename = "COPTER")]
        Copter,
        #[serde(rename = "CONVERGING")]
        Converging,
    }
    pub type CodeApproachPrefixBaseType1913XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeApproachPrefixTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeApproachPrefixBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeApproachTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeApproachBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeApprovalBaseTypeXType {
        CodeApprovalBaseType1914(CodeApprovalBaseType1914XType),
        CodeApprovalBaseType1915(CodeApprovalBaseType1915XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeApprovalBaseType1914XType {
        #[serde(rename = "APPROVED")]
        Approved,
        #[serde(rename = "DISAPPROVED")]
        Disapproved,
        #[serde(rename = "NOT_AUTHORISED")]
        NotAuthorised,
        #[serde(rename = "RESTRICTED")]
        Restricted,
    }
    pub type CodeApprovalBaseType1915XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeApprovalTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeApprovalBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeApronElementBaseTypeXType {
        CodeApronElementBaseType1916(CodeApronElementBaseType1916XType),
        CodeApronElementBaseType1917(CodeApronElementBaseType1917XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeApronElementBaseType1916XType {
        #[serde(rename = "NORMAL")]
        Normal,
        #[serde(rename = "PARKING")]
        Parking,
        #[serde(rename = "RAMP")]
        Ramp,
        #[serde(rename = "CARGO")]
        Cargo,
        #[serde(rename = "FUEL")]
        Fuel,
        #[serde(rename = "HARDSTAND")]
        Hardstand,
        #[serde(rename = "MAINT")]
        Maint,
        #[serde(rename = "MILITARY")]
        Military,
        #[serde(rename = "LOADING")]
        Loading,
        #[serde(rename = "TAXILANE")]
        Taxilane,
        #[serde(rename = "TURNAROUND")]
        Turnaround,
        #[serde(rename = "TEMPORARY")]
        Temporary,
        #[serde(rename = "STAIRS")]
        Stairs,
    }
    pub type CodeApronElementBaseType1917XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeApronElementTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeApronElementBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeApronSectionBaseTypeXType {
        CodeApronSectionBaseType1918(CodeApronSectionBaseType1918XType),
        CodeApronSectionBaseType1919(CodeApronSectionBaseType1919XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeApronSectionBaseType1918XType {
        #[serde(rename = "EDGE")]
        Edge,
    }
    pub type CodeApronSectionBaseType1919XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeApronSectionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeApronSectionBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeArcDirectionBaseTypeXType {
        CodeArcDirectionBaseType1920(CodeArcDirectionBaseType1920XType),
        CodeArcDirectionBaseType1921(CodeArcDirectionBaseType1921XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeArcDirectionBaseType1920XType {
        #[serde(rename = "CWA")]
        Cwa,
        #[serde(rename = "CCA")]
        Cca,
    }
    pub type CodeArcDirectionBaseType1921XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeArcDirectionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeArcDirectionBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeArrestingGearEnergyAbsorbBaseTypeXType {
        CodeArrestingGearEnergyAbsorbBaseType1922(CodeArrestingGearEnergyAbsorbBaseType1922XType),
        CodeArrestingGearEnergyAbsorbBaseType1923(CodeArrestingGearEnergyAbsorbBaseType1923XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeArrestingGearEnergyAbsorbBaseType1922XType {
        #[serde(rename = "ROTARY_1300")]
        Rotary1300,
        #[serde(rename = "ROTARY_2800")]
        Rotary2800,
        #[serde(rename = "ROTARY_34B_1A")]
        Rotary34B1A,
        #[serde(rename = "ROTARY_34B_1B")]
        Rotary34B1B,
        #[serde(rename = "ROTARY_34B_1C")]
        Rotary34B1C,
        #[serde(rename = "ROTARY_34D_1F")]
        Rotary34D1F,
        #[serde(rename = "ROTARY_44B_2C")]
        Rotary44B2C,
        #[serde(rename = "ROTARY_44B_2D")]
        Rotary44B2D,
        #[serde(rename = "ROTARY_44B_2E")]
        Rotary44B2E,
        #[serde(rename = "ROTARY_44B_2F")]
        Rotary44B2F,
        #[serde(rename = "ROTARY_44B_2H")]
        Rotary44B2H,
        #[serde(rename = "ROTARY_44B_2I")]
        Rotary44B2I,
        #[serde(rename = "ROTARY_44B_2L")]
        Rotary44B2L,
        #[serde(rename = "ROTARY_44B_3A")]
        Rotary44B3A,
        #[serde(rename = "ROTARY_44B_3H")]
        Rotary44B3H,
        #[serde(rename = "ROTARY_44B_3L")]
        Rotary44B3L,
        #[serde(rename = "ROTARY_44B_4C")]
        Rotary44B4C,
        #[serde(rename = "ROTARY_44B_4E")]
        Rotary44B4E,
        #[serde(rename = "ROTARY_44B_4H")]
        Rotary44B4H,
        #[serde(rename = "ROTARY_500S")]
        Rotary500S,
        #[serde(rename = "ROTARY_500S_4")]
        Rotary500S4,
        #[serde(rename = "ROTARY_500S_6")]
        Rotary500S6,
        #[serde(rename = "ROTARY_500S_8")]
        Rotary500S8,
        #[serde(rename = "ROTARYTRANS_500S_8")]
        Rotarytrans500S8,
        #[serde(rename = "ROTARY_AAE_64")]
        RotaryAae64,
        #[serde(rename = "ROTARY_BAK_12A")]
        RotaryBak12A,
        #[serde(rename = "ROTARY_BAK_12B")]
        RotaryBak12B,
        #[serde(rename = "ROTARY_BAK_13")]
        RotaryBak13,
        #[serde(rename = "LINEAR_BAK_6")]
        LinearBak6,
        #[serde(rename = "ROTARY_BAK_9")]
        RotaryBak9,
        #[serde(rename = "DISK_BEFAB_12_3")]
        DiskBefab123,
        #[serde(rename = "DISK_BEFAB_20_4")]
        DiskBefab204,
        #[serde(rename = "DISK_BEFAB_21_2")]
        DiskBefab212,
        #[serde(rename = "DISK_BEFAB_24_4")]
        DiskBefab244,
        #[serde(rename = "DISK_BEFAB_56_2")]
        DiskBefab562,
        #[serde(rename = "DISK_BEFAB_6_3")]
        DiskBefab63,
        #[serde(rename = "DISK_BEFAB_60_2")]
        DiskBefab602,
        #[serde(rename = "DISK_BEFAB_8_3")]
        DiskBefab83,
        #[serde(rename = "CHAIN_CHAG")]
        ChainChag,
        #[serde(rename = "ROTARY_DUAL_BAK_12")]
        RotaryDualBak12,
        #[serde(rename = "ROTARY_E15")]
        RotaryE15,
        #[serde(rename = "ROTARY_E27")]
        RotaryE27,
        #[serde(rename = "ROTARY_E28")]
        RotaryE28,
        #[serde(rename = "CHAIN_E5")]
        ChainE5,
        #[serde(rename = "CHAIN_E5_1")]
        ChainE51,
        #[serde(rename = "CHAIN_E5_2")]
        ChainE52,
        #[serde(rename = "CHAIN_E5_3")]
        ChainE53,
        #[serde(rename = "CHAIN_E6")]
        ChainE6,
        #[serde(rename = "ROTARY_CHAIN_JETSTOP")]
        RotaryChainJetstop,
        #[serde(rename = "MOBILROTARY_M21")]
        MobilrotaryM21,
        #[serde(rename = "MOBILROTARY_MAAS")]
        MobilrotaryMaas,
        #[serde(rename = "MOBILROTARY_MAG_I")]
        MobilrotaryMagI,
        #[serde(rename = "MOBILROTARY_MAG_II")]
        MobilrotaryMagIi,
        #[serde(rename = "MOBILROTARY_MAG_III")]
        MobilrotaryMagIii,
        #[serde(rename = "MOBILROTARY_MAG_IV")]
        MobilrotaryMagIv,
        #[serde(rename = "MOBILROTARY_MAG_IX")]
        MobilrotaryMagIx,
        #[serde(rename = "MOBILROTARY_MAG_VI")]
        MobilrotaryMagVi,
        #[serde(rename = "MOBILROTARY_MAG_VII")]
        MobilrotaryMagVii,
        #[serde(rename = "MOBILROTARY_MAG_VIII")]
        MobilrotaryMagViii,
        #[serde(rename = "MOBILROTARY_MAG_X")]
        MobilrotaryMagX,
        #[serde(rename = "TEXTILE_MB_100")]
        TextileMb100,
        #[serde(rename = "TEXTILE_MB_60")]
        TextileMb60,
        #[serde(rename = "MOBILROTARY_HYDRAULIC_WATER")]
        MobilrotaryHydraulicWater,
        #[serde(rename = "ROTARY_PUAG_MK_21")]
        RotaryPuagMk21,
        #[serde(rename = "DISK_RAF_MK_12A")]
        DiskRafMk12A,
        #[serde(rename = "DISK_RAF_MK_6")]
        DiskRafMk6,
        #[serde(rename = "RAF_PORTABLE_AGEAR")]
        RafPortableAgear,
        #[serde(rename = "DISK_RAF_TYPEA_BEFAB_6_3")]
        DiskRafTypeaBefab63,
        #[serde(rename = "DISK_RAF_TYPEB_BEFAB_12_3")]
        DiskRafTypebBefab123,
        #[serde(rename = "ROTARY_RHAG_MK_1")]
        RotaryRhagMk1,
        #[serde(rename = "ROTARY_HYDRAULIC_WATER")]
        RotaryHydraulicWater,
        #[serde(rename = "BARRIER_DISK_SAFELAND")]
        BarrierDiskSafeland,
        #[serde(rename = "LINEAR_SPRAG_MK_1")]
        LinearSpragMk1,
    }
    pub type CodeArrestingGearEnergyAbsorbBaseType1923XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeArrestingGearEnergyAbsorbTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeArrestingGearEnergyAbsorbBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeArrestingGearEngageDeviceBaseTypeXType {
        CodeArrestingGearEngageDeviceBaseType1924(CodeArrestingGearEngageDeviceBaseType1924XType),
        CodeArrestingGearEngageDeviceBaseType1925(CodeArrestingGearEngageDeviceBaseType1925XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeArrestingGearEngageDeviceBaseType1924XType {
        #[serde(rename = "61QSII")]
        _61Qsii,
        #[serde(rename = "62NI")]
        _62Ni,
        #[serde(rename = "63PI")]
        _63Pi,
        #[serde(rename = "NET_A30")]
        NetA30,
        #[serde(rename = "NET_A40")]
        NetA40,
        #[serde(rename = "BAK_11_STRUT")]
        Bak11Strut,
        #[serde(rename = "BAK_12")]
        Bak12,
        #[serde(rename = "BAK_14_HOOK")]
        Bak14Hook,
        #[serde(rename = "BAK_15_STANCHION_NET")]
        Bak15StanchionNet,
        #[serde(rename = "BAK_15_HOOK")]
        Bak15Hook,
        #[serde(rename = "EMAS")]
        Emas,
        #[serde(rename = "HOOK_CABLE")]
        HookCable,
        #[serde(rename = "HP_NET")]
        HpNet,
        #[serde(rename = "J_BAR")]
        JBar,
        #[serde(rename = "JET_BARRIER")]
        JetBarrier,
        #[serde(rename = "MA_1_NET")]
        Ma1Net,
        #[serde(rename = "MA_1A_HOOK_CABLE")]
        Ma1AHookCable,
        #[serde(rename = "NET")]
        Net,
        #[serde(rename = "HOOK_H")]
        HookH,
    }
    pub type CodeArrestingGearEngageDeviceBaseType1925XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeArrestingGearEngageDeviceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeArrestingGearEngageDeviceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAtcReportingBaseType1926XType {
        #[serde(rename = "COMPULSORY")]
        Compulsory,
        #[serde(rename = "ON_REQUEST")]
        OnRequest,
        #[serde(rename = "NO_REPORT")]
        NoReport,
    }
    pub type CodeAtcReportingBaseType1927XType = String;
    pub type CodeAuralMorseBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAuralMorseTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAuralMorseBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAuthorityBaseTypeXType {
        CodeAuthorityBaseType1928(CodeAuthorityBaseType1928XType),
        CodeAuthorityBaseType1929(CodeAuthorityBaseType1929XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAuthorityBaseType1928XType {
        #[serde(rename = "OWN")]
        Own,
        #[serde(rename = "DLGT")]
        Dlgt,
        #[serde(rename = "AIS")]
        Ais,
    }
    pub type CodeAuthorityBaseType1929XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAuthorityRoleBaseTypeXType {
        CodeAuthorityRoleBaseType1930(CodeAuthorityRoleBaseType1930XType),
        CodeAuthorityRoleBaseType1931(CodeAuthorityRoleBaseType1931XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAuthorityRoleBaseType1930XType {
        #[serde(rename = "OWN")]
        Own,
        #[serde(rename = "OPERATE")]
        Operate,
        #[serde(rename = "SUPERVISE")]
        Supervise,
    }
    pub type CodeAuthorityRoleBaseType1931XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAuthorityRoleTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAuthorityRoleBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAuthorityTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAuthorityBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAviationStandardsBaseTypeXType {
        CodeAviationStandardsBaseType1932(CodeAviationStandardsBaseType1932XType),
        CodeAviationStandardsBaseType1933(CodeAviationStandardsBaseType1933XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeAviationStandardsBaseType1932XType {
        #[serde(rename = "ICAO")]
        Icao,
        #[serde(rename = "IATA")]
        Iata,
        #[serde(rename = "NATO")]
        Nato,
        #[serde(rename = "FAA")]
        Faa,
    }
    pub type CodeAviationStandardsBaseType1933XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeAviationStandardsTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeAviationStandardsBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeBearingBaseTypeXType {
        CodeBearingBaseType1934(CodeBearingBaseType1934XType),
        CodeBearingBaseType1935(CodeBearingBaseType1935XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeBearingBaseType1934XType {
        #[serde(rename = "TRUE")]
        True,
        #[serde(rename = "MAG")]
        Mag,
        #[serde(rename = "RDL")]
        Rdl,
        #[serde(rename = "TRK")]
        Trk,
        #[serde(rename = "HDG")]
        Hdg,
    }
    pub type CodeBearingBaseType1935XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeBearingTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeBearingBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeBuoyBaseTypeXType {
        CodeBuoyBaseType1936(CodeBuoyBaseType1936XType),
        CodeBuoyBaseType1937(CodeBuoyBaseType1937XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeBuoyBaseType1936XType {
        #[serde(rename = "BLACK_RED_FL2")]
        BlackRedFl2,
        #[serde(rename = "GREEN")]
        Green,
        #[serde(rename = "GREEN_RED_GFL")]
        GreenRedGfl,
        #[serde(rename = "Q3_VQ3")]
        Q3Vq3,
        #[serde(rename = "Q6_VQ6")]
        Q6Vq6,
        #[serde(rename = "Q9_VQ9")]
        Q9Vq9,
        #[serde(rename = "Q_VQ")]
        QVq,
        #[serde(rename = "RED")]
        Red,
        #[serde(rename = "RED_GREEN_RFL")]
        RedGreenRfl,
        #[serde(rename = "RED_WHITE")]
        RedWhite,
        #[serde(rename = "WHITE")]
        White,
        #[serde(rename = "YELLOW")]
        Yellow,
    }
    pub type CodeBuoyBaseType1937XType = String;
    pub type CodeBuoyDesignatorBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeBuoyDesignatorTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeBuoyDesignatorBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeBuoyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeBuoyBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeCardinalDirectionBaseTypeXType {
        CodeCardinalDirectionBaseType1938(CodeCardinalDirectionBaseType1938XType),
        CodeCardinalDirectionBaseType1939(CodeCardinalDirectionBaseType1939XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeCardinalDirectionBaseType1938XType {
        #[serde(rename = "N")]
        N,
        #[serde(rename = "NE")]
        Ne,
        #[serde(rename = "E")]
        E,
        #[serde(rename = "SE")]
        Se,
        #[serde(rename = "S")]
        S,
        #[serde(rename = "SW")]
        Sw,
        #[serde(rename = "W")]
        W,
        #[serde(rename = "NW")]
        Nw,
        #[serde(rename = "NNE")]
        Nne,
        #[serde(rename = "ENE")]
        Ene,
        #[serde(rename = "ESE")]
        Ese,
        #[serde(rename = "SSE")]
        Sse,
        #[serde(rename = "SSW")]
        Ssw,
        #[serde(rename = "WSW")]
        Wsw,
        #[serde(rename = "WNW")]
        Wnw,
        #[serde(rename = "NNW")]
        Nnw,
    }
    pub type CodeCardinalDirectionBaseType1939XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeCardinalDirectionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeCardinalDirectionBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeCheckpointCategoryBaseTypeXType {
        CodeCheckpointCategoryBaseType1940(CodeCheckpointCategoryBaseType1940XType),
        CodeCheckpointCategoryBaseType1941(CodeCheckpointCategoryBaseType1941XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeCheckpointCategoryBaseType1940XType {
        #[serde(rename = "A")]
        A,
        #[serde(rename = "G")]
        G,
    }
    pub type CodeCheckpointCategoryBaseType1941XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeCheckpointCategoryTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeCheckpointCategoryBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeColourBaseTypeXType {
        CodeColourBaseType1942(CodeColourBaseType1942XType),
        CodeColourBaseType1943(CodeColourBaseType1943XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeColourBaseType1942XType {
        #[serde(rename = "YELLOW")]
        Yellow,
        #[serde(rename = "RED")]
        Red,
        #[serde(rename = "WHITE")]
        White,
        #[serde(rename = "BLUE")]
        Blue,
        #[serde(rename = "GREEN")]
        Green,
        #[serde(rename = "PURPLE")]
        Purple,
        #[serde(rename = "ORANGE")]
        Orange,
        #[serde(rename = "AMBER")]
        Amber,
        #[serde(rename = "BLACK")]
        Black,
        #[serde(rename = "BROWN")]
        Brown,
        #[serde(rename = "GREY")]
        Grey,
        #[serde(rename = "LIGHT_GREY")]
        LightGrey,
        #[serde(rename = "MAGENTA")]
        Magenta,
        #[serde(rename = "PINK")]
        Pink,
        #[serde(rename = "VIOLET")]
        Violet,
    }
    pub type CodeColourBaseType1943XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeColourTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeColourBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeCommunicationChannelBaseTypeXType {
        String(super::xs::StringXType),
        CodeCommunicationChannelBaseType1944(CodeCommunicationChannelBaseType1944XType),
    }
    pub type CodeCommunicationChannelBaseType1944XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeCommunicationChannelTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeCommunicationChannelBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeCommunicationDirectionBaseTypeXType {
        CodeCommunicationDirectionBaseType1945(CodeCommunicationDirectionBaseType1945XType),
        CodeCommunicationDirectionBaseType1946(CodeCommunicationDirectionBaseType1946XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeCommunicationDirectionBaseType1945XType {
        #[serde(rename = "UPLINK")]
        Uplink,
        #[serde(rename = "DOWNLINK")]
        Downlink,
        #[serde(rename = "BIDIRECTIONAL")]
        Bidirectional,
        #[serde(rename = "UPCAST")]
        Upcast,
        #[serde(rename = "DOWNCAST")]
        Downcast,
    }
    pub type CodeCommunicationDirectionBaseType1946XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeCommunicationDirectionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeCommunicationDirectionBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeCommunicationModeBaseTypeXType {
        CodeCommunicationModeBaseType1947(CodeCommunicationModeBaseType1947XType),
        CodeCommunicationModeBaseType1948(CodeCommunicationModeBaseType1948XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeCommunicationModeBaseType1947XType {
        #[serde(rename = "HF")]
        Hf,
        #[serde(rename = "VHF")]
        Vhf,
        #[serde(rename = "VDL1")]
        Vdl1,
        #[serde(rename = "VDL2")]
        Vdl2,
        #[serde(rename = "VDL4")]
        Vdl4,
        #[serde(rename = "AMSS")]
        Amss,
        #[serde(rename = "ADS_B")]
        AdsB,
        #[serde(rename = "ADS_B_VDL")]
        AdsBVdl,
        #[serde(rename = "HFDL")]
        Hfdl,
        #[serde(rename = "VHF_833")]
        Vhf833,
        #[serde(rename = "UHF")]
        Uhf,
    }
    pub type CodeCommunicationModeBaseType1948XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeCommunicationModeTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeCommunicationModeBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeComparisonBaseTypeXType {
        CodeComparisonBaseType1949(CodeComparisonBaseType1949XType),
        CodeComparisonBaseType1950(CodeComparisonBaseType1950XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeComparisonBaseType1949XType {
        #[serde(rename = "LESS")]
        Less,
        #[serde(rename = "LESS_OR_EQUAL")]
        LessOrEqual,
        #[serde(rename = "EQUAL")]
        Equal,
        #[serde(rename = "GREATER_OR_EQUAL")]
        GreaterOrEqual,
        #[serde(rename = "GREATER")]
        Greater,
    }
    pub type CodeComparisonBaseType1950XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeComparisonTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeComparisonBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeContaminationBaseTypeXType {
        CodeContaminationBaseType1951(CodeContaminationBaseType1951XType),
        CodeContaminationBaseType1952(CodeContaminationBaseType1952XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeContaminationBaseType1951XType {
        #[serde(rename = "NONE")]
        None,
        #[serde(rename = "DAMP")]
        Damp,
        #[serde(rename = "WATER")]
        Water,
        #[serde(rename = "FROST")]
        Frost,
        #[serde(rename = "DRY_SNOW")]
        DrySnow,
        #[serde(rename = "WET_SNOW")]
        WetSnow,
        #[serde(rename = "SLUSH")]
        Slush,
        #[serde(rename = "ICE")]
        Ice,
        #[serde(rename = "COMPACT_SNOW")]
        CompactSnow,
        #[serde(rename = "RUT")]
        Rut,
        #[serde(rename = "ASH")]
        Ash,
        #[serde(rename = "SAND")]
        Sand,
        #[serde(rename = "OIL")]
        Oil,
        #[serde(rename = "RUBBER")]
        Rubber,
        #[serde(rename = "GRAS")]
        Gras,
    }
    pub type CodeContaminationBaseType1952XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeContaminationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeContaminationBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeCourseBaseTypeXType {
        CodeCourseBaseType1953(CodeCourseBaseType1953XType),
        CodeCourseBaseType1954(CodeCourseBaseType1954XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeCourseBaseType1953XType {
        #[serde(rename = "TRUE_TRACK")]
        TrueTrack,
        #[serde(rename = "MAG_TRACK")]
        MagTrack,
        #[serde(rename = "TRUE_BRG")]
        TrueBrg,
        #[serde(rename = "MAG_BRG")]
        MagBrg,
        #[serde(rename = "HDG")]
        Hdg,
        #[serde(rename = "RDL")]
        Rdl,
    }
    pub type CodeCourseBaseType1954XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeCourseQualityIlsBaseTypeXType {
        CodeCourseQualityIlsBaseType1955(CodeCourseQualityIlsBaseType1955XType),
        CodeCourseQualityIlsBaseType1956(CodeCourseQualityIlsBaseType1956XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeCourseQualityIlsTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeCourseQualityIlsBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeCourseQualityIlsBaseType1955XType {
        #[serde(rename = "A")]
        A,
        #[serde(rename = "B")]
        B,
        #[serde(rename = "C")]
        C,
        #[serde(rename = "D")]
        D,
        #[serde(rename = "E")]
        E,
        #[serde(rename = "T")]
        T,
    }
    pub type CodeCourseQualityIlsBaseType1956XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeCourseTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeCourseBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDmeBaseTypeXType {
        CodeDmeBaseType1973(CodeDmeBaseType1973XType),
        CodeDmeBaseType1974(CodeDmeBaseType1974XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDmeChannelBaseTypeXType {
        CodeDmeChannelBaseType1975(CodeDmeChannelBaseType1975XType),
        CodeDmeChannelBaseType1976(CodeDmeChannelBaseType1976XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeDmeChannelTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeDmeChannelBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeDmeTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeDmeBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDayBaseTypeXType {
        CodeDayBaseType1957(CodeDayBaseType1957XType),
        CodeDayBaseType1958(CodeDayBaseType1958XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDayBaseType1957XType {
        #[serde(rename = "MON")]
        Mon,
        #[serde(rename = "TUE")]
        Tue,
        #[serde(rename = "WED")]
        Wed,
        #[serde(rename = "THU")]
        Thu,
        #[serde(rename = "FRI")]
        Fri,
        #[serde(rename = "SAT")]
        Sat,
        #[serde(rename = "SUN")]
        Sun,
        #[serde(rename = "WORK_DAY")]
        WorkDay,
        #[serde(rename = "BEF_WORK_DAY")]
        BefWorkDay,
        #[serde(rename = "AFT_WORK_DAY")]
        AftWorkDay,
        #[serde(rename = "HOL")]
        Hol,
        #[serde(rename = "BEF_HOL")]
        BefHol,
        #[serde(rename = "AFT_HOL")]
        AftHol,
        #[serde(rename = "ANY")]
        Any,
        #[serde(rename = "BUSY_FRI")]
        BusyFri,
    }
    pub type CodeDayBaseType1958XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeDayTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeDayBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDeclaredDistanceBaseTypeXType {
        CodeDeclaredDistanceBaseType1959(CodeDeclaredDistanceBaseType1959XType),
        CodeDeclaredDistanceBaseType1960(CodeDeclaredDistanceBaseType1960XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDeclaredDistanceBaseType1959XType {
        #[serde(rename = "LDA")]
        Lda,
        #[serde(rename = "TORA")]
        Tora,
        #[serde(rename = "TODA")]
        Toda,
        #[serde(rename = "ASDA")]
        Asda,
        #[serde(rename = "DTHR")]
        Dthr,
        #[serde(rename = "TODAH")]
        Todah,
        #[serde(rename = "RTODAH")]
        Rtodah,
        #[serde(rename = "LDAH")]
        Ldah,
    }
    pub type CodeDeclaredDistanceBaseType1960XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeDeclaredDistanceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeDeclaredDistanceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDesignStandardBaseTypeXType {
        CodeDesignStandardBaseType1963(CodeDesignStandardBaseType1963XType),
        CodeDesignStandardBaseType1964(CodeDesignStandardBaseType1964XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDesignStandardBaseType1963XType {
        #[serde(rename = "PANS_OPS")]
        PansOps,
        #[serde(rename = "TERPS")]
        Terps,
        #[serde(rename = "CANADA_TERPS")]
        CanadaTerps,
        #[serde(rename = "NATO")]
        Nato,
    }
    pub type CodeDesignStandardBaseType1964XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeDesignStandardTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeDesignStandardBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDesignatedPointBaseTypeXType {
        CodeDesignatedPointBaseType1961(CodeDesignatedPointBaseType1961XType),
        CodeDesignatedPointBaseType1962(CodeDesignatedPointBaseType1962XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDesignatedPointBaseType1961XType {
        #[serde(rename = "ICAO")]
        Icao,
        #[serde(rename = "COORD")]
        Coord,
        #[serde(rename = "CNF")]
        Cnf,
        #[serde(rename = "DESIGNED")]
        Designed,
        #[serde(rename = "MTR")]
        Mtr,
        #[serde(rename = "TERMINAL")]
        Terminal,
        #[serde(rename = "BRG_DIST")]
        BrgDist,
    }
    pub type CodeDesignatedPointBaseType1962XType = String;
    pub type CodeDesignatedPointDesignatorBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeDesignatedPointDesignatorTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeDesignatedPointDesignatorBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeDesignatedPointTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeDesignatedPointBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDirectionBaseTypeXType {
        CodeDirectionBaseType1965(CodeDirectionBaseType1965XType),
        CodeDirectionBaseType1966(CodeDirectionBaseType1966XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDirectionBaseType1965XType {
        #[serde(rename = "FORWARD")]
        Forward,
        #[serde(rename = "BACKWARD")]
        Backward,
        #[serde(rename = "BOTH")]
        Both,
    }
    pub type CodeDirectionBaseType1966XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDirectionReferenceBaseTypeXType {
        CodeDirectionReferenceBaseType1967(CodeDirectionReferenceBaseType1967XType),
        CodeDirectionReferenceBaseType1968(CodeDirectionReferenceBaseType1968XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDirectionReferenceBaseType1967XType {
        #[serde(rename = "TO")]
        To,
        #[serde(rename = "FROM")]
        From,
    }
    pub type CodeDirectionReferenceBaseType1968XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeDirectionReferenceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeDirectionReferenceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDirectionTurnBaseTypeXType {
        CodeDirectionTurnBaseType1969(CodeDirectionTurnBaseType1969XType),
        CodeDirectionTurnBaseType1970(CodeDirectionTurnBaseType1970XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDirectionTurnBaseType1969XType {
        #[serde(rename = "LEFT")]
        Left,
        #[serde(rename = "RIGHT")]
        Right,
        #[serde(rename = "EITHER")]
        Either,
    }
    pub type CodeDirectionTurnBaseType1970XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeDirectionTurnTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeDirectionTurnBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeDirectionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeDirectionBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDistanceIndicationBaseTypeXType {
        CodeDistanceIndicationBaseType1971(CodeDistanceIndicationBaseType1971XType),
        CodeDistanceIndicationBaseType1972(CodeDistanceIndicationBaseType1972XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDistanceIndicationBaseType1971XType {
        #[serde(rename = "DME")]
        Dme,
        #[serde(rename = "GEODETIC")]
        Geodetic,
    }
    pub type CodeDistanceIndicationBaseType1972XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeDistanceIndicationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeDistanceIndicationBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDistanceVerticalUomTypeXType {
        UomDistanceVerticalType1856(UomDistanceVerticalType1856XType),
        UomDistanceVerticalType1857(UomDistanceVerticalType1857XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDmeBaseType1973XType {
        #[serde(rename = "NARROW")]
        Narrow,
        #[serde(rename = "PRECISION")]
        Precision,
        #[serde(rename = "WIDE")]
        Wide,
    }
    pub type CodeDmeBaseType1974XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeDmeChannelBaseType1975XType {
        #[serde(rename = "1X")]
        _1X,
        #[serde(rename = "1Y")]
        _1Y,
        #[serde(rename = "2X")]
        _2X,
        #[serde(rename = "2Y")]
        _2Y,
        #[serde(rename = "3X")]
        _3X,
        #[serde(rename = "3Y")]
        _3Y,
        #[serde(rename = "4X")]
        _4X,
        #[serde(rename = "4Y")]
        _4Y,
        #[serde(rename = "5X")]
        _5X,
        #[serde(rename = "5Y")]
        _5Y,
        #[serde(rename = "6X")]
        _6X,
        #[serde(rename = "6Y")]
        _6Y,
        #[serde(rename = "7X")]
        _7X,
        #[serde(rename = "7Y")]
        _7Y,
        #[serde(rename = "8X")]
        _8X,
        #[serde(rename = "8Y")]
        _8Y,
        #[serde(rename = "9X")]
        _9X,
        #[serde(rename = "9Y")]
        _9Y,
        #[serde(rename = "10X")]
        _10X,
        #[serde(rename = "10Y")]
        _10Y,
        #[serde(rename = "11X")]
        _11X,
        #[serde(rename = "11Y")]
        _11Y,
        #[serde(rename = "12X")]
        _12X,
        #[serde(rename = "12Y")]
        _12Y,
        #[serde(rename = "13X")]
        _13X,
        #[serde(rename = "13Y")]
        _13Y,
        #[serde(rename = "14X")]
        _14X,
        #[serde(rename = "14Y")]
        _14Y,
        #[serde(rename = "15X")]
        _15X,
        #[serde(rename = "15Y")]
        _15Y,
        #[serde(rename = "16X")]
        _16X,
        #[serde(rename = "16Y")]
        _16Y,
        #[serde(rename = "17X")]
        _17X,
        #[serde(rename = "17Y")]
        _17Y,
        #[serde(rename = "17Z")]
        _17Z,
        #[serde(rename = "18X")]
        _18X,
        #[serde(rename = "18W")]
        _18W,
        #[serde(rename = "18Y")]
        _18Y,
        #[serde(rename = "18Z")]
        _18Z,
        #[serde(rename = "19X")]
        _19X,
        #[serde(rename = "19Y")]
        _19Y,
        #[serde(rename = "19Z")]
        _19Z,
        #[serde(rename = "20X")]
        _20X,
        #[serde(rename = "20W")]
        _20W,
        #[serde(rename = "20Y")]
        _20Y,
        #[serde(rename = "20Z")]
        _20Z,
        #[serde(rename = "21X")]
        _21X,
        #[serde(rename = "21Y")]
        _21Y,
        #[serde(rename = "21Z")]
        _21Z,
        #[serde(rename = "22X")]
        _22X,
        #[serde(rename = "22W")]
        _22W,
        #[serde(rename = "22Y")]
        _22Y,
        #[serde(rename = "22Z")]
        _22Z,
        #[serde(rename = "23X")]
        _23X,
        #[serde(rename = "23Y")]
        _23Y,
        #[serde(rename = "23Z")]
        _23Z,
        #[serde(rename = "24X")]
        _24X,
        #[serde(rename = "24W")]
        _24W,
        #[serde(rename = "24Y")]
        _24Y,
        #[serde(rename = "24Z")]
        _24Z,
        #[serde(rename = "25X")]
        _25X,
        #[serde(rename = "25Y")]
        _25Y,
        #[serde(rename = "25Z")]
        _25Z,
        #[serde(rename = "26X")]
        _26X,
        #[serde(rename = "26W")]
        _26W,
        #[serde(rename = "26Y")]
        _26Y,
        #[serde(rename = "26Z")]
        _26Z,
        #[serde(rename = "27X")]
        _27X,
        #[serde(rename = "27Y")]
        _27Y,
        #[serde(rename = "27Z")]
        _27Z,
        #[serde(rename = "28X")]
        _28X,
        #[serde(rename = "28W")]
        _28W,
        #[serde(rename = "28Y")]
        _28Y,
        #[serde(rename = "28Z")]
        _28Z,
        #[serde(rename = "29X")]
        _29X,
        #[serde(rename = "29Y")]
        _29Y,
        #[serde(rename = "29Z")]
        _29Z,
        #[serde(rename = "30X")]
        _30X,
        #[serde(rename = "30W")]
        _30W,
        #[serde(rename = "30Y")]
        _30Y,
        #[serde(rename = "30Z")]
        _30Z,
        #[serde(rename = "31X")]
        _31X,
        #[serde(rename = "31Y")]
        _31Y,
        #[serde(rename = "31Z")]
        _31Z,
        #[serde(rename = "32X")]
        _32X,
        #[serde(rename = "32W")]
        _32W,
        #[serde(rename = "32Y")]
        _32Y,
        #[serde(rename = "32Z")]
        _32Z,
        #[serde(rename = "33X")]
        _33X,
        #[serde(rename = "33Y")]
        _33Y,
        #[serde(rename = "33Z")]
        _33Z,
        #[serde(rename = "34X")]
        _34X,
        #[serde(rename = "34W")]
        _34W,
        #[serde(rename = "34Y")]
        _34Y,
        #[serde(rename = "34Z")]
        _34Z,
        #[serde(rename = "35X")]
        _35X,
        #[serde(rename = "35Y")]
        _35Y,
        #[serde(rename = "35Z")]
        _35Z,
        #[serde(rename = "36X")]
        _36X,
        #[serde(rename = "36W")]
        _36W,
        #[serde(rename = "36Y")]
        _36Y,
        #[serde(rename = "36Z")]
        _36Z,
        #[serde(rename = "37X")]
        _37X,
        #[serde(rename = "37Y")]
        _37Y,
        #[serde(rename = "37Z")]
        _37Z,
        #[serde(rename = "38X")]
        _38X,
        #[serde(rename = "38W")]
        _38W,
        #[serde(rename = "38Y")]
        _38Y,
        #[serde(rename = "38Z")]
        _38Z,
        #[serde(rename = "39X")]
        _39X,
        #[serde(rename = "39Y")]
        _39Y,
        #[serde(rename = "39Z")]
        _39Z,
        #[serde(rename = "40X")]
        _40X,
        #[serde(rename = "40W")]
        _40W,
        #[serde(rename = "40Y")]
        _40Y,
        #[serde(rename = "40Z")]
        _40Z,
        #[serde(rename = "41X")]
        _41X,
        #[serde(rename = "41Y")]
        _41Y,
        #[serde(rename = "41Z")]
        _41Z,
        #[serde(rename = "42X")]
        _42X,
        #[serde(rename = "42W")]
        _42W,
        #[serde(rename = "42Y")]
        _42Y,
        #[serde(rename = "42Z")]
        _42Z,
        #[serde(rename = "43X")]
        _43X,
        #[serde(rename = "43Y")]
        _43Y,
        #[serde(rename = "43Z")]
        _43Z,
        #[serde(rename = "44X")]
        _44X,
        #[serde(rename = "44W")]
        _44W,
        #[serde(rename = "44Y")]
        _44Y,
        #[serde(rename = "44Z")]
        _44Z,
        #[serde(rename = "45X")]
        _45X,
        #[serde(rename = "45Y")]
        _45Y,
        #[serde(rename = "45Z")]
        _45Z,
        #[serde(rename = "46X")]
        _46X,
        #[serde(rename = "46W")]
        _46W,
        #[serde(rename = "46Y")]
        _46Y,
        #[serde(rename = "46Z")]
        _46Z,
        #[serde(rename = "47X")]
        _47X,
        #[serde(rename = "47Y")]
        _47Y,
        #[serde(rename = "47Z")]
        _47Z,
        #[serde(rename = "48X")]
        _48X,
        #[serde(rename = "48W")]
        _48W,
        #[serde(rename = "48Y")]
        _48Y,
        #[serde(rename = "48Z")]
        _48Z,
        #[serde(rename = "49X")]
        _49X,
        #[serde(rename = "49Y")]
        _49Y,
        #[serde(rename = "49Z")]
        _49Z,
        #[serde(rename = "50X")]
        _50X,
        #[serde(rename = "50W")]
        _50W,
        #[serde(rename = "50Y")]
        _50Y,
        #[serde(rename = "50Z")]
        _50Z,
        #[serde(rename = "51X")]
        _51X,
        #[serde(rename = "51Y")]
        _51Y,
        #[serde(rename = "51Z")]
        _51Z,
        #[serde(rename = "52X")]
        _52X,
        #[serde(rename = "52W")]
        _52W,
        #[serde(rename = "52Y")]
        _52Y,
        #[serde(rename = "52Z")]
        _52Z,
        #[serde(rename = "53X")]
        _53X,
        #[serde(rename = "53Y")]
        _53Y,
        #[serde(rename = "53Z")]
        _53Z,
        #[serde(rename = "54X")]
        _54X,
        #[serde(rename = "54W")]
        _54W,
        #[serde(rename = "54Y")]
        _54Y,
        #[serde(rename = "54Z")]
        _54Z,
        #[serde(rename = "55X")]
        _55X,
        #[serde(rename = "55Y")]
        _55Y,
        #[serde(rename = "55Z")]
        _55Z,
        #[serde(rename = "56X")]
        _56X,
        #[serde(rename = "56W")]
        _56W,
        #[serde(rename = "56Y")]
        _56Y,
        #[serde(rename = "56Z")]
        _56Z,
        #[serde(rename = "57X")]
        _57X,
        #[serde(rename = "57Y")]
        _57Y,
        #[serde(rename = "58X")]
        _58X,
        #[serde(rename = "58Y")]
        _58Y,
        #[serde(rename = "59X")]
        _59X,
        #[serde(rename = "59Y")]
        _59Y,
        #[serde(rename = "60X")]
        _60X,
        #[serde(rename = "60Y")]
        _60Y,
        #[serde(rename = "61X")]
        _61X,
        #[serde(rename = "61Y")]
        _61Y,
        #[serde(rename = "62X")]
        _62X,
        #[serde(rename = "62Y")]
        _62Y,
        #[serde(rename = "63X")]
        _63X,
        #[serde(rename = "63Y")]
        _63Y,
        #[serde(rename = "64X")]
        _64X,
        #[serde(rename = "64Y")]
        _64Y,
        #[serde(rename = "65X")]
        _65X,
        #[serde(rename = "65Y")]
        _65Y,
        #[serde(rename = "66X")]
        _66X,
        #[serde(rename = "66Y")]
        _66Y,
        #[serde(rename = "67X")]
        _67X,
        #[serde(rename = "67Y")]
        _67Y,
        #[serde(rename = "68X")]
        _68X,
        #[serde(rename = "68Y")]
        _68Y,
        #[serde(rename = "69X")]
        _69X,
        #[serde(rename = "69Y")]
        _69Y,
        #[serde(rename = "70X")]
        _70X,
        #[serde(rename = "70Y")]
        _70Y,
        #[serde(rename = "71X")]
        _71X,
        #[serde(rename = "71Y")]
        _71Y,
        #[serde(rename = "72X")]
        _72X,
        #[serde(rename = "72Y")]
        _72Y,
        #[serde(rename = "73X")]
        _73X,
        #[serde(rename = "73Y")]
        _73Y,
        #[serde(rename = "74X")]
        _74X,
        #[serde(rename = "74Y")]
        _74Y,
        #[serde(rename = "75X")]
        _75X,
        #[serde(rename = "75Y")]
        _75Y,
        #[serde(rename = "76X")]
        _76X,
        #[serde(rename = "76Y")]
        _76Y,
        #[serde(rename = "77X")]
        _77X,
        #[serde(rename = "77Y")]
        _77Y,
        #[serde(rename = "78X")]
        _78X,
        #[serde(rename = "78Y")]
        _78Y,
        #[serde(rename = "79X")]
        _79X,
        #[serde(rename = "79Y")]
        _79Y,
        #[serde(rename = "80X")]
        _80X,
        #[serde(rename = "80Y")]
        _80Y,
        #[serde(rename = "80Z")]
        _80Z,
        #[serde(rename = "81X")]
        _81X,
        #[serde(rename = "81Y")]
        _81Y,
        #[serde(rename = "81Z")]
        _81Z,
        #[serde(rename = "82X")]
        _82X,
        #[serde(rename = "82Y")]
        _82Y,
        #[serde(rename = "82Z")]
        _82Z,
        #[serde(rename = "83X")]
        _83X,
        #[serde(rename = "83Y")]
        _83Y,
        #[serde(rename = "83Z")]
        _83Z,
        #[serde(rename = "84X")]
        _84X,
        #[serde(rename = "84Y")]
        _84Y,
        #[serde(rename = "84Z")]
        _84Z,
        #[serde(rename = "85X")]
        _85X,
        #[serde(rename = "85Y")]
        _85Y,
        #[serde(rename = "85Z")]
        _85Z,
        #[serde(rename = "86X")]
        _86X,
        #[serde(rename = "86Y")]
        _86Y,
        #[serde(rename = "86Z")]
        _86Z,
        #[serde(rename = "87X")]
        _87X,
        #[serde(rename = "87Y")]
        _87Y,
        #[serde(rename = "87Z")]
        _87Z,
        #[serde(rename = "88X")]
        _88X,
        #[serde(rename = "88Y")]
        _88Y,
        #[serde(rename = "88Z")]
        _88Z,
        #[serde(rename = "89X")]
        _89X,
        #[serde(rename = "89Y")]
        _89Y,
        #[serde(rename = "89Z")]
        _89Z,
        #[serde(rename = "90X")]
        _90X,
        #[serde(rename = "90Y")]
        _90Y,
        #[serde(rename = "90Z")]
        _90Z,
        #[serde(rename = "91X")]
        _91X,
        #[serde(rename = "91Y")]
        _91Y,
        #[serde(rename = "91Z")]
        _91Z,
        #[serde(rename = "92X")]
        _92X,
        #[serde(rename = "92Y")]
        _92Y,
        #[serde(rename = "92Z")]
        _92Z,
        #[serde(rename = "93X")]
        _93X,
        #[serde(rename = "93Y")]
        _93Y,
        #[serde(rename = "93Z")]
        _93Z,
        #[serde(rename = "94X")]
        _94X,
        #[serde(rename = "94Y")]
        _94Y,
        #[serde(rename = "94Z")]
        _94Z,
        #[serde(rename = "95X")]
        _95X,
        #[serde(rename = "95Y")]
        _95Y,
        #[serde(rename = "95Z")]
        _95Z,
        #[serde(rename = "96X")]
        _96X,
        #[serde(rename = "96Y")]
        _96Y,
        #[serde(rename = "96Z")]
        _96Z,
        #[serde(rename = "97X")]
        _97X,
        #[serde(rename = "97Y")]
        _97Y,
        #[serde(rename = "97Z")]
        _97Z,
        #[serde(rename = "98X")]
        _98X,
        #[serde(rename = "98Y")]
        _98Y,
        #[serde(rename = "98Z")]
        _98Z,
        #[serde(rename = "99X")]
        _99X,
        #[serde(rename = "99Y")]
        _99Y,
        #[serde(rename = "99Z")]
        _99Z,
        #[serde(rename = "100X")]
        _100X,
        #[serde(rename = "100Y")]
        _100Y,
        #[serde(rename = "100Z")]
        _100Z,
        #[serde(rename = "101X")]
        _101X,
        #[serde(rename = "101Y")]
        _101Y,
        #[serde(rename = "101Z")]
        _101Z,
        #[serde(rename = "102X")]
        _102X,
        #[serde(rename = "102Y")]
        _102Y,
        #[serde(rename = "102Z")]
        _102Z,
        #[serde(rename = "103X")]
        _103X,
        #[serde(rename = "103Y")]
        _103Y,
        #[serde(rename = "103Z")]
        _103Z,
        #[serde(rename = "104X")]
        _104X,
        #[serde(rename = "104Y")]
        _104Y,
        #[serde(rename = "104Z")]
        _104Z,
        #[serde(rename = "105X")]
        _105X,
        #[serde(rename = "105Y")]
        _105Y,
        #[serde(rename = "105Z")]
        _105Z,
        #[serde(rename = "106X")]
        _106X,
        #[serde(rename = "106Y")]
        _106Y,
        #[serde(rename = "106Z")]
        _106Z,
        #[serde(rename = "107X")]
        _107X,
        #[serde(rename = "107Y")]
        _107Y,
        #[serde(rename = "107Z")]
        _107Z,
        #[serde(rename = "108X")]
        _108X,
        #[serde(rename = "108Y")]
        _108Y,
        #[serde(rename = "108Z")]
        _108Z,
        #[serde(rename = "109X")]
        _109X,
        #[serde(rename = "109Y")]
        _109Y,
        #[serde(rename = "109Z")]
        _109Z,
        #[serde(rename = "110X")]
        _110X,
        #[serde(rename = "110Y")]
        _110Y,
        #[serde(rename = "110Z")]
        _110Z,
        #[serde(rename = "111X")]
        _111X,
        #[serde(rename = "111Y")]
        _111Y,
        #[serde(rename = "111Z")]
        _111Z,
        #[serde(rename = "112X")]
        _112X,
        #[serde(rename = "112Y")]
        _112Y,
        #[serde(rename = "112Z")]
        _112Z,
        #[serde(rename = "113X")]
        _113X,
        #[serde(rename = "113Y")]
        _113Y,
        #[serde(rename = "113Z")]
        _113Z,
        #[serde(rename = "114X")]
        _114X,
        #[serde(rename = "114Y")]
        _114Y,
        #[serde(rename = "114Z")]
        _114Z,
        #[serde(rename = "115X")]
        _115X,
        #[serde(rename = "115Y")]
        _115Y,
        #[serde(rename = "115Z")]
        _115Z,
        #[serde(rename = "116X")]
        _116X,
        #[serde(rename = "116Y")]
        _116Y,
        #[serde(rename = "116Z")]
        _116Z,
        #[serde(rename = "117X")]
        _117X,
        #[serde(rename = "117Y")]
        _117Y,
        #[serde(rename = "117Z")]
        _117Z,
        #[serde(rename = "118X")]
        _118X,
        #[serde(rename = "118Y")]
        _118Y,
        #[serde(rename = "118Z")]
        _118Z,
        #[serde(rename = "119X")]
        _119X,
        #[serde(rename = "119Y")]
        _119Y,
        #[serde(rename = "119Z")]
        _119Z,
        #[serde(rename = "120X")]
        _120X,
        #[serde(rename = "120Y")]
        _120Y,
        #[serde(rename = "121X")]
        _121X,
        #[serde(rename = "121Y")]
        _121Y,
        #[serde(rename = "122X")]
        _122X,
        #[serde(rename = "122Y")]
        _122Y,
        #[serde(rename = "123X")]
        _123X,
        #[serde(rename = "123Y")]
        _123Y,
        #[serde(rename = "124X")]
        _124X,
        #[serde(rename = "124Y")]
        _124Y,
        #[serde(rename = "125X")]
        _125X,
        #[serde(rename = "125Y")]
        _125Y,
        #[serde(rename = "126X")]
        _126X,
        #[serde(rename = "126Y")]
        _126Y,
    }
    pub type CodeDmeChannelBaseType1976XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeEmissionBandBaseTypeXType {
        CodeEmissionBandBaseType1977(CodeEmissionBandBaseType1977XType),
        CodeEmissionBandBaseType1978(CodeEmissionBandBaseType1978XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeEmissionBandBaseType1977XType {
        #[serde(rename = "U")]
        U,
        #[serde(rename = "H")]
        H,
        #[serde(rename = "M")]
        M,
    }
    pub type CodeEmissionBandBaseType1978XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeEmissionBandTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeEmissionBandBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeEquipmentAntiCollisionBaseTypeXType {
        CodeEquipmentAntiCollisionBaseType1979(CodeEquipmentAntiCollisionBaseType1979XType),
        CodeEquipmentAntiCollisionBaseType1980(CodeEquipmentAntiCollisionBaseType1980XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeEquipmentAntiCollisionBaseType1979XType {
        #[serde(rename = "ACAS_I")]
        AcasI,
        #[serde(rename = "ACAS_II")]
        AcasIi,
        #[serde(rename = "GPWS")]
        Gpws,
    }
    pub type CodeEquipmentAntiCollisionBaseType1980XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeEquipmentAntiCollisionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeEquipmentAntiCollisionBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeEquipmentUnavailableBaseTypeXType {
        CodeEquipmentUnavailableBaseType1981(CodeEquipmentUnavailableBaseType1981XType),
        CodeEquipmentUnavailableBaseType1982(CodeEquipmentUnavailableBaseType1982XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeEquipmentUnavailableBaseType1981XType {
        #[serde(rename = "STANDARD")]
        Standard,
        #[serde(rename = "NONSTANDARD")]
        Nonstandard,
    }
    pub type CodeEquipmentUnavailableBaseType1982XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeEquipmentUnavailableTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeEquipmentUnavailableBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFacilityRankingBaseTypeXType {
        CodeFacilityRankingBaseType1983(CodeFacilityRankingBaseType1983XType),
        CodeFacilityRankingBaseType1984(CodeFacilityRankingBaseType1984XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFacilityRankingBaseType1983XType {
        #[serde(rename = "PRIMARY")]
        Primary,
        #[serde(rename = "SECONDARY")]
        Secondary,
        #[serde(rename = "ALTERNATE")]
        Alternate,
        #[serde(rename = "EMERG")]
        Emerg,
        #[serde(rename = "GUARD")]
        Guard,
    }
    pub type CodeFacilityRankingBaseType1984XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeFacilityRankingTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeFacilityRankingBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFinalGuidanceBaseTypeXType {
        CodeFinalGuidanceBaseType1985(CodeFinalGuidanceBaseType1985XType),
        CodeFinalGuidanceBaseType1986(CodeFinalGuidanceBaseType1986XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFinalGuidanceBaseType1985XType {
        #[serde(rename = "LPV")]
        Lpv,
        #[serde(rename = "LNAV_VNAV")]
        LnavVnav,
        #[serde(rename = "LNAV")]
        Lnav,
        #[serde(rename = "GLS")]
        Gls,
        #[serde(rename = "ASR")]
        Asr,
        #[serde(rename = "ARA")]
        Ara,
        #[serde(rename = "ARSR")]
        Arsr,
        #[serde(rename = "PAR")]
        Par,
        #[serde(rename = "ILS")]
        Ils,
        #[serde(rename = "ILS_DME")]
        IlsDme,
        #[serde(rename = "ILS_PRM")]
        IlsPrm,
        #[serde(rename = "LDA")]
        Lda,
        #[serde(rename = "LDA_DME")]
        LdaDme,
        #[serde(rename = "LOC")]
        Loc,
        #[serde(rename = "LOC_BC")]
        LocBc,
        #[serde(rename = "LOC_DME")]
        LocDme,
        #[serde(rename = "LOC_DME_BC")]
        LocDmeBc,
        #[serde(rename = "MLS")]
        Mls,
        #[serde(rename = "MLS_DME")]
        MlsDme,
        #[serde(rename = "NDB")]
        Ndb,
        #[serde(rename = "NDB_DME")]
        NdbDme,
        #[serde(rename = "SDF")]
        Sdf,
        #[serde(rename = "TLS")]
        Tls,
        #[serde(rename = "VOR")]
        Vor,
        #[serde(rename = "VOR_DME")]
        VorDme,
        #[serde(rename = "TACAN")]
        Tacan,
        #[serde(rename = "VORTAC")]
        Vortac,
        #[serde(rename = "DME")]
        Dme,
        #[serde(rename = "LP")]
        Lp,
    }
    pub type CodeFinalGuidanceBaseType1986XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeFinalGuidanceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeFinalGuidanceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFireFightingBaseTypeXType {
        CodeFireFightingBaseType1987(CodeFireFightingBaseType1987XType),
        CodeFireFightingBaseType1988(CodeFireFightingBaseType1988XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFireFightingBaseType1987XType {
        #[serde(rename = "H1")]
        H1,
        #[serde(rename = "H2")]
        H2,
        #[serde(rename = "H3")]
        H3,
        #[serde(rename = "A1")]
        A1,
        #[serde(rename = "A2")]
        A2,
        #[serde(rename = "A3")]
        A3,
        #[serde(rename = "A4")]
        A4,
        #[serde(rename = "A5")]
        A5,
        #[serde(rename = "A6")]
        A6,
        #[serde(rename = "A7")]
        A7,
        #[serde(rename = "A8")]
        A8,
        #[serde(rename = "A9")]
        A9,
        #[serde(rename = "A10")]
        A10,
    }
    pub type CodeFireFightingBaseType1988XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeFireFightingTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeFireFightingBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFlightBaseTypeXType {
        CodeFlightBaseType1989(CodeFlightBaseType1989XType),
        CodeFlightBaseType1990(CodeFlightBaseType1990XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFlightBaseType1989XType {
        #[serde(rename = "OAT")]
        Oat,
        #[serde(rename = "GAT")]
        Gat,
        #[serde(rename = "ALL")]
        All,
    }
    pub type CodeFlightBaseType1990XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFlightDestinationBaseTypeXType {
        CodeFlightDestinationBaseType1991(CodeFlightDestinationBaseType1991XType),
        CodeFlightDestinationBaseType1992(CodeFlightDestinationBaseType1992XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFlightDestinationBaseType1991XType {
        #[serde(rename = "ARR")]
        Arr,
        #[serde(rename = "DEP")]
        Dep,
        #[serde(rename = "OVERFLY")]
        Overfly,
        #[serde(rename = "ALL")]
        All,
    }
    pub type CodeFlightDestinationBaseType1992XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeFlightDestinationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeFlightDestinationBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFlightOriginBaseTypeXType {
        CodeFlightOriginBaseType1993(CodeFlightOriginBaseType1993XType),
        CodeFlightOriginBaseType1994(CodeFlightOriginBaseType1994XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFlightOriginBaseType1993XType {
        #[serde(rename = "NTL")]
        Ntl,
        #[serde(rename = "INTL")]
        Intl,
        #[serde(rename = "ALL")]
        All,
        #[serde(rename = "HOME_BASED")]
        HomeBased,
    }
    pub type CodeFlightOriginBaseType1994XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeFlightOriginTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeFlightOriginBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFlightPurposeBaseTypeXType {
        CodeFlightPurposeBaseType1995(CodeFlightPurposeBaseType1995XType),
        CodeFlightPurposeBaseType1996(CodeFlightPurposeBaseType1996XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFlightPurposeBaseType1995XType {
        #[serde(rename = "SCHEDULED")]
        Scheduled,
        #[serde(rename = "NON_SCHEDULED")]
        NonScheduled,
        #[serde(rename = "PRIVATE")]
        Private,
        #[serde(rename = "AIR_TRAINING")]
        AirTraining,
        #[serde(rename = "AIR_WORK")]
        AirWork,
        #[serde(rename = "ALL")]
        All,
        #[serde(rename = "PARTICIPANT")]
        Participant,
    }
    pub type CodeFlightPurposeBaseType1996XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeFlightPurposeTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeFlightPurposeBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFlightRestrictionBaseTypeXType {
        CodeFlightRestrictionBaseType1997(CodeFlightRestrictionBaseType1997XType),
        CodeFlightRestrictionBaseType1998(CodeFlightRestrictionBaseType1998XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFlightRestrictionBaseType1997XType {
        #[serde(rename = "FORBID")]
        Forbid,
        #[serde(rename = "MANDATORY")]
        Mandatory,
        #[serde(rename = "CLSD")]
        Clsd,
        #[serde(rename = "ALLOWED")]
        Allowed,
    }
    pub type CodeFlightRestrictionBaseType1998XType = String;
    pub type CodeFlightRestrictionDesignatorBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeFlightRestrictionDesignatorTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeFlightRestrictionDesignatorBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeFlightRestrictionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeFlightRestrictionBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFlightRuleBaseTypeXType {
        CodeFlightRuleBaseType1999(CodeFlightRuleBaseType1999XType),
        CodeFlightRuleBaseType2000(CodeFlightRuleBaseType2000XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFlightRuleBaseType1999XType {
        #[serde(rename = "IFR")]
        Ifr,
        #[serde(rename = "VFR")]
        Vfr,
        #[serde(rename = "ALL")]
        All,
    }
    pub type CodeFlightRuleBaseType2000XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeFlightRuleTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeFlightRuleBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFlightStatusBaseTypeXType {
        CodeFlightStatusBaseType2001(CodeFlightStatusBaseType2001XType),
        CodeFlightStatusBaseType2002(CodeFlightStatusBaseType2002XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFlightStatusBaseType2001XType {
        #[serde(rename = "HEAD")]
        Head,
        #[serde(rename = "STATE")]
        State,
        #[serde(rename = "HUM")]
        Hum,
        #[serde(rename = "HOSP")]
        Hosp,
        #[serde(rename = "SAR")]
        Sar,
        #[serde(rename = "ALL")]
        All,
        #[serde(rename = "EMERGENCY")]
        Emergency,
    }
    pub type CodeFlightStatusBaseType2002XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeFlightStatusTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeFlightStatusBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeFlightTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeFlightBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFlowConditionOperationBaseTypeXType {
        CodeFlowConditionOperationBaseType2003(CodeFlowConditionOperationBaseType2003XType),
        CodeFlowConditionOperationBaseType2004(CodeFlowConditionOperationBaseType2004XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFlowConditionOperationBaseType2003XType {
        #[serde(rename = "AND")]
        And,
        #[serde(rename = "ANDNOT")]
        Andnot,
        #[serde(rename = "OR")]
        Or,
        #[serde(rename = "SEQ")]
        Seq,
        #[serde(rename = "NONE")]
        None,
    }
    pub type CodeFlowConditionOperationBaseType2004XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeFlowConditionOperationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeFlowConditionOperationBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFreeFlightBaseTypeXType {
        CodeFreeFlightBaseType2005(CodeFreeFlightBaseType2005XType),
        CodeFreeFlightBaseType2006(CodeFreeFlightBaseType2006XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFreeFlightBaseType2005XType {
        #[serde(rename = "PITCH")]
        Pitch,
        #[serde(rename = "CATCH")]
        Catch,
    }
    pub type CodeFreeFlightBaseType2006XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeFreeFlightTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeFreeFlightBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFrictionDeviceBaseTypeXType {
        CodeFrictionDeviceBaseType2007(CodeFrictionDeviceBaseType2007XType),
        CodeFrictionDeviceBaseType2008(CodeFrictionDeviceBaseType2008XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFrictionDeviceBaseType2007XType {
        #[serde(rename = "BRD")]
        Brd,
        #[serde(rename = "GRT")]
        Grt,
        #[serde(rename = "MUM")]
        Mum,
        #[serde(rename = "RFT")]
        Rft,
        #[serde(rename = "SFH")]
        Sfh,
        #[serde(rename = "SFL")]
        Sfl,
        #[serde(rename = "SKH")]
        Skh,
        #[serde(rename = "SKL")]
        Skl,
        #[serde(rename = "TAP")]
        Tap,
    }
    pub type CodeFrictionDeviceBaseType2008XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeFrictionDeviceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeFrictionDeviceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFrictionEstimateBaseTypeXType {
        CodeFrictionEstimateBaseType2009(CodeFrictionEstimateBaseType2009XType),
        CodeFrictionEstimateBaseType2010(CodeFrictionEstimateBaseType2010XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFrictionEstimateBaseType2009XType {
        #[serde(rename = "GOOD")]
        Good,
        #[serde(rename = "MEDIUM_GOOD")]
        MediumGood,
        #[serde(rename = "MEDIUM")]
        Medium,
        #[serde(rename = "MEDIUM_POOR")]
        MediumPoor,
        #[serde(rename = "POOR")]
        Poor,
        #[serde(rename = "UNRELIABLE")]
        Unreliable,
    }
    pub type CodeFrictionEstimateBaseType2010XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeFrictionEstimateTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeFrictionEstimateBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFuelBaseTypeXType {
        CodeFuelBaseType2011(CodeFuelBaseType2011XType),
        CodeFuelBaseType2012(CodeFuelBaseType2012XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeFuelBaseType2011XType {
        #[serde(rename = "AVGAS")]
        Avgas,
        #[serde(rename = "AVGAS_LL")]
        AvgasLl,
        #[serde(rename = "OCT73")]
        Oct73,
        #[serde(rename = "OCT80")]
        Oct80,
        #[serde(rename = "OCT82UL")]
        Oct82Ul,
        #[serde(rename = "OCT80_87")]
        Oct8087,
        #[serde(rename = "OCT91_98")]
        Oct9198,
        #[serde(rename = "OCT100_130")]
        Oct100130,
        #[serde(rename = "OCT108_135")]
        Oct108135,
        #[serde(rename = "OCT115_145")]
        Oct115145,
        #[serde(rename = "MOGAS")]
        Mogas,
        #[serde(rename = "JET")]
        Jet,
        #[serde(rename = "A")]
        A,
        #[serde(rename = "A1")]
        A1,
        #[serde(rename = "A1_PLUS")]
        A1Plus,
        #[serde(rename = "B")]
        B,
        #[serde(rename = "JP1")]
        Jp1,
        #[serde(rename = "JP2")]
        Jp2,
        #[serde(rename = "JP3")]
        Jp3,
        #[serde(rename = "JP4")]
        Jp4,
        #[serde(rename = "JP5")]
        Jp5,
        #[serde(rename = "JP6")]
        Jp6,
        #[serde(rename = "JPTS")]
        Jpts,
        #[serde(rename = "JP7")]
        Jp7,
        #[serde(rename = "JP8")]
        Jp8,
        #[serde(rename = "JP8_HIGHER")]
        Jp8Higher,
        #[serde(rename = "JP9")]
        Jp9,
        #[serde(rename = "JP10")]
        Jp10,
        #[serde(rename = "F18")]
        F18,
        #[serde(rename = "F34")]
        F34,
        #[serde(rename = "F35")]
        F35,
        #[serde(rename = "F40")]
        F40,
        #[serde(rename = "F44")]
        F44,
        #[serde(rename = "TR0")]
        Tr0,
        #[serde(rename = "TR4")]
        Tr4,
        #[serde(rename = "TS1")]
        Ts1,
        #[serde(rename = "RT")]
        Rt,
        #[serde(rename = "ALL")]
        All,
    }
    pub type CodeFuelBaseType2012XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeFuelTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeFuelBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeGeoBorderBaseTypeXType {
        CodeGeoBorderBaseType2013(CodeGeoBorderBaseType2013XType),
        CodeGeoBorderBaseType2014(CodeGeoBorderBaseType2014XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeGeoBorderBaseType2013XType {
        #[serde(rename = "STATE")]
        State,
        #[serde(rename = "WATER")]
        Water,
        #[serde(rename = "COAST")]
        Coast,
        #[serde(rename = "RIVER")]
        River,
        #[serde(rename = "BANK")]
        Bank,
    }
    pub type CodeGeoBorderBaseType2014XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeGeoBorderTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeGeoBorderBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeGradeSeparationBaseTypeXType {
        CodeGradeSeparationBaseType2015(CodeGradeSeparationBaseType2015XType),
        CodeGradeSeparationBaseType2016(CodeGradeSeparationBaseType2016XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeGradeSeparationBaseType2015XType {
        #[serde(rename = "UNDERPASS")]
        Underpass,
        #[serde(rename = "OVERPASS")]
        Overpass,
    }
    pub type CodeGradeSeparationBaseType2016XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeGradeSeparationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeGradeSeparationBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeGroundLightingBaseTypeXType {
        CodeGroundLightingBaseType2017(CodeGroundLightingBaseType2017XType),
        CodeGroundLightingBaseType2018(CodeGroundLightingBaseType2018XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeGroundLightingBaseType2017XType {
        #[serde(rename = "BCN")]
        Bcn,
        #[serde(rename = "IBN")]
        Ibn,
        #[serde(rename = "HEL_BCN")]
        HelBcn,
        #[serde(rename = "ABN")]
        Abn,
        #[serde(rename = "MAR_BCN")]
        MarBcn,
        #[serde(rename = "RSP_BCN")]
        RspBcn,
        #[serde(rename = "TWR_BCN")]
        TwrBcn,
        #[serde(rename = "HAZ_BCN")]
        HazBcn,
    }
    pub type CodeGroundLightingBaseType2018XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeGroundLightingTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeGroundLightingBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeGuidanceLineBaseTypeXType {
        CodeGuidanceLineBaseType2019(CodeGuidanceLineBaseType2019XType),
        CodeGuidanceLineBaseType2020(CodeGuidanceLineBaseType2020XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeGuidanceLineBaseType2019XType {
        #[serde(rename = "RWY")]
        Rwy,
        #[serde(rename = "TWY")]
        Twy,
        #[serde(rename = "APRON")]
        Apron,
        #[serde(rename = "GATE_TLANE")]
        GateTlane,
        #[serde(rename = "LI_TLANE")]
        LiTlane,
        #[serde(rename = "LO_TLANE")]
        LoTlane,
        #[serde(rename = "AIR_TLANE")]
        AirTlane,
    }
    pub type CodeGuidanceLineBaseType2020XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeGuidanceLineTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeGuidanceLineBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeHeightReferenceBaseTypeXType {
        CodeHeightReferenceBaseType2021(CodeHeightReferenceBaseType2021XType),
        CodeHeightReferenceBaseType2022(CodeHeightReferenceBaseType2022XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeHeightReferenceBaseType2021XType {
        #[serde(rename = "HAT")]
        Hat,
        #[serde(rename = "HAA")]
        Haa,
        #[serde(rename = "HAL")]
        Hal,
        #[serde(rename = "HAS")]
        Has,
    }
    pub type CodeHeightReferenceBaseType2022XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeHeightReferenceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeHeightReferenceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeHelicopterPerformanceBaseTypeXType {
        CodeHelicopterPerformanceBaseType2023(CodeHelicopterPerformanceBaseType2023XType),
        CodeHelicopterPerformanceBaseType2024(CodeHelicopterPerformanceBaseType2024XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeHelicopterPerformanceBaseType2023XType {
        #[serde(rename = "1")]
        _1,
        #[serde(rename = "2")]
        _2,
        #[serde(rename = "3")]
        _3,
    }
    pub type CodeHelicopterPerformanceBaseType2024XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeHelicopterPerformanceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeHelicopterPerformanceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeHoldingCategoryBaseTypeXType {
        CodeHoldingCategoryBaseType2025(CodeHoldingCategoryBaseType2025XType),
        CodeHoldingCategoryBaseType2026(CodeHoldingCategoryBaseType2026XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeHoldingCategoryBaseType2025XType {
        #[serde(rename = "NON_PRECISION")]
        NonPrecision,
        #[serde(rename = "CAT_I")]
        CatI,
        #[serde(rename = "CAT_II_III")]
        CatIiIii,
    }
    pub type CodeHoldingCategoryBaseType2026XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeHoldingCategoryTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeHoldingCategoryBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeHoldingUsageBaseTypeXType {
        CodeHoldingUsageBaseType2027(CodeHoldingUsageBaseType2027XType),
        CodeHoldingUsageBaseType2028(CodeHoldingUsageBaseType2028XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeHoldingUsageBaseType2027XType {
        #[serde(rename = "ENR")]
        Enr,
        #[serde(rename = "TER")]
        Ter,
    }
    pub type CodeHoldingUsageBaseType2028XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeHoldingUsageTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeHoldingUsageBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeHoldingUseBaseTypeXType {
        CodeHoldingUseBaseType2029(CodeHoldingUseBaseType2029XType),
        CodeHoldingUseBaseType2030(CodeHoldingUseBaseType2030XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeHoldingUseBaseType2029XType {
        #[serde(rename = "PT")]
        Pt,
        #[serde(rename = "ARRIVAL")]
        Arrival,
        #[serde(rename = "MISSED_APPROACH")]
        MissedApproach,
        #[serde(rename = "CLIMB")]
        Climb,
        #[serde(rename = "ATC")]
        Atc,
    }
    pub type CodeHoldingUseBaseType2030XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeHoldingUseTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeHoldingUseBaseTypeXType,
    }
    pub type CodeIataBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeIataTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeIataBaseTypeXType,
    }
    pub type CodeIcaoBaseTypeXType = String;
    pub type CodeIcaoCountryBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeIcaoCountryTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeIcaoCountryBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeIcaoTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeIcaoBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeIlsBackCourseBaseTypeXType {
        CodeIlsBackCourseBaseType2031(CodeIlsBackCourseBaseType2031XType),
        CodeIlsBackCourseBaseType2032(CodeIlsBackCourseBaseType2032XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeIlsBackCourseTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeIlsBackCourseBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeIlsBackCourseBaseType2031XType {
        #[serde(rename = "YES")]
        Yes,
        #[serde(rename = "NO")]
        No,
        #[serde(rename = "RSTR")]
        Rstr,
    }
    pub type CodeIlsBackCourseBaseType2032XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeIntegrityLevelIlsBaseTypeXType {
        CodeIntegrityLevelIlsBaseType2033(CodeIntegrityLevelIlsBaseType2033XType),
        CodeIntegrityLevelIlsBaseType2034(CodeIntegrityLevelIlsBaseType2034XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeIntegrityLevelIlsTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeIntegrityLevelIlsBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeIntegrityLevelIlsBaseType2033XType {
        #[serde(rename = "1")]
        _1,
        #[serde(rename = "2")]
        _2,
        #[serde(rename = "3")]
        _3,
        #[serde(rename = "4")]
        _4,
    }
    pub type CodeIntegrityLevelIlsBaseType2034XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeIntensityStandByBaseTypeXType {
        CodeIntensityStandByBaseType2035(CodeIntensityStandByBaseType2035XType),
        CodeIntensityStandByBaseType2036(CodeIntensityStandByBaseType2036XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeIntensityStandByBaseType2035XType {
        #[serde(rename = "OFF")]
        Off,
        #[serde(rename = "LOW")]
        Low,
    }
    pub type CodeIntensityStandByBaseType2036XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeIntensityStandByTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeIntensityStandByBaseTypeXType,
    }
    pub type CodeLanguageBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeLanguageTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeLanguageBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLevelBaseTypeXType {
        CodeLevelBaseType2037(CodeLevelBaseType2037XType),
        CodeLevelBaseType2038(CodeLevelBaseType2038XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLevelBaseType2037XType {
        #[serde(rename = "UPPER")]
        Upper,
        #[serde(rename = "LOWER")]
        Lower,
        #[serde(rename = "BOTH")]
        Both,
    }
    pub type CodeLevelBaseType2038XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLevelSeriesBaseTypeXType {
        CodeLevelSeriesBaseType2039(CodeLevelSeriesBaseType2039XType),
        CodeLevelSeriesBaseType2040(CodeLevelSeriesBaseType2040XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLevelSeriesBaseType2039XType {
        #[serde(rename = "ODD")]
        Odd,
        #[serde(rename = "EVEN")]
        Even,
        #[serde(rename = "ODD_HALF")]
        OddHalf,
        #[serde(rename = "EVEN_HALF")]
        EvenHalf,
    }
    pub type CodeLevelSeriesBaseType2040XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeLevelSeriesTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeLevelSeriesBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLevelTableDesignatorBaseTypeXType {
        CodeLevelTableDesignatorBaseType2041(CodeLevelTableDesignatorBaseType2041XType),
        CodeLevelTableDesignatorBaseType2042(CodeLevelTableDesignatorBaseType2042XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLevelTableDesignatorBaseType2041XType {
        #[serde(rename = "IFR")]
        Ifr,
        #[serde(rename = "IFR_METRES")]
        IfrMetres,
        #[serde(rename = "VFR")]
        Vfr,
        #[serde(rename = "VFR_METRES")]
        VfrMetres,
        #[serde(rename = "IFR_RVSM")]
        IfrRvsm,
        #[serde(rename = "IFR_METRES_RVSM")]
        IfrMetresRvsm,
        #[serde(rename = "VFR_RVSM")]
        VfrRvsm,
        #[serde(rename = "VFR_METRES_RVSM")]
        VfrMetresRvsm,
    }
    pub type CodeLevelTableDesignatorBaseType2042XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeLevelTableDesignatorTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeLevelTableDesignatorBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeLevelTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeLevelBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLightHoldingPositionBaseTypeXType {
        CodeLightHoldingPositionBaseType2043(CodeLightHoldingPositionBaseType2043XType),
        CodeLightHoldingPositionBaseType2044(CodeLightHoldingPositionBaseType2044XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLightHoldingPositionBaseType2043XType {
        #[serde(rename = "STOP_BAR")]
        StopBar,
        #[serde(rename = "SIGN")]
        Sign,
    }
    pub type CodeLightHoldingPositionBaseType2044XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeLightHoldingPositionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeLightHoldingPositionBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLightIntensityBaseTypeXType {
        CodeLightIntensityBaseType2047(CodeLightIntensityBaseType2047XType),
        CodeLightIntensityBaseType2048(CodeLightIntensityBaseType2048XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLightIntensityBaseType2047XType {
        #[serde(rename = "LIL")]
        Lil,
        #[serde(rename = "LIM")]
        Lim,
        #[serde(rename = "LIH")]
        Lih,
        #[serde(rename = "LIL_LIH")]
        LilLih,
        #[serde(rename = "PREDETERMINED")]
        Predetermined,
    }
    pub type CodeLightIntensityBaseType2048XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeLightIntensityTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeLightIntensityBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLightSourceBaseTypeXType {
        CodeLightSourceBaseType2049(CodeLightSourceBaseType2049XType),
        CodeLightSourceBaseType2050(CodeLightSourceBaseType2050XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLightSourceBaseType2049XType {
        #[serde(rename = "FLOOD")]
        Flood,
        #[serde(rename = "STROBE")]
        Strobe,
    }
    pub type CodeLightSourceBaseType2050XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeLightSourceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeLightSourceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLightingJarBaseTypeXType {
        CodeLightingJarBaseType2045(CodeLightingJarBaseType2045XType),
        CodeLightingJarBaseType2046(CodeLightingJarBaseType2046XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeLightingJarTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeLightingJarBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLightingJarBaseType2045XType {
        #[serde(rename = "FALS")]
        Fals,
        #[serde(rename = "IALS")]
        Ials,
        #[serde(rename = "BALS")]
        Bals,
        #[serde(rename = "NALS")]
        Nals,
    }
    pub type CodeLightingJarBaseType2046XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLoadingBridgeBaseTypeXType {
        CodeLoadingBridgeBaseType2051(CodeLoadingBridgeBaseType2051XType),
        CodeLoadingBridgeBaseType2052(CodeLoadingBridgeBaseType2052XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLoadingBridgeBaseType2051XType {
        #[serde(rename = "ARM")]
        Arm,
        #[serde(rename = "MOVABLE_ARM")]
        MovableArm,
        #[serde(rename = "PORTABLE_RAMP")]
        PortableRamp,
        #[serde(rename = "PORTABLE_STAIRS")]
        PortableStairs,
    }
    pub type CodeLoadingBridgeBaseType2052XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeLoadingBridgeTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeLoadingBridgeBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLocationQualifierBaseTypeXType {
        CodeLocationQualifierBaseType2053(CodeLocationQualifierBaseType2053XType),
        CodeLocationQualifierBaseType2054(CodeLocationQualifierBaseType2054XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLocationQualifierBaseType2053XType {
        #[serde(rename = "DEP")]
        Dep,
        #[serde(rename = "XNG")]
        Xng,
        #[serde(rename = "ARR")]
        Arr,
        #[serde(rename = "ACT")]
        Act,
        #[serde(rename = "AVBL")]
        Avbl,
    }
    pub type CodeLocationQualifierBaseType2054XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeLocationQualifierTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeLocationQualifierBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLogicalOperatorBaseTypeXType {
        CodeLogicalOperatorBaseType2055(CodeLogicalOperatorBaseType2055XType),
        CodeLogicalOperatorBaseType2056(CodeLogicalOperatorBaseType2056XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeLogicalOperatorBaseType2055XType {
        #[serde(rename = "AND")]
        And,
        #[serde(rename = "OR")]
        Or,
        #[serde(rename = "NOT")]
        Not,
        #[serde(rename = "NONE")]
        None,
    }
    pub type CodeLogicalOperatorBaseType2056XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeLogicalOperatorTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeLogicalOperatorBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMlsAzimuthBaseTypeXType {
        CodeMlsAzimuthBaseType2081(CodeMlsAzimuthBaseType2081XType),
        CodeMlsAzimuthBaseType2082(CodeMlsAzimuthBaseType2082XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeMlsAzimuthTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeMlsAzimuthBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMlsChannelBaseTypeXType {
        CodeMlsChannelBaseType2083(CodeMlsChannelBaseType2083XType),
        CodeMlsChannelBaseType2084(CodeMlsChannelBaseType2084XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeMlsChannelTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeMlsChannelBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMarkerBeaconSignalBaseTypeXType {
        CodeMarkerBeaconSignalBaseType2057(CodeMarkerBeaconSignalBaseType2057XType),
        CodeMarkerBeaconSignalBaseType2058(CodeMarkerBeaconSignalBaseType2058XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMarkerBeaconSignalBaseType2057XType {
        #[serde(rename = "FAN")]
        Fan,
        #[serde(rename = "LOW_PWR_FAN")]
        LowPwrFan,
        #[serde(rename = "Z")]
        Z,
        #[serde(rename = "BONES")]
        Bones,
    }
    pub type CodeMarkerBeaconSignalBaseType2058XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeMarkerBeaconSignalTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeMarkerBeaconSignalBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMarkingConditionBaseTypeXType {
        CodeMarkingConditionBaseType2059(CodeMarkingConditionBaseType2059XType),
        CodeMarkingConditionBaseType2060(CodeMarkingConditionBaseType2060XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMarkingConditionBaseType2059XType {
        #[serde(rename = "GOOD")]
        Good,
        #[serde(rename = "FAIR")]
        Fair,
        #[serde(rename = "POOR")]
        Poor,
        #[serde(rename = "EXCELLENT")]
        Excellent,
    }
    pub type CodeMarkingConditionBaseType2060XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeMarkingConditionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeMarkingConditionBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMarkingStyleBaseTypeXType {
        CodeMarkingStyleBaseType2061(CodeMarkingStyleBaseType2061XType),
        CodeMarkingStyleBaseType2062(CodeMarkingStyleBaseType2062XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMarkingStyleBaseType2061XType {
        #[serde(rename = "SOLID")]
        Solid,
        #[serde(rename = "DASHED")]
        Dashed,
        #[serde(rename = "DOTTED")]
        Dotted,
    }
    pub type CodeMarkingStyleBaseType2062XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeMarkingStyleTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeMarkingStyleBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMeteoConditionsBaseTypeXType {
        CodeMeteoConditionsBaseType2063(CodeMeteoConditionsBaseType2063XType),
        CodeMeteoConditionsBaseType2064(CodeMeteoConditionsBaseType2064XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMeteoConditionsBaseType2063XType {
        #[serde(rename = "IMC")]
        Imc,
        #[serde(rename = "VMC")]
        Vmc,
        #[serde(rename = "ALL")]
        All,
    }
    pub type CodeMeteoConditionsBaseType2064XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeMeteoConditionsTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeMeteoConditionsBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMilitaryOperationsBaseTypeXType {
        CodeMilitaryOperationsBaseType2065(CodeMilitaryOperationsBaseType2065XType),
        CodeMilitaryOperationsBaseType2066(CodeMilitaryOperationsBaseType2066XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMilitaryOperationsBaseType2065XType {
        #[serde(rename = "CIVIL")]
        Civil,
        #[serde(rename = "MIL")]
        Mil,
        #[serde(rename = "JOINT")]
        Joint,
    }
    pub type CodeMilitaryOperationsBaseType2066XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeMilitaryOperationsTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeMilitaryOperationsBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMilitaryRoutePointBaseTypeXType {
        CodeMilitaryRoutePointBaseType2067(CodeMilitaryRoutePointBaseType2067XType),
        CodeMilitaryRoutePointBaseType2068(CodeMilitaryRoutePointBaseType2068XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMilitaryRoutePointBaseType2067XType {
        #[serde(rename = "S")]
        S,
        #[serde(rename = "T")]
        T,
        #[serde(rename = "X")]
        X,
        #[serde(rename = "AS")]
        As,
        #[serde(rename = "AX")]
        Ax,
        #[serde(rename = "ASX")]
        Asx,
    }
    pub type CodeMilitaryRoutePointBaseType2068XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeMilitaryRoutePointTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeMilitaryRoutePointBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMilitaryStatusBaseTypeXType {
        CodeMilitaryStatusBaseType2069(CodeMilitaryStatusBaseType2069XType),
        CodeMilitaryStatusBaseType2070(CodeMilitaryStatusBaseType2070XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMilitaryStatusBaseType2069XType {
        #[serde(rename = "MIL")]
        Mil,
        #[serde(rename = "CIVIL")]
        Civil,
        #[serde(rename = "ALL")]
        All,
    }
    pub type CodeMilitaryStatusBaseType2070XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeMilitaryStatusTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeMilitaryStatusBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMilitaryTrainingBaseTypeXType {
        CodeMilitaryTrainingBaseType2071(CodeMilitaryTrainingBaseType2071XType),
        CodeMilitaryTrainingBaseType2072(CodeMilitaryTrainingBaseType2072XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMilitaryTrainingBaseType2071XType {
        #[serde(rename = "IR")]
        Ir,
        #[serde(rename = "VR")]
        Vr,
        #[serde(rename = "SR")]
        Sr,
    }
    pub type CodeMilitaryTrainingBaseType2072XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeMilitaryTrainingTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeMilitaryTrainingBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMinimaFinalApproachPathBaseTypeXType {
        CodeMinimaFinalApproachPathBaseType2073(CodeMinimaFinalApproachPathBaseType2073XType),
        CodeMinimaFinalApproachPathBaseType2074(CodeMinimaFinalApproachPathBaseType2074XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMinimaFinalApproachPathBaseType2073XType {
        #[serde(rename = "STRAIGHT_IN")]
        StraightIn,
        #[serde(rename = "CIRCLING")]
        Circling,
        #[serde(rename = "SIDESTEP")]
        Sidestep,
    }
    pub type CodeMinimaFinalApproachPathBaseType2074XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeMinimaFinalApproachPathTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeMinimaFinalApproachPathBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMinimumAltitudeBaseTypeXType {
        CodeMinimumAltitudeBaseType2075(CodeMinimumAltitudeBaseType2075XType),
        CodeMinimumAltitudeBaseType2076(CodeMinimumAltitudeBaseType2076XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMinimumAltitudeBaseType2075XType {
        #[serde(rename = "OCA")]
        Oca,
        #[serde(rename = "DA")]
        Da,
        #[serde(rename = "MDA")]
        Mda,
    }
    pub type CodeMinimumAltitudeBaseType2076XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeMinimumAltitudeTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeMinimumAltitudeBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMinimumHeightBaseTypeXType {
        CodeMinimumHeightBaseType2077(CodeMinimumHeightBaseType2077XType),
        CodeMinimumHeightBaseType2078(CodeMinimumHeightBaseType2078XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMinimumHeightBaseType2077XType {
        #[serde(rename = "DH")]
        Dh,
        #[serde(rename = "OCH")]
        Och,
        #[serde(rename = "MDH")]
        Mdh,
    }
    pub type CodeMinimumHeightBaseType2078XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeMinimumHeightTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeMinimumHeightBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMissedApproachBaseTypeXType {
        CodeMissedApproachBaseType2079(CodeMissedApproachBaseType2079XType),
        CodeMissedApproachBaseType2080(CodeMissedApproachBaseType2080XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMissedApproachBaseType2079XType {
        #[serde(rename = "PRIMARY")]
        Primary,
        #[serde(rename = "SECONDARY")]
        Secondary,
        #[serde(rename = "ALTERNATE")]
        Alternate,
        #[serde(rename = "TACAN")]
        Tacan,
        #[serde(rename = "TACANALT")]
        Tacanalt,
        #[serde(rename = "ENGINEOUT")]
        Engineout,
    }
    pub type CodeMissedApproachBaseType2080XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeMissedApproachTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeMissedApproachBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMlsAzimuthBaseType2081XType {
        #[serde(rename = "FWD")]
        Fwd,
        #[serde(rename = "BWD")]
        Bwd,
    }
    pub type CodeMlsAzimuthBaseType2082XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeMlsChannelBaseType2083XType {
        #[serde(rename = "500")]
        _500,
        #[serde(rename = "501")]
        _501,
        #[serde(rename = "502")]
        _502,
        #[serde(rename = "503")]
        _503,
        #[serde(rename = "504")]
        _504,
        #[serde(rename = "505")]
        _505,
        #[serde(rename = "506")]
        _506,
        #[serde(rename = "507")]
        _507,
        #[serde(rename = "508")]
        _508,
        #[serde(rename = "509")]
        _509,
        #[serde(rename = "510")]
        _510,
        #[serde(rename = "511")]
        _511,
        #[serde(rename = "512")]
        _512,
        #[serde(rename = "513")]
        _513,
        #[serde(rename = "514")]
        _514,
        #[serde(rename = "515")]
        _515,
        #[serde(rename = "516")]
        _516,
        #[serde(rename = "517")]
        _517,
        #[serde(rename = "518")]
        _518,
        #[serde(rename = "519")]
        _519,
        #[serde(rename = "520")]
        _520,
        #[serde(rename = "521")]
        _521,
        #[serde(rename = "522")]
        _522,
        #[serde(rename = "523")]
        _523,
        #[serde(rename = "524")]
        _524,
        #[serde(rename = "525")]
        _525,
        #[serde(rename = "526")]
        _526,
        #[serde(rename = "527")]
        _527,
        #[serde(rename = "528")]
        _528,
        #[serde(rename = "529")]
        _529,
        #[serde(rename = "530")]
        _530,
        #[serde(rename = "531")]
        _531,
        #[serde(rename = "532")]
        _532,
        #[serde(rename = "533")]
        _533,
        #[serde(rename = "534")]
        _534,
        #[serde(rename = "535")]
        _535,
        #[serde(rename = "536")]
        _536,
        #[serde(rename = "537")]
        _537,
        #[serde(rename = "538")]
        _538,
        #[serde(rename = "539")]
        _539,
        #[serde(rename = "540")]
        _540,
        #[serde(rename = "541")]
        _541,
        #[serde(rename = "542")]
        _542,
        #[serde(rename = "543")]
        _543,
        #[serde(rename = "544")]
        _544,
        #[serde(rename = "545")]
        _545,
        #[serde(rename = "546")]
        _546,
        #[serde(rename = "547")]
        _547,
        #[serde(rename = "548")]
        _548,
        #[serde(rename = "549")]
        _549,
        #[serde(rename = "550")]
        _550,
        #[serde(rename = "551")]
        _551,
        #[serde(rename = "552")]
        _552,
        #[serde(rename = "553")]
        _553,
        #[serde(rename = "554")]
        _554,
        #[serde(rename = "555")]
        _555,
        #[serde(rename = "556")]
        _556,
        #[serde(rename = "557")]
        _557,
        #[serde(rename = "558")]
        _558,
        #[serde(rename = "559")]
        _559,
        #[serde(rename = "560")]
        _560,
        #[serde(rename = "561")]
        _561,
        #[serde(rename = "562")]
        _562,
        #[serde(rename = "563")]
        _563,
        #[serde(rename = "564")]
        _564,
        #[serde(rename = "565")]
        _565,
        #[serde(rename = "566")]
        _566,
        #[serde(rename = "567")]
        _567,
        #[serde(rename = "568")]
        _568,
        #[serde(rename = "569")]
        _569,
        #[serde(rename = "570")]
        _570,
        #[serde(rename = "571")]
        _571,
        #[serde(rename = "572")]
        _572,
        #[serde(rename = "573")]
        _573,
        #[serde(rename = "574")]
        _574,
        #[serde(rename = "575")]
        _575,
        #[serde(rename = "576")]
        _576,
        #[serde(rename = "577")]
        _577,
        #[serde(rename = "578")]
        _578,
        #[serde(rename = "579")]
        _579,
        #[serde(rename = "580")]
        _580,
        #[serde(rename = "581")]
        _581,
        #[serde(rename = "582")]
        _582,
        #[serde(rename = "583")]
        _583,
        #[serde(rename = "584")]
        _584,
        #[serde(rename = "585")]
        _585,
        #[serde(rename = "586")]
        _586,
        #[serde(rename = "587")]
        _587,
        #[serde(rename = "588")]
        _588,
        #[serde(rename = "589")]
        _589,
        #[serde(rename = "590")]
        _590,
        #[serde(rename = "591")]
        _591,
        #[serde(rename = "592")]
        _592,
        #[serde(rename = "593")]
        _593,
        #[serde(rename = "594")]
        _594,
        #[serde(rename = "595")]
        _595,
        #[serde(rename = "596")]
        _596,
        #[serde(rename = "597")]
        _597,
        #[serde(rename = "598")]
        _598,
        #[serde(rename = "599")]
        _599,
        #[serde(rename = "600")]
        _600,
        #[serde(rename = "601")]
        _601,
        #[serde(rename = "602")]
        _602,
        #[serde(rename = "603")]
        _603,
        #[serde(rename = "604")]
        _604,
        #[serde(rename = "605")]
        _605,
        #[serde(rename = "606")]
        _606,
        #[serde(rename = "607")]
        _607,
        #[serde(rename = "608")]
        _608,
        #[serde(rename = "609")]
        _609,
        #[serde(rename = "610")]
        _610,
        #[serde(rename = "611")]
        _611,
        #[serde(rename = "612")]
        _612,
        #[serde(rename = "613")]
        _613,
        #[serde(rename = "614")]
        _614,
        #[serde(rename = "615")]
        _615,
        #[serde(rename = "616")]
        _616,
        #[serde(rename = "617")]
        _617,
        #[serde(rename = "618")]
        _618,
        #[serde(rename = "619")]
        _619,
        #[serde(rename = "620")]
        _620,
        #[serde(rename = "621")]
        _621,
        #[serde(rename = "622")]
        _622,
        #[serde(rename = "623")]
        _623,
        #[serde(rename = "624")]
        _624,
        #[serde(rename = "625")]
        _625,
        #[serde(rename = "626")]
        _626,
        #[serde(rename = "627")]
        _627,
        #[serde(rename = "628")]
        _628,
        #[serde(rename = "629")]
        _629,
        #[serde(rename = "630")]
        _630,
        #[serde(rename = "631")]
        _631,
        #[serde(rename = "632")]
        _632,
        #[serde(rename = "633")]
        _633,
        #[serde(rename = "634")]
        _634,
        #[serde(rename = "635")]
        _635,
        #[serde(rename = "636")]
        _636,
        #[serde(rename = "637")]
        _637,
        #[serde(rename = "638")]
        _638,
        #[serde(rename = "639")]
        _639,
        #[serde(rename = "640")]
        _640,
        #[serde(rename = "641")]
        _641,
        #[serde(rename = "642")]
        _642,
        #[serde(rename = "643")]
        _643,
        #[serde(rename = "644")]
        _644,
        #[serde(rename = "645")]
        _645,
        #[serde(rename = "646")]
        _646,
        #[serde(rename = "647")]
        _647,
        #[serde(rename = "648")]
        _648,
        #[serde(rename = "649")]
        _649,
        #[serde(rename = "650")]
        _650,
        #[serde(rename = "651")]
        _651,
        #[serde(rename = "652")]
        _652,
        #[serde(rename = "653")]
        _653,
        #[serde(rename = "654")]
        _654,
        #[serde(rename = "655")]
        _655,
        #[serde(rename = "656")]
        _656,
        #[serde(rename = "657")]
        _657,
        #[serde(rename = "658")]
        _658,
        #[serde(rename = "659")]
        _659,
        #[serde(rename = "660")]
        _660,
        #[serde(rename = "661")]
        _661,
        #[serde(rename = "662")]
        _662,
        #[serde(rename = "663")]
        _663,
        #[serde(rename = "664")]
        _664,
        #[serde(rename = "665")]
        _665,
        #[serde(rename = "666")]
        _666,
        #[serde(rename = "667")]
        _667,
        #[serde(rename = "668")]
        _668,
        #[serde(rename = "669")]
        _669,
        #[serde(rename = "670")]
        _670,
        #[serde(rename = "671")]
        _671,
        #[serde(rename = "672")]
        _672,
        #[serde(rename = "673")]
        _673,
        #[serde(rename = "674")]
        _674,
        #[serde(rename = "675")]
        _675,
        #[serde(rename = "676")]
        _676,
        #[serde(rename = "677")]
        _677,
        #[serde(rename = "678")]
        _678,
        #[serde(rename = "679")]
        _679,
        #[serde(rename = "680")]
        _680,
        #[serde(rename = "681")]
        _681,
        #[serde(rename = "682")]
        _682,
        #[serde(rename = "683")]
        _683,
        #[serde(rename = "684")]
        _684,
        #[serde(rename = "685")]
        _685,
        #[serde(rename = "686")]
        _686,
        #[serde(rename = "687")]
        _687,
        #[serde(rename = "688")]
        _688,
        #[serde(rename = "689")]
        _689,
        #[serde(rename = "690")]
        _690,
        #[serde(rename = "691")]
        _691,
        #[serde(rename = "692")]
        _692,
        #[serde(rename = "693")]
        _693,
        #[serde(rename = "694")]
        _694,
        #[serde(rename = "695")]
        _695,
        #[serde(rename = "696")]
        _696,
        #[serde(rename = "697")]
        _697,
        #[serde(rename = "698")]
        _698,
        #[serde(rename = "699")]
        _699,
    }
    pub type CodeMlsChannelBaseType2084XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNdbUsageBaseTypeXType {
        CodeNdbUsageBaseType2097(CodeNdbUsageBaseType2097XType),
        CodeNdbUsageBaseType2098(CodeNdbUsageBaseType2098XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeNdbUsageTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeNdbUsageBaseTypeXType,
    }
    pub type CodeNavaidDesignatorBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeNavaidDesignatorTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeNavaidDesignatorBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNavaidPurposeBaseTypeXType {
        CodeNavaidPurposeBaseType2085(CodeNavaidPurposeBaseType2085XType),
        CodeNavaidPurposeBaseType2086(CodeNavaidPurposeBaseType2086XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNavaidPurposeBaseType2085XType {
        #[serde(rename = "TERMINAL")]
        Terminal,
        #[serde(rename = "ENROUTE")]
        Enroute,
        #[serde(rename = "ALL")]
        All,
    }
    pub type CodeNavaidPurposeBaseType2086XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeNavaidPurposeTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeNavaidPurposeBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNavaidServiceBaseTypeXType {
        CodeNavaidServiceBaseType2087(CodeNavaidServiceBaseType2087XType),
        CodeNavaidServiceBaseType2088(CodeNavaidServiceBaseType2088XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNavaidServiceBaseType2087XType {
        #[serde(rename = "VOR")]
        Vor,
        #[serde(rename = "DME")]
        Dme,
        #[serde(rename = "NDB")]
        Ndb,
        #[serde(rename = "TACAN")]
        Tacan,
        #[serde(rename = "MKR")]
        Mkr,
        #[serde(rename = "ILS")]
        Ils,
        #[serde(rename = "ILS_DME")]
        IlsDme,
        #[serde(rename = "MLS")]
        Mls,
        #[serde(rename = "MLS_DME")]
        MlsDme,
        #[serde(rename = "VORTAC")]
        Vortac,
        #[serde(rename = "VOR_DME")]
        VorDme,
        #[serde(rename = "NDB_DME")]
        NdbDme,
        #[serde(rename = "TLS")]
        Tls,
        #[serde(rename = "LOC")]
        Loc,
        #[serde(rename = "LOC_DME")]
        LocDme,
        #[serde(rename = "NDB_MKR")]
        NdbMkr,
        #[serde(rename = "DF")]
        Df,
        #[serde(rename = "SDF")]
        Sdf,
    }
    pub type CodeNavaidServiceBaseType2088XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeNavaidServiceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeNavaidServiceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNavigationAreaBaseTypeXType {
        CodeNavigationAreaBaseType2089(CodeNavigationAreaBaseType2089XType),
        CodeNavigationAreaBaseType2090(CodeNavigationAreaBaseType2090XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNavigationAreaBaseType2089XType {
        #[serde(rename = "PNA")]
        Pna,
        #[serde(rename = "OMNI")]
        Omni,
        #[serde(rename = "DVA")]
        Dva,
    }
    pub type CodeNavigationAreaBaseType2090XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNavigationAreaRestrictionBaseTypeXType {
        CodeNavigationAreaRestrictionBaseType2091(CodeNavigationAreaRestrictionBaseType2091XType),
        CodeNavigationAreaRestrictionBaseType2092(CodeNavigationAreaRestrictionBaseType2092XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNavigationAreaRestrictionBaseType2091XType {
        #[serde(rename = "VECTOR")]
        Vector,
        #[serde(rename = "OMNIDIRECTIONAL")]
        Omnidirectional,
    }
    pub type CodeNavigationAreaRestrictionBaseType2092XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeNavigationAreaRestrictionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeNavigationAreaRestrictionBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeNavigationAreaTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeNavigationAreaBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNavigationEquipmentBaseTypeXType {
        CodeNavigationEquipmentBaseType2093(CodeNavigationEquipmentBaseType2093XType),
        CodeNavigationEquipmentBaseType2094(CodeNavigationEquipmentBaseType2094XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNavigationEquipmentBaseType2093XType {
        #[serde(rename = "DME")]
        Dme,
        #[serde(rename = "VOR_DME")]
        VorDme,
        #[serde(rename = "DME_DME")]
        DmeDme,
        #[serde(rename = "TACAN")]
        Tacan,
        #[serde(rename = "ILS")]
        Ils,
        #[serde(rename = "MLS")]
        Mls,
        #[serde(rename = "GNSS")]
        Gnss,
        #[serde(rename = "WAAS")]
        Waas,
        #[serde(rename = "LORAN")]
        Loran,
        #[serde(rename = "INS")]
        Ins,
        #[serde(rename = "FMS")]
        Fms,
    }
    pub type CodeNavigationEquipmentBaseType2094XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeNavigationEquipmentTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeNavigationEquipmentBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNavigationSpecificationBaseTypeXType {
        CodeNavigationSpecificationBaseType2095(CodeNavigationSpecificationBaseType2095XType),
        CodeNavigationSpecificationBaseType2096(CodeNavigationSpecificationBaseType2096XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNavigationSpecificationBaseType2095XType {
        #[serde(rename = "RNAV_10")]
        Rnav10,
        #[serde(rename = "RNAV_5")]
        Rnav5,
        #[serde(rename = "RNAV_2")]
        Rnav2,
        #[serde(rename = "RNAV_1")]
        Rnav1,
        #[serde(rename = "RNP_4")]
        Rnp4,
        #[serde(rename = "RNP_2")]
        Rnp2,
        #[serde(rename = "BASIC_RNP_1")]
        BasicRnp1,
        #[serde(rename = "ADVANCED_RNP_1")]
        AdvancedRnp1,
        #[serde(rename = "RNP_APCH")]
        RnpApch,
        #[serde(rename = "RNP_AR_APCH")]
        RnpArApch,
    }
    pub type CodeNavigationSpecificationBaseType2096XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeNavigationSpecificationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeNavigationSpecificationBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNdbUsageBaseType2097XType {
        #[serde(rename = "ENR")]
        Enr,
        #[serde(rename = "L")]
        L,
        #[serde(rename = "MAR")]
        Mar,
    }
    pub type CodeNdbUsageBaseType2098XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNitrogenBaseTypeXType {
        CodeNitrogenBaseType2099(CodeNitrogenBaseType2099XType),
        CodeNitrogenBaseType2100(CodeNitrogenBaseType2100XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNitrogenBaseType2099XType {
        #[serde(rename = "LPNG")]
        Lpng,
        #[serde(rename = "HPNG")]
        Hpng,
        #[serde(rename = "LHNG")]
        Lhng,
        #[serde(rename = "LNG")]
        Lng,
        #[serde(rename = "NGRB")]
        Ngrb,
        #[serde(rename = "HNGRB")]
        Hngrb,
        #[serde(rename = "LNGRB")]
        Lngrb,
        #[serde(rename = "NG")]
        Ng,
    }
    pub type CodeNitrogenBaseType2100XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeNitrogenTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeNitrogenBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNorthReferenceBaseTypeXType {
        CodeNorthReferenceBaseType2101(CodeNorthReferenceBaseType2101XType),
        CodeNorthReferenceBaseType2102(CodeNorthReferenceBaseType2102XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNorthReferenceBaseType2101XType {
        #[serde(rename = "TRUE")]
        True,
        #[serde(rename = "MAG")]
        Mag,
        #[serde(rename = "GRID")]
        Grid,
    }
    pub type CodeNorthReferenceBaseType2102XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeNorthReferenceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeNorthReferenceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNotePurposeBaseTypeXType {
        CodeNotePurposeBaseType2103(CodeNotePurposeBaseType2103XType),
        CodeNotePurposeBaseType2104(CodeNotePurposeBaseType2104XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeNotePurposeBaseType2103XType {
        #[serde(rename = "DESCRIPTION")]
        Description,
        #[serde(rename = "REMARK")]
        Remark,
        #[serde(rename = "WARNING")]
        Warning,
        #[serde(rename = "DISCLAIMER")]
        Disclaimer,
    }
    pub type CodeNotePurposeBaseType2104XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeNotePurposeTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeNotePurposeBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeObstacleAreaBaseTypeXType {
        CodeObstacleAreaBaseType2105(CodeObstacleAreaBaseType2105XType),
        CodeObstacleAreaBaseType2106(CodeObstacleAreaBaseType2106XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeObstacleAreaBaseType2105XType {
        #[serde(rename = "AREA1")]
        Area1,
        #[serde(rename = "AREA2")]
        Area2,
        #[serde(rename = "AREA3")]
        Area3,
        #[serde(rename = "AREA4")]
        Area4,
        #[serde(rename = "OLS")]
        Ols,
        #[serde(rename = "FAR77")]
        Far77,
        #[serde(rename = "MANAGED")]
        Managed,
    }
    pub type CodeObstacleAreaBaseType2106XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeObstacleAreaTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeObstacleAreaBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeObstacleAssessmentSurfaceBaseTypeXType {
        CodeObstacleAssessmentSurfaceBaseType2107(CodeObstacleAssessmentSurfaceBaseType2107XType),
        CodeObstacleAssessmentSurfaceBaseType2108(CodeObstacleAssessmentSurfaceBaseType2108XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeObstacleAssessmentSurfaceBaseType2107XType {
        #[serde(rename = "40_TO_1")]
        _40To1,
        #[serde(rename = "72_TO_1")]
        _72To1,
        #[serde(rename = "MA")]
        Ma,
        #[serde(rename = "FINAL")]
        Final,
        #[serde(rename = "PT_ENTRY_AREA")]
        PtEntryArea,
        #[serde(rename = "PRIMARY")]
        Primary,
        #[serde(rename = "SECONDARY")]
        Secondary,
        #[serde(rename = "ZONE1")]
        Zone1,
        #[serde(rename = "ZONE2")]
        Zone2,
        #[serde(rename = "ZONE3")]
        Zone3,
        #[serde(rename = "AREA1")]
        Area1,
        #[serde(rename = "AREA2")]
        Area2,
        #[serde(rename = "AREA3")]
        Area3,
        #[serde(rename = "TURN_INITIATION")]
        TurnInitiation,
        #[serde(rename = "TURN")]
        Turn,
        #[serde(rename = "DER")]
        Der,
    }
    pub type CodeObstacleAssessmentSurfaceBaseType2108XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeObstacleAssessmentSurfaceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeObstacleAssessmentSurfaceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeObstructionIdSurfaceZoneBaseTypeXType {
        CodeObstructionIdSurfaceZoneBaseType2109(CodeObstructionIdSurfaceZoneBaseType2109XType),
        CodeObstructionIdSurfaceZoneBaseType2110(CodeObstructionIdSurfaceZoneBaseType2110XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeObstructionIdSurfaceZoneBaseType2109XType {
        #[serde(rename = "APPROACH")]
        Approach,
        #[serde(rename = "CONICAL")]
        Conical,
        #[serde(rename = "HORIZONTAL")]
        Horizontal,
        #[serde(rename = "PRIMARY")]
        Primary,
        #[serde(rename = "TRANSITION")]
        Transition,
    }
    pub type CodeObstructionIdSurfaceZoneBaseType2110XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeObstructionIdSurfaceZoneTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeObstructionIdSurfaceZoneBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeOilBaseTypeXType {
        CodeOilBaseType2111(CodeOilBaseType2111XType),
        CodeOilBaseType2112(CodeOilBaseType2112XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeOilBaseType2111XType {
        #[serde(rename = "PISTON")]
        Piston,
        #[serde(rename = "TURBO")]
        Turbo,
        #[serde(rename = "HYDRAULIC")]
        Hydraulic,
    }
    pub type CodeOilBaseType2112XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeOilTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeOilBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeOperationAirportHeliportBaseTypeXType {
        CodeOperationAirportHeliportBaseType2113(CodeOperationAirportHeliportBaseType2113XType),
        CodeOperationAirportHeliportBaseType2114(CodeOperationAirportHeliportBaseType2114XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeOperationAirportHeliportBaseType2113XType {
        #[serde(rename = "LANDING")]
        Landing,
        #[serde(rename = "TAKEOFF")]
        Takeoff,
        #[serde(rename = "TOUCHGO")]
        Touchgo,
        #[serde(rename = "TRAIN_APPROACH")]
        TrainApproach,
        #[serde(rename = "ALTN_LANDING")]
        AltnLanding,
        #[serde(rename = "AIRSHOW")]
        Airshow,
        #[serde(rename = "ALL")]
        All,
    }
    pub type CodeOperationAirportHeliportBaseType2114XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeOperationAirportHeliportTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeOperationAirportHeliportBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeOperationManoeuvringAreaBaseTypeXType {
        CodeOperationManoeuvringAreaBaseType2115(CodeOperationManoeuvringAreaBaseType2115XType),
        CodeOperationManoeuvringAreaBaseType2116(CodeOperationManoeuvringAreaBaseType2116XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeOperationManoeuvringAreaBaseType2115XType {
        #[serde(rename = "LANDING")]
        Landing,
        #[serde(rename = "TAKEOFF")]
        Takeoff,
        #[serde(rename = "TOUCHGO")]
        Touchgo,
        #[serde(rename = "TRAIN_APPROACH")]
        TrainApproach,
        #[serde(rename = "TAXIING")]
        Taxiing,
        #[serde(rename = "CROSSING")]
        Crossing,
        #[serde(rename = "AIRSHOW")]
        Airshow,
        #[serde(rename = "ALL")]
        All,
    }
    pub type CodeOperationManoeuvringAreaBaseType2116XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeOperationManoeuvringAreaTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeOperationManoeuvringAreaBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeOrganisationBaseTypeXType {
        CodeOrganisationBaseType2117(CodeOrganisationBaseType2117XType),
        CodeOrganisationBaseType2118(CodeOrganisationBaseType2118XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeOrganisationBaseType2117XType {
        #[serde(rename = "STATE")]
        State,
        #[serde(rename = "STATE_GROUP")]
        StateGroup,
        #[serde(rename = "ORG")]
        Org,
        #[serde(rename = "INTL_ORG")]
        IntlOrg,
        #[serde(rename = "ACFT_OPR")]
        AcftOpr,
        #[serde(rename = "HANDLING_AGENCY")]
        HandlingAgency,
        #[serde(rename = "NTL_AUTH")]
        NtlAuth,
        #[serde(rename = "ATS")]
        Ats,
        #[serde(rename = "COMMERCIAL")]
        Commercial,
    }
    pub type CodeOrganisationBaseType2118XType = String;
    pub type CodeOrganisationDesignatorBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeOrganisationDesignatorTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeOrganisationDesignatorBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeOrganisationHierarchyBaseTypeXType {
        CodeOrganisationHierarchyBaseType2119(CodeOrganisationHierarchyBaseType2119XType),
        CodeOrganisationHierarchyBaseType2120(CodeOrganisationHierarchyBaseType2120XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeOrganisationHierarchyBaseType2119XType {
        #[serde(rename = "MEMBER")]
        Member,
        #[serde(rename = "OWNED_BY")]
        OwnedBy,
        #[serde(rename = "SUPERVISED_BY")]
        SupervisedBy,
    }
    pub type CodeOrganisationHierarchyBaseType2120XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeOrganisationHierarchyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeOrganisationHierarchyBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeOrganisationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeOrganisationBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeOxygenBaseTypeXType {
        CodeOxygenBaseType2121(CodeOxygenBaseType2121XType),
        CodeOxygenBaseType2122(CodeOxygenBaseType2122XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeOxygenBaseType2121XType {
        #[serde(rename = "LPOX")]
        Lpox,
        #[serde(rename = "HPOX")]
        Hpox,
        #[serde(rename = "LHOX")]
        Lhox,
        #[serde(rename = "LOX")]
        Lox,
        #[serde(rename = "OXRB")]
        Oxrb,
        #[serde(rename = "HOXRB")]
        Hoxrb,
        #[serde(rename = "LOXRB")]
        Loxrb,
        #[serde(rename = "OX")]
        Ox,
    }
    pub type CodeOxygenBaseType2122XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeOxygenTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeOxygenBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeParBaseTypeXType {
        CodeParBaseType2123(CodeParBaseType2123XType),
        CodeParBaseType2124(CodeParBaseType2124XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeParTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeParBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodePcnMethodBaseTypeXType {
        CodePcnMethodBaseType2127(CodePcnMethodBaseType2127XType),
        CodePcnMethodBaseType2128(CodePcnMethodBaseType2128XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodePcnMethodTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodePcnMethodBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodePcnPavementBaseTypeXType {
        CodePcnPavementBaseType2129(CodePcnPavementBaseType2129XType),
        CodePcnPavementBaseType2130(CodePcnPavementBaseType2130XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodePcnPavementTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodePcnPavementBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodePcnSubgradeBaseTypeXType {
        CodePcnSubgradeBaseType2131(CodePcnSubgradeBaseType2131XType),
        CodePcnSubgradeBaseType2132(CodePcnSubgradeBaseType2132XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodePcnSubgradeTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodePcnSubgradeBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodePcnTyrePressureBaseTypeXType {
        CodePcnTyrePressureBaseType2133(CodePcnTyrePressureBaseType2133XType),
        CodePcnTyrePressureBaseType2134(CodePcnTyrePressureBaseType2134XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodePcnTyrePressureTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodePcnTyrePressureBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeParBaseType2123XType {
        #[serde(rename = "FPN16")]
        Fpn16,
        #[serde(rename = "FPN62")]
        Fpn62,
        #[serde(rename = "GPN22")]
        Gpn22,
        #[serde(rename = "GPN25")]
        Gpn25,
        #[serde(rename = "MPN14K")]
        Mpn14K,
        #[serde(rename = "TPN19")]
        Tpn19,
    }
    pub type CodeParBaseType2124XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodePassengerServiceBaseTypeXType {
        CodePassengerServiceBaseType2125(CodePassengerServiceBaseType2125XType),
        CodePassengerServiceBaseType2126(CodePassengerServiceBaseType2126XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodePassengerServiceBaseType2125XType {
        #[serde(rename = "CUST")]
        Cust,
        #[serde(rename = "SAN")]
        San,
        #[serde(rename = "SECUR")]
        Secur,
        #[serde(rename = "VET")]
        Vet,
        #[serde(rename = "HOTEL")]
        Hotel,
        #[serde(rename = "TRANSPORT")]
        Transport,
        #[serde(rename = "REST")]
        Rest,
        #[serde(rename = "INFO")]
        Info,
        #[serde(rename = "BANK")]
        Bank,
        #[serde(rename = "POST")]
        Post,
        #[serde(rename = "MEDIC")]
        Medic,
    }
    pub type CodePassengerServiceBaseType2126XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodePassengerServiceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodePassengerServiceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodePcnMethodBaseType2127XType {
        #[serde(rename = "TECH")]
        Tech,
        #[serde(rename = "ACFT")]
        Acft,
    }
    pub type CodePcnMethodBaseType2128XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodePcnPavementBaseType2129XType {
        #[serde(rename = "RIGID")]
        Rigid,
        #[serde(rename = "FLEXIBLE")]
        Flexible,
    }
    pub type CodePcnPavementBaseType2130XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodePcnSubgradeBaseType2131XType {
        #[serde(rename = "A")]
        A,
        #[serde(rename = "B")]
        B,
        #[serde(rename = "C")]
        C,
        #[serde(rename = "D")]
        D,
    }
    pub type CodePcnSubgradeBaseType2132XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodePcnTyrePressureBaseType2133XType {
        #[serde(rename = "W")]
        W,
        #[serde(rename = "X")]
        X,
        #[serde(rename = "Y")]
        Y,
        #[serde(rename = "Z")]
        Z,
    }
    pub type CodePcnTyrePressureBaseType2134XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodePilotControlledLightingBaseTypeXType {
        CodePilotControlledLightingBaseType2135(CodePilotControlledLightingBaseType2135XType),
        CodePilotControlledLightingBaseType2136(CodePilotControlledLightingBaseType2136XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodePilotControlledLightingBaseType2135XType {
        #[serde(rename = "STANDARD_FAA")]
        StandardFaa,
        #[serde(rename = "NON_STANDARD")]
        NonStandard,
    }
    pub type CodePilotControlledLightingBaseType2136XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodePilotControlledLightingTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodePilotControlledLightingBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodePositionInIlsBaseTypeXType {
        CodePositionInIlsBaseType2137(CodePositionInIlsBaseType2137XType),
        CodePositionInIlsBaseType2138(CodePositionInIlsBaseType2138XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodePositionInIlsTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodePositionInIlsBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodePositionInIlsBaseType2137XType {
        #[serde(rename = "OUTER")]
        Outer,
        #[serde(rename = "MIDDLE")]
        Middle,
        #[serde(rename = "INNER")]
        Inner,
        #[serde(rename = "BACKCOURSE")]
        Backcourse,
    }
    pub type CodePositionInIlsBaseType2138XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodePrimaryRadarBaseTypeXType {
        CodePrimaryRadarBaseType2139(CodePrimaryRadarBaseType2139XType),
        CodePrimaryRadarBaseType2140(CodePrimaryRadarBaseType2140XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodePrimaryRadarBaseType2139XType {
        #[serde(rename = "ASR")]
        Asr,
        #[serde(rename = "ARSR")]
        Arsr,
    }
    pub type CodePrimaryRadarBaseType2140XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodePrimaryRadarTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodePrimaryRadarBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeProcedureAvailabilityBaseTypeXType {
        CodeProcedureAvailabilityBaseType2141(CodeProcedureAvailabilityBaseType2141XType),
        CodeProcedureAvailabilityBaseType2142(CodeProcedureAvailabilityBaseType2142XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeProcedureAvailabilityBaseType2141XType {
        #[serde(rename = "USABLE")]
        Usable,
        #[serde(rename = "UNUSABLE")]
        Unusable,
    }
    pub type CodeProcedureAvailabilityBaseType2142XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeProcedureAvailabilityTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeProcedureAvailabilityBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeProcedureCodingStandardBaseTypeXType {
        CodeProcedureCodingStandardBaseType2143(CodeProcedureCodingStandardBaseType2143XType),
        CodeProcedureCodingStandardBaseType2144(CodeProcedureCodingStandardBaseType2144XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeProcedureCodingStandardBaseType2143XType {
        #[serde(rename = "PANS_OPS")]
        PansOps,
        #[serde(rename = "ARINC_424_15")]
        Arinc42415,
        #[serde(rename = "ARINC_424_18")]
        Arinc42418,
        #[serde(rename = "ARINC_424_19")]
        Arinc42419,
    }
    pub type CodeProcedureCodingStandardBaseType2144XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeProcedureCodingStandardTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeProcedureCodingStandardBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeProcedureDistanceBaseTypeXType {
        CodeProcedureDistanceBaseType2145(CodeProcedureDistanceBaseType2145XType),
        CodeProcedureDistanceBaseType2146(CodeProcedureDistanceBaseType2146XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeProcedureDistanceBaseType2145XType {
        #[serde(rename = "HAT")]
        Hat,
        #[serde(rename = "OM")]
        Om,
        #[serde(rename = "MM")]
        Mm,
        #[serde(rename = "IM")]
        Im,
        #[serde(rename = "PFAF")]
        Pfaf,
        #[serde(rename = "GSANT")]
        Gsant,
        #[serde(rename = "FAF")]
        Faf,
        #[serde(rename = "MAP")]
        Map,
        #[serde(rename = "THLD")]
        Thld,
        #[serde(rename = "VDP")]
        Vdp,
        #[serde(rename = "RECH")]
        Rech,
    }
    pub type CodeProcedureDistanceBaseType2146XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeProcedureDistanceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeProcedureDistanceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeProcedureFixRoleBaseTypeXType {
        CodeProcedureFixRoleBaseType2147(CodeProcedureFixRoleBaseType2147XType),
        CodeProcedureFixRoleBaseType2148(CodeProcedureFixRoleBaseType2148XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeProcedureFixRoleBaseType2147XType {
        #[serde(rename = "FAF")]
        Faf,
        #[serde(rename = "FPAP")]
        Fpap,
        #[serde(rename = "FROP")]
        Frop,
        #[serde(rename = "FTP")]
        Ftp,
        #[serde(rename = "IAF")]
        Iaf,
        #[serde(rename = "IF")]
        If,
        #[serde(rename = "IF_IAF")]
        IfIaf,
        #[serde(rename = "LTP")]
        Ltp,
        #[serde(rename = "MAHF")]
        Mahf,
        #[serde(rename = "MAPT")]
        Mapt,
        #[serde(rename = "SDF")]
        Sdf,
        #[serde(rename = "TP")]
        Tp,
        #[serde(rename = "VDP")]
        Vdp,
    }
    pub type CodeProcedureFixRoleBaseType2148XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeProcedureFixRoleTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeProcedureFixRoleBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeProcedurePhaseBaseTypeXType {
        CodeProcedurePhaseBaseType2149(CodeProcedurePhaseBaseType2149XType),
        CodeProcedurePhaseBaseType2150(CodeProcedurePhaseBaseType2150XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeProcedurePhaseBaseType2149XType {
        #[serde(rename = "RWY")]
        Rwy,
        #[serde(rename = "COMMON")]
        Common,
        #[serde(rename = "EN_ROUTE")]
        EnRoute,
        #[serde(rename = "APPROACH")]
        Approach,
        #[serde(rename = "FINAL")]
        Final,
        #[serde(rename = "MISSED")]
        Missed,
        #[serde(rename = "MISSED_P")]
        MissedP,
        #[serde(rename = "MISSED_S")]
        MissedS,
        #[serde(rename = "ENGINE_OUT")]
        EngineOut,
    }
    pub type CodeProcedurePhaseBaseType2150XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeProcedurePhaseTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeProcedurePhaseBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeProtectAreaSectionBaseTypeXType {
        CodeProtectAreaSectionBaseType2151(CodeProtectAreaSectionBaseType2151XType),
        CodeProtectAreaSectionBaseType2152(CodeProtectAreaSectionBaseType2152XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeProtectAreaSectionBaseType2151XType {
        #[serde(rename = "EDGE")]
        Edge,
        #[serde(rename = "END")]
        End,
        #[serde(rename = "CL")]
        Cl,
    }
    pub type CodeProtectAreaSectionBaseType2152XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeProtectAreaSectionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeProtectAreaSectionBaseTypeXType,
    }
    pub type CodeRnpBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRnpTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRnpBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRvrReadingBaseTypeXType {
        CodeRvrReadingBaseType2201(CodeRvrReadingBaseType2201XType),
        CodeRvrReadingBaseType2202(CodeRvrReadingBaseType2202XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRvrReadingTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRvrReadingBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRvsmBaseTypeXType {
        CodeRvsmBaseType2203(CodeRvsmBaseType2203XType),
        CodeRvsmBaseType2204(CodeRvsmBaseType2204XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRvsmPointRoleBaseTypeXType {
        CodeRvsmPointRoleBaseType2205(CodeRvsmPointRoleBaseType2205XType),
        CodeRvsmPointRoleBaseType2206(CodeRvsmPointRoleBaseType2206XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRvsmPointRoleTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRvsmPointRoleBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRvsmTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRvsmBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRadarServiceBaseTypeXType {
        CodeRadarServiceBaseType2153(CodeRadarServiceBaseType2153XType),
        CodeRadarServiceBaseType2154(CodeRadarServiceBaseType2154XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRadarServiceBaseType2153XType {
        #[serde(rename = "PAR")]
        Par,
        #[serde(rename = "ARSR")]
        Arsr,
        #[serde(rename = "ASR")]
        Asr,
        #[serde(rename = "SSR")]
        Ssr,
    }
    pub type CodeRadarServiceBaseType2154XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRadarServiceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRadarServiceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRadioEmissionBaseTypeXType {
        CodeRadioEmissionBaseType2155(CodeRadioEmissionBaseType2155XType),
        CodeRadioEmissionBaseType2156(CodeRadioEmissionBaseType2156XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRadioEmissionBaseType2155XType {
        #[serde(rename = "A2")]
        A2,
        #[serde(rename = "A3A")]
        A3A,
        #[serde(rename = "A3B")]
        A3B,
        #[serde(rename = "A3E")]
        A3E,
        #[serde(rename = "A3H")]
        A3H,
        #[serde(rename = "A3J")]
        A3J,
        #[serde(rename = "A3L")]
        A3L,
        #[serde(rename = "A3U")]
        A3U,
        #[serde(rename = "J3E")]
        J3E,
        #[serde(rename = "NONA1A")]
        Nona1A,
        #[serde(rename = "NONA2A")]
        Nona2A,
        #[serde(rename = "PON")]
        Pon,
        #[serde(rename = "A8W")]
        A8W,
        #[serde(rename = "A9W")]
        A9W,
        #[serde(rename = "NOX")]
        Nox,
        #[serde(rename = "G1D")]
        G1D,
    }
    pub type CodeRadioEmissionBaseType2156XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRadioEmissionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRadioEmissionBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRadioFrequencyAreaBaseTypeXType {
        CodeRadioFrequencyAreaBaseType2157(CodeRadioFrequencyAreaBaseType2157XType),
        CodeRadioFrequencyAreaBaseType2158(CodeRadioFrequencyAreaBaseType2158XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRadioFrequencyAreaBaseType2157XType {
        #[serde(rename = "COV")]
        Cov,
        #[serde(rename = "T_COV")]
        TCov,
        #[serde(rename = "SCL")]
        Scl,
        #[serde(rename = "RHG")]
        Rhg,
        #[serde(rename = "UNREL")]
        Unrel,
        #[serde(rename = "RES")]
        Res,
        #[serde(rename = "UUS")]
        Uus,
        #[serde(rename = "OUT")]
        Out,
        #[serde(rename = "ESV")]
        Esv,
    }
    pub type CodeRadioFrequencyAreaBaseType2158XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRadioFrequencyAreaTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRadioFrequencyAreaBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRadioSignalBaseTypeXType {
        CodeRadioSignalBaseType2159(CodeRadioSignalBaseType2159XType),
        CodeRadioSignalBaseType2160(CodeRadioSignalBaseType2160XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRadioSignalBaseType2159XType {
        #[serde(rename = "AZIMUTH")]
        Azimuth,
        #[serde(rename = "DISTANCE")]
        Distance,
        #[serde(rename = "BEAM")]
        Beam,
        #[serde(rename = "VOICE")]
        Voice,
        #[serde(rename = "DATALINK")]
        Datalink,
    }
    pub type CodeRadioSignalBaseType2160XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRadioSignalTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRadioSignalBaseTypeXType,
    }
    pub type CodeReferencePathIdentifierBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeReferencePathIdentifierTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeReferencePathIdentifierBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeReferenceRoleBaseTypeXType {
        CodeReferenceRoleBaseType2161(CodeReferenceRoleBaseType2161XType),
        CodeReferenceRoleBaseType2162(CodeReferenceRoleBaseType2162XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeReferenceRoleBaseType2161XType {
        #[serde(rename = "INTERSECTION")]
        Intersection,
        #[serde(rename = "RECNAV")]
        Recnav,
        #[serde(rename = "ATD")]
        Atd,
        #[serde(rename = "RAD_DME")]
        RadDme,
    }
    pub type CodeReferenceRoleBaseType2162XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeReferenceRoleTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeReferenceRoleBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeReflectorBaseTypeXType {
        CodeReflectorBaseType2163(CodeReflectorBaseType2163XType),
        CodeReflectorBaseType2164(CodeReflectorBaseType2164XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeReflectorBaseType2163XType {
        #[serde(rename = "TOUCHDOWN")]
        Touchdown,
        #[serde(rename = "RUNWAY_END")]
        RunwayEnd,
        #[serde(rename = "REFERENCE")]
        Reference,
    }
    pub type CodeReflectorBaseType2164XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeReflectorTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeReflectorBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRelativePositionBaseTypeXType {
        CodeRelativePositionBaseType2165(CodeRelativePositionBaseType2165XType),
        CodeRelativePositionBaseType2166(CodeRelativePositionBaseType2166XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRelativePositionBaseType2165XType {
        #[serde(rename = "BEFORE")]
        Before,
        #[serde(rename = "AT")]
        At,
        #[serde(rename = "AFTER")]
        After,
    }
    pub type CodeRelativePositionBaseType2166XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRelativePositionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRelativePositionBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRoadBaseTypeXType {
        CodeRoadBaseType2167(CodeRoadBaseType2167XType),
        CodeRoadBaseType2168(CodeRoadBaseType2168XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRoadBaseType2167XType {
        #[serde(rename = "SERVICE")]
        Service,
        #[serde(rename = "PUBLIC")]
        Public,
    }
    pub type CodeRoadBaseType2168XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRoadTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRoadBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRouteAvailabilityBaseTypeXType {
        CodeRouteAvailabilityBaseType2169(CodeRouteAvailabilityBaseType2169XType),
        CodeRouteAvailabilityBaseType2170(CodeRouteAvailabilityBaseType2170XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRouteAvailabilityBaseType2169XType {
        #[serde(rename = "OPEN")]
        Open,
        #[serde(rename = "COND")]
        Cond,
        #[serde(rename = "CLSD")]
        Clsd,
    }
    pub type CodeRouteAvailabilityBaseType2170XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRouteAvailabilityTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRouteAvailabilityBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRouteBaseTypeXType {
        CodeRouteBaseType2171(CodeRouteBaseType2171XType),
        CodeRouteBaseType2172(CodeRouteBaseType2172XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRouteBaseType2171XType {
        #[serde(rename = "ATS")]
        Ats,
        #[serde(rename = "NAT")]
        Nat,
    }
    pub type CodeRouteBaseType2172XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRouteDesignatorLetterBaseTypeXType {
        CodeRouteDesignatorLetterBaseType2173(CodeRouteDesignatorLetterBaseType2173XType),
        CodeRouteDesignatorLetterBaseType2174(CodeRouteDesignatorLetterBaseType2174XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRouteDesignatorLetterBaseType2173XType {
        #[serde(rename = "A")]
        A,
        #[serde(rename = "B")]
        B,
        #[serde(rename = "G")]
        G,
        #[serde(rename = "H")]
        H,
        #[serde(rename = "J")]
        J,
        #[serde(rename = "L")]
        L,
        #[serde(rename = "M")]
        M,
        #[serde(rename = "N")]
        N,
        #[serde(rename = "P")]
        P,
        #[serde(rename = "Q")]
        Q,
        #[serde(rename = "R")]
        R,
        #[serde(rename = "T")]
        T,
        #[serde(rename = "V")]
        V,
        #[serde(rename = "W")]
        W,
        #[serde(rename = "Y")]
        Y,
        #[serde(rename = "Z")]
        Z,
    }
    pub type CodeRouteDesignatorLetterBaseType2174XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRouteDesignatorLetterTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRouteDesignatorLetterBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRouteDesignatorPrefixBaseTypeXType {
        CodeRouteDesignatorPrefixBaseType2175(CodeRouteDesignatorPrefixBaseType2175XType),
        CodeRouteDesignatorPrefixBaseType2176(CodeRouteDesignatorPrefixBaseType2176XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRouteDesignatorPrefixBaseType2175XType {
        #[serde(rename = "K")]
        K,
        #[serde(rename = "U")]
        U,
        #[serde(rename = "S")]
        S,
        #[serde(rename = "T")]
        T,
    }
    pub type CodeRouteDesignatorPrefixBaseType2176XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRouteDesignatorPrefixTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRouteDesignatorPrefixBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRouteDesignatorSuffixBaseTypeXType {
        CodeRouteDesignatorSuffixBaseType2177(CodeRouteDesignatorSuffixBaseType2177XType),
        CodeRouteDesignatorSuffixBaseType2178(CodeRouteDesignatorSuffixBaseType2178XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRouteDesignatorSuffixBaseType2177XType {
        #[serde(rename = "F")]
        F,
        #[serde(rename = "G")]
        G,
    }
    pub type CodeRouteDesignatorSuffixBaseType2178XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRouteDesignatorSuffixTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRouteDesignatorSuffixBaseTypeXType,
    }
    pub type CodeRouteIndicatorBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRouteIndicatorTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRouteIndicatorBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRouteNavigationBaseTypeXType {
        CodeRouteNavigationBaseType2179(CodeRouteNavigationBaseType2179XType),
        CodeRouteNavigationBaseType2180(CodeRouteNavigationBaseType2180XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRouteNavigationBaseType2179XType {
        #[serde(rename = "CONV")]
        Conv,
        #[serde(rename = "RNAV")]
        Rnav,
        #[serde(rename = "TACAN")]
        Tacan,
    }
    pub type CodeRouteNavigationBaseType2180XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRouteNavigationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRouteNavigationBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRouteOriginBaseTypeXType {
        CodeRouteOriginBaseType2181(CodeRouteOriginBaseType2181XType),
        CodeRouteOriginBaseType2182(CodeRouteOriginBaseType2182XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRouteOriginBaseType2181XType {
        #[serde(rename = "INTL")]
        Intl,
        #[serde(rename = "DOM")]
        Dom,
        #[serde(rename = "BOTH")]
        Both,
    }
    pub type CodeRouteOriginBaseType2182XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRouteOriginTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRouteOriginBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRouteSegmentPathBaseTypeXType {
        CodeRouteSegmentPathBaseType2183(CodeRouteSegmentPathBaseType2183XType),
        CodeRouteSegmentPathBaseType2184(CodeRouteSegmentPathBaseType2184XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRouteSegmentPathBaseType2183XType {
        #[serde(rename = "GRC")]
        Grc,
        #[serde(rename = "RHL")]
        Rhl,
        #[serde(rename = "GDS")]
        Gds,
    }
    pub type CodeRouteSegmentPathBaseType2184XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRouteSegmentPathTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRouteSegmentPathBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRouteTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRouteBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRuleProcedureBaseTypeXType {
        CodeRuleProcedureBaseType2185(CodeRuleProcedureBaseType2185XType),
        CodeRuleProcedureBaseType2186(CodeRuleProcedureBaseType2186XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRuleProcedureBaseType2185XType {
        #[serde(rename = "RULE")]
        Rule,
        #[serde(rename = "LAW")]
        Law,
        #[serde(rename = "PROCEDURE")]
        Procedure,
        #[serde(rename = "PRACTICE")]
        Practice,
        #[serde(rename = "ICAO_DIFF")]
        IcaoDiff,
    }
    pub type CodeRuleProcedureBaseType2186XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRuleProcedureTitleBaseTypeXType {
        CodeRuleProcedureTitleBaseType2187(CodeRuleProcedureTitleBaseType2187XType),
        CodeRuleProcedureTitleBaseType2188(CodeRuleProcedureTitleBaseType2188XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRuleProcedureTitleBaseType2187XType {
        #[serde(rename = "ENTRY_TRANSIT_DEPARTURE_OF_AIRCRAFT")]
        EntryTransitDepartureOfAircraft,
        #[serde(rename = "ENTRY_TRANSIT_DEPARTURE_SCHEDULED")]
        EntryTransitDepartureScheduled,
        #[serde(rename = "ENTRY_TRANSIT_DEPARTURE_NON_SCHEDULED")]
        EntryTransitDepartureNonScheduled,
        #[serde(rename = "ENTRY_TRANSIT_DEPARTURE_PRIVATE")]
        EntryTransitDeparturePrivate,
        #[serde(rename = "PUBLIC_HEALTH_MEASURES_AIRCRAFT")]
        PublicHealthMeasuresAircraft,
        #[serde(rename = "CUSTOMS_REQUIREMENTS")]
        CustomsRequirements,
        #[serde(rename = "IMMIGRATION_REQUIREMENTS")]
        ImmigrationRequirements,
        #[serde(rename = "PUBLIC_HEALTH_MEASURES_PASSENGERS")]
        PublicHealthMeasuresPassengers,
        #[serde(rename = "ENTRY_TRANSIT_DEPARTURE_CARGO")]
        EntryTransitDepartureCargo,
        #[serde(rename = "AIRCRAFT_INSTRUMENTS_EQUIPMENT_FLIGHT_DOCUMENTS")]
        AircraftInstrumentsEquipmentFlightDocuments,
        #[serde(rename = "NATIONAL_REGULATIONS")]
        NationalRegulations,
        #[serde(rename = "INTERNATIONAL_AGREEMENTS_CONVENTIONS")]
        InternationalAgreementsConventions,
        #[serde(rename = "DIFFERENCES_ICAO_STANDARDS_RECOMMENDED_PRACTICES_PROCEDURES")]
        DifferencesIcaoStandardsRecommendedPracticesProcedures,
        #[serde(rename = "MEASURING_SYSTEM_AIRCRAFT_MARKINGS_HOLIDAYS")]
        MeasuringSystemAircraftMarkingsHolidays,
        #[serde(rename = "ABBREVIATIONS_AIS_PUBLICATIONS")]
        AbbreviationsAisPublications,
        #[serde(rename = "AERODROME_HELIPORT_CHARGES")]
        AerodromeHeliportCharges,
        #[serde(rename = "AIR_NAVIGATION_SERVICES_CHARGES")]
        AirNavigationServicesCharges,
        #[serde(rename = "FLIGHT_RULES_GENERAL")]
        FlightRulesGeneral,
        #[serde(rename = "VISUAL_FLIGHT_RULES")]
        VisualFlightRules,
        #[serde(rename = "INSTRUMENT_FLIGHT_RULES")]
        InstrumentFlightRules,
        #[serde(rename = "ATS_AIRSPACE_CLASSIFICATION")]
        AtsAirspaceClassification,
        #[serde(rename = "HOLDING_APPROACH_DEPARTURE_PROCEDURES")]
        HoldingApproachDepartureProcedures,
        #[serde(rename = "ATS_SURVEILLANCE_SERVICES_PROCEDURES")]
        AtsSurveillanceServicesProcedures,
        #[serde(rename = "ALTIMETER_SETTING_PROCEDURES")]
        AltimeterSettingProcedures,
        #[serde(rename = "REGIONAL_SUPPLEMENTARY_PROCEDURES")]
        RegionalSupplementaryProcedures,
        #[serde(rename = "AIR_TRAFFIC_FLOW_MANAGEMENT")]
        AirTrafficFlowManagement,
        #[serde(rename = "FLIGHT_PLANNING")]
        FlightPlanning,
        #[serde(rename = "ADDRESSING_FLIGHT_PLAN_MESSAGES")]
        AddressingFlightPlanMessages,
        #[serde(rename = "INTERCEPTION_CIVIL_AIRCRAFT")]
        InterceptionCivilAircraft,
        #[serde(rename = "UNLAWFUL_INTERFERENCE")]
        UnlawfulInterference,
        #[serde(rename = "AIR_TRAFFIC_INCIDENTS")]
        AirTrafficIncidents,
        #[serde(rename = "AERODROME_HELIPORT_AVAILABILITY")]
        AerodromeHeliportAvailability,
        #[serde(rename = "LOCAL_TRAFFIC_REGULATIONS")]
        LocalTrafficRegulations,
        #[serde(rename = "NOISE_ABATEMENT_PROCEDURES")]
        NoiseAbatementProcedures,
        #[serde(rename = "AERODROME_FLIGHT_PROCEDURES")]
        AerodromeFlightProcedures,
        #[serde(rename = "AERODROME_BIRD_CONCENTRATION")]
        AerodromeBirdConcentration,
    }
    pub type CodeRuleProcedureTitleBaseType2188XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRuleProcedureTitleTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRuleProcedureTitleBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRuleProcedureTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRuleProcedureBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRunwayBaseTypeXType {
        CodeRunwayBaseType2189(CodeRunwayBaseType2189XType),
        CodeRunwayBaseType2190(CodeRunwayBaseType2190XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRunwayBaseType2189XType {
        #[serde(rename = "RWY")]
        Rwy,
        #[serde(rename = "FATO")]
        Fato,
    }
    pub type CodeRunwayBaseType2190XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRunwayElementBaseTypeXType {
        CodeRunwayElementBaseType2191(CodeRunwayElementBaseType2191XType),
        CodeRunwayElementBaseType2192(CodeRunwayElementBaseType2192XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRunwayElementBaseType2191XType {
        #[serde(rename = "NORMAL")]
        Normal,
        #[serde(rename = "INTERSECTION")]
        Intersection,
        #[serde(rename = "DISPLACED")]
        Displaced,
        #[serde(rename = "SHOULDER")]
        Shoulder,
    }
    pub type CodeRunwayElementBaseType2192XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRunwayElementTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRunwayElementBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRunwayMarkingBaseTypeXType {
        CodeRunwayMarkingBaseType2193(CodeRunwayMarkingBaseType2193XType),
        CodeRunwayMarkingBaseType2194(CodeRunwayMarkingBaseType2194XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRunwayMarkingBaseType2193XType {
        #[serde(rename = "PRECISION")]
        Precision,
        #[serde(rename = "NONPRECISION")]
        Nonprecision,
        #[serde(rename = "BASIC")]
        Basic,
        #[serde(rename = "NONE")]
        None,
        #[serde(rename = "RUNWAY_NUMBERS")]
        RunwayNumbers,
        #[serde(rename = "NON_STANDARD")]
        NonStandard,
        #[serde(rename = "HELIPORT")]
        Heliport,
    }
    pub type CodeRunwayMarkingBaseType2194XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRunwayMarkingTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRunwayMarkingBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRunwayPointRoleBaseTypeXType {
        CodeRunwayPointRoleBaseType2195(CodeRunwayPointRoleBaseType2195XType),
        CodeRunwayPointRoleBaseType2196(CodeRunwayPointRoleBaseType2196XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRunwayPointRoleBaseType2195XType {
        #[serde(rename = "START")]
        Start,
        #[serde(rename = "THR")]
        Thr,
        #[serde(rename = "DISTHR")]
        Disthr,
        #[serde(rename = "TDZ")]
        Tdz,
        #[serde(rename = "MID")]
        Mid,
        #[serde(rename = "END")]
        End,
        #[serde(rename = "START_RUN")]
        StartRun,
        #[serde(rename = "LAHSO")]
        Lahso,
        #[serde(rename = "ABEAM_GLIDESLOPE")]
        AbeamGlideslope,
        #[serde(rename = "ABEAM_PAR")]
        AbeamPar,
        #[serde(rename = "ABEAM_ELEVATION")]
        AbeamElevation,
        #[serde(rename = "ABEAM_TDR")]
        AbeamTdr,
        #[serde(rename = "ABEAM_RER")]
        AbeamRer,
    }
    pub type CodeRunwayPointRoleBaseType2196XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRunwayPointRoleTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRunwayPointRoleBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRunwayProtectionAreaBaseTypeXType {
        CodeRunwayProtectionAreaBaseType2197(CodeRunwayProtectionAreaBaseType2197XType),
        CodeRunwayProtectionAreaBaseType2198(CodeRunwayProtectionAreaBaseType2198XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRunwayProtectionAreaBaseType2197XType {
        #[serde(rename = "CWY")]
        Cwy,
        #[serde(rename = "RESA")]
        Resa,
        #[serde(rename = "OFZ")]
        Ofz,
        #[serde(rename = "IOFZ")]
        Iofz,
        #[serde(rename = "POFZ")]
        Pofz,
        #[serde(rename = "ILS")]
        Ils,
        #[serde(rename = "VGSI")]
        Vgsi,
        #[serde(rename = "STOPWAY")]
        Stopway,
    }
    pub type CodeRunwayProtectionAreaBaseType2198XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRunwayProtectionAreaTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRunwayProtectionAreaBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRunwaySectionBaseTypeXType {
        CodeRunwaySectionBaseType2199(CodeRunwaySectionBaseType2199XType),
        CodeRunwaySectionBaseType2200(CodeRunwaySectionBaseType2200XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRunwaySectionBaseType2199XType {
        #[serde(rename = "TDZ")]
        Tdz,
        #[serde(rename = "AIM")]
        Aim,
        #[serde(rename = "CL")]
        Cl,
        #[serde(rename = "EDGE")]
        Edge,
        #[serde(rename = "THR")]
        Thr,
        #[serde(rename = "DESIG")]
        Desig,
        #[serde(rename = "AFT_THR")]
        AftThr,
        #[serde(rename = "DTHR")]
        Dthr,
        #[serde(rename = "END")]
        End,
        #[serde(rename = "TWY_INT")]
        TwyInt,
        #[serde(rename = "RPD_TWY_INT")]
        RpdTwyInt,
        #[serde(rename = "1_THIRD")]
        _1Third,
        #[serde(rename = "2_THIRD")]
        _2Third,
        #[serde(rename = "3_THIRD")]
        _3Third,
    }
    pub type CodeRunwaySectionBaseType2200XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRunwaySectionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRunwaySectionBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeRunwayTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeRunwayBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRvrReadingBaseType2201XType {
        #[serde(rename = "TDZ")]
        Tdz,
        #[serde(rename = "MID")]
        Mid,
        #[serde(rename = "TO")]
        To,
    }
    pub type CodeRvrReadingBaseType2202XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRvsmBaseType2203XType {
        #[serde(rename = "RVSM")]
        Rvsm,
        #[serde(rename = "NON_RVSM")]
        NonRvsm,
    }
    pub type CodeRvsmBaseType2204XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeRvsmPointRoleBaseType2205XType {
        #[serde(rename = "IN")]
        In,
        #[serde(rename = "OUT")]
        Out,
        #[serde(rename = "IN_OUT")]
        InOut,
    }
    pub type CodeRvsmPointRoleBaseType2206XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSafeAltitudeBaseTypeXType {
        CodeSafeAltitudeBaseType2207(CodeSafeAltitudeBaseType2207XType),
        CodeSafeAltitudeBaseType2208(CodeSafeAltitudeBaseType2208XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSafeAltitudeBaseType2207XType {
        #[serde(rename = "MSA")]
        Msa,
        #[serde(rename = "ESA")]
        Esa,
    }
    pub type CodeSafeAltitudeBaseType2208XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeSafeAltitudeTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeSafeAltitudeBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSegmentPathBaseTypeXType {
        CodeSegmentPathBaseType2209(CodeSegmentPathBaseType2209XType),
        CodeSegmentPathBaseType2210(CodeSegmentPathBaseType2210XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSegmentPathBaseType2209XType {
        #[serde(rename = "AF")]
        Af,
        #[serde(rename = "HF")]
        Hf,
        #[serde(rename = "HA")]
        Ha,
        #[serde(rename = "HM")]
        Hm,
        #[serde(rename = "IF")]
        If,
        #[serde(rename = "PI")]
        Pi,
        #[serde(rename = "PT")]
        Pt,
        #[serde(rename = "TF")]
        Tf,
        #[serde(rename = "CA")]
        Ca,
        #[serde(rename = "CD")]
        Cd,
        #[serde(rename = "CI")]
        Ci,
        #[serde(rename = "CR")]
        Cr,
        #[serde(rename = "CF")]
        Cf,
        #[serde(rename = "DF")]
        Df,
        #[serde(rename = "FA")]
        Fa,
        #[serde(rename = "FC")]
        Fc,
        #[serde(rename = "FT")]
        Ft,
        #[serde(rename = "FM")]
        Fm,
        #[serde(rename = "VM")]
        Vm,
        #[serde(rename = "FD")]
        Fd,
        #[serde(rename = "VR")]
        Vr,
        #[serde(rename = "VD")]
        Vd,
        #[serde(rename = "VI")]
        Vi,
        #[serde(rename = "VA")]
        Va,
        #[serde(rename = "RF")]
        Rf,
    }
    pub type CodeSegmentPathBaseType2210XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeSegmentPathTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeSegmentPathBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSegmentTerminationBaseTypeXType {
        CodeSegmentTerminationBaseType2211(CodeSegmentTerminationBaseType2211XType),
        CodeSegmentTerminationBaseType2212(CodeSegmentTerminationBaseType2212XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSegmentTerminationBaseType2211XType {
        #[serde(rename = "ALTITUDE")]
        Altitude,
        #[serde(rename = "DISTANCE")]
        Distance,
        #[serde(rename = "DURATION")]
        Duration,
        #[serde(rename = "INTERCEPT")]
        Intercept,
    }
    pub type CodeSegmentTerminationBaseType2212XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeSegmentTerminationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeSegmentTerminationBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeServiceAtcBaseTypeXType {
        CodeServiceAtcBaseType2213(CodeServiceAtcBaseType2213XType),
        CodeServiceAtcBaseType2214(CodeServiceAtcBaseType2214XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeServiceAtcTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeServiceAtcBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeServiceAtfmBaseTypeXType {
        CodeServiceAtfmBaseType2215(CodeServiceAtfmBaseType2215XType),
        CodeServiceAtfmBaseType2216(CodeServiceAtfmBaseType2216XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeServiceAtfmTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeServiceAtfmBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeServiceAtcBaseType2213XType {
        #[serde(rename = "ACS")]
        Acs,
        #[serde(rename = "UAC")]
        Uac,
        #[serde(rename = "OACS")]
        Oacs,
        #[serde(rename = "APP")]
        App,
        #[serde(rename = "TWR")]
        Twr,
        #[serde(rename = "ADVS")]
        Advs,
        #[serde(rename = "EFAS")]
        Efas,
        #[serde(rename = "CTAF")]
        Ctaf,
    }
    pub type CodeServiceAtcBaseType2214XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeServiceAtfmBaseType2215XType {
        #[serde(rename = "FPL")]
        Fpl,
        #[serde(rename = "FPLV")]
        Fplv,
        #[serde(rename = "ATFM")]
        Atfm,
        #[serde(rename = "CLEARANCE")]
        Clearance,
        #[serde(rename = "SCHED")]
        Sched,
    }
    pub type CodeServiceAtfmBaseType2216XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeServiceGroundControlBaseTypeXType {
        CodeServiceGroundControlBaseType2217(CodeServiceGroundControlBaseType2217XType),
        CodeServiceGroundControlBaseType2218(CodeServiceGroundControlBaseType2218XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeServiceGroundControlBaseType2217XType {
        #[serde(rename = "TWR")]
        Twr,
        #[serde(rename = "SMGCS")]
        Smgcs,
        #[serde(rename = "TAXI")]
        Taxi,
    }
    pub type CodeServiceGroundControlBaseType2218XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeServiceGroundControlTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeServiceGroundControlBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeServiceInformationBaseTypeXType {
        CodeServiceInformationBaseType2219(CodeServiceInformationBaseType2219XType),
        CodeServiceInformationBaseType2220(CodeServiceInformationBaseType2220XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeServiceInformationBaseType2219XType {
        #[serde(rename = "AFIS")]
        Afis,
        #[serde(rename = "AIS")]
        Ais,
        #[serde(rename = "ATIS")]
        Atis,
        #[serde(rename = "BRIEFING")]
        Briefing,
        #[serde(rename = "FIS")]
        Fis,
        #[serde(rename = "OFIS_VHF")]
        OfisVhf,
        #[serde(rename = "OFIS_HF")]
        OfisHf,
        #[serde(rename = "NOTAM")]
        Notam,
        #[serde(rename = "INFO")]
        Info,
        #[serde(rename = "RAF")]
        Raf,
        #[serde(rename = "METAR")]
        Metar,
        #[serde(rename = "SIGMET")]
        Sigmet,
        #[serde(rename = "TWEB")]
        Tweb,
        #[serde(rename = "TAF")]
        Taf,
        #[serde(rename = "VOLMET")]
        Volmet,
        #[serde(rename = "ALTIMETER")]
        Altimeter,
        #[serde(rename = "ASOS")]
        Asos,
        #[serde(rename = "AWOS")]
        Awos,
    }
    pub type CodeServiceInformationBaseType2220XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeServiceInformationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeServiceInformationBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeServiceSarBaseTypeXType {
        CodeServiceSarBaseType2221(CodeServiceSarBaseType2221XType),
        CodeServiceSarBaseType2222(CodeServiceSarBaseType2222XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeServiceSarTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeServiceSarBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeServiceSarBaseType2221XType {
        #[serde(rename = "ALRS")]
        Alrs,
        #[serde(rename = "SAR")]
        Sar,
        #[serde(rename = "RCC")]
        Rcc,
    }
    pub type CodeServiceSarBaseType2222XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSideBaseTypeXType {
        CodeSideBaseType2223(CodeSideBaseType2223XType),
        CodeSideBaseType2224(CodeSideBaseType2224XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSideBaseType2223XType {
        #[serde(rename = "LEFT")]
        Left,
        #[serde(rename = "RIGHT")]
        Right,
        #[serde(rename = "BOTH")]
        Both,
    }
    pub type CodeSideBaseType2224XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeSideTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeSideBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSignalPerformanceIlsBaseTypeXType {
        CodeSignalPerformanceIlsBaseType2225(CodeSignalPerformanceIlsBaseType2225XType),
        CodeSignalPerformanceIlsBaseType2226(CodeSignalPerformanceIlsBaseType2226XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeSignalPerformanceIlsTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeSignalPerformanceIlsBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSignalPerformanceIlsBaseType2225XType {
        #[serde(rename = "I")]
        I,
        #[serde(rename = "II")]
        Ii,
        #[serde(rename = "III")]
        Iii,
        #[serde(rename = "IIIA")]
        Iiia,
        #[serde(rename = "IIIB")]
        Iiib,
        #[serde(rename = "IIIC")]
        Iiic,
    }
    pub type CodeSignalPerformanceIlsBaseType2226XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSpecialDateBaseTypeXType {
        CodeSpecialDateBaseType2227(CodeSpecialDateBaseType2227XType),
        CodeSpecialDateBaseType2228(CodeSpecialDateBaseType2228XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSpecialDateBaseType2227XType {
        #[serde(rename = "HOL")]
        Hol,
        #[serde(rename = "BUSY_FRI")]
        BusyFri,
    }
    pub type CodeSpecialDateBaseType2228XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeSpecialDateTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeSpecialDateBaseTypeXType,
    }
    pub type CodeSpecialNavigationChainDesignatorBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeSpecialNavigationChainDesignatorTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeSpecialNavigationChainDesignatorBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSpecialNavigationStationBaseTypeXType {
        CodeSpecialNavigationStationBaseType2229(CodeSpecialNavigationStationBaseType2229XType),
        CodeSpecialNavigationStationBaseType2230(CodeSpecialNavigationStationBaseType2230XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSpecialNavigationStationBaseType2229XType {
        #[serde(rename = "MASTER")]
        Master,
        #[serde(rename = "SLAVE")]
        Slave,
        #[serde(rename = "RED_SLAVE")]
        RedSlave,
        #[serde(rename = "GREEN_SLAVE")]
        GreenSlave,
        #[serde(rename = "PURPLE_SLAVE")]
        PurpleSlave,
    }
    pub type CodeSpecialNavigationStationBaseType2230XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeSpecialNavigationStationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeSpecialNavigationStationBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSpecialNavigationSystemBaseTypeXType {
        CodeSpecialNavigationSystemBaseType2231(CodeSpecialNavigationSystemBaseType2231XType),
        CodeSpecialNavigationSystemBaseType2232(CodeSpecialNavigationSystemBaseType2232XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSpecialNavigationSystemBaseType2231XType {
        #[serde(rename = "LORANA")]
        Lorana,
        #[serde(rename = "LORANC")]
        Loranc,
        #[serde(rename = "LORAND")]
        Lorand,
        #[serde(rename = "DECCA")]
        Decca,
        #[serde(rename = "GNSS")]
        Gnss,
    }
    pub type CodeSpecialNavigationSystemBaseType2232XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeSpecialNavigationSystemTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeSpecialNavigationSystemBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSpeedReferenceBaseTypeXType {
        CodeSpeedReferenceBaseType2233(CodeSpeedReferenceBaseType2233XType),
        CodeSpeedReferenceBaseType2234(CodeSpeedReferenceBaseType2234XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSpeedReferenceBaseType2233XType {
        #[serde(rename = "IAS")]
        Ias,
        #[serde(rename = "TAS")]
        Tas,
        #[serde(rename = "GS")]
        Gs,
    }
    pub type CodeSpeedReferenceBaseType2234XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeSpeedReferenceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeSpeedReferenceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeStandbyPowerBaseTypeXType {
        CodeStandbyPowerBaseType2235(CodeStandbyPowerBaseType2235XType),
        CodeStandbyPowerBaseType2236(CodeStandbyPowerBaseType2236XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeStandbyPowerBaseType2235XType {
        #[serde(rename = "BATTERY")]
        Battery,
        #[serde(rename = "COMMERCIAL")]
        Commercial,
        #[serde(rename = "GENERATOR")]
        Generator,
        #[serde(rename = "UNKNOWN")]
        Unknown,
        #[serde(rename = "NONE")]
        None,
    }
    pub type CodeStandbyPowerBaseType2236XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeStandbyPowerTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeStandbyPowerBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeStatusAirportBaseTypeXType {
        CodeStatusAirportBaseType2237(CodeStatusAirportBaseType2237XType),
        CodeStatusAirportBaseType2238(CodeStatusAirportBaseType2238XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeStatusAirportBaseType2237XType {
        #[serde(rename = "NORMAL")]
        Normal,
        #[serde(rename = "LIMITED")]
        Limited,
        #[serde(rename = "CLOSED")]
        Closed,
    }
    pub type CodeStatusAirportBaseType2238XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeStatusAirportTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeStatusAirportBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeStatusAirspaceBaseTypeXType {
        CodeStatusAirspaceBaseType2239(CodeStatusAirspaceBaseType2239XType),
        CodeStatusAirspaceBaseType2240(CodeStatusAirspaceBaseType2240XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeStatusAirspaceBaseType2239XType {
        #[serde(rename = "AVBL_FOR_ACTIVATION")]
        AvblForActivation,
        #[serde(rename = "ACTIVE")]
        Active,
        #[serde(rename = "IN_USE")]
        InUse,
        #[serde(rename = "INACTIVE")]
        Inactive,
        #[serde(rename = "INTERMITTENT")]
        Intermittent,
    }
    pub type CodeStatusAirspaceBaseType2240XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeStatusAirspaceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeStatusAirspaceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeStatusConstructionBaseTypeXType {
        CodeStatusConstructionBaseType2241(CodeStatusConstructionBaseType2241XType),
        CodeStatusConstructionBaseType2242(CodeStatusConstructionBaseType2242XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeStatusConstructionBaseType2241XType {
        #[serde(rename = "IN_CONSTRUCTION")]
        InConstruction,
        #[serde(rename = "COMPLETED")]
        Completed,
        #[serde(rename = "DEMOLITION_PLANNED")]
        DemolitionPlanned,
        #[serde(rename = "IN_DEMOLITION")]
        InDemolition,
    }
    pub type CodeStatusConstructionBaseType2242XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeStatusConstructionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeStatusConstructionBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeStatusNavaidBaseTypeXType {
        CodeStatusNavaidBaseType2243(CodeStatusNavaidBaseType2243XType),
        CodeStatusNavaidBaseType2244(CodeStatusNavaidBaseType2244XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeStatusNavaidBaseType2243XType {
        #[serde(rename = "OPERATIONAL")]
        Operational,
        #[serde(rename = "UNSERVICEABLE")]
        Unserviceable,
        #[serde(rename = "ONTEST")]
        Ontest,
        #[serde(rename = "INTERRUPT")]
        Interrupt,
        #[serde(rename = "PARTIAL")]
        Partial,
        #[serde(rename = "CONDITIONAL")]
        Conditional,
        #[serde(rename = "FALSE_INDICATION")]
        FalseIndication,
        #[serde(rename = "FALSE_POSSIBLE")]
        FalsePossible,
        #[serde(rename = "DISPLACED")]
        Displaced,
        #[serde(rename = "IN_CONSTRUCTION")]
        InConstruction,
    }
    pub type CodeStatusNavaidBaseType2244XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeStatusNavaidTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeStatusNavaidBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeStatusOperationsBaseTypeXType {
        CodeStatusOperationsBaseType2245(CodeStatusOperationsBaseType2245XType),
        CodeStatusOperationsBaseType2246(CodeStatusOperationsBaseType2246XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeStatusOperationsBaseType2245XType {
        #[serde(rename = "NORMAL")]
        Normal,
        #[serde(rename = "DOWNGRADED")]
        Downgraded,
        #[serde(rename = "UNSERVICEABLE")]
        Unserviceable,
        #[serde(rename = "WORK_IN_PROGRESS")]
        WorkInProgress,
    }
    pub type CodeStatusOperationsBaseType2246XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeStatusOperationsTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeStatusOperationsBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeStatusServiceBaseTypeXType {
        CodeStatusServiceBaseType2247(CodeStatusServiceBaseType2247XType),
        CodeStatusServiceBaseType2248(CodeStatusServiceBaseType2248XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeStatusServiceBaseType2247XType {
        #[serde(rename = "NORMAL")]
        Normal,
        #[serde(rename = "LIMITED")]
        Limited,
        #[serde(rename = "ONTEST")]
        Ontest,
        #[serde(rename = "UNSERVICEABLE")]
        Unserviceable,
    }
    pub type CodeStatusServiceBaseType2248XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeStatusServiceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeStatusServiceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSurfaceCompositionBaseTypeXType {
        CodeSurfaceCompositionBaseType2249(CodeSurfaceCompositionBaseType2249XType),
        CodeSurfaceCompositionBaseType2250(CodeSurfaceCompositionBaseType2250XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSurfaceCompositionBaseType2249XType {
        #[serde(rename = "ASPH")]
        Asph,
        #[serde(rename = "ASPH_GRASS")]
        AsphGrass,
        #[serde(rename = "CONC")]
        Conc,
        #[serde(rename = "CONC_ASPH")]
        ConcAsph,
        #[serde(rename = "CONC_GRS")]
        ConcGrs,
        #[serde(rename = "GRASS")]
        Grass,
        #[serde(rename = "SAND")]
        Sand,
        #[serde(rename = "WATER")]
        Water,
        #[serde(rename = "BITUM")]
        Bitum,
        #[serde(rename = "BRICK")]
        Brick,
        #[serde(rename = "MACADAM")]
        Macadam,
        #[serde(rename = "STONE")]
        Stone,
        #[serde(rename = "CORAL")]
        Coral,
        #[serde(rename = "CLAY")]
        Clay,
        #[serde(rename = "LATERITE")]
        Laterite,
        #[serde(rename = "GRAVEL")]
        Gravel,
        #[serde(rename = "EARTH")]
        Earth,
        #[serde(rename = "ICE")]
        Ice,
        #[serde(rename = "SNOW")]
        Snow,
        #[serde(rename = "MEMBRANE")]
        Membrane,
        #[serde(rename = "METAL")]
        Metal,
        #[serde(rename = "MATS")]
        Mats,
        #[serde(rename = "PIERCED_STEEL")]
        PiercedSteel,
        #[serde(rename = "WOOD")]
        Wood,
        #[serde(rename = "NON_BITUM_MIX")]
        NonBitumMix,
    }
    pub type CodeSurfaceCompositionBaseType2250XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeSurfaceCompositionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeSurfaceCompositionBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSurfaceConditionBaseTypeXType {
        CodeSurfaceConditionBaseType2251(CodeSurfaceConditionBaseType2251XType),
        CodeSurfaceConditionBaseType2252(CodeSurfaceConditionBaseType2252XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSurfaceConditionBaseType2251XType {
        #[serde(rename = "GOOD")]
        Good,
        #[serde(rename = "FAIR")]
        Fair,
        #[serde(rename = "POOR")]
        Poor,
        #[serde(rename = "UNSAFE")]
        Unsafe,
        #[serde(rename = "DEFORMED")]
        Deformed,
    }
    pub type CodeSurfaceConditionBaseType2252XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeSurfaceConditionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeSurfaceConditionBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSurfacePreparationBaseTypeXType {
        CodeSurfacePreparationBaseType2253(CodeSurfacePreparationBaseType2253XType),
        CodeSurfacePreparationBaseType2254(CodeSurfacePreparationBaseType2254XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSurfacePreparationBaseType2253XType {
        #[serde(rename = "NATURAL")]
        Natural,
        #[serde(rename = "ROLLED")]
        Rolled,
        #[serde(rename = "COMPACTED")]
        Compacted,
        #[serde(rename = "GRADED")]
        Graded,
        #[serde(rename = "GROOVED")]
        Grooved,
        #[serde(rename = "OILED")]
        Oiled,
        #[serde(rename = "PAVED")]
        Paved,
        #[serde(rename = "PFC")]
        Pfc,
        #[serde(rename = "AFSC")]
        Afsc,
        #[serde(rename = "RFSC")]
        Rfsc,
        #[serde(rename = "NON_GROOVED")]
        NonGrooved,
    }
    pub type CodeSurfacePreparationBaseType2254XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeSurfacePreparationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeSurfacePreparationBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSystemActivationBaseTypeXType {
        CodeSystemActivationBaseType2255(CodeSystemActivationBaseType2255XType),
        CodeSystemActivationBaseType2256(CodeSystemActivationBaseType2256XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeSystemActivationBaseType2255XType {
        #[serde(rename = "ON")]
        On,
        #[serde(rename = "ON_OR_OFF")]
        OnOrOff,
        #[serde(rename = "OFF")]
        Off,
    }
    pub type CodeSystemActivationBaseType2256XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeSystemActivationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeSystemActivationBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTaaBaseTypeXType {
        CodeTaaBaseType2257(CodeTaaBaseType2257XType),
        CodeTaaBaseType2258(CodeTaaBaseType2258XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeTaaTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeTaaBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTacanChannelBaseTypeXType {
        CodeTacanChannelBaseType2259(CodeTacanChannelBaseType2259XType),
        CodeTacanChannelBaseType2260(CodeTacanChannelBaseType2260XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeTacanChannelTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeTacanChannelBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTlofSectionBaseTypeXType {
        CodeTlofSectionBaseType2275(CodeTlofSectionBaseType2275XType),
        CodeTlofSectionBaseType2276(CodeTlofSectionBaseType2276XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeTlofSectionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeTlofSectionBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTaaBaseType2257XType {
        #[serde(rename = "LEFT_BASE")]
        LeftBase,
        #[serde(rename = "RIGHT_BASE")]
        RightBase,
        #[serde(rename = "STRAIGHT_IN")]
        StraightIn,
    }
    pub type CodeTaaBaseType2258XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTacanChannelBaseType2259XType {
        #[serde(rename = "1X")]
        _1X,
        #[serde(rename = "1Y")]
        _1Y,
        #[serde(rename = "2X")]
        _2X,
        #[serde(rename = "2Y")]
        _2Y,
        #[serde(rename = "3X")]
        _3X,
        #[serde(rename = "3Y")]
        _3Y,
        #[serde(rename = "4X")]
        _4X,
        #[serde(rename = "4Y")]
        _4Y,
        #[serde(rename = "5X")]
        _5X,
        #[serde(rename = "5Y")]
        _5Y,
        #[serde(rename = "6X")]
        _6X,
        #[serde(rename = "6Y")]
        _6Y,
        #[serde(rename = "7X")]
        _7X,
        #[serde(rename = "7Y")]
        _7Y,
        #[serde(rename = "8X")]
        _8X,
        #[serde(rename = "8Y")]
        _8Y,
        #[serde(rename = "9X")]
        _9X,
        #[serde(rename = "9Y")]
        _9Y,
        #[serde(rename = "10X")]
        _10X,
        #[serde(rename = "10Y")]
        _10Y,
        #[serde(rename = "11X")]
        _11X,
        #[serde(rename = "11Y")]
        _11Y,
        #[serde(rename = "12X")]
        _12X,
        #[serde(rename = "12Y")]
        _12Y,
        #[serde(rename = "13X")]
        _13X,
        #[serde(rename = "13Y")]
        _13Y,
        #[serde(rename = "14X")]
        _14X,
        #[serde(rename = "14Y")]
        _14Y,
        #[serde(rename = "15X")]
        _15X,
        #[serde(rename = "15Y")]
        _15Y,
        #[serde(rename = "16X")]
        _16X,
        #[serde(rename = "16Y")]
        _16Y,
        #[serde(rename = "17X")]
        _17X,
        #[serde(rename = "17Y")]
        _17Y,
        #[serde(rename = "17Z")]
        _17Z,
        #[serde(rename = "18X")]
        _18X,
        #[serde(rename = "18W")]
        _18W,
        #[serde(rename = "18Y")]
        _18Y,
        #[serde(rename = "18Z")]
        _18Z,
        #[serde(rename = "19X")]
        _19X,
        #[serde(rename = "19Y")]
        _19Y,
        #[serde(rename = "19Z")]
        _19Z,
        #[serde(rename = "20X")]
        _20X,
        #[serde(rename = "20W")]
        _20W,
        #[serde(rename = "20Y")]
        _20Y,
        #[serde(rename = "20Z")]
        _20Z,
        #[serde(rename = "21X")]
        _21X,
        #[serde(rename = "21Y")]
        _21Y,
        #[serde(rename = "21Z")]
        _21Z,
        #[serde(rename = "22X")]
        _22X,
        #[serde(rename = "22W")]
        _22W,
        #[serde(rename = "22Y")]
        _22Y,
        #[serde(rename = "22Z")]
        _22Z,
        #[serde(rename = "23X")]
        _23X,
        #[serde(rename = "23Y")]
        _23Y,
        #[serde(rename = "23Z")]
        _23Z,
        #[serde(rename = "24X")]
        _24X,
        #[serde(rename = "24W")]
        _24W,
        #[serde(rename = "24Y")]
        _24Y,
        #[serde(rename = "24Z")]
        _24Z,
        #[serde(rename = "25X")]
        _25X,
        #[serde(rename = "25Y")]
        _25Y,
        #[serde(rename = "25Z")]
        _25Z,
        #[serde(rename = "26X")]
        _26X,
        #[serde(rename = "26W")]
        _26W,
        #[serde(rename = "26Y")]
        _26Y,
        #[serde(rename = "26Z")]
        _26Z,
        #[serde(rename = "27X")]
        _27X,
        #[serde(rename = "27Y")]
        _27Y,
        #[serde(rename = "27Z")]
        _27Z,
        #[serde(rename = "28X")]
        _28X,
        #[serde(rename = "28W")]
        _28W,
        #[serde(rename = "28Y")]
        _28Y,
        #[serde(rename = "28Z")]
        _28Z,
        #[serde(rename = "29X")]
        _29X,
        #[serde(rename = "29Y")]
        _29Y,
        #[serde(rename = "29Z")]
        _29Z,
        #[serde(rename = "30X")]
        _30X,
        #[serde(rename = "30W")]
        _30W,
        #[serde(rename = "30Y")]
        _30Y,
        #[serde(rename = "30Z")]
        _30Z,
        #[serde(rename = "31X")]
        _31X,
        #[serde(rename = "31Y")]
        _31Y,
        #[serde(rename = "31Z")]
        _31Z,
        #[serde(rename = "32X")]
        _32X,
        #[serde(rename = "32W")]
        _32W,
        #[serde(rename = "32Y")]
        _32Y,
        #[serde(rename = "32Z")]
        _32Z,
        #[serde(rename = "33X")]
        _33X,
        #[serde(rename = "33Y")]
        _33Y,
        #[serde(rename = "33Z")]
        _33Z,
        #[serde(rename = "34X")]
        _34X,
        #[serde(rename = "34W")]
        _34W,
        #[serde(rename = "34Y")]
        _34Y,
        #[serde(rename = "34Z")]
        _34Z,
        #[serde(rename = "35X")]
        _35X,
        #[serde(rename = "35Y")]
        _35Y,
        #[serde(rename = "35Z")]
        _35Z,
        #[serde(rename = "36X")]
        _36X,
        #[serde(rename = "36W")]
        _36W,
        #[serde(rename = "36Y")]
        _36Y,
        #[serde(rename = "36Z")]
        _36Z,
        #[serde(rename = "37X")]
        _37X,
        #[serde(rename = "37Y")]
        _37Y,
        #[serde(rename = "37Z")]
        _37Z,
        #[serde(rename = "38X")]
        _38X,
        #[serde(rename = "38W")]
        _38W,
        #[serde(rename = "38Y")]
        _38Y,
        #[serde(rename = "38Z")]
        _38Z,
        #[serde(rename = "39X")]
        _39X,
        #[serde(rename = "39Y")]
        _39Y,
        #[serde(rename = "39Z")]
        _39Z,
        #[serde(rename = "40X")]
        _40X,
        #[serde(rename = "40W")]
        _40W,
        #[serde(rename = "40Y")]
        _40Y,
        #[serde(rename = "40Z")]
        _40Z,
        #[serde(rename = "41X")]
        _41X,
        #[serde(rename = "41Y")]
        _41Y,
        #[serde(rename = "41Z")]
        _41Z,
        #[serde(rename = "42X")]
        _42X,
        #[serde(rename = "42W")]
        _42W,
        #[serde(rename = "42Y")]
        _42Y,
        #[serde(rename = "42Z")]
        _42Z,
        #[serde(rename = "43X")]
        _43X,
        #[serde(rename = "43Y")]
        _43Y,
        #[serde(rename = "43Z")]
        _43Z,
        #[serde(rename = "44X")]
        _44X,
        #[serde(rename = "44W")]
        _44W,
        #[serde(rename = "44Y")]
        _44Y,
        #[serde(rename = "44Z")]
        _44Z,
        #[serde(rename = "45X")]
        _45X,
        #[serde(rename = "45Y")]
        _45Y,
        #[serde(rename = "45Z")]
        _45Z,
        #[serde(rename = "46X")]
        _46X,
        #[serde(rename = "46W")]
        _46W,
        #[serde(rename = "46Y")]
        _46Y,
        #[serde(rename = "46Z")]
        _46Z,
        #[serde(rename = "47X")]
        _47X,
        #[serde(rename = "47Y")]
        _47Y,
        #[serde(rename = "47Z")]
        _47Z,
        #[serde(rename = "48X")]
        _48X,
        #[serde(rename = "48W")]
        _48W,
        #[serde(rename = "48Y")]
        _48Y,
        #[serde(rename = "48Z")]
        _48Z,
        #[serde(rename = "49X")]
        _49X,
        #[serde(rename = "49Y")]
        _49Y,
        #[serde(rename = "49Z")]
        _49Z,
        #[serde(rename = "50X")]
        _50X,
        #[serde(rename = "50W")]
        _50W,
        #[serde(rename = "50Y")]
        _50Y,
        #[serde(rename = "50Z")]
        _50Z,
        #[serde(rename = "51X")]
        _51X,
        #[serde(rename = "51Y")]
        _51Y,
        #[serde(rename = "51Z")]
        _51Z,
        #[serde(rename = "52X")]
        _52X,
        #[serde(rename = "52W")]
        _52W,
        #[serde(rename = "52Y")]
        _52Y,
        #[serde(rename = "52Z")]
        _52Z,
        #[serde(rename = "53X")]
        _53X,
        #[serde(rename = "53Y")]
        _53Y,
        #[serde(rename = "53Z")]
        _53Z,
        #[serde(rename = "54X")]
        _54X,
        #[serde(rename = "54W")]
        _54W,
        #[serde(rename = "54Y")]
        _54Y,
        #[serde(rename = "54Z")]
        _54Z,
        #[serde(rename = "55X")]
        _55X,
        #[serde(rename = "55Y")]
        _55Y,
        #[serde(rename = "55Z")]
        _55Z,
        #[serde(rename = "56X")]
        _56X,
        #[serde(rename = "56W")]
        _56W,
        #[serde(rename = "56Y")]
        _56Y,
        #[serde(rename = "56Z")]
        _56Z,
        #[serde(rename = "57X")]
        _57X,
        #[serde(rename = "57Y")]
        _57Y,
        #[serde(rename = "58X")]
        _58X,
        #[serde(rename = "58Y")]
        _58Y,
        #[serde(rename = "59X")]
        _59X,
        #[serde(rename = "59Y")]
        _59Y,
        #[serde(rename = "60X")]
        _60X,
        #[serde(rename = "60Y")]
        _60Y,
        #[serde(rename = "61X")]
        _61X,
        #[serde(rename = "61Y")]
        _61Y,
        #[serde(rename = "62X")]
        _62X,
        #[serde(rename = "62Y")]
        _62Y,
        #[serde(rename = "63X")]
        _63X,
        #[serde(rename = "63Y")]
        _63Y,
        #[serde(rename = "64X")]
        _64X,
        #[serde(rename = "64Y")]
        _64Y,
        #[serde(rename = "65X")]
        _65X,
        #[serde(rename = "65Y")]
        _65Y,
        #[serde(rename = "66X")]
        _66X,
        #[serde(rename = "66Y")]
        _66Y,
        #[serde(rename = "67X")]
        _67X,
        #[serde(rename = "67Y")]
        _67Y,
        #[serde(rename = "68X")]
        _68X,
        #[serde(rename = "68Y")]
        _68Y,
        #[serde(rename = "69X")]
        _69X,
        #[serde(rename = "69Y")]
        _69Y,
        #[serde(rename = "70X")]
        _70X,
        #[serde(rename = "70Y")]
        _70Y,
        #[serde(rename = "71X")]
        _71X,
        #[serde(rename = "71Y")]
        _71Y,
        #[serde(rename = "72X")]
        _72X,
        #[serde(rename = "72Y")]
        _72Y,
        #[serde(rename = "73X")]
        _73X,
        #[serde(rename = "73Y")]
        _73Y,
        #[serde(rename = "74X")]
        _74X,
        #[serde(rename = "74Y")]
        _74Y,
        #[serde(rename = "75X")]
        _75X,
        #[serde(rename = "75Y")]
        _75Y,
        #[serde(rename = "76X")]
        _76X,
        #[serde(rename = "76Y")]
        _76Y,
        #[serde(rename = "77X")]
        _77X,
        #[serde(rename = "77Y")]
        _77Y,
        #[serde(rename = "78X")]
        _78X,
        #[serde(rename = "78Y")]
        _78Y,
        #[serde(rename = "79X")]
        _79X,
        #[serde(rename = "79Y")]
        _79Y,
        #[serde(rename = "80X")]
        _80X,
        #[serde(rename = "80Y")]
        _80Y,
        #[serde(rename = "80Z")]
        _80Z,
        #[serde(rename = "81X")]
        _81X,
        #[serde(rename = "81Y")]
        _81Y,
        #[serde(rename = "81Z")]
        _81Z,
        #[serde(rename = "82X")]
        _82X,
        #[serde(rename = "82Y")]
        _82Y,
        #[serde(rename = "82Z")]
        _82Z,
        #[serde(rename = "83X")]
        _83X,
        #[serde(rename = "83Y")]
        _83Y,
        #[serde(rename = "83Z")]
        _83Z,
        #[serde(rename = "84X")]
        _84X,
        #[serde(rename = "84Y")]
        _84Y,
        #[serde(rename = "84Z")]
        _84Z,
        #[serde(rename = "85X")]
        _85X,
        #[serde(rename = "85Y")]
        _85Y,
        #[serde(rename = "85Z")]
        _85Z,
        #[serde(rename = "86X")]
        _86X,
        #[serde(rename = "86Y")]
        _86Y,
        #[serde(rename = "86Z")]
        _86Z,
        #[serde(rename = "87X")]
        _87X,
        #[serde(rename = "87Y")]
        _87Y,
        #[serde(rename = "87Z")]
        _87Z,
        #[serde(rename = "88X")]
        _88X,
        #[serde(rename = "88Y")]
        _88Y,
        #[serde(rename = "88Z")]
        _88Z,
        #[serde(rename = "89X")]
        _89X,
        #[serde(rename = "89Y")]
        _89Y,
        #[serde(rename = "89Z")]
        _89Z,
        #[serde(rename = "90X")]
        _90X,
        #[serde(rename = "90Y")]
        _90Y,
        #[serde(rename = "90Z")]
        _90Z,
        #[serde(rename = "91X")]
        _91X,
        #[serde(rename = "91Y")]
        _91Y,
        #[serde(rename = "91Z")]
        _91Z,
        #[serde(rename = "92X")]
        _92X,
        #[serde(rename = "92Y")]
        _92Y,
        #[serde(rename = "92Z")]
        _92Z,
        #[serde(rename = "93X")]
        _93X,
        #[serde(rename = "93Y")]
        _93Y,
        #[serde(rename = "93Z")]
        _93Z,
        #[serde(rename = "94X")]
        _94X,
        #[serde(rename = "94Y")]
        _94Y,
        #[serde(rename = "94Z")]
        _94Z,
        #[serde(rename = "95X")]
        _95X,
        #[serde(rename = "95Y")]
        _95Y,
        #[serde(rename = "95Z")]
        _95Z,
        #[serde(rename = "96X")]
        _96X,
        #[serde(rename = "96Y")]
        _96Y,
        #[serde(rename = "96Z")]
        _96Z,
        #[serde(rename = "97X")]
        _97X,
        #[serde(rename = "97Y")]
        _97Y,
        #[serde(rename = "97Z")]
        _97Z,
        #[serde(rename = "98X")]
        _98X,
        #[serde(rename = "98Y")]
        _98Y,
        #[serde(rename = "98Z")]
        _98Z,
        #[serde(rename = "99X")]
        _99X,
        #[serde(rename = "99Y")]
        _99Y,
        #[serde(rename = "99Z")]
        _99Z,
        #[serde(rename = "100X")]
        _100X,
        #[serde(rename = "100Y")]
        _100Y,
        #[serde(rename = "100Z")]
        _100Z,
        #[serde(rename = "101X")]
        _101X,
        #[serde(rename = "101Y")]
        _101Y,
        #[serde(rename = "101Z")]
        _101Z,
        #[serde(rename = "102X")]
        _102X,
        #[serde(rename = "102Y")]
        _102Y,
        #[serde(rename = "102Z")]
        _102Z,
        #[serde(rename = "103X")]
        _103X,
        #[serde(rename = "103Y")]
        _103Y,
        #[serde(rename = "103Z")]
        _103Z,
        #[serde(rename = "104X")]
        _104X,
        #[serde(rename = "104Y")]
        _104Y,
        #[serde(rename = "104Z")]
        _104Z,
        #[serde(rename = "105X")]
        _105X,
        #[serde(rename = "105Y")]
        _105Y,
        #[serde(rename = "105Z")]
        _105Z,
        #[serde(rename = "106X")]
        _106X,
        #[serde(rename = "106Y")]
        _106Y,
        #[serde(rename = "106Z")]
        _106Z,
        #[serde(rename = "107X")]
        _107X,
        #[serde(rename = "107Y")]
        _107Y,
        #[serde(rename = "107Z")]
        _107Z,
        #[serde(rename = "108X")]
        _108X,
        #[serde(rename = "108Y")]
        _108Y,
        #[serde(rename = "108Z")]
        _108Z,
        #[serde(rename = "109X")]
        _109X,
        #[serde(rename = "109Y")]
        _109Y,
        #[serde(rename = "109Z")]
        _109Z,
        #[serde(rename = "110X")]
        _110X,
        #[serde(rename = "110Y")]
        _110Y,
        #[serde(rename = "110Z")]
        _110Z,
        #[serde(rename = "111X")]
        _111X,
        #[serde(rename = "111Y")]
        _111Y,
        #[serde(rename = "111Z")]
        _111Z,
        #[serde(rename = "112X")]
        _112X,
        #[serde(rename = "112Y")]
        _112Y,
        #[serde(rename = "112Z")]
        _112Z,
        #[serde(rename = "113X")]
        _113X,
        #[serde(rename = "113Y")]
        _113Y,
        #[serde(rename = "113Z")]
        _113Z,
        #[serde(rename = "114X")]
        _114X,
        #[serde(rename = "114Y")]
        _114Y,
        #[serde(rename = "114Z")]
        _114Z,
        #[serde(rename = "115X")]
        _115X,
        #[serde(rename = "115Y")]
        _115Y,
        #[serde(rename = "115Z")]
        _115Z,
        #[serde(rename = "116X")]
        _116X,
        #[serde(rename = "116Y")]
        _116Y,
        #[serde(rename = "116Z")]
        _116Z,
        #[serde(rename = "117X")]
        _117X,
        #[serde(rename = "117Y")]
        _117Y,
        #[serde(rename = "117Z")]
        _117Z,
        #[serde(rename = "118X")]
        _118X,
        #[serde(rename = "118Y")]
        _118Y,
        #[serde(rename = "118Z")]
        _118Z,
        #[serde(rename = "119X")]
        _119X,
        #[serde(rename = "119Y")]
        _119Y,
        #[serde(rename = "119Z")]
        _119Z,
        #[serde(rename = "120X")]
        _120X,
        #[serde(rename = "120Y")]
        _120Y,
        #[serde(rename = "121X")]
        _121X,
        #[serde(rename = "121Y")]
        _121Y,
        #[serde(rename = "122X")]
        _122X,
        #[serde(rename = "122Y")]
        _122Y,
        #[serde(rename = "123X")]
        _123X,
        #[serde(rename = "123Y")]
        _123Y,
        #[serde(rename = "124X")]
        _124X,
        #[serde(rename = "124Y")]
        _124Y,
        #[serde(rename = "125X")]
        _125X,
        #[serde(rename = "125Y")]
        _125Y,
        #[serde(rename = "126X")]
        _126X,
        #[serde(rename = "126Y")]
        _126Y,
    }
    pub type CodeTacanChannelBaseType2260XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTaxiwayBaseTypeXType {
        CodeTaxiwayBaseType2261(CodeTaxiwayBaseType2261XType),
        CodeTaxiwayBaseType2262(CodeTaxiwayBaseType2262XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTaxiwayBaseType2261XType {
        #[serde(rename = "AIR")]
        Air,
        #[serde(rename = "GND")]
        Gnd,
        #[serde(rename = "EXIT")]
        Exit,
        #[serde(rename = "FASTEXIT")]
        Fastexit,
        #[serde(rename = "STUB")]
        Stub,
        #[serde(rename = "TURN_AROUND")]
        TurnAround,
        #[serde(rename = "PARALLEL")]
        Parallel,
        #[serde(rename = "BYPASS")]
        Bypass,
    }
    pub type CodeTaxiwayBaseType2262XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTaxiwayElementBaseTypeXType {
        CodeTaxiwayElementBaseType2263(CodeTaxiwayElementBaseType2263XType),
        CodeTaxiwayElementBaseType2264(CodeTaxiwayElementBaseType2264XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTaxiwayElementBaseType2263XType {
        #[serde(rename = "NORMAL")]
        Normal,
        #[serde(rename = "INTERSECTION")]
        Intersection,
        #[serde(rename = "SHOULDER")]
        Shoulder,
        #[serde(rename = "HOLDING_BAY")]
        HoldingBay,
    }
    pub type CodeTaxiwayElementBaseType2264XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeTaxiwayElementTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeTaxiwayElementBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTaxiwaySectionBaseTypeXType {
        CodeTaxiwaySectionBaseType2265(CodeTaxiwaySectionBaseType2265XType),
        CodeTaxiwaySectionBaseType2266(CodeTaxiwaySectionBaseType2266XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTaxiwaySectionBaseType2265XType {
        #[serde(rename = "CL")]
        Cl,
        #[serde(rename = "EDGE")]
        Edge,
        #[serde(rename = "END")]
        End,
        #[serde(rename = "RWY_INT")]
        RwyInt,
        #[serde(rename = "TWY_INT")]
        TwyInt,
    }
    pub type CodeTaxiwaySectionBaseType2266XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeTaxiwaySectionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeTaxiwaySectionBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeTaxiwayTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeTaxiwayBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTelecomNetworkBaseTypeXType {
        CodeTelecomNetworkBaseType2267(CodeTelecomNetworkBaseType2267XType),
        CodeTelecomNetworkBaseType2268(CodeTelecomNetworkBaseType2268XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTelecomNetworkBaseType2267XType {
        #[serde(rename = "AFTN")]
        Aftn,
        #[serde(rename = "AMHS")]
        Amhs,
        #[serde(rename = "INTERNET")]
        Internet,
        #[serde(rename = "SITA")]
        Sita,
        #[serde(rename = "ACARS")]
        Acars,
        #[serde(rename = "ADNS")]
        Adns,
    }
    pub type CodeTelecomNetworkBaseType2268XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeTelecomNetworkTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeTelecomNetworkBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTimeEventBaseTypeXType {
        CodeTimeEventBaseType2269(CodeTimeEventBaseType2269XType),
        CodeTimeEventBaseType2270(CodeTimeEventBaseType2270XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTimeEventBaseType2269XType {
        #[serde(rename = "SR")]
        Sr,
        #[serde(rename = "SS")]
        Ss,
    }
    pub type CodeTimeEventBaseType2270XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTimeEventCombinationBaseTypeXType {
        CodeTimeEventCombinationBaseType2271(CodeTimeEventCombinationBaseType2271XType),
        CodeTimeEventCombinationBaseType2272(CodeTimeEventCombinationBaseType2272XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTimeEventCombinationBaseType2271XType {
        #[serde(rename = "EARLIEST")]
        Earliest,
        #[serde(rename = "LATEST")]
        Latest,
    }
    pub type CodeTimeEventCombinationBaseType2272XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeTimeEventCombinationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeTimeEventCombinationBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeTimeEventTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeTimeEventBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTimeReferenceBaseTypeXType {
        CodeTimeReferenceBaseType2273(CodeTimeReferenceBaseType2273XType),
        CodeTimeReferenceBaseType2274(CodeTimeReferenceBaseType2274XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTimeReferenceBaseType2273XType {
        #[serde(rename = "UTC")]
        Utc,
        #[serde(rename = "UTC-12")]
        UtcMinus12,
        #[serde(rename = "UTC-11")]
        UtcMinus11,
        #[serde(rename = "UTC-10")]
        UtcMinus10,
        #[serde(rename = "UTC-9")]
        UtcMinus9,
        #[serde(rename = "UTC-8")]
        UtcMinus8,
        #[serde(rename = "UTC-7")]
        UtcMinus7,
        #[serde(rename = "UTC-6")]
        UtcMinus6,
        #[serde(rename = "UTC-5")]
        UtcMinus5,
        #[serde(rename = "UTC-4")]
        UtcMinus4,
        #[serde(rename = "UTC-3")]
        UtcMinus3,
        #[serde(rename = "UTC-2")]
        UtcMinus2,
        #[serde(rename = "UTC-1")]
        UtcMinus1,
        #[serde(rename = "UTC+1")]
        UtcPlus1,
        #[serde(rename = "UTC+2")]
        UtcPlus2,
        #[serde(rename = "UTC+3")]
        UtcPlus3,
        #[serde(rename = "UTC+4")]
        UtcPlus4,
        #[serde(rename = "UTC+5")]
        UtcPlus5,
        #[serde(rename = "UTC+6")]
        UtcPlus6,
        #[serde(rename = "UTC+7")]
        UtcPlus7,
        #[serde(rename = "UTC+8")]
        UtcPlus8,
        #[serde(rename = "UTC+9")]
        UtcPlus9,
        #[serde(rename = "UTC+10")]
        UtcPlus10,
        #[serde(rename = "UTC+11")]
        UtcPlus11,
        #[serde(rename = "UTC+12")]
        UtcPlus12,
        #[serde(rename = "UTC+13")]
        UtcPlus13,
        #[serde(rename = "UTC+14")]
        UtcPlus14,
    }
    pub type CodeTimeReferenceBaseType2274XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeTimeReferenceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeTimeReferenceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTlofSectionBaseType2275XType {
        #[serde(rename = "AIM")]
        Aim,
        #[serde(rename = "EDGE")]
        Edge,
    }
    pub type CodeTlofSectionBaseType2276XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTrajectoryBaseTypeXType {
        CodeTrajectoryBaseType2277(CodeTrajectoryBaseType2277XType),
        CodeTrajectoryBaseType2278(CodeTrajectoryBaseType2278XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTrajectoryBaseType2277XType {
        #[serde(rename = "STRAIGHT")]
        Straight,
        #[serde(rename = "ARC")]
        Arc,
        #[serde(rename = "PT")]
        Pt,
        #[serde(rename = "BASETURN")]
        Baseturn,
        #[serde(rename = "HOLDING")]
        Holding,
    }
    pub type CodeTrajectoryBaseType2278XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeTrajectoryTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeTrajectoryBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTransponderBaseTypeXType {
        CodeTransponderBaseType2279(CodeTransponderBaseType2279XType),
        CodeTransponderBaseType2280(CodeTransponderBaseType2280XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeTransponderBaseType2279XType {
        #[serde(rename = "MODE_1")]
        Mode1,
        #[serde(rename = "MODE_2")]
        Mode2,
        #[serde(rename = "MODE_3A")]
        Mode3A,
        #[serde(rename = "MODE_4")]
        Mode4,
        #[serde(rename = "MODE_5")]
        Mode5,
        #[serde(rename = "MODE_C")]
        ModeC,
        #[serde(rename = "MODE_S")]
        ModeS,
    }
    pub type CodeTransponderBaseType2280XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeTransponderTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeTransponderBaseTypeXType,
    }
    pub type CodeUuidBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeUuidTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeUuidBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeUnitBaseTypeXType {
        CodeUnitBaseType2281(CodeUnitBaseType2281XType),
        CodeUnitBaseType2282(CodeUnitBaseType2282XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeUnitBaseType2281XType {
        #[serde(rename = "ACC")]
        Acc,
        #[serde(rename = "ADSU")]
        Adsu,
        #[serde(rename = "ADVC")]
        Advc,
        #[serde(rename = "ALPS")]
        Alps,
        #[serde(rename = "AOF")]
        Aof,
        #[serde(rename = "APP")]
        App,
        #[serde(rename = "APP_ARR")]
        AppArr,
        #[serde(rename = "APP_DEP")]
        AppDep,
        #[serde(rename = "ARO")]
        Aro,
        #[serde(rename = "ATCC")]
        Atcc,
        #[serde(rename = "ATFMU")]
        Atfmu,
        #[serde(rename = "ATMU")]
        Atmu,
        #[serde(rename = "ATSU")]
        Atsu,
        #[serde(rename = "BOF")]
        Bof,
        #[serde(rename = "BS")]
        Bs,
        #[serde(rename = "COM")]
        Com,
        #[serde(rename = "FCST")]
        Fcst,
        #[serde(rename = "FIC")]
        Fic,
        #[serde(rename = "GCA")]
        Gca,
        #[serde(rename = "MET")]
        Met,
        #[serde(rename = "MWO")]
        Mwo,
        #[serde(rename = "NOF")]
        Nof,
        #[serde(rename = "OAC")]
        Oac,
        #[serde(rename = "PAR")]
        Par,
        #[serde(rename = "RAD")]
        Rad,
        #[serde(rename = "RAFC")]
        Rafc,
        #[serde(rename = "RCC")]
        Rcc,
        #[serde(rename = "RSC")]
        Rsc,
        #[serde(rename = "SAR")]
        Sar,
        #[serde(rename = "SMC")]
        Smc,
        #[serde(rename = "SMR")]
        Smr,
        #[serde(rename = "SRA")]
        Sra,
        #[serde(rename = "SSR")]
        Ssr,
        #[serde(rename = "TAR")]
        Tar,
        #[serde(rename = "TWR")]
        Twr,
        #[serde(rename = "UAC")]
        Uac,
        #[serde(rename = "UDF")]
        Udf,
        #[serde(rename = "UIC")]
        Uic,
        #[serde(rename = "VDF")]
        Vdf,
        #[serde(rename = "WAFC")]
        Wafc,
        #[serde(rename = "ARTCC")]
        Artcc,
        #[serde(rename = "FSS")]
        Fss,
        #[serde(rename = "TRACON")]
        Tracon,
        #[serde(rename = "MIL")]
        Mil,
        #[serde(rename = "MILOPS")]
        Milops,
    }
    pub type CodeUnitBaseType2282XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeUnitDependencyBaseTypeXType {
        CodeUnitDependencyBaseType2283(CodeUnitDependencyBaseType2283XType),
        CodeUnitDependencyBaseType2284(CodeUnitDependencyBaseType2284XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeUnitDependencyBaseType2283XType {
        #[serde(rename = "OWNER")]
        Owner,
        #[serde(rename = "PROVIDER")]
        Provider,
        #[serde(rename = "ALTERNATE")]
        Alternate,
    }
    pub type CodeUnitDependencyBaseType2284XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeUnitDependencyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeUnitDependencyBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeUnitTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeUnitBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeUpperAlphaBaseTypeXType {
        CodeUpperAlphaBaseType2285(CodeUpperAlphaBaseType2285XType),
        CodeUpperAlphaBaseType2286(CodeUpperAlphaBaseType2286XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeUpperAlphaBaseType2285XType {
        #[serde(rename = "A")]
        A,
        #[serde(rename = "B")]
        B,
        #[serde(rename = "C")]
        C,
        #[serde(rename = "D")]
        D,
        #[serde(rename = "E")]
        E,
        #[serde(rename = "F")]
        F,
        #[serde(rename = "G")]
        G,
        #[serde(rename = "H")]
        H,
        #[serde(rename = "I")]
        I,
        #[serde(rename = "J")]
        J,
        #[serde(rename = "K")]
        K,
        #[serde(rename = "L")]
        L,
        #[serde(rename = "M")]
        M,
        #[serde(rename = "N")]
        N,
        #[serde(rename = "O")]
        O,
        #[serde(rename = "P")]
        P,
        #[serde(rename = "Q")]
        Q,
        #[serde(rename = "R")]
        R,
        #[serde(rename = "S")]
        S,
        #[serde(rename = "T")]
        T,
        #[serde(rename = "U")]
        U,
        #[serde(rename = "V")]
        V,
        #[serde(rename = "W")]
        W,
        #[serde(rename = "X")]
        X,
        #[serde(rename = "Y")]
        Y,
        #[serde(rename = "Z")]
        Z,
    }
    pub type CodeUpperAlphaBaseType2286XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeUpperAlphaTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeUpperAlphaBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeUsageLimitationBaseTypeXType {
        CodeUsageLimitationBaseType2287(CodeUsageLimitationBaseType2287XType),
        CodeUsageLimitationBaseType2288(CodeUsageLimitationBaseType2288XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeUsageLimitationBaseType2287XType {
        #[serde(rename = "PERMIT")]
        Permit,
        #[serde(rename = "CONDITIONAL")]
        Conditional,
        #[serde(rename = "FORBID")]
        Forbid,
        #[serde(rename = "RESERV")]
        Reserv,
    }
    pub type CodeUsageLimitationBaseType2288XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeUsageLimitationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeUsageLimitationBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeVasisBaseTypeXType {
        CodeVasisBaseType2291(CodeVasisBaseType2291XType),
        CodeVasisBaseType2292(CodeVasisBaseType2292XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeVasisTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeVasisBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeVorBaseTypeXType {
        CodeVorBaseType2305(CodeVorBaseType2305XType),
        CodeVorBaseType2306(CodeVorBaseType2306XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeVorTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeVorBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeValueInterpretationBaseTypeXType {
        CodeValueInterpretationBaseType2289(CodeValueInterpretationBaseType2289XType),
        CodeValueInterpretationBaseType2290(CodeValueInterpretationBaseType2290XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeValueInterpretationBaseType2289XType {
        #[serde(rename = "ABOVE")]
        Above,
        #[serde(rename = "AT_OR_ABOVE")]
        AtOrAbove,
        #[serde(rename = "AT_OR_BELOW")]
        AtOrBelow,
        #[serde(rename = "BELOW")]
        Below,
    }
    pub type CodeValueInterpretationBaseType2290XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeValueInterpretationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeValueInterpretationBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeVasisBaseType2291XType {
        #[serde(rename = "PAPI")]
        Papi,
        #[serde(rename = "APAPI")]
        Apapi,
        #[serde(rename = "HAPI")]
        Hapi,
        #[serde(rename = "VASIS")]
        Vasis,
        #[serde(rename = "AVASIS")]
        Avasis,
        #[serde(rename = "TVASIS")]
        Tvasis,
        #[serde(rename = "ATVASIS")]
        Atvasis,
        #[serde(rename = "3B_VASIS")]
        _3BVasis,
        #[serde(rename = "3B_AVASIS")]
        _3BAvasis,
        #[serde(rename = "3B_ATVASIS")]
        _3BAtvasis,
        #[serde(rename = "PVASI")]
        Pvasi,
        #[serde(rename = "TRCV")]
        Trcv,
        #[serde(rename = "PNI")]
        Pni,
        #[serde(rename = "ILU")]
        Ilu,
        #[serde(rename = "OLS")]
        Ols,
        #[serde(rename = "LCVASI")]
        Lcvasi,
    }
    pub type CodeVasisBaseType2292XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeVerticalDatumBaseTypeXType {
        CodeVerticalDatumBaseType2293(CodeVerticalDatumBaseType2293XType),
        CodeVerticalDatumBaseType2294(CodeVerticalDatumBaseType2294XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeVerticalDatumBaseType2293XType {
        #[serde(rename = "EGM_96")]
        Egm96,
        #[serde(rename = "AHD")]
        Ahd,
        #[serde(rename = "NAVD88")]
        Navd88,
    }
    pub type CodeVerticalDatumBaseType2294XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeVerticalDatumTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeVerticalDatumBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeVerticalReferenceBaseTypeXType {
        CodeVerticalReferenceBaseType2295(CodeVerticalReferenceBaseType2295XType),
        CodeVerticalReferenceBaseType2296(CodeVerticalReferenceBaseType2296XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeVerticalReferenceBaseType2295XType {
        #[serde(rename = "SFC")]
        Sfc,
        #[serde(rename = "MSL")]
        Msl,
        #[serde(rename = "W84")]
        W84,
        #[serde(rename = "STD")]
        Std,
    }
    pub type CodeVerticalReferenceBaseType2296XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeVerticalReferenceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeVerticalReferenceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeVerticalStructureBaseTypeXType {
        CodeVerticalStructureBaseType2297(CodeVerticalStructureBaseType2297XType),
        CodeVerticalStructureBaseType2298(CodeVerticalStructureBaseType2298XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeVerticalStructureBaseType2297XType {
        #[serde(rename = "AG_EQUIP")]
        AgEquip,
        #[serde(rename = "ANTENNA")]
        Antenna,
        #[serde(rename = "ARCH")]
        Arch,
        #[serde(rename = "BRIDGE")]
        Bridge,
        #[serde(rename = "BUILDING")]
        Building,
        #[serde(rename = "CABLE_CAR")]
        CableCar,
        #[serde(rename = "CATENARY")]
        Catenary,
        #[serde(rename = "COMPRESSED_AIR_SYSTEM")]
        CompressedAirSystem,
        #[serde(rename = "CONTROL_MONITORING_SYSTEM")]
        ControlMonitoringSystem,
        #[serde(rename = "CONTROL_TOWER")]
        ControlTower,
        #[serde(rename = "COOLING_TOWER")]
        CoolingTower,
        #[serde(rename = "CRANE")]
        Crane,
        #[serde(rename = "DAM")]
        Dam,
        #[serde(rename = "DOME")]
        Dome,
        #[serde(rename = "ELECTRICAL_EXIT_LIGHT")]
        ElectricalExitLight,
        #[serde(rename = "ELECTRICAL_SYSTEM")]
        ElectricalSystem,
        #[serde(rename = "ELEVATOR")]
        Elevator,
        #[serde(rename = "FENCE")]
        Fence,
        #[serde(rename = "FUEL_SYSTEM")]
        FuelSystem,
        #[serde(rename = "GATE")]
        Gate,
        #[serde(rename = "GENERAL_UTILITY")]
        GeneralUtility,
        #[serde(rename = "GRAIN_ELEVATOR")]
        GrainElevator,
        #[serde(rename = "HEAT_COOL_SYSTEM")]
        HeatCoolSystem,
        #[serde(rename = "INDUSTRIAL_SYSTEM")]
        IndustrialSystem,
        #[serde(rename = "LIGHTHOUSE")]
        Lighthouse,
        #[serde(rename = "MONUMENT")]
        Monument,
        #[serde(rename = "NATURAL_GAS_SYSTEM")]
        NaturalGasSystem,
        #[serde(rename = "NATURAL_HIGHPOINT")]
        NaturalHighpoint,
        #[serde(rename = "NAVAID")]
        Navaid,
        #[serde(rename = "NUCLEAR_REACTOR")]
        NuclearReactor,
        #[serde(rename = "POLE")]
        Pole,
        #[serde(rename = "POWER_PLANT")]
        PowerPlant,
        #[serde(rename = "REFINERY")]
        Refinery,
        #[serde(rename = "RIG")]
        Rig,
        #[serde(rename = "SALTWATER_SYSTEM")]
        SaltwaterSystem,
        #[serde(rename = "SIGN")]
        Sign,
        #[serde(rename = "SPIRE")]
        Spire,
        #[serde(rename = "STACK")]
        Stack,
        #[serde(rename = "STADIUM")]
        Stadium,
        #[serde(rename = "STORM_SYSTEM")]
        StormSystem,
        #[serde(rename = "TANK")]
        Tank,
        #[serde(rename = "TETHERED_BALLOON")]
        TetheredBalloon,
        #[serde(rename = "TOWER")]
        Tower,
        #[serde(rename = "TRAMWAY")]
        Tramway,
        #[serde(rename = "TRANSMISSION_LINE")]
        TransmissionLine,
        #[serde(rename = "TREE")]
        Tree,
        #[serde(rename = "URBAN")]
        Urban,
        #[serde(rename = "VEGETATION")]
        Vegetation,
        #[serde(rename = "WALL")]
        Wall,
        #[serde(rename = "WASTEWATER_SYSTEM")]
        WastewaterSystem,
        #[serde(rename = "WATER_SYSTEM")]
        WaterSystem,
        #[serde(rename = "WATER_TOWER")]
        WaterTower,
        #[serde(rename = "WINDMILL")]
        Windmill,
        #[serde(rename = "WINDMILL_FARMS")]
        WindmillFarms,
    }
    pub type CodeVerticalStructureBaseType2298XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeVerticalStructureMarkingBaseTypeXType {
        CodeVerticalStructureMarkingBaseType2299(CodeVerticalStructureMarkingBaseType2299XType),
        CodeVerticalStructureMarkingBaseType2300(CodeVerticalStructureMarkingBaseType2300XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeVerticalStructureMarkingBaseType2299XType {
        #[serde(rename = "MONOCOLOUR")]
        Monocolour,
        #[serde(rename = "CHEQUERED")]
        Chequered,
        #[serde(rename = "HBANDS")]
        Hbands,
        #[serde(rename = "VBANDS")]
        Vbands,
        #[serde(rename = "FLAG")]
        Flag,
        #[serde(rename = "MARKERS")]
        Markers,
    }
    pub type CodeVerticalStructureMarkingBaseType2300XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeVerticalStructureMarkingTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeVerticalStructureMarkingBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeVerticalStructureMaterialBaseTypeXType {
        CodeVerticalStructureMaterialBaseType2301(CodeVerticalStructureMaterialBaseType2301XType),
        CodeVerticalStructureMaterialBaseType2302(CodeVerticalStructureMaterialBaseType2302XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeVerticalStructureMaterialBaseType2301XType {
        #[serde(rename = "ADOBE_BRICK")]
        AdobeBrick,
        #[serde(rename = "ALUMINIUM")]
        Aluminium,
        #[serde(rename = "BRICK")]
        Brick,
        #[serde(rename = "CONCRETE")]
        Concrete,
        #[serde(rename = "FIBREGLASS")]
        Fibreglass,
        #[serde(rename = "GLASS")]
        Glass,
        #[serde(rename = "IRON")]
        Iron,
        #[serde(rename = "MASONRY")]
        Masonry,
        #[serde(rename = "METAL")]
        Metal,
        #[serde(rename = "MUD")]
        Mud,
        #[serde(rename = "PLANT")]
        Plant,
        #[serde(rename = "PRESTRESSED_CONCRETE")]
        PrestressedConcrete,
        #[serde(rename = "REINFORCED_CONCRETE")]
        ReinforcedConcrete,
        #[serde(rename = "SOD")]
        Sod,
        #[serde(rename = "STEEL")]
        Steel,
        #[serde(rename = "STONE")]
        Stone,
        #[serde(rename = "TREATED_TIMBER")]
        TreatedTimber,
        #[serde(rename = "WOOD")]
        Wood,
    }
    pub type CodeVerticalStructureMaterialBaseType2302XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeVerticalStructureMaterialTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeVerticalStructureMaterialBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeVerticalStructureTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeVerticalStructureBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeVisualDockingGuidanceBaseTypeXType {
        CodeVisualDockingGuidanceBaseType2303(CodeVisualDockingGuidanceBaseType2303XType),
        CodeVisualDockingGuidanceBaseType2304(CodeVisualDockingGuidanceBaseType2304XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeVisualDockingGuidanceBaseType2303XType {
        #[serde(rename = "AGNIS")]
        Agnis,
        #[serde(rename = "PAPA")]
        Papa,
        #[serde(rename = "SAFE_GATE")]
        SafeGate,
        #[serde(rename = "SAFE_DOC")]
        SafeDoc,
        #[serde(rename = "APIS")]
        Apis,
        #[serde(rename = "A_VDGS")]
        AVdgs,
        #[serde(rename = "AGNIS_STOP")]
        AgnisStop,
        #[serde(rename = "AGNIS_PAPA")]
        AgnisPapa,
    }
    pub type CodeVisualDockingGuidanceBaseType2304XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeVisualDockingGuidanceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeVisualDockingGuidanceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeVorBaseType2305XType {
        #[serde(rename = "VOR")]
        Vor,
        #[serde(rename = "DVOR")]
        Dvor,
        #[serde(rename = "VOT")]
        Vot,
    }
    pub type CodeVorBaseType2306XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeWakeTurbulenceBaseTypeXType {
        CodeWakeTurbulenceBaseType2307(CodeWakeTurbulenceBaseType2307XType),
        CodeWakeTurbulenceBaseType2308(CodeWakeTurbulenceBaseType2308XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeWakeTurbulenceBaseType2307XType {
        #[serde(rename = "LOW")]
        Low,
        #[serde(rename = "MEDIUM")]
        Medium,
        #[serde(rename = "HIGH")]
        High,
    }
    pub type CodeWakeTurbulenceBaseType2308XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeWakeTurbulenceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeWakeTurbulenceBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeWorkAreaBaseTypeXType {
        CodeWorkAreaBaseType2309(CodeWorkAreaBaseType2309XType),
        CodeWorkAreaBaseType2310(CodeWorkAreaBaseType2310XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeWorkAreaBaseType2309XType {
        #[serde(rename = "CONSTRUCTION")]
        Construction,
        #[serde(rename = "SURFACEWORK")]
        Surfacework,
        #[serde(rename = "PARKED")]
        Parked,
    }
    pub type CodeWorkAreaBaseType2310XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeWorkAreaTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeWorkAreaBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeYesNoBaseTypeXType {
        CodeYesNoBaseType2311(CodeYesNoBaseType2311XType),
        CodeYesNoBaseType2312(CodeYesNoBaseType2312XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CodeYesNoBaseType2311XType {
        #[serde(rename = "YES")]
        Yes,
        #[serde(rename = "NO")]
        No,
    }
    pub type CodeYesNoBaseType2312XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeYesNoTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: CodeYesNoBaseTypeXType,
    }
    pub type ConditionCombinationXElement = ConditionCombinationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ConditionCombinationPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ConditionCombination")]
        pub condition_combination: ConditionCombinationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ConditionCombinationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content128")]
        pub content_128: ConditionCombinationContent128XType,
        #[serde(rename = "Content129")]
        pub content_129: ConditionCombinationContent129XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ConditionCombinationTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for ConditionCombinationTypeXType {}
    pub type ConditionCombinationTypeExtensionXElement =
        ConditionCombinationTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ConditionCombinationTypeExtensionXElementType {
        #[serde(
            default = "ConditionCombinationTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ConditionCombinationTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ConditionCombinationTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractConditionCombinationExtension")]
        AbstractConditionCombinationExtension(AbstractConditionCombinationExtensionXElement),
    }
    pub type ContactInformationXElement = ContactInformationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ContactInformationPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ContactInformation")]
        pub contact_information: ContactInformationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ContactInformationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1505")]
        pub content_1505: ContactInformationContent1505XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ContactInformationTypeExtensionXElement>,
    }
    pub type ContactInformationTypeExtensionXElement = ContactInformationTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ContactInformationTypeExtensionXElementType {
        #[serde(
            default = "ContactInformationTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ContactInformationTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ContactInformationTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractContactInformationExtension")]
        AbstractContactInformationExtension(AbstractContactInformationExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CurveXElement(pub Box<dyn CurveXElementTrait>);
    pub trait CurveXElementTrait: super::gml::CurveXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CurvePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "Curve")]
        pub curve: CurveXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CurveTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::gml::Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<super::gml::NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<super::gml::NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "segments")]
        pub segments: super::gml::SegmentsXElement,
        #[serde(rename = "Content649")]
        pub content_649: CurveContent649XType,
    }
    impl super::gml::AbstractCurveXElementTrait for CurveTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for CurveTypeXType {}
    impl super::gml::AbstractGeometricPrimitiveXElementTrait for CurveTypeXType {}
    impl super::gml::AbstractGeometryXElementTrait for CurveTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for CurveTypeXType {}
    impl super::gml::CurveXElementTrait for CurveTypeXType {}
    impl CurveXElementTrait for CurveTypeXType {}
    pub type DmeXElement = DmeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DmePropertyTypeXType {
        #[serde(default = "DmePropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type DmeTimeSliceXElement = DmeTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DmeTimeSlicePropertyTypeXType {
        #[serde(
            default = "DmeTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "DMETimeSlice")]
        pub dme_time_slice: DmeTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DmeTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content759")]
        pub content_759: DmeTimeSliceContent759XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<DmeTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for DmeTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for DmeTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for DmeTimeSliceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DmeTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<DmeTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for DmeTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for DmeTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for DmeTypeXType {}
    impl AbstractAixmFeatureXElementTrait for DmeTypeXType {}
    impl AbstractNavaidEquipmentXElementTrait for DmeTypeXType {}
    pub type DateBaseTypeXType = String;
    pub type DateMonthDayBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DateMonthDayTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: DateMonthDayBaseTypeXType,
    }
    pub type DateTimeBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DateTimeTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: DateTimeBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DateTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: DateBaseTypeXType,
    }
    pub type DateYearBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DateYearTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: DateYearBaseTypeXType,
    }
    pub type DeicingAreaXElement = DeicingAreaTypeXType;
    pub type DeicingAreaMarkingXElement = DeicingAreaMarkingTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DeicingAreaMarkingPropertyTypeXType {
        #[serde(
            default = "DeicingAreaMarkingPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type DeicingAreaMarkingTimeSliceXElement = DeicingAreaMarkingTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DeicingAreaMarkingTimeSlicePropertyTypeXType {
        #[serde(
            default = "DeicingAreaMarkingTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "DeicingAreaMarkingTimeSlice")]
        pub deicing_area_marking_time_slice: DeicingAreaMarkingTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DeicingAreaMarkingTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content332")]
        pub content_332: DeicingAreaMarkingTimeSliceContent332XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<DeicingAreaMarkingTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for DeicingAreaMarkingTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for DeicingAreaMarkingTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for DeicingAreaMarkingTimeSliceTypeXType {}
    pub type DeicingAreaMarkingTimeSliceTypeExtensionXElement =
        DeicingAreaMarkingTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DeicingAreaMarkingTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "DeicingAreaMarkingTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: DeicingAreaMarkingTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DeicingAreaMarkingTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractDeicingAreaMarkingExtension")]
        AbstractDeicingAreaMarkingExtension(AbstractDeicingAreaMarkingExtensionXElement),
        #[serde(rename = "AbstractMarkingExtension")]
        AbstractMarkingExtension(AbstractMarkingExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DeicingAreaMarkingTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<DeicingAreaMarkingTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for DeicingAreaMarkingTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for DeicingAreaMarkingTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for DeicingAreaMarkingTypeXType {}
    impl AbstractAixmFeatureXElementTrait for DeicingAreaMarkingTypeXType {}
    impl AbstractMarkingXElementTrait for DeicingAreaMarkingTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DeicingAreaPropertyTypeXType {
        #[serde(
            default = "DeicingAreaPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type DeicingAreaTimeSliceXElement = DeicingAreaTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DeicingAreaTimeSlicePropertyTypeXType {
        #[serde(
            default = "DeicingAreaTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "DeicingAreaTimeSlice")]
        pub deicing_area_time_slice: DeicingAreaTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DeicingAreaTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content203")]
        pub content_203: DeicingAreaTimeSliceContent203XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<DeicingAreaTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for DeicingAreaTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for DeicingAreaTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for DeicingAreaTimeSliceTypeXType {}
    pub type DeicingAreaTimeSliceTypeExtensionXElement =
        DeicingAreaTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DeicingAreaTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "DeicingAreaTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractDeicingAreaExtension")]
        pub abstract_deicing_area_extension: AbstractDeicingAreaExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DeicingAreaTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<DeicingAreaTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for DeicingAreaTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for DeicingAreaTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for DeicingAreaTypeXType {}
    impl AbstractAixmFeatureXElementTrait for DeicingAreaTypeXType {}
    pub type DepartureArrivalConditionXElement = DepartureArrivalConditionTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DepartureArrivalConditionPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "DepartureArrivalCondition")]
        pub departure_arrival_condition: DepartureArrivalConditionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DepartureArrivalConditionTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1099")]
        pub content_1099: DepartureArrivalConditionContent1099XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<DepartureArrivalConditionTypeExtensionXElement>,
    }
    pub type DepartureArrivalConditionTypeExtensionXElement =
        DepartureArrivalConditionTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DepartureArrivalConditionTypeExtensionXElementType {
        #[serde(
            default = "DepartureArrivalConditionTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: DepartureArrivalConditionTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DepartureArrivalConditionTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractDepartureArrivalConditionExtension")]
        AbstractDepartureArrivalConditionExtension(
            AbstractDepartureArrivalConditionExtensionXElement,
        ),
    }
    pub type DepartureLegXElement = DepartureLegTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DepartureLegPropertyTypeXType {
        #[serde(
            default = "DepartureLegPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type DepartureLegTimeSliceXElement = DepartureLegTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DepartureLegTimeSlicePropertyTypeXType {
        #[serde(
            default = "DepartureLegTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "DepartureLegTimeSlice")]
        pub departure_leg_time_slice: DepartureLegTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DepartureLegTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1166")]
        pub content_1166: DepartureLegTimeSliceContent1166XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<DepartureLegTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for DepartureLegTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for DepartureLegTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for DepartureLegTimeSliceTypeXType {}
    pub type DepartureLegTimeSliceTypeExtensionXElement =
        DepartureLegTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DepartureLegTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "DepartureLegTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: DepartureLegTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DepartureLegTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractDepartureLegExtension")]
        AbstractDepartureLegExtension(AbstractDepartureLegExtensionXElement),
        #[serde(rename = "AbstractSegmentLegExtension")]
        AbstractSegmentLegExtension(AbstractSegmentLegExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DepartureLegTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<DepartureLegTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for DepartureLegTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for DepartureLegTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for DepartureLegTypeXType {}
    impl AbstractAixmFeatureXElementTrait for DepartureLegTypeXType {}
    impl AbstractSegmentLegXElementTrait for DepartureLegTypeXType {}
    pub type DesignatedPointXElement = DesignatedPointTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DesignatedPointPropertyTypeXType {
        #[serde(
            default = "DesignatedPointPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type DesignatedPointTimeSliceXElement = DesignatedPointTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DesignatedPointTimeSlicePropertyTypeXType {
        #[serde(
            default = "DesignatedPointTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "DesignatedPointTimeSlice")]
        pub designated_point_time_slice: DesignatedPointTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DesignatedPointTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content916")]
        pub content_916: DesignatedPointTimeSliceContent916XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<DesignatedPointTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for DesignatedPointTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for DesignatedPointTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for DesignatedPointTimeSliceTypeXType {}
    pub type DesignatedPointTimeSliceTypeExtensionXElement =
        DesignatedPointTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DesignatedPointTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "DesignatedPointTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractDesignatedPointExtension")]
        pub abstract_designated_point_extension: AbstractDesignatedPointExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DesignatedPointTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<DesignatedPointTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for DesignatedPointTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for DesignatedPointTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for DesignatedPointTypeXType {}
    impl AbstractAixmFeatureXElementTrait for DesignatedPointTypeXType {}
    pub type DirectFlightClassXElement = DirectFlightClassTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectFlightClassPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "DirectFlightClass")]
        pub direct_flight_class: DirectFlightClassXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectFlightClassTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1301")]
        pub content_1301: DirectFlightClassContent1301XType,
        #[serde(rename = "Content1302")]
        pub content_1302: DirectFlightClassContent1302XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<DirectFlightClassTypeExtensionXElement>,
    }
    impl AbstractDirectFlightXElementTrait for DirectFlightClassTypeXType {}
    pub type DirectFlightClassTypeExtensionXElement = DirectFlightClassTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectFlightClassTypeExtensionXElementType {
        #[serde(
            default = "DirectFlightClassTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: DirectFlightClassTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DirectFlightClassTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractDirectFlightExtension")]
        AbstractDirectFlightExtension(AbstractDirectFlightExtensionXElement),
        #[serde(rename = "AbstractDirectFlightClassExtension")]
        AbstractDirectFlightClassExtension(AbstractDirectFlightClassExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectFlightPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AbstractDirectFlight")]
        pub abstract_direct_flight: AbstractDirectFlightXElement,
    }
    pub type DirectFlightSegmentXElement = DirectFlightSegmentTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectFlightSegmentPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "DirectFlightSegment")]
        pub direct_flight_segment: DirectFlightSegmentXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectFlightSegmentTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1307")]
        pub content_1307: DirectFlightSegmentContent1307XType,
        #[serde(rename = "Content1308")]
        pub content_1308: DirectFlightSegmentContent1308XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<DirectFlightSegmentTypeExtensionXElement>,
    }
    impl AbstractDirectFlightXElementTrait for DirectFlightSegmentTypeXType {}
    pub type DirectFlightSegmentTypeExtensionXElement =
        DirectFlightSegmentTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectFlightSegmentTypeExtensionXElementType {
        #[serde(
            default = "DirectFlightSegmentTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: DirectFlightSegmentTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DirectFlightSegmentTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractDirectFlightExtension")]
        AbstractDirectFlightExtension(AbstractDirectFlightExtensionXElement),
        #[serde(rename = "AbstractDirectFlightSegmentExtension")]
        AbstractDirectFlightSegmentExtension(AbstractDirectFlightSegmentExtensionXElement),
    }
    pub type DirectionFinderXElement = DirectionFinderTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectionFinderPropertyTypeXType {
        #[serde(
            default = "DirectionFinderPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type DirectionFinderTimeSliceXElement = DirectionFinderTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectionFinderTimeSlicePropertyTypeXType {
        #[serde(
            default = "DirectionFinderTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "DirectionFinderTimeSlice")]
        pub direction_finder_time_slice: DirectionFinderTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectionFinderTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content751")]
        pub content_751: DirectionFinderTimeSliceContent751XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<DirectionFinderTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for DirectionFinderTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for DirectionFinderTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for DirectionFinderTimeSliceTypeXType {}
    pub type DirectionFinderTimeSliceTypeExtensionXElement =
        DirectionFinderTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectionFinderTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "DirectionFinderTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: DirectionFinderTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DirectionFinderTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractDirectionFinderExtension")]
        AbstractDirectionFinderExtension(AbstractDirectionFinderExtensionXElement),
        #[serde(rename = "AbstractNavaidEquipmentExtension")]
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectionFinderTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<DirectionFinderTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for DirectionFinderTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for DirectionFinderTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for DirectionFinderTypeXType {}
    impl AbstractAixmFeatureXElementTrait for DirectionFinderTypeXType {}
    impl AbstractNavaidEquipmentXElementTrait for DirectionFinderTypeXType {}
    pub type DistanceIndicationXElement = DistanceIndicationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DistanceIndicationPropertyTypeXType {
        #[serde(
            default = "DistanceIndicationPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type DistanceIndicationTimeSliceXElement = DistanceIndicationTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DistanceIndicationTimeSlicePropertyTypeXType {
        #[serde(
            default = "DistanceIndicationTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "DistanceIndicationTimeSlice")]
        pub distance_indication_time_slice: DistanceIndicationTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DistanceIndicationTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content888")]
        pub content_888: DistanceIndicationTimeSliceContent888XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<DistanceIndicationTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for DistanceIndicationTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for DistanceIndicationTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for DistanceIndicationTimeSliceTypeXType {}
    pub type DistanceIndicationTimeSliceTypeExtensionXElement =
        DistanceIndicationTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DistanceIndicationTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "DistanceIndicationTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractDistanceIndicationExtension")]
        pub abstract_distance_indication_extension: AbstractDistanceIndicationExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DistanceIndicationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<DistanceIndicationTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for DistanceIndicationTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for DistanceIndicationTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for DistanceIndicationTypeXType {}
    impl AbstractAixmFeatureXElementTrait for DistanceIndicationTypeXType {}
    pub type DmeTimeSliceTypeExtensionXElement = DmeTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DmeTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "DmeTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: DmeTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DmeTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractDMEExtension")]
        AbstractDmeExtension(AbstractDmeExtensionXElement),
        #[serde(rename = "AbstractNavaidEquipmentExtension")]
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtensionXElement),
    }
    pub type ElevatedCurveXElement = ElevatedCurveTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ElevatedCurvePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ElevatedCurve")]
        pub elevated_curve: ElevatedCurveXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ElevatedCurveTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::gml::Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<super::gml::NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<super::gml::NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "segments")]
        pub segments: super::gml::SegmentsXElement,
        #[serde(rename = "Content649")]
        pub content_649: CurveContent649XType,
        #[serde(rename = "Content653")]
        pub content_653: ElevatedCurveContent653XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ElevatedCurveTypeExtensionXElement>,
    }
    impl super::gml::AbstractCurveXElementTrait for ElevatedCurveTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for ElevatedCurveTypeXType {}
    impl super::gml::AbstractGeometricPrimitiveXElementTrait for ElevatedCurveTypeXType {}
    impl super::gml::AbstractGeometryXElementTrait for ElevatedCurveTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ElevatedCurveTypeXType {}
    impl super::gml::CurveXElementTrait for ElevatedCurveTypeXType {}
    impl CurveXElementTrait for ElevatedCurveTypeXType {}
    pub type ElevatedCurveTypeExtensionXElement = ElevatedCurveTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ElevatedCurveTypeExtensionXElementType {
        #[serde(
            default = "ElevatedCurveTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ElevatedCurveTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ElevatedCurveTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractElevatedCurveExtension")]
        AbstractElevatedCurveExtension(AbstractElevatedCurveExtensionXElement),
    }
    pub type ElevatedPointXElement = ElevatedPointTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ElevatedPointPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ElevatedPoint")]
        pub elevated_point: ElevatedPointXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ElevatedPointTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::gml::Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<super::gml::NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<super::gml::NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content658")]
        pub content_658: super::gml::PointContent658XType,
        #[serde(rename = "Content661")]
        pub content_661: PointContent661XType,
        #[serde(rename = "Content664")]
        pub content_664: ElevatedPointContent664XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ElevatedPointTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for ElevatedPointTypeXType {}
    impl super::gml::AbstractGeometricPrimitiveXElementTrait for ElevatedPointTypeXType {}
    impl super::gml::AbstractGeometryXElementTrait for ElevatedPointTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ElevatedPointTypeXType {}
    impl super::gml::PointXElementTrait for ElevatedPointTypeXType {}
    impl PointXElementTrait for ElevatedPointTypeXType {}
    pub type ElevatedPointTypeExtensionXElement = ElevatedPointTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ElevatedPointTypeExtensionXElementType {
        #[serde(
            default = "ElevatedPointTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ElevatedPointTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ElevatedPointTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractElevatedPointExtension")]
        AbstractElevatedPointExtension(AbstractElevatedPointExtensionXElement),
    }
    pub type ElevatedSurfaceXElement = ElevatedSurfaceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ElevatedSurfacePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ElevatedSurface")]
        pub elevated_surface: ElevatedSurfaceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ElevatedSurfaceTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::gml::Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<super::gml::NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<super::gml::NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "patches")]
        pub patches: super::gml::PatchesXElement,
        #[serde(rename = "Content672")]
        pub content_672: SurfaceContent672XType,
        #[serde(rename = "Content675")]
        pub content_675: ElevatedSurfaceContent675XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ElevatedSurfaceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for ElevatedSurfaceTypeXType {}
    impl super::gml::AbstractGeometricPrimitiveXElementTrait for ElevatedSurfaceTypeXType {}
    impl super::gml::AbstractGeometryXElementTrait for ElevatedSurfaceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ElevatedSurfaceTypeXType {}
    impl super::gml::AbstractSurfaceXElementTrait for ElevatedSurfaceTypeXType {}
    impl super::gml::SurfaceXElementTrait for ElevatedSurfaceTypeXType {}
    impl SurfaceXElementTrait for ElevatedSurfaceTypeXType {}
    pub type ElevatedSurfaceTypeExtensionXElement = ElevatedSurfaceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ElevatedSurfaceTypeExtensionXElementType {
        #[serde(
            default = "ElevatedSurfaceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ElevatedSurfaceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ElevatedSurfaceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractElevatedSurfaceExtension")]
        AbstractElevatedSurfaceExtension(AbstractElevatedSurfaceExtensionXElement),
    }
    pub type ElevationXElement = ElevationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ElevationPropertyTypeXType {
        #[serde(default = "ElevationPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type ElevationTimeSliceXElement = ElevationTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ElevationTimeSlicePropertyTypeXType {
        #[serde(
            default = "ElevationTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "ElevationTimeSlice")]
        pub elevation_time_slice: ElevationTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ElevationTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content767")]
        pub content_767: ElevationTimeSliceContent767XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ElevationTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for ElevationTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ElevationTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for ElevationTimeSliceTypeXType {}
    pub type ElevationTimeSliceTypeExtensionXElement = ElevationTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ElevationTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "ElevationTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ElevationTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ElevationTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractElevationExtension")]
        AbstractElevationExtension(AbstractElevationExtensionXElement),
        #[serde(rename = "AbstractNavaidEquipmentExtension")]
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ElevationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<ElevationTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for ElevationTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for ElevationTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ElevationTypeXType {}
    impl AbstractAixmFeatureXElementTrait for ElevationTypeXType {}
    impl AbstractNavaidEquipmentXElementTrait for ElevationTypeXType {}
    pub type EnRouteSegmentPointXElement = EnRouteSegmentPointTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EnRouteSegmentPointPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "EnRouteSegmentPoint")]
        pub en_route_segment_point: EnRouteSegmentPointXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EnRouteSegmentPointTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content893")]
        pub content_893: EnRouteSegmentPointContent893XType,
        #[serde(rename = "Content895")]
        pub content_895: EnRouteSegmentPointContent895XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<EnRouteSegmentPointTypeExtensionXElement>,
    }
    impl AbstractSegmentPointXElementTrait for EnRouteSegmentPointTypeXType {}
    pub type EnRouteSegmentPointTypeExtensionXElement =
        EnRouteSegmentPointTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EnRouteSegmentPointTypeExtensionXElementType {
        #[serde(
            default = "EnRouteSegmentPointTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: EnRouteSegmentPointTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum EnRouteSegmentPointTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractSegmentPointExtension")]
        AbstractSegmentPointExtension(AbstractSegmentPointExtensionXElement),
        #[serde(rename = "AbstractEnRouteSegmentPointExtension")]
        AbstractEnRouteSegmentPointExtension(AbstractEnRouteSegmentPointExtensionXElement),
    }
    pub type EquipmentUnavailableAdjustmentXElement = EquipmentUnavailableAdjustmentTypeXType;
    pub type EquipmentUnavailableAdjustmentColumnXElement =
        EquipmentUnavailableAdjustmentColumnTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EquipmentUnavailableAdjustmentColumnPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "EquipmentUnavailableAdjustmentColumn")]
        pub equipment_unavailable_adjustment_column: EquipmentUnavailableAdjustmentColumnXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EquipmentUnavailableAdjustmentColumnTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1080")]
        pub content_1080: EquipmentUnavailableAdjustmentColumnContent1080XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<EquipmentUnavailableAdjustmentColumnTypeExtensionXElement>,
    }
    pub type EquipmentUnavailableAdjustmentColumnTypeExtensionXElement =
        EquipmentUnavailableAdjustmentColumnTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EquipmentUnavailableAdjustmentColumnTypeExtensionXElementType {
        #[serde(
            default = "EquipmentUnavailableAdjustmentColumnTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: EquipmentUnavailableAdjustmentColumnTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum EquipmentUnavailableAdjustmentColumnTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractEquipmentUnavailableAdjustmentColumnExtension")]
        AbstractEquipmentUnavailableAdjustmentColumnExtension(
            AbstractEquipmentUnavailableAdjustmentColumnExtensionXElement,
        ),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EquipmentUnavailableAdjustmentPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "EquipmentUnavailableAdjustment")]
        pub equipment_unavailable_adjustment: EquipmentUnavailableAdjustmentXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EquipmentUnavailableAdjustmentTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1075")]
        pub content_1075: EquipmentUnavailableAdjustmentContent1075XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<EquipmentUnavailableAdjustmentTypeExtensionXElement>,
    }
    pub type EquipmentUnavailableAdjustmentTypeExtensionXElement =
        EquipmentUnavailableAdjustmentTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EquipmentUnavailableAdjustmentTypeExtensionXElementType {
        #[serde(
            default = "EquipmentUnavailableAdjustmentTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: EquipmentUnavailableAdjustmentTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum EquipmentUnavailableAdjustmentTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractEquipmentUnavailableAdjustmentExtension")]
        AbstractEquipmentUnavailableAdjustmentExtension(
            AbstractEquipmentUnavailableAdjustmentExtensionXElement,
        ),
    }
    pub type FasDataBlockXElement = FasDataBlockTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FasDataBlockPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "FASDataBlock")]
        pub fas_data_block: FasDataBlockXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FasDataBlockTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1057")]
        pub content_1057: FasDataBlockContent1057XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<FasDataBlockTypeExtensionXElement>,
    }
    pub type FasDataBlockTypeExtensionXElement = FasDataBlockTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FasDataBlockTypeExtensionXElementType {
        #[serde(
            default = "FasDataBlockTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: FasDataBlockTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum FasDataBlockTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractFASDataBlockExtension")]
        AbstractFasDataBlockExtension(AbstractFasDataBlockExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FeatureMetadataPropertyTypeXType {
        #[serde(
            default = "FeatureMetadataPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<FeatureMetadataPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FeatureMetadataPropertyTypeXTypeContent {
        #[serde(rename = "MD_Metadata")]
        pub md_metadata: super::gmd::MdMetadataXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FeatureTimeSliceMetadataPropertyTypeXType {
        #[serde(
            default = "FeatureTimeSliceMetadataPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<FeatureTimeSliceMetadataPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FeatureTimeSliceMetadataPropertyTypeXTypeContent {
        #[serde(rename = "MD_Metadata")]
        pub md_metadata: super::gmd::MdMetadataXElement,
    }
    pub type FinalLegXElement = FinalLegTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FinalLegPropertyTypeXType {
        #[serde(default = "FinalLegPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type FinalLegTimeSliceXElement = FinalLegTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FinalLegTimeSlicePropertyTypeXType {
        #[serde(
            default = "FinalLegTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "FinalLegTimeSlice")]
        pub final_leg_time_slice: FinalLegTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FinalLegTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1174")]
        pub content_1174: FinalLegTimeSliceContent1174XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<FinalLegTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for FinalLegTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for FinalLegTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for FinalLegTimeSliceTypeXType {}
    pub type FinalLegTimeSliceTypeExtensionXElement = FinalLegTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FinalLegTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "FinalLegTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: FinalLegTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum FinalLegTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractFinalLegExtension")]
        AbstractFinalLegExtension(AbstractFinalLegExtensionXElement),
        #[serde(rename = "AbstractApproachLegExtension")]
        AbstractApproachLegExtension(AbstractApproachLegExtensionXElement),
        #[serde(rename = "AbstractSegmentLegExtension")]
        AbstractSegmentLegExtension(AbstractSegmentLegExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FinalLegTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<FinalLegTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for FinalLegTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for FinalLegTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for FinalLegTypeXType {}
    impl AbstractAixmFeatureXElementTrait for FinalLegTypeXType {}
    impl AbstractApproachLegXElementTrait for FinalLegTypeXType {}
    impl AbstractSegmentLegXElementTrait for FinalLegTypeXType {}
    pub type FinalProfileXElement = FinalProfileTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FinalProfilePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "FinalProfile")]
        pub final_profile: FinalProfileXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FinalProfileTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1023")]
        pub content_1023: FinalProfileContent1023XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<FinalProfileTypeExtensionXElement>,
    }
    pub type FinalProfileTypeExtensionXElement = FinalProfileTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FinalProfileTypeExtensionXElementType {
        #[serde(
            default = "FinalProfileTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: FinalProfileTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum FinalProfileTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractFinalProfileExtension")]
        AbstractFinalProfileExtension(AbstractFinalProfileExtensionXElement),
    }
    pub type FireFightingServiceXElement = FireFightingServiceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FireFightingServicePropertyTypeXType {
        #[serde(
            default = "FireFightingServicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type FireFightingServiceTimeSliceXElement = FireFightingServiceTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FireFightingServiceTimeSlicePropertyTypeXType {
        #[serde(
            default = "FireFightingServiceTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "FireFightingServiceTimeSlice")]
        pub fire_fighting_service_time_slice: FireFightingServiceTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FireFightingServiceTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1419")]
        pub content_1419: FireFightingServiceTimeSliceContent1419XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<FireFightingServiceTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for FireFightingServiceTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for FireFightingServiceTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for FireFightingServiceTimeSliceTypeXType {}
    pub type FireFightingServiceTimeSliceTypeExtensionXElement =
        FireFightingServiceTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FireFightingServiceTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "FireFightingServiceTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: FireFightingServiceTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum FireFightingServiceTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractFireFightingServiceExtension")]
        AbstractFireFightingServiceExtension(AbstractFireFightingServiceExtensionXElement),
        #[serde(rename = "AbstractAirportGroundServiceExtension")]
        AbstractAirportGroundServiceExtension(AbstractAirportGroundServiceExtensionXElement),
        #[serde(rename = "AbstractServiceExtension")]
        AbstractServiceExtension(AbstractServiceExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FireFightingServiceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<FireFightingServiceTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for FireFightingServiceTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for FireFightingServiceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for FireFightingServiceTypeXType {}
    impl AbstractAixmFeatureXElementTrait for FireFightingServiceTypeXType {}
    impl AbstractAirportGroundServiceXElementTrait for FireFightingServiceTypeXType {}
    impl AbstractServiceXElementTrait for FireFightingServiceTypeXType {}
    pub type FlightCharacteristicXElement = FlightCharacteristicTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightCharacteristicPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "FlightCharacteristic")]
        pub flight_characteristic: FlightCharacteristicXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightCharacteristicTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1533")]
        pub content_1533: FlightCharacteristicContent1533XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<FlightCharacteristicTypeExtensionXElement>,
    }
    pub type FlightCharacteristicTypeExtensionXElement =
        FlightCharacteristicTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightCharacteristicTypeExtensionXElementType {
        #[serde(
            default = "FlightCharacteristicTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: FlightCharacteristicTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum FlightCharacteristicTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractFlightCharacteristicExtension")]
        AbstractFlightCharacteristicExtension(AbstractFlightCharacteristicExtensionXElement),
    }
    pub type FlightConditionCircumstanceXElement = FlightConditionCircumstanceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightConditionCircumstancePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "FlightConditionCircumstance")]
        pub flight_condition_circumstance: FlightConditionCircumstanceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightConditionCircumstanceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1315")]
        pub content_1315: FlightConditionCircumstanceContent1315XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<FlightConditionCircumstanceTypeExtensionXElement>,
    }
    pub type FlightConditionCircumstanceTypeExtensionXElement =
        FlightConditionCircumstanceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightConditionCircumstanceTypeExtensionXElementType {
        #[serde(
            default = "FlightConditionCircumstanceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: FlightConditionCircumstanceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum FlightConditionCircumstanceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractFlightConditionCircumstanceExtension")]
        AbstractFlightConditionCircumstanceExtension(
            AbstractFlightConditionCircumstanceExtensionXElement,
        ),
    }
    pub type FlightConditionCombinationXElement = FlightConditionCombinationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightConditionCombinationPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "FlightConditionCombination")]
        pub flight_condition_combination: FlightConditionCombinationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightConditionCombinationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1320")]
        pub content_1320: FlightConditionCombinationContent1320XType,
        #[serde(rename = "Content1321")]
        pub content_1321: FlightConditionCombinationContent1321XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<FlightConditionCombinationTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for FlightConditionCombinationTypeXType {}
    pub type FlightConditionCombinationTypeExtensionXElement =
        FlightConditionCombinationTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightConditionCombinationTypeExtensionXElementType {
        #[serde(
            default = "FlightConditionCombinationTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: FlightConditionCombinationTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum FlightConditionCombinationTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractFlightConditionCombinationExtension")]
        AbstractFlightConditionCombinationExtension(
            AbstractFlightConditionCombinationExtensionXElement,
        ),
    }
    pub type FlightConditionElementXElement = FlightConditionElementTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightConditionElementPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "FlightConditionElement")]
        pub flight_condition_element: FlightConditionElementXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightConditionElementTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1326")]
        pub content_1326: FlightConditionElementContent1326XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<FlightConditionElementTypeExtensionXElement>,
    }
    pub type FlightConditionElementTypeExtensionXElement =
        FlightConditionElementTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightConditionElementTypeExtensionXElementType {
        #[serde(
            default = "FlightConditionElementTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: FlightConditionElementTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum FlightConditionElementTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractFlightConditionElementExtension")]
        AbstractFlightConditionElementExtension(AbstractFlightConditionElementExtensionXElement),
    }
    pub type FlightRestrictionXElement = FlightRestrictionTypeXType;
    pub type FlightRestrictionLevelXElement = FlightRestrictionLevelTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightRestrictionLevelPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "FlightRestrictionLevel")]
        pub flight_restriction_level: FlightRestrictionLevelXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightRestrictionLevelTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1340")]
        pub content_1340: FlightRestrictionLevelContent1340XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<FlightRestrictionLevelTypeExtensionXElement>,
    }
    pub type FlightRestrictionLevelTypeExtensionXElement =
        FlightRestrictionLevelTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightRestrictionLevelTypeExtensionXElementType {
        #[serde(
            default = "FlightRestrictionLevelTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: FlightRestrictionLevelTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum FlightRestrictionLevelTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractFlightRestrictionLevelExtension")]
        AbstractFlightRestrictionLevelExtension(AbstractFlightRestrictionLevelExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightRestrictionPropertyTypeXType {
        #[serde(
            default = "FlightRestrictionPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type FlightRestrictionRouteXElement = FlightRestrictionRouteTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightRestrictionRoutePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "FlightRestrictionRoute")]
        pub flight_restriction_route: FlightRestrictionRouteXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightRestrictionRouteTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1345")]
        pub content_1345: FlightRestrictionRouteContent1345XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<FlightRestrictionRouteTypeExtensionXElement>,
    }
    pub type FlightRestrictionRouteTypeExtensionXElement =
        FlightRestrictionRouteTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightRestrictionRouteTypeExtensionXElementType {
        #[serde(
            default = "FlightRestrictionRouteTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: FlightRestrictionRouteTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum FlightRestrictionRouteTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractFlightRestrictionRouteExtension")]
        AbstractFlightRestrictionRouteExtension(AbstractFlightRestrictionRouteExtensionXElement),
    }
    pub type FlightRestrictionTimeSliceXElement = FlightRestrictionTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightRestrictionTimeSlicePropertyTypeXType {
        #[serde(
            default = "FlightRestrictionTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "FlightRestrictionTimeSlice")]
        pub flight_restriction_time_slice: FlightRestrictionTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightRestrictionTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1336")]
        pub content_1336: FlightRestrictionTimeSliceContent1336XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<FlightRestrictionTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for FlightRestrictionTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for FlightRestrictionTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for FlightRestrictionTimeSliceTypeXType {}
    pub type FlightRestrictionTimeSliceTypeExtensionXElement =
        FlightRestrictionTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightRestrictionTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "FlightRestrictionTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractFlightRestrictionExtension")]
        pub abstract_flight_restriction_extension: AbstractFlightRestrictionExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightRestrictionTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<FlightRestrictionTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for FlightRestrictionTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for FlightRestrictionTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for FlightRestrictionTypeXType {}
    impl AbstractAixmFeatureXElementTrait for FlightRestrictionTypeXType {}
    pub type FlightRoutingElementXElement = FlightRoutingElementTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightRoutingElementPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "FlightRoutingElement")]
        pub flight_routing_element: FlightRoutingElementXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightRoutingElementTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1350")]
        pub content_1350: FlightRoutingElementContent1350XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<FlightRoutingElementTypeExtensionXElement>,
    }
    pub type FlightRoutingElementTypeExtensionXElement =
        FlightRoutingElementTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightRoutingElementTypeExtensionXElementType {
        #[serde(
            default = "FlightRoutingElementTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: FlightRoutingElementTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum FlightRoutingElementTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractFlightRoutingElementExtension")]
        AbstractFlightRoutingElementExtension(AbstractFlightRoutingElementExtensionXElement),
    }
    pub type FloatingDockSiteXElement = FloatingDockSiteTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FloatingDockSitePropertyTypeXType {
        #[serde(
            default = "FloatingDockSitePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type FloatingDockSiteTimeSliceXElement = FloatingDockSiteTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FloatingDockSiteTimeSlicePropertyTypeXType {
        #[serde(
            default = "FloatingDockSiteTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "FloatingDockSiteTimeSlice")]
        pub floating_dock_site_time_slice: FloatingDockSiteTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FloatingDockSiteTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content488")]
        pub content_488: FloatingDockSiteTimeSliceContent488XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<FloatingDockSiteTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for FloatingDockSiteTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for FloatingDockSiteTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for FloatingDockSiteTimeSliceTypeXType {}
    pub type FloatingDockSiteTimeSliceTypeExtensionXElement =
        FloatingDockSiteTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FloatingDockSiteTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "FloatingDockSiteTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractFloatingDockSiteExtension")]
        pub abstract_floating_dock_site_extension: AbstractFloatingDockSiteExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FloatingDockSiteTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<FloatingDockSiteTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for FloatingDockSiteTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for FloatingDockSiteTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for FloatingDockSiteTypeXType {}
    impl AbstractAixmFeatureXElementTrait for FloatingDockSiteTypeXType {}
    pub type FuelXElement = FuelTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FuelPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "Fuel")]
        pub fuel: FuelXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FuelTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1425")]
        pub content_1425: FuelContent1425XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<FuelTypeExtensionXElement>,
    }
    pub type FuelTypeExtensionXElement = FuelTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FuelTypeExtensionXElementType {
        #[serde(
            default = "FuelTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: FuelTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum FuelTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractFuelExtension")]
        AbstractFuelExtension(AbstractFuelExtensionXElement),
    }
    pub type GeoBorderXElement = GeoBorderTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeoBorderPropertyTypeXType {
        #[serde(default = "GeoBorderPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type GeoBorderTimeSliceXElement = GeoBorderTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeoBorderTimeSlicePropertyTypeXType {
        #[serde(
            default = "GeoBorderTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "GeoBorderTimeSlice")]
        pub geo_border_time_slice: GeoBorderTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeoBorderTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content640")]
        pub content_640: GeoBorderTimeSliceContent640XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<GeoBorderTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for GeoBorderTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for GeoBorderTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for GeoBorderTimeSliceTypeXType {}
    pub type GeoBorderTimeSliceTypeExtensionXElement = GeoBorderTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeoBorderTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "GeoBorderTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractGeoBorderExtension")]
        pub abstract_geo_border_extension: AbstractGeoBorderExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeoBorderTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<GeoBorderTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for GeoBorderTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for GeoBorderTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for GeoBorderTypeXType {}
    impl AbstractAixmFeatureXElementTrait for GeoBorderTypeXType {}
    pub type GlidepathXElement = GlidepathTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GlidepathPropertyTypeXType {
        #[serde(default = "GlidepathPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type GlidepathTimeSliceXElement = GlidepathTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GlidepathTimeSlicePropertyTypeXType {
        #[serde(
            default = "GlidepathTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "GlidepathTimeSlice")]
        pub glidepath_time_slice: GlidepathTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GlidepathTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content775")]
        pub content_775: GlidepathTimeSliceContent775XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<GlidepathTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for GlidepathTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for GlidepathTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for GlidepathTimeSliceTypeXType {}
    pub type GlidepathTimeSliceTypeExtensionXElement = GlidepathTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GlidepathTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "GlidepathTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: GlidepathTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum GlidepathTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractGlidepathExtension")]
        AbstractGlidepathExtension(AbstractGlidepathExtensionXElement),
        #[serde(rename = "AbstractNavaidEquipmentExtension")]
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GlidepathTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<GlidepathTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for GlidepathTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for GlidepathTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for GlidepathTypeXType {}
    impl AbstractAixmFeatureXElementTrait for GlidepathTypeXType {}
    impl AbstractNavaidEquipmentXElementTrait for GlidepathTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GroundLightSystemPropertyTypeXType {
        #[serde(
            default = "GroundLightSystemPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type GroundLightingAvailabilityXElement = GroundLightingAvailabilityTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GroundLightingAvailabilityPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "GroundLightingAvailability")]
        pub ground_lighting_availability: GroundLightingAvailabilityXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GroundLightingAvailabilityTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content253")]
        pub content_253: GroundLightingAvailabilityContent253XType,
        #[serde(rename = "Content254")]
        pub content_254: GroundLightingAvailabilityContent254XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<GroundLightingAvailabilityTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for GroundLightingAvailabilityTypeXType {}
    pub type GroundLightingAvailabilityTypeExtensionXElement =
        GroundLightingAvailabilityTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GroundLightingAvailabilityTypeExtensionXElementType {
        #[serde(
            default = "GroundLightingAvailabilityTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: GroundLightingAvailabilityTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum GroundLightingAvailabilityTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractGroundLightingAvailabilityExtension")]
        AbstractGroundLightingAvailabilityExtension(
            AbstractGroundLightingAvailabilityExtensionXElement,
        ),
    }
    pub type GroundTrafficControlServiceXElement = GroundTrafficControlServiceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GroundTrafficControlServicePropertyTypeXType {
        #[serde(
            default = "GroundTrafficControlServicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type GroundTrafficControlServiceTimeSliceXElement =
        GroundTrafficControlServiceTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GroundTrafficControlServiceTimeSlicePropertyTypeXType {
        #[serde(
            default = "GroundTrafficControlServiceTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "GroundTrafficControlServiceTimeSlice")]
        pub ground_traffic_control_service_time_slice: GroundTrafficControlServiceTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GroundTrafficControlServiceTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1433")]
        pub content_1433: GroundTrafficControlServiceTimeSliceContent1433XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<GroundTrafficControlServiceTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for GroundTrafficControlServiceTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for GroundTrafficControlServiceTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for GroundTrafficControlServiceTimeSliceTypeXType {}
    pub type GroundTrafficControlServiceTimeSliceTypeExtensionXElement =
        GroundTrafficControlServiceTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GroundTrafficControlServiceTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "GroundTrafficControlServiceTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: GroundTrafficControlServiceTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum GroundTrafficControlServiceTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractGroundTrafficControlServiceExtension")]
        AbstractGroundTrafficControlServiceExtension(
            AbstractGroundTrafficControlServiceExtensionXElement,
        ),
        #[serde(rename = "AbstractTrafficSeparationServiceExtension")]
        AbstractTrafficSeparationServiceExtension(
            AbstractTrafficSeparationServiceExtensionXElement,
        ),
        #[serde(rename = "AbstractServiceExtension")]
        AbstractServiceExtension(AbstractServiceExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GroundTrafficControlServiceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<GroundTrafficControlServiceTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for GroundTrafficControlServiceTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for GroundTrafficControlServiceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for GroundTrafficControlServiceTypeXType {}
    impl AbstractAixmFeatureXElementTrait for GroundTrafficControlServiceTypeXType {}
    impl AbstractServiceXElementTrait for GroundTrafficControlServiceTypeXType {}
    impl AbstractTrafficSeparationServiceXElementTrait for GroundTrafficControlServiceTypeXType {}
    pub type GuidanceLineXElement = GuidanceLineTypeXType;
    pub type GuidanceLineLightSystemXElement = GuidanceLineLightSystemTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLineLightSystemPropertyTypeXType {
        #[serde(
            default = "GuidanceLineLightSystemPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type GuidanceLineLightSystemTimeSliceXElement = GuidanceLineLightSystemTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLineLightSystemTimeSlicePropertyTypeXType {
        #[serde(
            default = "GuidanceLineLightSystemTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "GuidanceLineLightSystemTimeSlice")]
        pub guidance_line_light_system_time_slice: GuidanceLineLightSystemTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLineLightSystemTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content262")]
        pub content_262: GuidanceLineLightSystemTimeSliceContent262XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<GuidanceLineLightSystemTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for GuidanceLineLightSystemTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for GuidanceLineLightSystemTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for GuidanceLineLightSystemTimeSliceTypeXType {}
    pub type GuidanceLineLightSystemTimeSliceTypeExtensionXElement =
        GuidanceLineLightSystemTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLineLightSystemTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "GuidanceLineLightSystemTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: GuidanceLineLightSystemTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum GuidanceLineLightSystemTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractGuidanceLineLightSystemExtension")]
        AbstractGuidanceLineLightSystemExtension(AbstractGuidanceLineLightSystemExtensionXElement),
        #[serde(rename = "AbstractGroundLightSystemExtension")]
        AbstractGroundLightSystemExtension(AbstractGroundLightSystemExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLineLightSystemTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<GuidanceLineLightSystemTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for GuidanceLineLightSystemTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for GuidanceLineLightSystemTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for GuidanceLineLightSystemTypeXType {}
    impl AbstractAixmFeatureXElementTrait for GuidanceLineLightSystemTypeXType {}
    impl AbstractGroundLightSystemXElementTrait for GuidanceLineLightSystemTypeXType {}
    pub type GuidanceLineMarkingXElement = GuidanceLineMarkingTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLineMarkingPropertyTypeXType {
        #[serde(
            default = "GuidanceLineMarkingPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type GuidanceLineMarkingTimeSliceXElement = GuidanceLineMarkingTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLineMarkingTimeSlicePropertyTypeXType {
        #[serde(
            default = "GuidanceLineMarkingTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "GuidanceLineMarkingTimeSlice")]
        pub guidance_line_marking_time_slice: GuidanceLineMarkingTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLineMarkingTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content340")]
        pub content_340: GuidanceLineMarkingTimeSliceContent340XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<GuidanceLineMarkingTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for GuidanceLineMarkingTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for GuidanceLineMarkingTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for GuidanceLineMarkingTimeSliceTypeXType {}
    pub type GuidanceLineMarkingTimeSliceTypeExtensionXElement =
        GuidanceLineMarkingTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLineMarkingTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "GuidanceLineMarkingTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: GuidanceLineMarkingTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum GuidanceLineMarkingTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractGuidanceLineMarkingExtension")]
        AbstractGuidanceLineMarkingExtension(AbstractGuidanceLineMarkingExtensionXElement),
        #[serde(rename = "AbstractMarkingExtension")]
        AbstractMarkingExtension(AbstractMarkingExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLineMarkingTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<GuidanceLineMarkingTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for GuidanceLineMarkingTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for GuidanceLineMarkingTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for GuidanceLineMarkingTypeXType {}
    impl AbstractAixmFeatureXElementTrait for GuidanceLineMarkingTypeXType {}
    impl AbstractMarkingXElementTrait for GuidanceLineMarkingTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLinePropertyTypeXType {
        #[serde(
            default = "GuidanceLinePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type GuidanceLineTimeSliceXElement = GuidanceLineTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLineTimeSlicePropertyTypeXType {
        #[serde(
            default = "GuidanceLineTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "GuidanceLineTimeSlice")]
        pub guidance_line_time_slice: GuidanceLineTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLineTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content571")]
        pub content_571: GuidanceLineTimeSliceContent571XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<GuidanceLineTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for GuidanceLineTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for GuidanceLineTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for GuidanceLineTimeSliceTypeXType {}
    pub type GuidanceLineTimeSliceTypeExtensionXElement =
        GuidanceLineTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLineTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "GuidanceLineTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractGuidanceLineExtension")]
        pub abstract_guidance_line_extension: AbstractGuidanceLineExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLineTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<GuidanceLineTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for GuidanceLineTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for GuidanceLineTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for GuidanceLineTypeXType {}
    impl AbstractAixmFeatureXElementTrait for GuidanceLineTypeXType {}
    pub type HoldingAssessmentXElement = HoldingAssessmentTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingAssessmentPropertyTypeXType {
        #[serde(
            default = "HoldingAssessmentPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type HoldingAssessmentTimeSliceXElement = HoldingAssessmentTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingAssessmentTimeSlicePropertyTypeXType {
        #[serde(
            default = "HoldingAssessmentTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "HoldingAssessmentTimeSlice")]
        pub holding_assessment_time_slice: HoldingAssessmentTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingAssessmentTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1619")]
        pub content_1619: HoldingAssessmentTimeSliceContent1619XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<HoldingAssessmentTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for HoldingAssessmentTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for HoldingAssessmentTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for HoldingAssessmentTimeSliceTypeXType {}
    pub type HoldingAssessmentTimeSliceTypeExtensionXElement =
        HoldingAssessmentTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingAssessmentTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "HoldingAssessmentTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractHoldingAssessmentExtension")]
        pub abstract_holding_assessment_extension: AbstractHoldingAssessmentExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingAssessmentTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<HoldingAssessmentTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for HoldingAssessmentTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for HoldingAssessmentTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for HoldingAssessmentTypeXType {}
    impl AbstractAixmFeatureXElementTrait for HoldingAssessmentTypeXType {}
    pub type HoldingPatternXElement = HoldingPatternTypeXType;
    pub type HoldingPatternDistanceXElement = HoldingPatternDistanceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingPatternDistancePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "HoldingPatternDistance")]
        pub holding_pattern_distance: HoldingPatternDistanceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingPatternDistanceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content690")]
        pub content_690: HoldingPatternDistanceContent690XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<HoldingPatternDistanceTypeExtensionXElement>,
    }
    pub type HoldingPatternDistanceTypeExtensionXElement =
        HoldingPatternDistanceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingPatternDistanceTypeExtensionXElementType {
        #[serde(
            default = "HoldingPatternDistanceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: HoldingPatternDistanceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum HoldingPatternDistanceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractHoldingPatternDistanceExtension")]
        AbstractHoldingPatternDistanceExtension(AbstractHoldingPatternDistanceExtensionXElement),
    }
    pub type HoldingPatternDurationXElement = HoldingPatternDurationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingPatternDurationPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "HoldingPatternDuration")]
        pub holding_pattern_duration: HoldingPatternDurationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingPatternDurationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content695")]
        pub content_695: HoldingPatternDurationContent695XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<HoldingPatternDurationTypeExtensionXElement>,
    }
    pub type HoldingPatternDurationTypeExtensionXElement =
        HoldingPatternDurationTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingPatternDurationTypeExtensionXElementType {
        #[serde(
            default = "HoldingPatternDurationTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: HoldingPatternDurationTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum HoldingPatternDurationTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractHoldingPatternDurationExtension")]
        AbstractHoldingPatternDurationExtension(AbstractHoldingPatternDurationExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingPatternPropertyTypeXType {
        #[serde(
            default = "HoldingPatternPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type HoldingPatternTimeSliceXElement = HoldingPatternTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingPatternTimeSlicePropertyTypeXType {
        #[serde(
            default = "HoldingPatternTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "HoldingPatternTimeSlice")]
        pub holding_pattern_time_slice: HoldingPatternTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingPatternTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content685")]
        pub content_685: HoldingPatternTimeSliceContent685XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<HoldingPatternTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for HoldingPatternTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for HoldingPatternTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for HoldingPatternTimeSliceTypeXType {}
    pub type HoldingPatternTimeSliceTypeExtensionXElement =
        HoldingPatternTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingPatternTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "HoldingPatternTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractHoldingPatternExtension")]
        pub abstract_holding_pattern_extension: AbstractHoldingPatternExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingPatternTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<HoldingPatternTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for HoldingPatternTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for HoldingPatternTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for HoldingPatternTypeXType {}
    impl AbstractAixmFeatureXElementTrait for HoldingPatternTypeXType {}
    pub type HoldingUseXElement = HoldingUseTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingUsePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "HoldingUse")]
        pub holding_use: HoldingUseXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingUseTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1181")]
        pub content_1181: HoldingUseContent1181XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<HoldingUseTypeExtensionXElement>,
    }
    pub type HoldingUseTypeExtensionXElement = HoldingUseTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingUseTypeExtensionXElementType {
        #[serde(
            default = "HoldingUseTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: HoldingUseTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum HoldingUseTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractHoldingUseExtension")]
        AbstractHoldingUseExtension(AbstractHoldingUseExtensionXElement),
    }
    pub type InformationServiceXElement = InformationServiceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InformationServicePropertyTypeXType {
        #[serde(
            default = "InformationServicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type InformationServiceTimeSliceXElement = InformationServiceTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InformationServiceTimeSlicePropertyTypeXType {
        #[serde(
            default = "InformationServiceTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "InformationServiceTimeSlice")]
        pub information_service_time_slice: InformationServiceTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InformationServiceTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1442")]
        pub content_1442: InformationServiceTimeSliceContent1442XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<InformationServiceTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for InformationServiceTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for InformationServiceTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for InformationServiceTimeSliceTypeXType {}
    pub type InformationServiceTimeSliceTypeExtensionXElement =
        InformationServiceTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InformationServiceTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "InformationServiceTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: InformationServiceTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum InformationServiceTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractInformationServiceExtension")]
        AbstractInformationServiceExtension(AbstractInformationServiceExtensionXElement),
        #[serde(rename = "AbstractServiceExtension")]
        AbstractServiceExtension(AbstractServiceExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InformationServiceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<InformationServiceTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for InformationServiceTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for InformationServiceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for InformationServiceTypeXType {}
    impl AbstractAixmFeatureXElementTrait for InformationServiceTypeXType {}
    impl AbstractServiceXElementTrait for InformationServiceTypeXType {}
    pub type InitialLegXElement = InitialLegTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InitialLegPropertyTypeXType {
        #[serde(
            default = "InitialLegPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type InitialLegTimeSliceXElement = InitialLegTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InitialLegTimeSlicePropertyTypeXType {
        #[serde(
            default = "InitialLegTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "InitialLegTimeSlice")]
        pub initial_leg_time_slice: InitialLegTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InitialLegTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1189")]
        pub content_1189: InitialLegTimeSliceContent1189XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<InitialLegTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for InitialLegTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for InitialLegTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for InitialLegTimeSliceTypeXType {}
    pub type InitialLegTimeSliceTypeExtensionXElement =
        InitialLegTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InitialLegTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "InitialLegTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: InitialLegTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum InitialLegTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractInitialLegExtension")]
        AbstractInitialLegExtension(AbstractInitialLegExtensionXElement),
        #[serde(rename = "AbstractApproachLegExtension")]
        AbstractApproachLegExtension(AbstractApproachLegExtensionXElement),
        #[serde(rename = "AbstractSegmentLegExtension")]
        AbstractSegmentLegExtension(AbstractSegmentLegExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InitialLegTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<InitialLegTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for InitialLegTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for InitialLegTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for InitialLegTypeXType {}
    impl AbstractAixmFeatureXElementTrait for InitialLegTypeXType {}
    impl AbstractApproachLegXElementTrait for InitialLegTypeXType {}
    impl AbstractSegmentLegXElementTrait for InitialLegTypeXType {}
    pub type InstrumentApproachProcedureXElement = InstrumentApproachProcedureTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InstrumentApproachProcedurePropertyTypeXType {
        #[serde(
            default = "InstrumentApproachProcedurePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type InstrumentApproachProcedureTimeSliceXElement =
        InstrumentApproachProcedureTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InstrumentApproachProcedureTimeSlicePropertyTypeXType {
        #[serde(
            default = "InstrumentApproachProcedureTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "InstrumentApproachProcedureTimeSlice")]
        pub instrument_approach_procedure_time_slice: InstrumentApproachProcedureTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InstrumentApproachProcedureTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1032")]
        pub content_1032: InstrumentApproachProcedureTimeSliceContent1032XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<InstrumentApproachProcedureTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for InstrumentApproachProcedureTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for InstrumentApproachProcedureTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for InstrumentApproachProcedureTimeSliceTypeXType {}
    pub type InstrumentApproachProcedureTimeSliceTypeExtensionXElement =
        InstrumentApproachProcedureTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InstrumentApproachProcedureTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "InstrumentApproachProcedureTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: InstrumentApproachProcedureTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum InstrumentApproachProcedureTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractInstrumentApproachProcedureExtension")]
        AbstractInstrumentApproachProcedureExtension(
            AbstractInstrumentApproachProcedureExtensionXElement,
        ),
        #[serde(rename = "AbstractProcedureExtension")]
        AbstractProcedureExtension(AbstractProcedureExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InstrumentApproachProcedureTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<InstrumentApproachProcedureTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for InstrumentApproachProcedureTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for InstrumentApproachProcedureTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for InstrumentApproachProcedureTypeXType {}
    impl AbstractAixmFeatureXElementTrait for InstrumentApproachProcedureTypeXType {}
    impl AbstractProcedureXElementTrait for InstrumentApproachProcedureTypeXType {}
    pub type IntermediateLegXElement = IntermediateLegTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct IntermediateLegPropertyTypeXType {
        #[serde(
            default = "IntermediateLegPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type IntermediateLegTimeSliceXElement = IntermediateLegTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct IntermediateLegTimeSlicePropertyTypeXType {
        #[serde(
            default = "IntermediateLegTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "IntermediateLegTimeSlice")]
        pub intermediate_leg_time_slice: IntermediateLegTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct IntermediateLegTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1198")]
        pub content_1198: IntermediateLegTimeSliceContent1198XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<IntermediateLegTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for IntermediateLegTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for IntermediateLegTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for IntermediateLegTimeSliceTypeXType {}
    pub type IntermediateLegTimeSliceTypeExtensionXElement =
        IntermediateLegTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct IntermediateLegTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "IntermediateLegTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: IntermediateLegTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum IntermediateLegTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractIntermediateLegExtension")]
        AbstractIntermediateLegExtension(AbstractIntermediateLegExtensionXElement),
        #[serde(rename = "AbstractApproachLegExtension")]
        AbstractApproachLegExtension(AbstractApproachLegExtensionXElement),
        #[serde(rename = "AbstractSegmentLegExtension")]
        AbstractSegmentLegExtension(AbstractSegmentLegExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct IntermediateLegTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<IntermediateLegTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for IntermediateLegTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for IntermediateLegTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for IntermediateLegTypeXType {}
    impl AbstractAixmFeatureXElementTrait for IntermediateLegTypeXType {}
    impl AbstractApproachLegXElementTrait for IntermediateLegTypeXType {}
    impl AbstractSegmentLegXElementTrait for IntermediateLegTypeXType {}
    pub type LandingTakeoffAreaCollectionXElement = LandingTakeoffAreaCollectionTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LandingTakeoffAreaCollectionPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "LandingTakeoffAreaCollection")]
        pub landing_takeoff_area_collection: LandingTakeoffAreaCollectionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LandingTakeoffAreaCollectionTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1204")]
        pub content_1204: LandingTakeoffAreaCollectionContent1204XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<LandingTakeoffAreaCollectionTypeExtensionXElement>,
    }
    pub type LandingTakeoffAreaCollectionTypeExtensionXElement =
        LandingTakeoffAreaCollectionTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LandingTakeoffAreaCollectionTypeExtensionXElementType {
        #[serde(
            default = "LandingTakeoffAreaCollectionTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: LandingTakeoffAreaCollectionTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum LandingTakeoffAreaCollectionTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractLandingTakeoffAreaCollectionExtension")]
        AbstractLandingTakeoffAreaCollectionExtension(
            AbstractLandingTakeoffAreaCollectionExtensionXElement,
        ),
    }
    pub type LightActivationXElement = LightActivationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LightActivationPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "LightActivation")]
        pub light_activation: LightActivationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LightActivationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content267")]
        pub content_267: LightActivationContent267XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<LightActivationTypeExtensionXElement>,
    }
    pub type LightActivationTypeExtensionXElement = LightActivationTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LightActivationTypeExtensionXElementType {
        #[serde(
            default = "LightActivationTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: LightActivationTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum LightActivationTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractLightActivationExtension")]
        AbstractLightActivationExtension(AbstractLightActivationExtensionXElement),
    }
    pub type LightElementXElement = LightElementTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LightElementPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "LightElement")]
        pub light_element: LightElementXElement,
    }
    pub type LightElementStatusXElement = LightElementStatusTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LightElementStatusPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "LightElementStatus")]
        pub light_element_status: LightElementStatusXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LightElementStatusTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1553")]
        pub content_1553: LightElementStatusContent1553XType,
        #[serde(rename = "Content1554")]
        pub content_1554: LightElementStatusContent1554XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<LightElementStatusTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for LightElementStatusTypeXType {}
    pub type LightElementStatusTypeExtensionXElement = LightElementStatusTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LightElementStatusTypeExtensionXElementType {
        #[serde(
            default = "LightElementStatusTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: LightElementStatusTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum LightElementStatusTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractLightElementStatusExtension")]
        AbstractLightElementStatusExtension(AbstractLightElementStatusExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LightElementTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1548")]
        pub content_1548: LightElementContent1548XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<LightElementTypeExtensionXElement>,
    }
    pub type LightElementTypeExtensionXElement = LightElementTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LightElementTypeExtensionXElementType {
        #[serde(
            default = "LightElementTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: LightElementTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum LightElementTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractLightElementExtension")]
        AbstractLightElementExtension(AbstractLightElementExtensionXElement),
    }
    pub type LinguisticNoteXElement = LinguisticNoteTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LinguisticNotePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "LinguisticNote")]
        pub linguistic_note: LinguisticNoteXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LinguisticNoteTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content935")]
        pub content_935: LinguisticNoteContent935XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<LinguisticNoteTypeExtensionXElement>,
    }
    pub type LinguisticNoteTypeExtensionXElement = LinguisticNoteTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LinguisticNoteTypeExtensionXElementType {
        #[serde(
            default = "LinguisticNoteTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: LinguisticNoteTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum LinguisticNoteTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractLinguisticNoteExtension")]
        AbstractLinguisticNoteExtension(AbstractLinguisticNoteExtensionXElement),
    }
    pub type LocalizerXElement = LocalizerTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LocalizerPropertyTypeXType {
        #[serde(default = "LocalizerPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type LocalizerTimeSliceXElement = LocalizerTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LocalizerTimeSlicePropertyTypeXType {
        #[serde(
            default = "LocalizerTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "LocalizerTimeSlice")]
        pub localizer_time_slice: LocalizerTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LocalizerTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content783")]
        pub content_783: LocalizerTimeSliceContent783XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<LocalizerTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for LocalizerTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for LocalizerTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for LocalizerTimeSliceTypeXType {}
    pub type LocalizerTimeSliceTypeExtensionXElement = LocalizerTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LocalizerTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "LocalizerTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: LocalizerTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum LocalizerTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractLocalizerExtension")]
        AbstractLocalizerExtension(AbstractLocalizerExtensionXElement),
        #[serde(rename = "AbstractNavaidEquipmentExtension")]
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LocalizerTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<LocalizerTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for LocalizerTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for LocalizerTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for LocalizerTypeXType {}
    impl AbstractAixmFeatureXElementTrait for LocalizerTypeXType {}
    impl AbstractNavaidEquipmentXElementTrait for LocalizerTypeXType {}
    pub type ManoeuvringAreaAvailabilityXElement = ManoeuvringAreaAvailabilityTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ManoeuvringAreaAvailabilityPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ManoeuvringAreaAvailability")]
        pub manoeuvring_area_availability: ManoeuvringAreaAvailabilityXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ManoeuvringAreaAvailabilityTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content399")]
        pub content_399: ManoeuvringAreaAvailabilityContent399XType,
        #[serde(rename = "Content400")]
        pub content_400: ManoeuvringAreaAvailabilityContent400XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ManoeuvringAreaAvailabilityTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for ManoeuvringAreaAvailabilityTypeXType {}
    pub type ManoeuvringAreaAvailabilityTypeExtensionXElement =
        ManoeuvringAreaAvailabilityTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ManoeuvringAreaAvailabilityTypeExtensionXElementType {
        #[serde(
            default = "ManoeuvringAreaAvailabilityTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ManoeuvringAreaAvailabilityTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ManoeuvringAreaAvailabilityTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractManoeuvringAreaAvailabilityExtension")]
        AbstractManoeuvringAreaAvailabilityExtension(
            AbstractManoeuvringAreaAvailabilityExtensionXElement,
        ),
    }
    pub type ManoeuvringAreaUsageXElement = ManoeuvringAreaUsageTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ManoeuvringAreaUsagePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ManoeuvringAreaUsage")]
        pub manoeuvring_area_usage: ManoeuvringAreaUsageXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ManoeuvringAreaUsageTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content405")]
        pub content_405: ManoeuvringAreaUsageContent405XType,
        #[serde(rename = "Content406")]
        pub content_406: ManoeuvringAreaUsageContent406XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ManoeuvringAreaUsageTypeExtensionXElement>,
    }
    impl AbstractUsageConditionXElementTrait for ManoeuvringAreaUsageTypeXType {}
    pub type ManoeuvringAreaUsageTypeExtensionXElement =
        ManoeuvringAreaUsageTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ManoeuvringAreaUsageTypeExtensionXElementType {
        #[serde(
            default = "ManoeuvringAreaUsageTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ManoeuvringAreaUsageTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ManoeuvringAreaUsageTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractUsageConditionExtension")]
        AbstractUsageConditionExtension(AbstractUsageConditionExtensionXElement),
        #[serde(rename = "AbstractManoeuvringAreaUsageExtension")]
        AbstractManoeuvringAreaUsageExtension(AbstractManoeuvringAreaUsageExtensionXElement),
    }
    pub type MarkerBeaconXElement = MarkerBeaconTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MarkerBeaconPropertyTypeXType {
        #[serde(
            default = "MarkerBeaconPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type MarkerBeaconTimeSliceXElement = MarkerBeaconTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MarkerBeaconTimeSlicePropertyTypeXType {
        #[serde(
            default = "MarkerBeaconTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "MarkerBeaconTimeSlice")]
        pub marker_beacon_time_slice: MarkerBeaconTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MarkerBeaconTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content791")]
        pub content_791: MarkerBeaconTimeSliceContent791XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<MarkerBeaconTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for MarkerBeaconTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for MarkerBeaconTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for MarkerBeaconTimeSliceTypeXType {}
    pub type MarkerBeaconTimeSliceTypeExtensionXElement =
        MarkerBeaconTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MarkerBeaconTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "MarkerBeaconTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: MarkerBeaconTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum MarkerBeaconTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractMarkerBeaconExtension")]
        AbstractMarkerBeaconExtension(AbstractMarkerBeaconExtensionXElement),
        #[serde(rename = "AbstractNavaidEquipmentExtension")]
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MarkerBeaconTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<MarkerBeaconTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for MarkerBeaconTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for MarkerBeaconTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for MarkerBeaconTypeXType {}
    impl AbstractAixmFeatureXElementTrait for MarkerBeaconTypeXType {}
    impl AbstractNavaidEquipmentXElementTrait for MarkerBeaconTypeXType {}
    pub type MarkingBuoyXElement = MarkingBuoyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MarkingBuoyPropertyTypeXType {
        #[serde(
            default = "MarkingBuoyPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type MarkingBuoyTimeSliceXElement = MarkingBuoyTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MarkingBuoyTimeSlicePropertyTypeXType {
        #[serde(
            default = "MarkingBuoyTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "MarkingBuoyTimeSlice")]
        pub marking_buoy_time_slice: MarkingBuoyTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MarkingBuoyTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content495")]
        pub content_495: MarkingBuoyTimeSliceContent495XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<MarkingBuoyTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for MarkingBuoyTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for MarkingBuoyTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for MarkingBuoyTimeSliceTypeXType {}
    pub type MarkingBuoyTimeSliceTypeExtensionXElement =
        MarkingBuoyTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MarkingBuoyTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "MarkingBuoyTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractMarkingBuoyExtension")]
        pub abstract_marking_buoy_extension: AbstractMarkingBuoyExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MarkingBuoyTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<MarkingBuoyTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for MarkingBuoyTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for MarkingBuoyTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for MarkingBuoyTypeXType {}
    impl AbstractAixmFeatureXElementTrait for MarkingBuoyTypeXType {}
    pub type MarkingElementXElement = MarkingElementTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MarkingElementPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "MarkingElement")]
        pub marking_element: MarkingElementXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MarkingElementTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content345")]
        pub content_345: MarkingElementContent345XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<MarkingElementTypeExtensionXElement>,
    }
    pub type MarkingElementTypeExtensionXElement = MarkingElementTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MarkingElementTypeExtensionXElementType {
        #[serde(
            default = "MarkingElementTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: MarkingElementTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum MarkingElementTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractMarkingElementExtension")]
        AbstractMarkingElementExtension(AbstractMarkingElementExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MarkingPropertyTypeXType {
        #[serde(default = "MarkingPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MessageMetadataPropertyTypeXType {
        #[serde(
            default = "MessageMetadataPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<MessageMetadataPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MessageMetadataPropertyTypeXTypeContent {
        #[serde(rename = "MD_Metadata")]
        pub md_metadata: super::gmd::MdMetadataXElement,
    }
    pub type MeteorologyXElement = MeteorologyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MeteorologyPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "Meteorology")]
        pub meteorology: MeteorologyXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MeteorologyTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1559")]
        pub content_1559: MeteorologyContent1559XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<MeteorologyTypeExtensionXElement>,
    }
    pub type MeteorologyTypeExtensionXElement = MeteorologyTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MeteorologyTypeExtensionXElementType {
        #[serde(
            default = "MeteorologyTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: MeteorologyTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum MeteorologyTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractMeteorologyExtension")]
        AbstractMeteorologyExtension(AbstractMeteorologyExtensionXElement),
    }
    pub type MinimaXElement = MinimaTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MinimaPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "Minima")]
        pub minima: MinimaXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MinimaTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1085")]
        pub content_1085: MinimaContent1085XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<MinimaTypeExtensionXElement>,
    }
    pub type MinimaTypeExtensionXElement = MinimaTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MinimaTypeExtensionXElementType {
        #[serde(
            default = "MinimaTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: MinimaTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum MinimaTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractMinimaExtension")]
        AbstractMinimaExtension(AbstractMinimaExtensionXElement),
    }
    pub type MissedApproachGroupXElement = MissedApproachGroupTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MissedApproachGroupPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "MissedApproachGroup")]
        pub missed_approach_group: MissedApproachGroupXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MissedApproachGroupTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1038")]
        pub content_1038: MissedApproachGroupContent1038XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<MissedApproachGroupTypeExtensionXElement>,
    }
    pub type MissedApproachGroupTypeExtensionXElement =
        MissedApproachGroupTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MissedApproachGroupTypeExtensionXElementType {
        #[serde(
            default = "MissedApproachGroupTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: MissedApproachGroupTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum MissedApproachGroupTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractMissedApproachGroupExtension")]
        AbstractMissedApproachGroupExtension(AbstractMissedApproachGroupExtensionXElement),
    }
    pub type MissedApproachLegXElement = MissedApproachLegTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MissedApproachLegPropertyTypeXType {
        #[serde(
            default = "MissedApproachLegPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type MissedApproachLegTimeSliceXElement = MissedApproachLegTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MissedApproachLegTimeSlicePropertyTypeXType {
        #[serde(
            default = "MissedApproachLegTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "MissedApproachLegTimeSlice")]
        pub missed_approach_leg_time_slice: MissedApproachLegTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MissedApproachLegTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1212")]
        pub content_1212: MissedApproachLegTimeSliceContent1212XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<MissedApproachLegTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for MissedApproachLegTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for MissedApproachLegTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for MissedApproachLegTimeSliceTypeXType {}
    pub type MissedApproachLegTimeSliceTypeExtensionXElement =
        MissedApproachLegTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MissedApproachLegTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "MissedApproachLegTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: MissedApproachLegTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum MissedApproachLegTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractMissedApproachLegExtension")]
        AbstractMissedApproachLegExtension(AbstractMissedApproachLegExtensionXElement),
        #[serde(rename = "AbstractApproachLegExtension")]
        AbstractApproachLegExtension(AbstractApproachLegExtensionXElement),
        #[serde(rename = "AbstractSegmentLegExtension")]
        AbstractSegmentLegExtension(AbstractSegmentLegExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MissedApproachLegTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<MissedApproachLegTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for MissedApproachLegTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for MissedApproachLegTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for MissedApproachLegTypeXType {}
    impl AbstractAixmFeatureXElementTrait for MissedApproachLegTypeXType {}
    impl AbstractApproachLegXElementTrait for MissedApproachLegTypeXType {}
    impl AbstractSegmentLegXElementTrait for MissedApproachLegTypeXType {}
    pub type NdbXElement = NdbTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NdbPropertyTypeXType {
        #[serde(default = "NdbPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type NdbTimeSliceXElement = NdbTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NdbTimeSlicePropertyTypeXType {
        #[serde(
            default = "NdbTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "NDBTimeSlice")]
        pub ndb_time_slice: NdbTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NdbTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content823")]
        pub content_823: NdbTimeSliceContent823XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<NdbTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for NdbTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for NdbTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for NdbTimeSliceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NdbTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<NdbTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for NdbTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for NdbTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for NdbTypeXType {}
    impl AbstractAixmFeatureXElementTrait for NdbTypeXType {}
    impl AbstractNavaidEquipmentXElementTrait for NdbTypeXType {}
    pub type NavaidXElement = NavaidTypeXType;
    pub type NavaidComponentXElement = NavaidComponentTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidComponentPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "NavaidComponent")]
        pub navaid_component: NavaidComponentXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidComponentTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content803")]
        pub content_803: NavaidComponentContent803XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<NavaidComponentTypeExtensionXElement>,
    }
    pub type NavaidComponentTypeExtensionXElement = NavaidComponentTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidComponentTypeExtensionXElementType {
        #[serde(
            default = "NavaidComponentTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: NavaidComponentTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum NavaidComponentTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractNavaidComponentExtension")]
        AbstractNavaidComponentExtension(AbstractNavaidComponentExtensionXElement),
    }
    pub type NavaidEquipmentDistanceXElement = NavaidEquipmentDistanceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidEquipmentDistancePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "NavaidEquipmentDistance")]
        pub navaid_equipment_distance: NavaidEquipmentDistanceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidEquipmentDistanceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content411")]
        pub content_411: NavaidEquipmentDistanceContent411XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<NavaidEquipmentDistanceTypeExtensionXElement>,
    }
    pub type NavaidEquipmentDistanceTypeExtensionXElement =
        NavaidEquipmentDistanceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidEquipmentDistanceTypeExtensionXElementType {
        #[serde(
            default = "NavaidEquipmentDistanceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: NavaidEquipmentDistanceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum NavaidEquipmentDistanceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractNavaidEquipmentDistanceExtension")]
        AbstractNavaidEquipmentDistanceExtension(AbstractNavaidEquipmentDistanceExtensionXElement),
    }
    pub type NavaidEquipmentMonitoringXElement = NavaidEquipmentMonitoringTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidEquipmentMonitoringPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "NavaidEquipmentMonitoring")]
        pub navaid_equipment_monitoring: NavaidEquipmentMonitoringXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidEquipmentMonitoringTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content808")]
        pub content_808: NavaidEquipmentMonitoringContent808XType,
        #[serde(rename = "Content809")]
        pub content_809: NavaidEquipmentMonitoringContent809XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<NavaidEquipmentMonitoringTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for NavaidEquipmentMonitoringTypeXType {}
    pub type NavaidEquipmentMonitoringTypeExtensionXElement =
        NavaidEquipmentMonitoringTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidEquipmentMonitoringTypeExtensionXElementType {
        #[serde(
            default = "NavaidEquipmentMonitoringTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: NavaidEquipmentMonitoringTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum NavaidEquipmentMonitoringTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractNavaidEquipmentMonitoringExtension")]
        AbstractNavaidEquipmentMonitoringExtension(
            AbstractNavaidEquipmentMonitoringExtensionXElement,
        ),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidEquipmentPropertyTypeXType {
        #[serde(
            default = "NavaidEquipmentPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type NavaidOperationalStatusXElement = NavaidOperationalStatusTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidOperationalStatusPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "NavaidOperationalStatus")]
        pub navaid_operational_status: NavaidOperationalStatusXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidOperationalStatusTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content814")]
        pub content_814: NavaidOperationalStatusContent814XType,
        #[serde(rename = "Content815")]
        pub content_815: NavaidOperationalStatusContent815XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<NavaidOperationalStatusTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for NavaidOperationalStatusTypeXType {}
    pub type NavaidOperationalStatusTypeExtensionXElement =
        NavaidOperationalStatusTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidOperationalStatusTypeExtensionXElementType {
        #[serde(
            default = "NavaidOperationalStatusTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: NavaidOperationalStatusTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum NavaidOperationalStatusTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractNavaidOperationalStatusExtension")]
        AbstractNavaidOperationalStatusExtension(AbstractNavaidOperationalStatusExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidPropertyTypeXType {
        #[serde(default = "NavaidPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type NavaidTimeSliceXElement = NavaidTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidTimeSlicePropertyTypeXType {
        #[serde(
            default = "NavaidTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "NavaidTimeSlice")]
        pub navaid_time_slice: NavaidTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content799")]
        pub content_799: NavaidTimeSliceContent799XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<NavaidTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for NavaidTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for NavaidTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for NavaidTimeSliceTypeXType {}
    pub type NavaidTimeSliceTypeExtensionXElement = NavaidTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "NavaidTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractNavaidExtension")]
        pub abstract_navaid_extension: AbstractNavaidExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<NavaidTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for NavaidTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for NavaidTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for NavaidTypeXType {}
    impl AbstractAixmFeatureXElementTrait for NavaidTypeXType {}
    pub type NavigationAreaXElement = NavigationAreaTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavigationAreaPropertyTypeXType {
        #[serde(
            default = "NavigationAreaPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type NavigationAreaRestrictionXElement = NavigationAreaRestrictionTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavigationAreaRestrictionPropertyTypeXType {
        #[serde(
            default = "NavigationAreaRestrictionPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type NavigationAreaRestrictionTimeSliceXElement =
        NavigationAreaRestrictionTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavigationAreaRestrictionTimeSlicePropertyTypeXType {
        #[serde(
            default = "NavigationAreaRestrictionTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "NavigationAreaRestrictionTimeSlice")]
        pub navigation_area_restriction_time_slice: NavigationAreaRestrictionTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavigationAreaRestrictionTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1221")]
        pub content_1221: NavigationAreaRestrictionTimeSliceContent1221XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<NavigationAreaRestrictionTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for NavigationAreaRestrictionTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for NavigationAreaRestrictionTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for NavigationAreaRestrictionTimeSliceTypeXType {}
    pub type NavigationAreaRestrictionTimeSliceTypeExtensionXElement =
        NavigationAreaRestrictionTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavigationAreaRestrictionTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "NavigationAreaRestrictionTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractNavigationAreaRestrictionExtension")]
        pub abstract_navigation_area_restriction_extension:
            AbstractNavigationAreaRestrictionExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavigationAreaRestrictionTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<NavigationAreaRestrictionTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for NavigationAreaRestrictionTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for NavigationAreaRestrictionTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for NavigationAreaRestrictionTypeXType {}
    impl AbstractAixmFeatureXElementTrait for NavigationAreaRestrictionTypeXType {}
    pub type NavigationAreaSectorXElement = NavigationAreaSectorTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavigationAreaSectorPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "NavigationAreaSector")]
        pub navigation_area_sector: NavigationAreaSectorXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavigationAreaSectorTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1112")]
        pub content_1112: NavigationAreaSectorContent1112XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<NavigationAreaSectorTypeExtensionXElement>,
    }
    pub type NavigationAreaSectorTypeExtensionXElement =
        NavigationAreaSectorTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavigationAreaSectorTypeExtensionXElementType {
        #[serde(
            default = "NavigationAreaSectorTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: NavigationAreaSectorTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum NavigationAreaSectorTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractNavigationAreaSectorExtension")]
        AbstractNavigationAreaSectorExtension(AbstractNavigationAreaSectorExtensionXElement),
    }
    pub type NavigationAreaTimeSliceXElement = NavigationAreaTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavigationAreaTimeSlicePropertyTypeXType {
        #[serde(
            default = "NavigationAreaTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "NavigationAreaTimeSlice")]
        pub navigation_area_time_slice: NavigationAreaTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavigationAreaTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1107")]
        pub content_1107: NavigationAreaTimeSliceContent1107XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<NavigationAreaTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for NavigationAreaTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for NavigationAreaTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for NavigationAreaTimeSliceTypeXType {}
    pub type NavigationAreaTimeSliceTypeExtensionXElement =
        NavigationAreaTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavigationAreaTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "NavigationAreaTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractNavigationAreaExtension")]
        pub abstract_navigation_area_extension: AbstractNavigationAreaExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavigationAreaTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<NavigationAreaTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for NavigationAreaTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for NavigationAreaTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for NavigationAreaTypeXType {}
    impl AbstractAixmFeatureXElementTrait for NavigationAreaTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavigationSystemCheckpointPropertyTypeXType {
        #[serde(
            default = "NavigationSystemCheckpointPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type NdbTimeSliceTypeExtensionXElement = NdbTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NdbTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "NdbTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: NdbTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum NdbTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractNDBExtension")]
        AbstractNdbExtension(AbstractNdbExtensionXElement),
        #[serde(rename = "AbstractNavaidEquipmentExtension")]
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtensionXElement),
    }
    pub type NitrogenXElement = NitrogenTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NitrogenPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "Nitrogen")]
        pub nitrogen: NitrogenXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NitrogenTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1447")]
        pub content_1447: NitrogenContent1447XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<NitrogenTypeExtensionXElement>,
    }
    pub type NitrogenTypeExtensionXElement = NitrogenTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NitrogenTypeExtensionXElementType {
        #[serde(
            default = "NitrogenTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: NitrogenTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum NitrogenTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractNitrogenExtension")]
        AbstractNitrogenExtension(AbstractNitrogenExtensionXElement),
    }
    pub type NoNumberBaseTypeXType = u32;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NoNumberTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: NoNumberBaseTypeXType,
    }
    pub type NoSequenceBaseTypeXType = u32;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NoSequenceTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: NoSequenceBaseTypeXType,
    }
    pub type NonMovementAreaXElement = NonMovementAreaTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NonMovementAreaPropertyTypeXType {
        #[serde(
            default = "NonMovementAreaPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type NonMovementAreaTimeSliceXElement = NonMovementAreaTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NonMovementAreaTimeSlicePropertyTypeXType {
        #[serde(
            default = "NonMovementAreaTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "NonMovementAreaTimeSlice")]
        pub non_movement_area_time_slice: NonMovementAreaTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NonMovementAreaTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content137")]
        pub content_137: NonMovementAreaTimeSliceContent137XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<NonMovementAreaTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for NonMovementAreaTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for NonMovementAreaTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for NonMovementAreaTimeSliceTypeXType {}
    pub type NonMovementAreaTimeSliceTypeExtensionXElement =
        NonMovementAreaTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NonMovementAreaTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "NonMovementAreaTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractNonMovementAreaExtension")]
        pub abstract_non_movement_area_extension: AbstractNonMovementAreaExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NonMovementAreaTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<NonMovementAreaTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for NonMovementAreaTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for NonMovementAreaTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for NonMovementAreaTypeXType {}
    impl AbstractAixmFeatureXElementTrait for NonMovementAreaTypeXType {}
    pub type NoteXElement = NoteTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NotePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "Note")]
        pub note: NoteXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NoteTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content940")]
        pub content_940: NoteContent940XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<NoteTypeExtensionXElement>,
    }
    pub type NoteTypeExtensionXElement = NoteTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NoteTypeExtensionXElementType {
        #[serde(
            default = "NoteTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: NoteTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum NoteTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractNoteExtension")]
        AbstractNoteExtension(AbstractNoteExtensionXElement),
    }
    pub type ObstacleAreaXElement = ObstacleAreaTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObstacleAreaPropertyTypeXType {
        #[serde(
            default = "ObstacleAreaPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type ObstacleAreaTimeSliceXElement = ObstacleAreaTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObstacleAreaTimeSlicePropertyTypeXType {
        #[serde(
            default = "ObstacleAreaTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "ObstacleAreaTimeSlice")]
        pub obstacle_area_time_slice: ObstacleAreaTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObstacleAreaTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content948")]
        pub content_948: ObstacleAreaTimeSliceContent948XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ObstacleAreaTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for ObstacleAreaTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ObstacleAreaTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for ObstacleAreaTimeSliceTypeXType {}
    pub type ObstacleAreaTimeSliceTypeExtensionXElement =
        ObstacleAreaTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObstacleAreaTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "ObstacleAreaTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractObstacleAreaExtension")]
        pub abstract_obstacle_area_extension: AbstractObstacleAreaExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObstacleAreaTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<ObstacleAreaTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for ObstacleAreaTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for ObstacleAreaTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ObstacleAreaTypeXType {}
    impl AbstractAixmFeatureXElementTrait for ObstacleAreaTypeXType {}
    pub type ObstacleAssessmentAreaXElement = ObstacleAssessmentAreaTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObstacleAssessmentAreaPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ObstacleAssessmentArea")]
        pub obstacle_assessment_area: ObstacleAssessmentAreaXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObstacleAssessmentAreaTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1623")]
        pub content_1623: ObstacleAssessmentAreaContent1623XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ObstacleAssessmentAreaTypeExtensionXElement>,
    }
    pub type ObstacleAssessmentAreaTypeExtensionXElement =
        ObstacleAssessmentAreaTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObstacleAssessmentAreaTypeExtensionXElementType {
        #[serde(
            default = "ObstacleAssessmentAreaTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ObstacleAssessmentAreaTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ObstacleAssessmentAreaTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractObstacleAssessmentAreaExtension")]
        AbstractObstacleAssessmentAreaExtension(AbstractObstacleAssessmentAreaExtensionXElement),
    }
    pub type ObstaclePlacementXElement = ObstaclePlacementTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObstaclePlacementPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ObstaclePlacement")]
        pub obstacle_placement: ObstaclePlacementXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObstaclePlacementTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1628")]
        pub content_1628: ObstaclePlacementContent1628XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ObstaclePlacementTypeExtensionXElement>,
    }
    pub type ObstaclePlacementTypeExtensionXElement = ObstaclePlacementTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObstaclePlacementTypeExtensionXElementType {
        #[serde(
            default = "ObstaclePlacementTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ObstaclePlacementTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ObstaclePlacementTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractObstaclePlacementExtension")]
        AbstractObstaclePlacementExtension(AbstractObstaclePlacementExtensionXElement),
    }
    pub type ObstructionXElement = ObstructionTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObstructionPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "Obstruction")]
        pub obstruction: ObstructionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObstructionTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1633")]
        pub content_1633: ObstructionContent1633XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ObstructionTypeExtensionXElement>,
    }
    pub type ObstructionTypeExtensionXElement = ObstructionTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObstructionTypeExtensionXElementType {
        #[serde(
            default = "ObstructionTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ObstructionTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ObstructionTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractObstructionExtension")]
        AbstractObstructionExtension(AbstractObstructionExtensionXElement),
    }
    pub type OilXElement = OilTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OilPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "Oil")]
        pub oil: OilXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OilTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1452")]
        pub content_1452: OilContent1452XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<OilTypeExtensionXElement>,
    }
    pub type OilTypeExtensionXElement = OilTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OilTypeExtensionXElementType {
        #[serde(
            default = "OilTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: OilTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum OilTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractOilExtension")]
        AbstractOilExtension(AbstractOilExtensionXElement),
    }
    pub type OnlineContactXElement = OnlineContactTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OnlineContactPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "OnlineContact")]
        pub online_contact: OnlineContactXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OnlineContactTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1510")]
        pub content_1510: OnlineContactContent1510XType,
        #[serde(rename = "Content1511")]
        pub content_1511: OnlineContactContent1511XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<OnlineContactTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for OnlineContactTypeXType {}
    pub type OnlineContactTypeExtensionXElement = OnlineContactTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OnlineContactTypeExtensionXElementType {
        #[serde(
            default = "OnlineContactTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: OnlineContactTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum OnlineContactTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractOnlineContactExtension")]
        AbstractOnlineContactExtension(AbstractOnlineContactExtensionXElement),
    }
    pub type OrganisationAuthorityXElement = OrganisationAuthorityTypeXType;
    pub type OrganisationAuthorityAssociationXElement = OrganisationAuthorityAssociationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OrganisationAuthorityAssociationPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "OrganisationAuthorityAssociation")]
        pub organisation_authority_association: OrganisationAuthorityAssociationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OrganisationAuthorityAssociationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content980")]
        pub content_980: OrganisationAuthorityAssociationContent980XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<OrganisationAuthorityAssociationTypeExtensionXElement>,
    }
    pub type OrganisationAuthorityAssociationTypeExtensionXElement =
        OrganisationAuthorityAssociationTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OrganisationAuthorityAssociationTypeExtensionXElementType {
        #[serde(
            default = "OrganisationAuthorityAssociationTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: OrganisationAuthorityAssociationTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum OrganisationAuthorityAssociationTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractOrganisationAuthorityAssociationExtension")]
        AbstractOrganisationAuthorityAssociationExtension(
            AbstractOrganisationAuthorityAssociationExtensionXElement,
        ),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OrganisationAuthorityPropertyTypeXType {
        #[serde(
            default = "OrganisationAuthorityPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type OrganisationAuthorityTimeSliceXElement = OrganisationAuthorityTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OrganisationAuthorityTimeSlicePropertyTypeXType {
        #[serde(
            default = "OrganisationAuthorityTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "OrganisationAuthorityTimeSlice")]
        pub organisation_authority_time_slice: OrganisationAuthorityTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OrganisationAuthorityTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content976")]
        pub content_976: OrganisationAuthorityTimeSliceContent976XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<OrganisationAuthorityTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for OrganisationAuthorityTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for OrganisationAuthorityTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for OrganisationAuthorityTimeSliceTypeXType {}
    pub type OrganisationAuthorityTimeSliceTypeExtensionXElement =
        OrganisationAuthorityTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OrganisationAuthorityTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "OrganisationAuthorityTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractOrganisationAuthorityExtension")]
        pub abstract_organisation_authority_extension:
            AbstractOrganisationAuthorityExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OrganisationAuthorityTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<OrganisationAuthorityTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for OrganisationAuthorityTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for OrganisationAuthorityTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for OrganisationAuthorityTypeXType {}
    impl AbstractAixmFeatureXElementTrait for OrganisationAuthorityTypeXType {}
    pub type OxygenXElement = OxygenTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OxygenPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "Oxygen")]
        pub oxygen: OxygenXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OxygenTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1457")]
        pub content_1457: OxygenContent1457XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<OxygenTypeExtensionXElement>,
    }
    pub type OxygenTypeExtensionXElement = OxygenTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OxygenTypeExtensionXElementType {
        #[serde(
            default = "OxygenTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: OxygenTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum OxygenTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractOxygenExtension")]
        AbstractOxygenExtension(AbstractOxygenExtensionXElement),
    }
    pub type PassengerLoadingBridgeXElement = PassengerLoadingBridgeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PassengerLoadingBridgePropertyTypeXType {
        #[serde(
            default = "PassengerLoadingBridgePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type PassengerLoadingBridgeTimeSliceXElement = PassengerLoadingBridgeTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PassengerLoadingBridgeTimeSlicePropertyTypeXType {
        #[serde(
            default = "PassengerLoadingBridgeTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "PassengerLoadingBridgeTimeSlice")]
        pub passenger_loading_bridge_time_slice: PassengerLoadingBridgeTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PassengerLoadingBridgeTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content210")]
        pub content_210: PassengerLoadingBridgeTimeSliceContent210XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<PassengerLoadingBridgeTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for PassengerLoadingBridgeTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for PassengerLoadingBridgeTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for PassengerLoadingBridgeTimeSliceTypeXType {}
    pub type PassengerLoadingBridgeTimeSliceTypeExtensionXElement =
        PassengerLoadingBridgeTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PassengerLoadingBridgeTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "PassengerLoadingBridgeTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractPassengerLoadingBridgeExtension")]
        pub abstract_passenger_loading_bridge_extension:
            AbstractPassengerLoadingBridgeExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PassengerLoadingBridgeTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<PassengerLoadingBridgeTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for PassengerLoadingBridgeTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for PassengerLoadingBridgeTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for PassengerLoadingBridgeTypeXType {}
    impl AbstractAixmFeatureXElementTrait for PassengerLoadingBridgeTypeXType {}
    pub type PassengerServiceXElement = PassengerServiceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PassengerServicePropertyTypeXType {
        #[serde(
            default = "PassengerServicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type PassengerServiceTimeSliceXElement = PassengerServiceTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PassengerServiceTimeSlicePropertyTypeXType {
        #[serde(
            default = "PassengerServiceTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "PassengerServiceTimeSlice")]
        pub passenger_service_time_slice: PassengerServiceTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PassengerServiceTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1465")]
        pub content_1465: PassengerServiceTimeSliceContent1465XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<PassengerServiceTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for PassengerServiceTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for PassengerServiceTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for PassengerServiceTimeSliceTypeXType {}
    pub type PassengerServiceTimeSliceTypeExtensionXElement =
        PassengerServiceTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PassengerServiceTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "PassengerServiceTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: PassengerServiceTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum PassengerServiceTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPassengerServiceExtension")]
        AbstractPassengerServiceExtension(AbstractPassengerServiceExtensionXElement),
        #[serde(rename = "AbstractAirportGroundServiceExtension")]
        AbstractAirportGroundServiceExtension(AbstractAirportGroundServiceExtensionXElement),
        #[serde(rename = "AbstractServiceExtension")]
        AbstractServiceExtension(AbstractServiceExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PassengerServiceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<PassengerServiceTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for PassengerServiceTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for PassengerServiceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for PassengerServiceTypeXType {}
    impl AbstractAixmFeatureXElementTrait for PassengerServiceTypeXType {}
    impl AbstractAirportGroundServiceXElementTrait for PassengerServiceTypeXType {}
    impl AbstractServiceXElementTrait for PassengerServiceTypeXType {}
    pub type PilotControlledLightingXElement = PilotControlledLightingTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PilotControlledLightingPropertyTypeXType {
        #[serde(
            default = "PilotControlledLightingPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type PilotControlledLightingTimeSliceXElement = PilotControlledLightingTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PilotControlledLightingTimeSlicePropertyTypeXType {
        #[serde(
            default = "PilotControlledLightingTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "PilotControlledLightingTimeSlice")]
        pub pilot_controlled_lighting_time_slice: PilotControlledLightingTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PilotControlledLightingTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1474")]
        pub content_1474: PilotControlledLightingTimeSliceContent1474XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<PilotControlledLightingTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for PilotControlledLightingTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for PilotControlledLightingTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for PilotControlledLightingTimeSliceTypeXType {}
    pub type PilotControlledLightingTimeSliceTypeExtensionXElement =
        PilotControlledLightingTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PilotControlledLightingTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "PilotControlledLightingTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractPilotControlledLightingExtension")]
        pub abstract_pilot_controlled_lighting_extension:
            AbstractPilotControlledLightingExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PilotControlledLightingTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<PilotControlledLightingTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for PilotControlledLightingTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for PilotControlledLightingTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for PilotControlledLightingTypeXType {}
    impl AbstractAixmFeatureXElementTrait for PilotControlledLightingTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PointXElement(pub Box<dyn PointXElementTrait>);
    pub trait PointXElementTrait: super::gml::PointXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PointPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "Point")]
        pub point: PointXElement,
    }
    pub type PointReferenceXElement = PointReferenceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PointReferencePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "PointReference")]
        pub point_reference: PointReferenceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PointReferenceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content900")]
        pub content_900: PointReferenceContent900XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<PointReferenceTypeExtensionXElement>,
    }
    pub type PointReferenceTypeExtensionXElement = PointReferenceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PointReferenceTypeExtensionXElementType {
        #[serde(
            default = "PointReferenceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: PointReferenceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum PointReferenceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPointReferenceExtension")]
        AbstractPointReferenceExtension(AbstractPointReferenceExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PointTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::gml::Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<super::gml::NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<super::gml::NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content658")]
        pub content_658: super::gml::PointContent658XType,
        #[serde(rename = "Content661")]
        pub content_661: PointContent661XType,
    }
    impl super::gml::AbstractGmlXElementTrait for PointTypeXType {}
    impl super::gml::AbstractGeometricPrimitiveXElementTrait for PointTypeXType {}
    impl super::gml::AbstractGeometryXElementTrait for PointTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for PointTypeXType {}
    impl super::gml::PointXElementTrait for PointTypeXType {}
    impl PointXElementTrait for PointTypeXType {}
    pub type PostalAddressXElement = PostalAddressTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PostalAddressPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "PostalAddress")]
        pub postal_address: PostalAddressXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PostalAddressTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1516")]
        pub content_1516: PostalAddressContent1516XType,
        #[serde(rename = "Content1517")]
        pub content_1517: PostalAddressContent1517XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<PostalAddressTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for PostalAddressTypeXType {}
    pub type PostalAddressTypeExtensionXElement = PostalAddressTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PostalAddressTypeExtensionXElementType {
        #[serde(
            default = "PostalAddressTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: PostalAddressTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum PostalAddressTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractPostalAddressExtension")]
        AbstractPostalAddressExtension(AbstractPostalAddressExtensionXElement),
    }
    pub type PrecisionApproachRadarXElement = PrecisionApproachRadarTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrecisionApproachRadarPropertyTypeXType {
        #[serde(
            default = "PrecisionApproachRadarPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type PrecisionApproachRadarTimeSliceXElement = PrecisionApproachRadarTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrecisionApproachRadarTimeSlicePropertyTypeXType {
        #[serde(
            default = "PrecisionApproachRadarTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "PrecisionApproachRadarTimeSlice")]
        pub precision_approach_radar_time_slice: PrecisionApproachRadarTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrecisionApproachRadarTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1642")]
        pub content_1642: PrecisionApproachRadarTimeSliceContent1642XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<PrecisionApproachRadarTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for PrecisionApproachRadarTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for PrecisionApproachRadarTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for PrecisionApproachRadarTimeSliceTypeXType {}
    pub type PrecisionApproachRadarTimeSliceTypeExtensionXElement =
        PrecisionApproachRadarTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrecisionApproachRadarTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "PrecisionApproachRadarTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: PrecisionApproachRadarTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum PrecisionApproachRadarTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPrecisionApproachRadarExtension")]
        AbstractPrecisionApproachRadarExtension(AbstractPrecisionApproachRadarExtensionXElement),
        #[serde(rename = "AbstractRadarEquipmentExtension")]
        AbstractRadarEquipmentExtension(AbstractRadarEquipmentExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrecisionApproachRadarTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<PrecisionApproachRadarTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for PrecisionApproachRadarTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for PrecisionApproachRadarTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for PrecisionApproachRadarTypeXType {}
    impl AbstractAixmFeatureXElementTrait for PrecisionApproachRadarTypeXType {}
    impl AbstractRadarEquipmentXElementTrait for PrecisionApproachRadarTypeXType {}
    pub type PrimarySurveillanceRadarXElement = PrimarySurveillanceRadarTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrimarySurveillanceRadarPropertyTypeXType {
        #[serde(
            default = "PrimarySurveillanceRadarPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type PrimarySurveillanceRadarTimeSliceXElement = PrimarySurveillanceRadarTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrimarySurveillanceRadarTimeSlicePropertyTypeXType {
        #[serde(
            default = "PrimarySurveillanceRadarTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "PrimarySurveillanceRadarTimeSlice")]
        pub primary_surveillance_radar_time_slice: PrimarySurveillanceRadarTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrimarySurveillanceRadarTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1651")]
        pub content_1651: PrimarySurveillanceRadarTimeSliceContent1651XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<PrimarySurveillanceRadarTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for PrimarySurveillanceRadarTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for PrimarySurveillanceRadarTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for PrimarySurveillanceRadarTimeSliceTypeXType {}
    pub type PrimarySurveillanceRadarTimeSliceTypeExtensionXElement =
        PrimarySurveillanceRadarTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrimarySurveillanceRadarTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "PrimarySurveillanceRadarTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: PrimarySurveillanceRadarTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum PrimarySurveillanceRadarTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPrimarySurveillanceRadarExtension")]
        AbstractPrimarySurveillanceRadarExtension(
            AbstractPrimarySurveillanceRadarExtensionXElement,
        ),
        #[serde(rename = "AbstractSurveillanceRadarExtension")]
        AbstractSurveillanceRadarExtension(AbstractSurveillanceRadarExtensionXElement),
        #[serde(rename = "AbstractRadarEquipmentExtension")]
        AbstractRadarEquipmentExtension(AbstractRadarEquipmentExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrimarySurveillanceRadarTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<PrimarySurveillanceRadarTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for PrimarySurveillanceRadarTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for PrimarySurveillanceRadarTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for PrimarySurveillanceRadarTypeXType {}
    impl AbstractAixmFeatureXElementTrait for PrimarySurveillanceRadarTypeXType {}
    impl AbstractRadarEquipmentXElementTrait for PrimarySurveillanceRadarTypeXType {}
    impl AbstractSurveillanceRadarXElementTrait for PrimarySurveillanceRadarTypeXType {}
    pub type ProcedureAvailabilityXElement = ProcedureAvailabilityTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedureAvailabilityPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ProcedureAvailability")]
        pub procedure_availability: ProcedureAvailabilityXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedureAvailabilityTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1242")]
        pub content_1242: ProcedureAvailabilityContent1242XType,
        #[serde(rename = "Content1243")]
        pub content_1243: ProcedureAvailabilityContent1243XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ProcedureAvailabilityTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for ProcedureAvailabilityTypeXType {}
    pub type ProcedureAvailabilityTypeExtensionXElement =
        ProcedureAvailabilityTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedureAvailabilityTypeExtensionXElementType {
        #[serde(
            default = "ProcedureAvailabilityTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ProcedureAvailabilityTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ProcedureAvailabilityTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractProcedureAvailabilityExtension")]
        AbstractProcedureAvailabilityExtension(AbstractProcedureAvailabilityExtensionXElement),
    }
    pub type ProcedureDmeXElement = ProcedureDmeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedureDmePropertyTypeXType {
        #[serde(
            default = "ProcedureDmePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type ProcedureDmeTimeSliceXElement = ProcedureDmeTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedureDmeTimeSlicePropertyTypeXType {
        #[serde(
            default = "ProcedureDmeTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "ProcedureDMETimeSlice")]
        pub procedure_dme_time_slice: ProcedureDmeTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedureDmeTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1228")]
        pub content_1228: ProcedureDmeTimeSliceContent1228XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ProcedureDmeTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for ProcedureDmeTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ProcedureDmeTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for ProcedureDmeTimeSliceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedureDmeTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<ProcedureDmeTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for ProcedureDmeTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for ProcedureDmeTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for ProcedureDmeTypeXType {}
    impl AbstractAixmFeatureXElementTrait for ProcedureDmeTypeXType {}
    pub type ProcedureDmeTimeSliceTypeExtensionXElement =
        ProcedureDmeTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedureDmeTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "ProcedureDmeTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractProcedureDMEExtension")]
        pub abstract_procedure_dme_extension: AbstractProcedureDmeExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedurePropertyTypeXType {
        #[serde(default = "ProcedurePropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type ProcedureTransitionXElement = ProcedureTransitionTypeXType;
    pub type ProcedureTransitionLegXElement = ProcedureTransitionLegTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedureTransitionLegPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ProcedureTransitionLeg")]
        pub procedure_transition_leg: ProcedureTransitionLegXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedureTransitionLegTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1237")]
        pub content_1237: ProcedureTransitionLegContent1237XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ProcedureTransitionLegTypeExtensionXElement>,
    }
    pub type ProcedureTransitionLegTypeExtensionXElement =
        ProcedureTransitionLegTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedureTransitionLegTypeExtensionXElementType {
        #[serde(
            default = "ProcedureTransitionLegTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ProcedureTransitionLegTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ProcedureTransitionLegTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractProcedureTransitionLegExtension")]
        AbstractProcedureTransitionLegExtension(AbstractProcedureTransitionLegExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedureTransitionPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ProcedureTransition")]
        pub procedure_transition: ProcedureTransitionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedureTransitionTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1232")]
        pub content_1232: ProcedureTransitionContent1232XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ProcedureTransitionTypeExtensionXElement>,
    }
    pub type ProcedureTransitionTypeExtensionXElement =
        ProcedureTransitionTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedureTransitionTypeExtensionXElementType {
        #[serde(
            default = "ProcedureTransitionTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ProcedureTransitionTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ProcedureTransitionTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractProcedureTransitionExtension")]
        AbstractProcedureTransitionExtension(AbstractProcedureTransitionExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PropertiesWithSchedulePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AbstractPropertiesWithSchedule")]
        pub abstract_properties_with_schedule: AbstractPropertiesWithScheduleXElement,
    }
    pub type RadarComponentXElement = RadarComponentTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadarComponentPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "RadarComponent")]
        pub radar_component: RadarComponentXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadarComponentTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1657")]
        pub content_1657: RadarComponentContent1657XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RadarComponentTypeExtensionXElement>,
    }
    pub type RadarComponentTypeExtensionXElement = RadarComponentTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadarComponentTypeExtensionXElementType {
        #[serde(
            default = "RadarComponentTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: RadarComponentTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RadarComponentTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractRadarComponentExtension")]
        AbstractRadarComponentExtension(AbstractRadarComponentExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadarEquipmentPropertyTypeXType {
        #[serde(
            default = "RadarEquipmentPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type RadarSystemXElement = RadarSystemTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadarSystemPropertyTypeXType {
        #[serde(
            default = "RadarSystemPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type RadarSystemTimeSliceXElement = RadarSystemTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadarSystemTimeSlicePropertyTypeXType {
        #[serde(
            default = "RadarSystemTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "RadarSystemTimeSlice")]
        pub radar_system_time_slice: RadarSystemTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadarSystemTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1665")]
        pub content_1665: RadarSystemTimeSliceContent1665XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RadarSystemTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for RadarSystemTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RadarSystemTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for RadarSystemTimeSliceTypeXType {}
    pub type RadarSystemTimeSliceTypeExtensionXElement =
        RadarSystemTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadarSystemTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "RadarSystemTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractRadarSystemExtension")]
        pub abstract_radar_system_extension: AbstractRadarSystemExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadarSystemTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<RadarSystemTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for RadarSystemTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for RadarSystemTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RadarSystemTypeXType {}
    impl AbstractAixmFeatureXElementTrait for RadarSystemTypeXType {}
    pub type RadioCommunicationChannelXElement = RadioCommunicationChannelTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadioCommunicationChannelPropertyTypeXType {
        #[serde(
            default = "RadioCommunicationChannelPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type RadioCommunicationChannelTimeSliceXElement =
        RadioCommunicationChannelTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadioCommunicationChannelTimeSlicePropertyTypeXType {
        #[serde(
            default = "RadioCommunicationChannelTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "RadioCommunicationChannelTimeSlice")]
        pub radio_communication_channel_time_slice: RadioCommunicationChannelTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadioCommunicationChannelTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1481")]
        pub content_1481: RadioCommunicationChannelTimeSliceContent1481XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RadioCommunicationChannelTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for RadioCommunicationChannelTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RadioCommunicationChannelTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for RadioCommunicationChannelTimeSliceTypeXType {}
    pub type RadioCommunicationChannelTimeSliceTypeExtensionXElement =
        RadioCommunicationChannelTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadioCommunicationChannelTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "RadioCommunicationChannelTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractRadioCommunicationChannelExtension")]
        pub abstract_radio_communication_channel_extension:
            AbstractRadioCommunicationChannelExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadioCommunicationChannelTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<RadioCommunicationChannelTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for RadioCommunicationChannelTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for RadioCommunicationChannelTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RadioCommunicationChannelTypeXType {}
    impl AbstractAixmFeatureXElementTrait for RadioCommunicationChannelTypeXType {}
    pub type RadioCommunicationOperationalStatusXElement =
        RadioCommunicationOperationalStatusTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadioCommunicationOperationalStatusPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "RadioCommunicationOperationalStatus")]
        pub radio_communication_operational_status: RadioCommunicationOperationalStatusXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadioCommunicationOperationalStatusTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1485")]
        pub content_1485: RadioCommunicationOperationalStatusContent1485XType,
        #[serde(rename = "Content1486")]
        pub content_1486: RadioCommunicationOperationalStatusContent1486XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RadioCommunicationOperationalStatusTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for RadioCommunicationOperationalStatusTypeXType {}
    pub type RadioCommunicationOperationalStatusTypeExtensionXElement =
        RadioCommunicationOperationalStatusTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadioCommunicationOperationalStatusTypeExtensionXElementType {
        #[serde(
            default = "RadioCommunicationOperationalStatusTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: RadioCommunicationOperationalStatusTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RadioCommunicationOperationalStatusTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractRadioCommunicationOperationalStatusExtension")]
        AbstractRadioCommunicationOperationalStatusExtension(
            AbstractRadioCommunicationOperationalStatusExtensionXElement,
        ),
    }
    pub type RadioFrequencyAreaXElement = RadioFrequencyAreaTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadioFrequencyAreaPropertyTypeXType {
        #[serde(
            default = "RadioFrequencyAreaPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type RadioFrequencyAreaTimeSliceXElement = RadioFrequencyAreaTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadioFrequencyAreaTimeSlicePropertyTypeXType {
        #[serde(
            default = "RadioFrequencyAreaTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "RadioFrequencyAreaTimeSlice")]
        pub radio_frequency_area_time_slice: RadioFrequencyAreaTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadioFrequencyAreaTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1567")]
        pub content_1567: RadioFrequencyAreaTimeSliceContent1567XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RadioFrequencyAreaTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for RadioFrequencyAreaTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RadioFrequencyAreaTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for RadioFrequencyAreaTimeSliceTypeXType {}
    pub type RadioFrequencyAreaTimeSliceTypeExtensionXElement =
        RadioFrequencyAreaTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadioFrequencyAreaTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "RadioFrequencyAreaTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractRadioFrequencyAreaExtension")]
        pub abstract_radio_frequency_area_extension: AbstractRadioFrequencyAreaExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadioFrequencyAreaTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<RadioFrequencyAreaTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for RadioFrequencyAreaTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for RadioFrequencyAreaTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RadioFrequencyAreaTypeXType {}
    impl AbstractAixmFeatureXElementTrait for RadioFrequencyAreaTypeXType {}
    pub type ReflectorXElement = ReflectorTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ReflectorPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "Reflector")]
        pub reflector: ReflectorXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ReflectorTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1669")]
        pub content_1669: ReflectorContent1669XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ReflectorTypeExtensionXElement>,
    }
    pub type ReflectorTypeExtensionXElement = ReflectorTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ReflectorTypeExtensionXElementType {
        #[serde(
            default = "ReflectorTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ReflectorTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ReflectorTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractReflectorExtension")]
        AbstractReflectorExtension(AbstractReflectorExtensionXElement),
    }
    pub type RidgeXElement = RidgeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RidgePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "Ridge")]
        pub ridge: RidgeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RidgeTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content533")]
        pub content_533: RidgeContent533XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RidgeTypeExtensionXElement>,
    }
    pub type RidgeTypeExtensionXElement = RidgeTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RidgeTypeExtensionXElementType {
        #[serde(
            default = "RidgeTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: RidgeTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RidgeTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractRidgeExtension")]
        AbstractRidgeExtension(AbstractRidgeExtensionXElement),
    }
    pub type RoadXElement = RoadTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RoadPropertyTypeXType {
        #[serde(default = "RoadPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type RoadTimeSliceXElement = RoadTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RoadTimeSlicePropertyTypeXType {
        #[serde(
            default = "RoadTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "RoadTimeSlice")]
        pub road_time_slice: RoadTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RoadTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content217")]
        pub content_217: RoadTimeSliceContent217XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RoadTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for RoadTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RoadTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for RoadTimeSliceTypeXType {}
    pub type RoadTimeSliceTypeExtensionXElement = RoadTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RoadTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "RoadTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractRoadExtension")]
        pub abstract_road_extension: AbstractRoadExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RoadTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<RoadTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for RoadTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for RoadTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RoadTypeXType {}
    impl AbstractAixmFeatureXElementTrait for RoadTypeXType {}
    pub type RouteXElement = RouteTypeXType;
    pub type RouteAvailabilityXElement = RouteAvailabilityTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteAvailabilityPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "RouteAvailability")]
        pub route_availability: RouteAvailabilityXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteAvailabilityTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1263")]
        pub content_1263: RouteAvailabilityContent1263XType,
        #[serde(rename = "Content1264")]
        pub content_1264: RouteAvailabilityContent1264XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RouteAvailabilityTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for RouteAvailabilityTypeXType {}
    pub type RouteAvailabilityTypeExtensionXElement = RouteAvailabilityTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteAvailabilityTypeExtensionXElementType {
        #[serde(
            default = "RouteAvailabilityTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: RouteAvailabilityTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RouteAvailabilityTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractRouteAvailabilityExtension")]
        AbstractRouteAvailabilityExtension(AbstractRouteAvailabilityExtensionXElement),
    }
    pub type RouteDmeXElement = RouteDmeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteDmePropertyTypeXType {
        #[serde(default = "RouteDmePropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type RouteDmeTimeSliceXElement = RouteDmeTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteDmeTimeSlicePropertyTypeXType {
        #[serde(
            default = "RouteDmeTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "RouteDMETimeSlice")]
        pub route_dme_time_slice: RouteDmeTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteDmeTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1272")]
        pub content_1272: RouteDmeTimeSliceContent1272XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RouteDmeTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for RouteDmeTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RouteDmeTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for RouteDmeTimeSliceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteDmeTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<RouteDmeTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for RouteDmeTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for RouteDmeTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RouteDmeTypeXType {}
    impl AbstractAixmFeatureXElementTrait for RouteDmeTypeXType {}
    pub type RouteDmeTimeSliceTypeExtensionXElement = RouteDmeTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteDmeTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "RouteDmeTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractRouteDMEExtension")]
        pub abstract_route_dme_extension: AbstractRouteDmeExtensionXElement,
    }
    pub type RoutePortionXElement = RoutePortionTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RoutePortionPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "RoutePortion")]
        pub route_portion: RoutePortionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RoutePortionTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1276")]
        pub content_1276: RoutePortionContent1276XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RoutePortionTypeExtensionXElement>,
    }
    pub type RoutePortionTypeExtensionXElement = RoutePortionTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RoutePortionTypeExtensionXElementType {
        #[serde(
            default = "RoutePortionTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: RoutePortionTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RoutePortionTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractRoutePortionExtension")]
        AbstractRoutePortionExtension(AbstractRoutePortionExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RoutePropertyTypeXType {
        #[serde(default = "RoutePropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type RouteSegmentXElement = RouteSegmentTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteSegmentPropertyTypeXType {
        #[serde(
            default = "RouteSegmentPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type RouteSegmentTimeSliceXElement = RouteSegmentTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteSegmentTimeSlicePropertyTypeXType {
        #[serde(
            default = "RouteSegmentTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "RouteSegmentTimeSlice")]
        pub route_segment_time_slice: RouteSegmentTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteSegmentTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1287")]
        pub content_1287: RouteSegmentTimeSliceContent1287XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RouteSegmentTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for RouteSegmentTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RouteSegmentTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for RouteSegmentTimeSliceTypeXType {}
    pub type RouteSegmentTimeSliceTypeExtensionXElement =
        RouteSegmentTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteSegmentTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "RouteSegmentTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractRouteSegmentExtension")]
        pub abstract_route_segment_extension: AbstractRouteSegmentExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteSegmentTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<RouteSegmentTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for RouteSegmentTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for RouteSegmentTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RouteSegmentTypeXType {}
    impl AbstractAixmFeatureXElementTrait for RouteSegmentTypeXType {}
    pub type RouteTimeSliceXElement = RouteTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteTimeSlicePropertyTypeXType {
        #[serde(
            default = "RouteTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "RouteTimeSlice")]
        pub route_time_slice: RouteTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1259")]
        pub content_1259: RouteTimeSliceContent1259XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RouteTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for RouteTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RouteTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for RouteTimeSliceTypeXType {}
    pub type RouteTimeSliceTypeExtensionXElement = RouteTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "RouteTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractRouteExtension")]
        pub abstract_route_extension: AbstractRouteExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<RouteTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for RouteTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for RouteTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RouteTypeXType {}
    impl AbstractAixmFeatureXElementTrait for RouteTypeXType {}
    pub type RulesProceduresXElement = RulesProceduresTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RulesProceduresPropertyTypeXType {
        #[serde(
            default = "RulesProceduresPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type RulesProceduresTimeSliceXElement = RulesProceduresTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RulesProceduresTimeSlicePropertyTypeXType {
        #[serde(
            default = "RulesProceduresTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "RulesProceduresTimeSlice")]
        pub rules_procedures_time_slice: RulesProceduresTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RulesProceduresTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1360")]
        pub content_1360: RulesProceduresTimeSliceContent1360XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RulesProceduresTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for RulesProceduresTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RulesProceduresTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for RulesProceduresTimeSliceTypeXType {}
    pub type RulesProceduresTimeSliceTypeExtensionXElement =
        RulesProceduresTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RulesProceduresTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "RulesProceduresTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractRulesProceduresExtension")]
        pub abstract_rules_procedures_extension: AbstractRulesProceduresExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RulesProceduresTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<RulesProceduresTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for RulesProceduresTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for RulesProceduresTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RulesProceduresTypeXType {}
    impl AbstractAixmFeatureXElementTrait for RulesProceduresTypeXType {}
    pub type RunwayXElement = RunwayTypeXType;
    pub type RunwayBlastPadXElement = RunwayBlastPadTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayBlastPadPropertyTypeXType {
        #[serde(
            default = "RunwayBlastPadPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type RunwayBlastPadTimeSliceXElement = RunwayBlastPadTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayBlastPadTimeSlicePropertyTypeXType {
        #[serde(
            default = "RunwayBlastPadTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "RunwayBlastPadTimeSlice")]
        pub runway_blast_pad_time_slice: RunwayBlastPadTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayBlastPadTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content426")]
        pub content_426: RunwayBlastPadTimeSliceContent426XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RunwayBlastPadTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for RunwayBlastPadTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayBlastPadTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for RunwayBlastPadTimeSliceTypeXType {}
    pub type RunwayBlastPadTimeSliceTypeExtensionXElement =
        RunwayBlastPadTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayBlastPadTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "RunwayBlastPadTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractRunwayBlastPadExtension")]
        pub abstract_runway_blast_pad_extension: AbstractRunwayBlastPadExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayBlastPadTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<RunwayBlastPadTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for RunwayBlastPadTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for RunwayBlastPadTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayBlastPadTypeXType {}
    impl AbstractAixmFeatureXElementTrait for RunwayBlastPadTypeXType {}
    pub type RunwayCentrelinePointXElement = RunwayCentrelinePointTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayCentrelinePointPropertyTypeXType {
        #[serde(
            default = "RunwayCentrelinePointPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type RunwayCentrelinePointTimeSliceXElement = RunwayCentrelinePointTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayCentrelinePointTimeSlicePropertyTypeXType {
        #[serde(
            default = "RunwayCentrelinePointTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "RunwayCentrelinePointTimeSlice")]
        pub runway_centreline_point_time_slice: RunwayCentrelinePointTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayCentrelinePointTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content433")]
        pub content_433: RunwayCentrelinePointTimeSliceContent433XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RunwayCentrelinePointTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for RunwayCentrelinePointTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayCentrelinePointTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for RunwayCentrelinePointTimeSliceTypeXType {}
    pub type RunwayCentrelinePointTimeSliceTypeExtensionXElement =
        RunwayCentrelinePointTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayCentrelinePointTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "RunwayCentrelinePointTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractRunwayCentrelinePointExtension")]
        pub abstract_runway_centreline_point_extension:
            AbstractRunwayCentrelinePointExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayCentrelinePointTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<RunwayCentrelinePointTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for RunwayCentrelinePointTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for RunwayCentrelinePointTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayCentrelinePointTypeXType {}
    impl AbstractAixmFeatureXElementTrait for RunwayCentrelinePointTypeXType {}
    pub type RunwayContaminationXElement = RunwayContaminationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayContaminationPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "RunwayContamination")]
        pub runway_contamination: RunwayContaminationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayContaminationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content538")]
        pub content_538: RunwayContaminationContent538XType,
        #[serde(rename = "Content539")]
        pub content_539: RunwayContaminationContent539XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RunwayContaminationTypeExtensionXElement>,
    }
    impl AbstractSurfaceContaminationXElementTrait for RunwayContaminationTypeXType {}
    pub type RunwayContaminationTypeExtensionXElement =
        RunwayContaminationTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayContaminationTypeExtensionXElementType {
        #[serde(
            default = "RunwayContaminationTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: RunwayContaminationTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RunwayContaminationTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractSurfaceContaminationExtension")]
        AbstractSurfaceContaminationExtension(AbstractSurfaceContaminationExtensionXElement),
        #[serde(rename = "AbstractRunwayContaminationExtension")]
        AbstractRunwayContaminationExtension(AbstractRunwayContaminationExtensionXElement),
    }
    pub type RunwayDeclaredDistanceXElement = RunwayDeclaredDistanceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDeclaredDistancePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "RunwayDeclaredDistance")]
        pub runway_declared_distance: RunwayDeclaredDistanceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDeclaredDistanceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content437")]
        pub content_437: RunwayDeclaredDistanceContent437XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RunwayDeclaredDistanceTypeExtensionXElement>,
    }
    pub type RunwayDeclaredDistanceTypeExtensionXElement =
        RunwayDeclaredDistanceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDeclaredDistanceTypeExtensionXElementType {
        #[serde(
            default = "RunwayDeclaredDistanceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: RunwayDeclaredDistanceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RunwayDeclaredDistanceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractRunwayDeclaredDistanceExtension")]
        AbstractRunwayDeclaredDistanceExtension(AbstractRunwayDeclaredDistanceExtensionXElement),
    }
    pub type RunwayDeclaredDistanceValueXElement = RunwayDeclaredDistanceValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDeclaredDistanceValuePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "RunwayDeclaredDistanceValue")]
        pub runway_declared_distance_value: RunwayDeclaredDistanceValueXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDeclaredDistanceValueTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content442")]
        pub content_442: RunwayDeclaredDistanceValueContent442XType,
        #[serde(rename = "Content443")]
        pub content_443: RunwayDeclaredDistanceValueContent443XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RunwayDeclaredDistanceValueTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for RunwayDeclaredDistanceValueTypeXType {}
    pub type RunwayDeclaredDistanceValueTypeExtensionXElement =
        RunwayDeclaredDistanceValueTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDeclaredDistanceValueTypeExtensionXElementType {
        #[serde(
            default = "RunwayDeclaredDistanceValueTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: RunwayDeclaredDistanceValueTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RunwayDeclaredDistanceValueTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractRunwayDeclaredDistanceValueExtension")]
        AbstractRunwayDeclaredDistanceValueExtension(
            AbstractRunwayDeclaredDistanceValueExtensionXElement,
        ),
    }
    pub type RunwayDirectionXElement = RunwayDirectionTypeXType;
    pub type RunwayDirectionLightSystemXElement = RunwayDirectionLightSystemTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDirectionLightSystemPropertyTypeXType {
        #[serde(
            default = "RunwayDirectionLightSystemPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type RunwayDirectionLightSystemTimeSliceXElement =
        RunwayDirectionLightSystemTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDirectionLightSystemTimeSlicePropertyTypeXType {
        #[serde(
            default = "RunwayDirectionLightSystemTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "RunwayDirectionLightSystemTimeSlice")]
        pub runway_direction_light_system_time_slice: RunwayDirectionLightSystemTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDirectionLightSystemTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content275")]
        pub content_275: RunwayDirectionLightSystemTimeSliceContent275XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RunwayDirectionLightSystemTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for RunwayDirectionLightSystemTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayDirectionLightSystemTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for RunwayDirectionLightSystemTimeSliceTypeXType {}
    pub type RunwayDirectionLightSystemTimeSliceTypeExtensionXElement =
        RunwayDirectionLightSystemTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDirectionLightSystemTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "RunwayDirectionLightSystemTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: RunwayDirectionLightSystemTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RunwayDirectionLightSystemTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractRunwayDirectionLightSystemExtension")]
        AbstractRunwayDirectionLightSystemExtension(
            AbstractRunwayDirectionLightSystemExtensionXElement,
        ),
        #[serde(rename = "AbstractGroundLightSystemExtension")]
        AbstractGroundLightSystemExtension(AbstractGroundLightSystemExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDirectionLightSystemTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<RunwayDirectionLightSystemTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for RunwayDirectionLightSystemTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for RunwayDirectionLightSystemTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayDirectionLightSystemTypeXType {}
    impl AbstractAixmFeatureXElementTrait for RunwayDirectionLightSystemTypeXType {}
    impl AbstractGroundLightSystemXElementTrait for RunwayDirectionLightSystemTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDirectionPropertyTypeXType {
        #[serde(
            default = "RunwayDirectionPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type RunwayDirectionTimeSliceXElement = RunwayDirectionTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDirectionTimeSlicePropertyTypeXType {
        #[serde(
            default = "RunwayDirectionTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "RunwayDirectionTimeSlice")]
        pub runway_direction_time_slice: RunwayDirectionTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDirectionTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content451")]
        pub content_451: RunwayDirectionTimeSliceContent451XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RunwayDirectionTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for RunwayDirectionTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayDirectionTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for RunwayDirectionTimeSliceTypeXType {}
    pub type RunwayDirectionTimeSliceTypeExtensionXElement =
        RunwayDirectionTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDirectionTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "RunwayDirectionTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractRunwayDirectionExtension")]
        pub abstract_runway_direction_extension: AbstractRunwayDirectionExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDirectionTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<RunwayDirectionTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for RunwayDirectionTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for RunwayDirectionTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayDirectionTypeXType {}
    impl AbstractAixmFeatureXElementTrait for RunwayDirectionTypeXType {}
    pub type RunwayElementXElement = RunwayElementTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayElementPropertyTypeXType {
        #[serde(
            default = "RunwayElementPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type RunwayElementTimeSliceXElement = RunwayElementTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayElementTimeSlicePropertyTypeXType {
        #[serde(
            default = "RunwayElementTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "RunwayElementTimeSlice")]
        pub runway_element_time_slice: RunwayElementTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayElementTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content458")]
        pub content_458: RunwayElementTimeSliceContent458XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RunwayElementTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for RunwayElementTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayElementTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for RunwayElementTimeSliceTypeXType {}
    pub type RunwayElementTimeSliceTypeExtensionXElement =
        RunwayElementTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayElementTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "RunwayElementTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractRunwayElementExtension")]
        pub abstract_runway_element_extension: AbstractRunwayElementExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayElementTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<RunwayElementTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for RunwayElementTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for RunwayElementTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayElementTypeXType {}
    impl AbstractAixmFeatureXElementTrait for RunwayElementTypeXType {}
    pub type RunwayMarkingXElement = RunwayMarkingTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayMarkingPropertyTypeXType {
        #[serde(
            default = "RunwayMarkingPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type RunwayMarkingTimeSliceXElement = RunwayMarkingTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayMarkingTimeSlicePropertyTypeXType {
        #[serde(
            default = "RunwayMarkingTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "RunwayMarkingTimeSlice")]
        pub runway_marking_time_slice: RunwayMarkingTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayMarkingTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content354")]
        pub content_354: RunwayMarkingTimeSliceContent354XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RunwayMarkingTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for RunwayMarkingTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayMarkingTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for RunwayMarkingTimeSliceTypeXType {}
    pub type RunwayMarkingTimeSliceTypeExtensionXElement =
        RunwayMarkingTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayMarkingTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "RunwayMarkingTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: RunwayMarkingTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RunwayMarkingTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractRunwayMarkingExtension")]
        AbstractRunwayMarkingExtension(AbstractRunwayMarkingExtensionXElement),
        #[serde(rename = "AbstractMarkingExtension")]
        AbstractMarkingExtension(AbstractMarkingExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayMarkingTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<RunwayMarkingTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for RunwayMarkingTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for RunwayMarkingTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayMarkingTypeXType {}
    impl AbstractAixmFeatureXElementTrait for RunwayMarkingTypeXType {}
    impl AbstractMarkingXElementTrait for RunwayMarkingTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayPropertyTypeXType {
        #[serde(default = "RunwayPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type RunwayProtectAreaXElement = RunwayProtectAreaTypeXType;
    pub type RunwayProtectAreaLightSystemXElement = RunwayProtectAreaLightSystemTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayProtectAreaLightSystemPropertyTypeXType {
        #[serde(
            default = "RunwayProtectAreaLightSystemPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type RunwayProtectAreaLightSystemTimeSliceXElement =
        RunwayProtectAreaLightSystemTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayProtectAreaLightSystemTimeSlicePropertyTypeXType {
        #[serde(
            default = "RunwayProtectAreaLightSystemTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "RunwayProtectAreaLightSystemTimeSlice")]
        pub runway_protect_area_light_system_time_slice:
            RunwayProtectAreaLightSystemTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayProtectAreaLightSystemTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content283")]
        pub content_283: RunwayProtectAreaLightSystemTimeSliceContent283XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RunwayProtectAreaLightSystemTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for RunwayProtectAreaLightSystemTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayProtectAreaLightSystemTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for RunwayProtectAreaLightSystemTimeSliceTypeXType {}
    pub type RunwayProtectAreaLightSystemTimeSliceTypeExtensionXElement =
        RunwayProtectAreaLightSystemTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayProtectAreaLightSystemTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "RunwayProtectAreaLightSystemTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: RunwayProtectAreaLightSystemTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RunwayProtectAreaLightSystemTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractRunwayProtectAreaLightSystemExtension")]
        AbstractRunwayProtectAreaLightSystemExtension(
            AbstractRunwayProtectAreaLightSystemExtensionXElement,
        ),
        #[serde(rename = "AbstractGroundLightSystemExtension")]
        AbstractGroundLightSystemExtension(AbstractGroundLightSystemExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayProtectAreaLightSystemTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<RunwayProtectAreaLightSystemTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for RunwayProtectAreaLightSystemTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for RunwayProtectAreaLightSystemTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayProtectAreaLightSystemTypeXType {}
    impl AbstractAixmFeatureXElementTrait for RunwayProtectAreaLightSystemTypeXType {}
    impl AbstractGroundLightSystemXElementTrait for RunwayProtectAreaLightSystemTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayProtectAreaPropertyTypeXType {
        #[serde(
            default = "RunwayProtectAreaPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type RunwayProtectAreaTimeSliceXElement = RunwayProtectAreaTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayProtectAreaTimeSlicePropertyTypeXType {
        #[serde(
            default = "RunwayProtectAreaTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "RunwayProtectAreaTimeSlice")]
        pub runway_protect_area_time_slice: RunwayProtectAreaTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayProtectAreaTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content465")]
        pub content_465: RunwayProtectAreaTimeSliceContent465XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RunwayProtectAreaTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for RunwayProtectAreaTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayProtectAreaTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for RunwayProtectAreaTimeSliceTypeXType {}
    pub type RunwayProtectAreaTimeSliceTypeExtensionXElement =
        RunwayProtectAreaTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayProtectAreaTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "RunwayProtectAreaTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: RunwayProtectAreaTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RunwayProtectAreaTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractRunwayProtectAreaExtension")]
        AbstractRunwayProtectAreaExtension(AbstractRunwayProtectAreaExtensionXElement),
        #[serde(rename = "AbstractAirportHeliportProtectionAreaExtension")]
        AbstractAirportHeliportProtectionAreaExtension(
            AbstractAirportHeliportProtectionAreaExtensionXElement,
        ),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayProtectAreaTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<RunwayProtectAreaTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for RunwayProtectAreaTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for RunwayProtectAreaTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayProtectAreaTypeXType {}
    impl AbstractAixmFeatureXElementTrait for RunwayProtectAreaTypeXType {}
    impl AbstractAirportHeliportProtectionAreaXElementTrait for RunwayProtectAreaTypeXType {}
    pub type RunwaySectionContaminationXElement = RunwaySectionContaminationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwaySectionContaminationPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "RunwaySectionContamination")]
        pub runway_section_contamination: RunwaySectionContaminationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwaySectionContaminationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content544")]
        pub content_544: RunwaySectionContaminationContent544XType,
        #[serde(rename = "Content545")]
        pub content_545: RunwaySectionContaminationContent545XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RunwaySectionContaminationTypeExtensionXElement>,
    }
    impl AbstractSurfaceContaminationXElementTrait for RunwaySectionContaminationTypeXType {}
    pub type RunwaySectionContaminationTypeExtensionXElement =
        RunwaySectionContaminationTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwaySectionContaminationTypeExtensionXElementType {
        #[serde(
            default = "RunwaySectionContaminationTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: RunwaySectionContaminationTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RunwaySectionContaminationTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractSurfaceContaminationExtension")]
        AbstractSurfaceContaminationExtension(AbstractSurfaceContaminationExtensionXElement),
        #[serde(rename = "AbstractRunwaySectionContaminationExtension")]
        AbstractRunwaySectionContaminationExtension(
            AbstractRunwaySectionContaminationExtensionXElement,
        ),
    }
    pub type RunwayTimeSliceXElement = RunwayTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayTimeSlicePropertyTypeXType {
        #[serde(
            default = "RunwayTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "RunwayTimeSlice")]
        pub runway_time_slice: RunwayTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content419")]
        pub content_419: RunwayTimeSliceContent419XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RunwayTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for RunwayTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for RunwayTimeSliceTypeXType {}
    pub type RunwayTimeSliceTypeExtensionXElement = RunwayTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "RunwayTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractRunwayExtension")]
        pub abstract_runway_extension: AbstractRunwayExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<RunwayTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for RunwayTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for RunwayTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayTypeXType {}
    impl AbstractAixmFeatureXElementTrait for RunwayTypeXType {}
    pub type RunwayVisualRangeXElement = RunwayVisualRangeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayVisualRangePropertyTypeXType {
        #[serde(
            default = "RunwayVisualRangePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type RunwayVisualRangeTimeSliceXElement = RunwayVisualRangeTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayVisualRangeTimeSlicePropertyTypeXType {
        #[serde(
            default = "RunwayVisualRangeTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "RunwayVisualRangeTimeSlice")]
        pub runway_visual_range_time_slice: RunwayVisualRangeTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayVisualRangeTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content473")]
        pub content_473: RunwayVisualRangeTimeSliceContent473XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<RunwayVisualRangeTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for RunwayVisualRangeTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayVisualRangeTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for RunwayVisualRangeTimeSliceTypeXType {}
    pub type RunwayVisualRangeTimeSliceTypeExtensionXElement =
        RunwayVisualRangeTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayVisualRangeTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "RunwayVisualRangeTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractRunwayVisualRangeExtension")]
        pub abstract_runway_visual_range_extension: AbstractRunwayVisualRangeExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayVisualRangeTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<RunwayVisualRangeTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for RunwayVisualRangeTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for RunwayVisualRangeTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for RunwayVisualRangeTypeXType {}
    impl AbstractAixmFeatureXElementTrait for RunwayVisualRangeTypeXType {}
    pub type SdfXElement = SdfTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SdfPropertyTypeXType {
        #[serde(default = "SdfPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type SdfTimeSliceXElement = SdfTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SdfTimeSlicePropertyTypeXType {
        #[serde(
            default = "SdfTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "SDFTimeSlice")]
        pub sdf_time_slice: SdfTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SdfTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content831")]
        pub content_831: SdfTimeSliceContent831XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<SdfTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for SdfTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SdfTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for SdfTimeSliceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SdfTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<SdfTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for SdfTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for SdfTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SdfTypeXType {}
    impl AbstractAixmFeatureXElementTrait for SdfTypeXType {}
    impl AbstractNavaidEquipmentXElementTrait for SdfTypeXType {}
    pub type SafeAltitudeAreaXElement = SafeAltitudeAreaTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SafeAltitudeAreaPropertyTypeXType {
        #[serde(
            default = "SafeAltitudeAreaPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type SafeAltitudeAreaSectorXElement = SafeAltitudeAreaSectorTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SafeAltitudeAreaSectorPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "SafeAltitudeAreaSector")]
        pub safe_altitude_area_sector: SafeAltitudeAreaSectorXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SafeAltitudeAreaSectorTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1139")]
        pub content_1139: SafeAltitudeAreaSectorContent1139XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<SafeAltitudeAreaSectorTypeExtensionXElement>,
    }
    pub type SafeAltitudeAreaSectorTypeExtensionXElement =
        SafeAltitudeAreaSectorTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SafeAltitudeAreaSectorTypeExtensionXElementType {
        #[serde(
            default = "SafeAltitudeAreaSectorTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: SafeAltitudeAreaSectorTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum SafeAltitudeAreaSectorTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractSafeAltitudeAreaSectorExtension")]
        AbstractSafeAltitudeAreaSectorExtension(AbstractSafeAltitudeAreaSectorExtensionXElement),
    }
    pub type SafeAltitudeAreaTimeSliceXElement = SafeAltitudeAreaTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SafeAltitudeAreaTimeSlicePropertyTypeXType {
        #[serde(
            default = "SafeAltitudeAreaTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "SafeAltitudeAreaTimeSlice")]
        pub safe_altitude_area_time_slice: SafeAltitudeAreaTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SafeAltitudeAreaTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1134")]
        pub content_1134: SafeAltitudeAreaTimeSliceContent1134XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<SafeAltitudeAreaTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for SafeAltitudeAreaTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SafeAltitudeAreaTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for SafeAltitudeAreaTimeSliceTypeXType {}
    pub type SafeAltitudeAreaTimeSliceTypeExtensionXElement =
        SafeAltitudeAreaTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SafeAltitudeAreaTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "SafeAltitudeAreaTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractSafeAltitudeAreaExtension")]
        pub abstract_safe_altitude_area_extension: AbstractSafeAltitudeAreaExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SafeAltitudeAreaTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<SafeAltitudeAreaTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for SafeAltitudeAreaTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for SafeAltitudeAreaTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SafeAltitudeAreaTypeXType {}
    impl AbstractAixmFeatureXElementTrait for SafeAltitudeAreaTypeXType {}
    pub type SdfTimeSliceTypeExtensionXElement = SdfTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SdfTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "SdfTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: SdfTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum SdfTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractSDFExtension")]
        AbstractSdfExtension(AbstractSdfExtensionXElement),
        #[serde(rename = "AbstractNavaidEquipmentExtension")]
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtensionXElement),
    }
    pub type SeaplaneLandingAreaXElement = SeaplaneLandingAreaTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SeaplaneLandingAreaPropertyTypeXType {
        #[serde(
            default = "SeaplaneLandingAreaPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type SeaplaneLandingAreaTimeSliceXElement = SeaplaneLandingAreaTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SeaplaneLandingAreaTimeSlicePropertyTypeXType {
        #[serde(
            default = "SeaplaneLandingAreaTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "SeaplaneLandingAreaTimeSlice")]
        pub seaplane_landing_area_time_slice: SeaplaneLandingAreaTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SeaplaneLandingAreaTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content502")]
        pub content_502: SeaplaneLandingAreaTimeSliceContent502XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<SeaplaneLandingAreaTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for SeaplaneLandingAreaTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SeaplaneLandingAreaTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for SeaplaneLandingAreaTimeSliceTypeXType {}
    pub type SeaplaneLandingAreaTimeSliceTypeExtensionXElement =
        SeaplaneLandingAreaTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SeaplaneLandingAreaTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "SeaplaneLandingAreaTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractSeaplaneLandingAreaExtension")]
        pub abstract_seaplane_landing_area_extension: AbstractSeaplaneLandingAreaExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SeaplaneLandingAreaTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<SeaplaneLandingAreaTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for SeaplaneLandingAreaTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for SeaplaneLandingAreaTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SeaplaneLandingAreaTypeXType {}
    impl AbstractAixmFeatureXElementTrait for SeaplaneLandingAreaTypeXType {}
    pub type SeaplaneRampSiteXElement = SeaplaneRampSiteTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SeaplaneRampSitePropertyTypeXType {
        #[serde(
            default = "SeaplaneRampSitePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type SeaplaneRampSiteTimeSliceXElement = SeaplaneRampSiteTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SeaplaneRampSiteTimeSlicePropertyTypeXType {
        #[serde(
            default = "SeaplaneRampSiteTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "SeaplaneRampSiteTimeSlice")]
        pub seaplane_ramp_site_time_slice: SeaplaneRampSiteTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SeaplaneRampSiteTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content509")]
        pub content_509: SeaplaneRampSiteTimeSliceContent509XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<SeaplaneRampSiteTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for SeaplaneRampSiteTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SeaplaneRampSiteTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for SeaplaneRampSiteTimeSliceTypeXType {}
    pub type SeaplaneRampSiteTimeSliceTypeExtensionXElement =
        SeaplaneRampSiteTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SeaplaneRampSiteTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "SeaplaneRampSiteTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractSeaplaneRampSiteExtension")]
        pub abstract_seaplane_ramp_site_extension: AbstractSeaplaneRampSiteExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SeaplaneRampSiteTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<SeaplaneRampSiteTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for SeaplaneRampSiteTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for SeaplaneRampSiteTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SeaplaneRampSiteTypeXType {}
    impl AbstractAixmFeatureXElementTrait for SeaplaneRampSiteTypeXType {}
    pub type SearchRescueServiceXElement = SearchRescueServiceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SearchRescueServicePropertyTypeXType {
        #[serde(
            default = "SearchRescueServicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type SearchRescueServiceTimeSliceXElement = SearchRescueServiceTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SearchRescueServiceTimeSlicePropertyTypeXType {
        #[serde(
            default = "SearchRescueServiceTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "SearchRescueServiceTimeSlice")]
        pub search_rescue_service_time_slice: SearchRescueServiceTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SearchRescueServiceTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1494")]
        pub content_1494: SearchRescueServiceTimeSliceContent1494XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<SearchRescueServiceTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for SearchRescueServiceTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SearchRescueServiceTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for SearchRescueServiceTimeSliceTypeXType {}
    pub type SearchRescueServiceTimeSliceTypeExtensionXElement =
        SearchRescueServiceTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SearchRescueServiceTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "SearchRescueServiceTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: SearchRescueServiceTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum SearchRescueServiceTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractSearchRescueServiceExtension")]
        AbstractSearchRescueServiceExtension(AbstractSearchRescueServiceExtensionXElement),
        #[serde(rename = "AbstractServiceExtension")]
        AbstractServiceExtension(AbstractServiceExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SearchRescueServiceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<SearchRescueServiceTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for SearchRescueServiceTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for SearchRescueServiceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SearchRescueServiceTypeXType {}
    impl AbstractAixmFeatureXElementTrait for SearchRescueServiceTypeXType {}
    impl AbstractServiceXElementTrait for SearchRescueServiceTypeXType {}
    pub type SecondarySurveillanceRadarXElement = SecondarySurveillanceRadarTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SecondarySurveillanceRadarPropertyTypeXType {
        #[serde(
            default = "SecondarySurveillanceRadarPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type SecondarySurveillanceRadarTimeSliceXElement =
        SecondarySurveillanceRadarTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SecondarySurveillanceRadarTimeSlicePropertyTypeXType {
        #[serde(
            default = "SecondarySurveillanceRadarTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "SecondarySurveillanceRadarTimeSlice")]
        pub secondary_surveillance_radar_time_slice: SecondarySurveillanceRadarTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SecondarySurveillanceRadarTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1677")]
        pub content_1677: SecondarySurveillanceRadarTimeSliceContent1677XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<SecondarySurveillanceRadarTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for SecondarySurveillanceRadarTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SecondarySurveillanceRadarTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for SecondarySurveillanceRadarTimeSliceTypeXType {}
    pub type SecondarySurveillanceRadarTimeSliceTypeExtensionXElement =
        SecondarySurveillanceRadarTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SecondarySurveillanceRadarTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "SecondarySurveillanceRadarTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: SecondarySurveillanceRadarTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum SecondarySurveillanceRadarTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractSecondarySurveillanceRadarExtension")]
        AbstractSecondarySurveillanceRadarExtension(
            AbstractSecondarySurveillanceRadarExtensionXElement,
        ),
        #[serde(rename = "AbstractSurveillanceRadarExtension")]
        AbstractSurveillanceRadarExtension(AbstractSurveillanceRadarExtensionXElement),
        #[serde(rename = "AbstractRadarEquipmentExtension")]
        AbstractRadarEquipmentExtension(AbstractRadarEquipmentExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SecondarySurveillanceRadarTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<SecondarySurveillanceRadarTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for SecondarySurveillanceRadarTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for SecondarySurveillanceRadarTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SecondarySurveillanceRadarTypeXType {}
    impl AbstractAixmFeatureXElementTrait for SecondarySurveillanceRadarTypeXType {}
    impl AbstractRadarEquipmentXElementTrait for SecondarySurveillanceRadarTypeXType {}
    impl AbstractSurveillanceRadarXElementTrait for SecondarySurveillanceRadarTypeXType {}
    pub type SectorDesignXElement = SectorDesignTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SectorDesignPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "SectorDesign")]
        pub sector_design: SectorDesignXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SectorDesignTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1117")]
        pub content_1117: SectorDesignContent1117XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<SectorDesignTypeExtensionXElement>,
    }
    pub type SectorDesignTypeExtensionXElement = SectorDesignTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SectorDesignTypeExtensionXElementType {
        #[serde(
            default = "SectorDesignTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: SectorDesignTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum SectorDesignTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractSectorDesignExtension")]
        AbstractSectorDesignExtension(AbstractSectorDesignExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SegmentLegPropertyTypeXType {
        #[serde(
            default = "SegmentLegPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SegmentPointPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AbstractSegmentPoint")]
        pub abstract_segment_point: AbstractSegmentPointXElement,
    }
    pub type ServiceOperationalStatusXElement = ServiceOperationalStatusTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ServiceOperationalStatusPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "ServiceOperationalStatus")]
        pub service_operational_status: ServiceOperationalStatusXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ServiceOperationalStatusTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1499")]
        pub content_1499: ServiceOperationalStatusContent1499XType,
        #[serde(rename = "Content1500")]
        pub content_1500: ServiceOperationalStatusContent1500XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<ServiceOperationalStatusTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for ServiceOperationalStatusTypeXType {}
    pub type ServiceOperationalStatusTypeExtensionXElement =
        ServiceOperationalStatusTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ServiceOperationalStatusTypeExtensionXElementType {
        #[serde(
            default = "ServiceOperationalStatusTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: ServiceOperationalStatusTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ServiceOperationalStatusTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractServiceOperationalStatusExtension")]
        AbstractServiceOperationalStatusExtension(
            AbstractServiceOperationalStatusExtensionXElement,
        ),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ServicePropertyTypeXType {
        #[serde(default = "ServicePropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type SignificantPointInAirspaceXElement = SignificantPointInAirspaceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SignificantPointInAirspacePropertyTypeXType {
        #[serde(
            default = "SignificantPointInAirspacePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type SignificantPointInAirspaceTimeSliceXElement =
        SignificantPointInAirspaceTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SignificantPointInAirspaceTimeSlicePropertyTypeXType {
        #[serde(
            default = "SignificantPointInAirspaceTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "SignificantPointInAirspaceTimeSlice")]
        pub significant_point_in_airspace_time_slice: SignificantPointInAirspaceTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SignificantPointInAirspaceTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content923")]
        pub content_923: SignificantPointInAirspaceTimeSliceContent923XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<SignificantPointInAirspaceTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for SignificantPointInAirspaceTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SignificantPointInAirspaceTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for SignificantPointInAirspaceTimeSliceTypeXType {}
    pub type SignificantPointInAirspaceTimeSliceTypeExtensionXElement =
        SignificantPointInAirspaceTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SignificantPointInAirspaceTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "SignificantPointInAirspaceTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractSignificantPointInAirspaceExtension")]
        pub abstract_significant_point_in_airspace_extension:
            AbstractSignificantPointInAirspaceExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SignificantPointInAirspaceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<SignificantPointInAirspaceTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for SignificantPointInAirspaceTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for SignificantPointInAirspaceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SignificantPointInAirspaceTypeXType {}
    impl AbstractAixmFeatureXElementTrait for SignificantPointInAirspaceTypeXType {}
    pub type SpecialDateXElement = SpecialDateTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialDatePropertyTypeXType {
        #[serde(
            default = "SpecialDatePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type SpecialDateTimeSliceXElement = SpecialDateTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialDateTimeSlicePropertyTypeXType {
        #[serde(
            default = "SpecialDateTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "SpecialDateTimeSlice")]
        pub special_date_time_slice: SpecialDateTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialDateTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1576")]
        pub content_1576: SpecialDateTimeSliceContent1576XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<SpecialDateTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for SpecialDateTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SpecialDateTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for SpecialDateTimeSliceTypeXType {}
    pub type SpecialDateTimeSliceTypeExtensionXElement =
        SpecialDateTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialDateTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "SpecialDateTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractSpecialDateExtension")]
        pub abstract_special_date_extension: AbstractSpecialDateExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialDateTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<SpecialDateTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for SpecialDateTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for SpecialDateTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SpecialDateTypeXType {}
    impl AbstractAixmFeatureXElementTrait for SpecialDateTypeXType {}
    pub type SpecialNavigationStationXElement = SpecialNavigationStationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialNavigationStationPropertyTypeXType {
        #[serde(
            default = "SpecialNavigationStationPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type SpecialNavigationStationStatusXElement = SpecialNavigationStationStatusTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialNavigationStationStatusPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "SpecialNavigationStationStatus")]
        pub special_navigation_station_status: SpecialNavigationStationStatusXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialNavigationStationStatusTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content843")]
        pub content_843: SpecialNavigationStationStatusContent843XType,
        #[serde(rename = "Content844")]
        pub content_844: SpecialNavigationStationStatusContent844XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<SpecialNavigationStationStatusTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for SpecialNavigationStationStatusTypeXType {}
    pub type SpecialNavigationStationStatusTypeExtensionXElement =
        SpecialNavigationStationStatusTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialNavigationStationStatusTypeExtensionXElementType {
        #[serde(
            default = "SpecialNavigationStationStatusTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: SpecialNavigationStationStatusTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum SpecialNavigationStationStatusTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractSpecialNavigationStationStatusExtension")]
        AbstractSpecialNavigationStationStatusExtension(
            AbstractSpecialNavigationStationStatusExtensionXElement,
        ),
    }
    pub type SpecialNavigationStationTimeSliceXElement = SpecialNavigationStationTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialNavigationStationTimeSlicePropertyTypeXType {
        #[serde(
            default = "SpecialNavigationStationTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "SpecialNavigationStationTimeSlice")]
        pub special_navigation_station_time_slice: SpecialNavigationStationTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialNavigationStationTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content839")]
        pub content_839: SpecialNavigationStationTimeSliceContent839XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<SpecialNavigationStationTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for SpecialNavigationStationTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SpecialNavigationStationTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for SpecialNavigationStationTimeSliceTypeXType {}
    pub type SpecialNavigationStationTimeSliceTypeExtensionXElement =
        SpecialNavigationStationTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialNavigationStationTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "SpecialNavigationStationTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractSpecialNavigationStationExtension")]
        pub abstract_special_navigation_station_extension:
            AbstractSpecialNavigationStationExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialNavigationStationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<SpecialNavigationStationTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for SpecialNavigationStationTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for SpecialNavigationStationTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SpecialNavigationStationTypeXType {}
    impl AbstractAixmFeatureXElementTrait for SpecialNavigationStationTypeXType {}
    pub type SpecialNavigationSystemXElement = SpecialNavigationSystemTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialNavigationSystemPropertyTypeXType {
        #[serde(
            default = "SpecialNavigationSystemPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type SpecialNavigationSystemTimeSliceXElement = SpecialNavigationSystemTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialNavigationSystemTimeSlicePropertyTypeXType {
        #[serde(
            default = "SpecialNavigationSystemTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "SpecialNavigationSystemTimeSlice")]
        pub special_navigation_system_time_slice: SpecialNavigationSystemTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialNavigationSystemTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content852")]
        pub content_852: SpecialNavigationSystemTimeSliceContent852XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<SpecialNavigationSystemTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for SpecialNavigationSystemTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SpecialNavigationSystemTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for SpecialNavigationSystemTimeSliceTypeXType {}
    pub type SpecialNavigationSystemTimeSliceTypeExtensionXElement =
        SpecialNavigationSystemTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialNavigationSystemTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "SpecialNavigationSystemTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractSpecialNavigationSystemExtension")]
        pub abstract_special_navigation_system_extension:
            AbstractSpecialNavigationSystemExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialNavigationSystemTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<SpecialNavigationSystemTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for SpecialNavigationSystemTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for SpecialNavigationSystemTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SpecialNavigationSystemTypeXType {}
    impl AbstractAixmFeatureXElementTrait for SpecialNavigationSystemTypeXType {}
    pub type StandMarkingXElement = StandMarkingTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandMarkingPropertyTypeXType {
        #[serde(
            default = "StandMarkingPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type StandMarkingTimeSliceXElement = StandMarkingTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandMarkingTimeSlicePropertyTypeXType {
        #[serde(
            default = "StandMarkingTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "StandMarkingTimeSlice")]
        pub stand_marking_time_slice: StandMarkingTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandMarkingTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content362")]
        pub content_362: StandMarkingTimeSliceContent362XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<StandMarkingTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for StandMarkingTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for StandMarkingTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for StandMarkingTimeSliceTypeXType {}
    pub type StandMarkingTimeSliceTypeExtensionXElement =
        StandMarkingTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandMarkingTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "StandMarkingTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: StandMarkingTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum StandMarkingTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractStandMarkingExtension")]
        AbstractStandMarkingExtension(AbstractStandMarkingExtensionXElement),
        #[serde(rename = "AbstractMarkingExtension")]
        AbstractMarkingExtension(AbstractMarkingExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandMarkingTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<StandMarkingTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for StandMarkingTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for StandMarkingTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for StandMarkingTypeXType {}
    impl AbstractAixmFeatureXElementTrait for StandMarkingTypeXType {}
    impl AbstractMarkingXElementTrait for StandMarkingTypeXType {}
    pub type StandardInstrumentArrivalXElement = StandardInstrumentArrivalTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardInstrumentArrivalPropertyTypeXType {
        #[serde(
            default = "StandardInstrumentArrivalPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type StandardInstrumentArrivalTimeSliceXElement =
        StandardInstrumentArrivalTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardInstrumentArrivalTimeSlicePropertyTypeXType {
        #[serde(
            default = "StandardInstrumentArrivalTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "StandardInstrumentArrivalTimeSlice")]
        pub standard_instrument_arrival_time_slice: StandardInstrumentArrivalTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardInstrumentArrivalTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1093")]
        pub content_1093: StandardInstrumentArrivalTimeSliceContent1093XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<StandardInstrumentArrivalTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for StandardInstrumentArrivalTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for StandardInstrumentArrivalTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for StandardInstrumentArrivalTimeSliceTypeXType {}
    pub type StandardInstrumentArrivalTimeSliceTypeExtensionXElement =
        StandardInstrumentArrivalTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardInstrumentArrivalTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "StandardInstrumentArrivalTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: StandardInstrumentArrivalTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum StandardInstrumentArrivalTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractStandardInstrumentArrivalExtension")]
        AbstractStandardInstrumentArrivalExtension(
            AbstractStandardInstrumentArrivalExtensionXElement,
        ),
        #[serde(rename = "AbstractProcedureExtension")]
        AbstractProcedureExtension(AbstractProcedureExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardInstrumentArrivalTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<StandardInstrumentArrivalTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for StandardInstrumentArrivalTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for StandardInstrumentArrivalTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for StandardInstrumentArrivalTypeXType {}
    impl AbstractAixmFeatureXElementTrait for StandardInstrumentArrivalTypeXType {}
    impl AbstractProcedureXElementTrait for StandardInstrumentArrivalTypeXType {}
    pub type StandardInstrumentDepartureXElement = StandardInstrumentDepartureTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardInstrumentDeparturePropertyTypeXType {
        #[serde(
            default = "StandardInstrumentDeparturePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type StandardInstrumentDepartureTimeSliceXElement =
        StandardInstrumentDepartureTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardInstrumentDepartureTimeSlicePropertyTypeXType {
        #[serde(
            default = "StandardInstrumentDepartureTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "StandardInstrumentDepartureTimeSlice")]
        pub standard_instrument_departure_time_slice: StandardInstrumentDepartureTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardInstrumentDepartureTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1125")]
        pub content_1125: StandardInstrumentDepartureTimeSliceContent1125XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<StandardInstrumentDepartureTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for StandardInstrumentDepartureTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for StandardInstrumentDepartureTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for StandardInstrumentDepartureTimeSliceTypeXType {}
    pub type StandardInstrumentDepartureTimeSliceTypeExtensionXElement =
        StandardInstrumentDepartureTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardInstrumentDepartureTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "StandardInstrumentDepartureTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: StandardInstrumentDepartureTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum StandardInstrumentDepartureTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractStandardInstrumentDepartureExtension")]
        AbstractStandardInstrumentDepartureExtension(
            AbstractStandardInstrumentDepartureExtensionXElement,
        ),
        #[serde(rename = "AbstractProcedureExtension")]
        AbstractProcedureExtension(AbstractProcedureExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardInstrumentDepartureTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<StandardInstrumentDepartureTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for StandardInstrumentDepartureTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for StandardInstrumentDepartureTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for StandardInstrumentDepartureTypeXType {}
    impl AbstractAixmFeatureXElementTrait for StandardInstrumentDepartureTypeXType {}
    impl AbstractProcedureXElementTrait for StandardInstrumentDepartureTypeXType {}
    pub type StandardLevelXElement = StandardLevelTypeXType;
    pub type StandardLevelColumnXElement = StandardLevelColumnTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelColumnPropertyTypeXType {
        #[serde(
            default = "StandardLevelColumnPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type StandardLevelColumnTimeSliceXElement = StandardLevelColumnTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelColumnTimeSlicePropertyTypeXType {
        #[serde(
            default = "StandardLevelColumnTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "StandardLevelColumnTimeSlice")]
        pub standard_level_column_time_slice: StandardLevelColumnTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelColumnTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1593")]
        pub content_1593: StandardLevelColumnTimeSliceContent1593XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<StandardLevelColumnTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for StandardLevelColumnTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for StandardLevelColumnTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for StandardLevelColumnTimeSliceTypeXType {}
    pub type StandardLevelColumnTimeSliceTypeExtensionXElement =
        StandardLevelColumnTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelColumnTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "StandardLevelColumnTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractStandardLevelColumnExtension")]
        pub abstract_standard_level_column_extension: AbstractStandardLevelColumnExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelColumnTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<StandardLevelColumnTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for StandardLevelColumnTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for StandardLevelColumnTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for StandardLevelColumnTypeXType {}
    impl AbstractAixmFeatureXElementTrait for StandardLevelColumnTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "StandardLevel")]
        pub standard_level: StandardLevelXElement,
    }
    pub type StandardLevelSectorXElement = StandardLevelSectorTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelSectorPropertyTypeXType {
        #[serde(
            default = "StandardLevelSectorPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type StandardLevelSectorTimeSliceXElement = StandardLevelSectorTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelSectorTimeSlicePropertyTypeXType {
        #[serde(
            default = "StandardLevelSectorTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "StandardLevelSectorTimeSlice")]
        pub standard_level_sector_time_slice: StandardLevelSectorTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelSectorTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1600")]
        pub content_1600: StandardLevelSectorTimeSliceContent1600XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<StandardLevelSectorTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for StandardLevelSectorTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for StandardLevelSectorTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for StandardLevelSectorTimeSliceTypeXType {}
    pub type StandardLevelSectorTimeSliceTypeExtensionXElement =
        StandardLevelSectorTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelSectorTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "StandardLevelSectorTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractStandardLevelSectorExtension")]
        pub abstract_standard_level_sector_extension: AbstractStandardLevelSectorExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelSectorTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<StandardLevelSectorTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for StandardLevelSectorTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for StandardLevelSectorTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for StandardLevelSectorTypeXType {}
    impl AbstractAixmFeatureXElementTrait for StandardLevelSectorTypeXType {}
    pub type StandardLevelTableXElement = StandardLevelTableTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelTablePropertyTypeXType {
        #[serde(
            default = "StandardLevelTablePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type StandardLevelTableTimeSliceXElement = StandardLevelTableTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelTableTimeSlicePropertyTypeXType {
        #[serde(
            default = "StandardLevelTableTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "StandardLevelTableTimeSlice")]
        pub standard_level_table_time_slice: StandardLevelTableTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelTableTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1607")]
        pub content_1607: StandardLevelTableTimeSliceContent1607XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<StandardLevelTableTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for StandardLevelTableTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for StandardLevelTableTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for StandardLevelTableTimeSliceTypeXType {}
    pub type StandardLevelTableTimeSliceTypeExtensionXElement =
        StandardLevelTableTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelTableTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "StandardLevelTableTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractStandardLevelTableExtension")]
        pub abstract_standard_level_table_extension: AbstractStandardLevelTableExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelTableTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<StandardLevelTableTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for StandardLevelTableTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for StandardLevelTableTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for StandardLevelTableTypeXType {}
    impl AbstractAixmFeatureXElementTrait for StandardLevelTableTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1585")]
        pub content_1585: StandardLevelContent1585XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<StandardLevelTypeExtensionXElement>,
    }
    pub type StandardLevelTypeExtensionXElement = StandardLevelTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelTypeExtensionXElementType {
        #[serde(
            default = "StandardLevelTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: StandardLevelTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum StandardLevelTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractStandardLevelExtension")]
        AbstractStandardLevelExtension(AbstractStandardLevelExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfaceXElement(pub Box<dyn SurfaceXElementTrait>);
    pub trait SurfaceXElementTrait: super::gml::SurfaceXElementTrait {}
    pub type SurfaceCharacteristicsXElement = SurfaceCharacteristicsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfaceCharacteristicsPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "SurfaceCharacteristics")]
        pub surface_characteristics: SurfaceCharacteristicsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfaceCharacteristicsTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content141")]
        pub content_141: SurfaceCharacteristicsContent141XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<SurfaceCharacteristicsTypeExtensionXElement>,
    }
    pub type SurfaceCharacteristicsTypeExtensionXElement =
        SurfaceCharacteristicsTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfaceCharacteristicsTypeExtensionXElementType {
        #[serde(
            default = "SurfaceCharacteristicsTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: SurfaceCharacteristicsTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum SurfaceCharacteristicsTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractSurfaceCharacteristicsExtension")]
        AbstractSurfaceCharacteristicsExtension(AbstractSurfaceCharacteristicsExtensionXElement),
    }
    pub type SurfaceContaminationLayerXElement = SurfaceContaminationLayerTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfaceContaminationLayerPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "SurfaceContaminationLayer")]
        pub surface_contamination_layer: SurfaceContaminationLayerXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfaceContaminationLayerTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content551")]
        pub content_551: SurfaceContaminationLayerContent551XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<SurfaceContaminationLayerTypeExtensionXElement>,
    }
    pub type SurfaceContaminationLayerTypeExtensionXElement =
        SurfaceContaminationLayerTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfaceContaminationLayerTypeExtensionXElementType {
        #[serde(
            default = "SurfaceContaminationLayerTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: SurfaceContaminationLayerTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum SurfaceContaminationLayerTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractSurfaceContaminationLayerExtension")]
        AbstractSurfaceContaminationLayerExtension(
            AbstractSurfaceContaminationLayerExtensionXElement,
        ),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfaceContaminationPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AbstractSurfaceContamination")]
        pub abstract_surface_contamination: AbstractSurfaceContaminationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfacePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "Surface")]
        pub surface: SurfaceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfaceTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::gml::Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<super::gml::NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<super::gml::NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "patches")]
        pub patches: super::gml::PatchesXElement,
        #[serde(rename = "Content672")]
        pub content_672: SurfaceContent672XType,
    }
    impl super::gml::AbstractGmlXElementTrait for SurfaceTypeXType {}
    impl super::gml::AbstractGeometricPrimitiveXElementTrait for SurfaceTypeXType {}
    impl super::gml::AbstractGeometryXElementTrait for SurfaceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SurfaceTypeXType {}
    impl super::gml::AbstractSurfaceXElementTrait for SurfaceTypeXType {}
    impl super::gml::SurfaceXElementTrait for SurfaceTypeXType {}
    impl SurfaceXElementTrait for SurfaceTypeXType {}
    pub type SurveillanceGroundStationXElement = SurveillanceGroundStationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurveillanceGroundStationPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "SurveillanceGroundStation")]
        pub surveillance_ground_station: SurveillanceGroundStationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurveillanceGroundStationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1683")]
        pub content_1683: SurveillanceGroundStationContent1683XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<SurveillanceGroundStationTypeExtensionXElement>,
    }
    pub type SurveillanceGroundStationTypeExtensionXElement =
        SurveillanceGroundStationTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurveillanceGroundStationTypeExtensionXElementType {
        #[serde(
            default = "SurveillanceGroundStationTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: SurveillanceGroundStationTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum SurveillanceGroundStationTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractSurveillanceGroundStationExtension")]
        AbstractSurveillanceGroundStationExtension(
            AbstractSurveillanceGroundStationExtensionXElement,
        ),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurveillanceRadarPropertyTypeXType {
        #[serde(
            default = "SurveillanceRadarPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type SurveyControlPointXElement = SurveyControlPointTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurveyControlPointPropertyTypeXType {
        #[serde(
            default = "SurveyControlPointPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type SurveyControlPointTimeSliceXElement = SurveyControlPointTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurveyControlPointTimeSlicePropertyTypeXType {
        #[serde(
            default = "SurveyControlPointTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "SurveyControlPointTimeSlice")]
        pub survey_control_point_time_slice: SurveyControlPointTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurveyControlPointTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content149")]
        pub content_149: SurveyControlPointTimeSliceContent149XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<SurveyControlPointTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for SurveyControlPointTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SurveyControlPointTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for SurveyControlPointTimeSliceTypeXType {}
    pub type SurveyControlPointTimeSliceTypeExtensionXElement =
        SurveyControlPointTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurveyControlPointTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "SurveyControlPointTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractSurveyControlPointExtension")]
        pub abstract_survey_control_point_extension: AbstractSurveyControlPointExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurveyControlPointTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<SurveyControlPointTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for SurveyControlPointTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for SurveyControlPointTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for SurveyControlPointTypeXType {}
    impl AbstractAixmFeatureXElementTrait for SurveyControlPointTypeXType {}
    pub type TacanXElement = TacanTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TacanPropertyTypeXType {
        #[serde(default = "TacanPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type TacanTimeSliceXElement = TacanTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TacanTimeSlicePropertyTypeXType {
        #[serde(
            default = "TacanTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "TACANTimeSlice")]
        pub tacan_time_slice: TacanTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TacanTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content859")]
        pub content_859: TacanTimeSliceContent859XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<TacanTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for TacanTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TacanTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for TacanTimeSliceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TacanTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<TacanTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for TacanTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for TacanTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TacanTypeXType {}
    impl AbstractAixmFeatureXElementTrait for TacanTypeXType {}
    impl AbstractNavaidEquipmentXElementTrait for TacanTypeXType {}
    pub type TacanTimeSliceTypeExtensionXElement = TacanTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TacanTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "TacanTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: TacanTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TacanTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractTACANExtension")]
        AbstractTacanExtension(AbstractTacanExtensionXElement),
        #[serde(rename = "AbstractNavaidEquipmentExtension")]
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtensionXElement),
    }
    pub type TaxiHoldingPositionXElement = TaxiHoldingPositionTypeXType;
    pub type TaxiHoldingPositionLightSystemXElement = TaxiHoldingPositionLightSystemTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionLightSystemPropertyTypeXType {
        #[serde(
            default = "TaxiHoldingPositionLightSystemPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type TaxiHoldingPositionLightSystemTimeSliceXElement =
        TaxiHoldingPositionLightSystemTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionLightSystemTimeSlicePropertyTypeXType {
        #[serde(
            default = "TaxiHoldingPositionLightSystemTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "TaxiHoldingPositionLightSystemTimeSlice")]
        pub taxi_holding_position_light_system_time_slice:
            TaxiHoldingPositionLightSystemTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionLightSystemTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content291")]
        pub content_291: TaxiHoldingPositionLightSystemTimeSliceContent291XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<TaxiHoldingPositionLightSystemTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for TaxiHoldingPositionLightSystemTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TaxiHoldingPositionLightSystemTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait
        for TaxiHoldingPositionLightSystemTimeSliceTypeXType
    {
    }
    pub type TaxiHoldingPositionLightSystemTimeSliceTypeExtensionXElement =
        TaxiHoldingPositionLightSystemTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionLightSystemTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "TaxiHoldingPositionLightSystemTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: TaxiHoldingPositionLightSystemTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TaxiHoldingPositionLightSystemTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractTaxiHoldingPositionLightSystemExtension")]
        AbstractTaxiHoldingPositionLightSystemExtension(
            AbstractTaxiHoldingPositionLightSystemExtensionXElement,
        ),
        #[serde(rename = "AbstractGroundLightSystemExtension")]
        AbstractGroundLightSystemExtension(AbstractGroundLightSystemExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionLightSystemTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<TaxiHoldingPositionLightSystemTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for TaxiHoldingPositionLightSystemTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for TaxiHoldingPositionLightSystemTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TaxiHoldingPositionLightSystemTypeXType {}
    impl AbstractAixmFeatureXElementTrait for TaxiHoldingPositionLightSystemTypeXType {}
    impl AbstractGroundLightSystemXElementTrait for TaxiHoldingPositionLightSystemTypeXType {}
    pub type TaxiHoldingPositionMarkingXElement = TaxiHoldingPositionMarkingTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionMarkingPropertyTypeXType {
        #[serde(
            default = "TaxiHoldingPositionMarkingPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type TaxiHoldingPositionMarkingTimeSliceXElement =
        TaxiHoldingPositionMarkingTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionMarkingTimeSlicePropertyTypeXType {
        #[serde(
            default = "TaxiHoldingPositionMarkingTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "TaxiHoldingPositionMarkingTimeSlice")]
        pub taxi_holding_position_marking_time_slice: TaxiHoldingPositionMarkingTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionMarkingTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content370")]
        pub content_370: TaxiHoldingPositionMarkingTimeSliceContent370XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<TaxiHoldingPositionMarkingTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for TaxiHoldingPositionMarkingTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TaxiHoldingPositionMarkingTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for TaxiHoldingPositionMarkingTimeSliceTypeXType {}
    pub type TaxiHoldingPositionMarkingTimeSliceTypeExtensionXElement =
        TaxiHoldingPositionMarkingTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionMarkingTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "TaxiHoldingPositionMarkingTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: TaxiHoldingPositionMarkingTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TaxiHoldingPositionMarkingTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractTaxiHoldingPositionMarkingExtension")]
        AbstractTaxiHoldingPositionMarkingExtension(
            AbstractTaxiHoldingPositionMarkingExtensionXElement,
        ),
        #[serde(rename = "AbstractMarkingExtension")]
        AbstractMarkingExtension(AbstractMarkingExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionMarkingTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<TaxiHoldingPositionMarkingTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for TaxiHoldingPositionMarkingTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for TaxiHoldingPositionMarkingTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TaxiHoldingPositionMarkingTypeXType {}
    impl AbstractAixmFeatureXElementTrait for TaxiHoldingPositionMarkingTypeXType {}
    impl AbstractMarkingXElementTrait for TaxiHoldingPositionMarkingTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionPropertyTypeXType {
        #[serde(
            default = "TaxiHoldingPositionPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type TaxiHoldingPositionTimeSliceXElement = TaxiHoldingPositionTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionTimeSlicePropertyTypeXType {
        #[serde(
            default = "TaxiHoldingPositionTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "TaxiHoldingPositionTimeSlice")]
        pub taxi_holding_position_time_slice: TaxiHoldingPositionTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content578")]
        pub content_578: TaxiHoldingPositionTimeSliceContent578XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<TaxiHoldingPositionTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for TaxiHoldingPositionTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TaxiHoldingPositionTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for TaxiHoldingPositionTimeSliceTypeXType {}
    pub type TaxiHoldingPositionTimeSliceTypeExtensionXElement =
        TaxiHoldingPositionTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "TaxiHoldingPositionTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractTaxiHoldingPositionExtension")]
        pub abstract_taxi_holding_position_extension: AbstractTaxiHoldingPositionExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<TaxiHoldingPositionTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for TaxiHoldingPositionTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for TaxiHoldingPositionTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TaxiHoldingPositionTypeXType {}
    impl AbstractAixmFeatureXElementTrait for TaxiHoldingPositionTypeXType {}
    pub type TaxiwayXElement = TaxiwayTypeXType;
    pub type TaxiwayContaminationXElement = TaxiwayContaminationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayContaminationPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "TaxiwayContamination")]
        pub taxiway_contamination: TaxiwayContaminationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayContaminationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content556")]
        pub content_556: TaxiwayContaminationContent556XType,
        #[serde(rename = "Content557")]
        pub content_557: TaxiwayContaminationContent557XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<TaxiwayContaminationTypeExtensionXElement>,
    }
    impl AbstractSurfaceContaminationXElementTrait for TaxiwayContaminationTypeXType {}
    pub type TaxiwayContaminationTypeExtensionXElement =
        TaxiwayContaminationTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayContaminationTypeExtensionXElementType {
        #[serde(
            default = "TaxiwayContaminationTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: TaxiwayContaminationTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TaxiwayContaminationTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractSurfaceContaminationExtension")]
        AbstractSurfaceContaminationExtension(AbstractSurfaceContaminationExtensionXElement),
        #[serde(rename = "AbstractTaxiwayContaminationExtension")]
        AbstractTaxiwayContaminationExtension(AbstractTaxiwayContaminationExtensionXElement),
    }
    pub type TaxiwayElementXElement = TaxiwayElementTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayElementPropertyTypeXType {
        #[serde(
            default = "TaxiwayElementPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type TaxiwayElementTimeSliceXElement = TaxiwayElementTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayElementTimeSlicePropertyTypeXType {
        #[serde(
            default = "TaxiwayElementTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "TaxiwayElementTimeSlice")]
        pub taxiway_element_time_slice: TaxiwayElementTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayElementTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content592")]
        pub content_592: TaxiwayElementTimeSliceContent592XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<TaxiwayElementTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for TaxiwayElementTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TaxiwayElementTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for TaxiwayElementTimeSliceTypeXType {}
    pub type TaxiwayElementTimeSliceTypeExtensionXElement =
        TaxiwayElementTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayElementTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "TaxiwayElementTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractTaxiwayElementExtension")]
        pub abstract_taxiway_element_extension: AbstractTaxiwayElementExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayElementTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<TaxiwayElementTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for TaxiwayElementTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for TaxiwayElementTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TaxiwayElementTypeXType {}
    impl AbstractAixmFeatureXElementTrait for TaxiwayElementTypeXType {}
    pub type TaxiwayLightSystemXElement = TaxiwayLightSystemTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayLightSystemPropertyTypeXType {
        #[serde(
            default = "TaxiwayLightSystemPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type TaxiwayLightSystemTimeSliceXElement = TaxiwayLightSystemTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayLightSystemTimeSlicePropertyTypeXType {
        #[serde(
            default = "TaxiwayLightSystemTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "TaxiwayLightSystemTimeSlice")]
        pub taxiway_light_system_time_slice: TaxiwayLightSystemTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayLightSystemTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content299")]
        pub content_299: TaxiwayLightSystemTimeSliceContent299XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<TaxiwayLightSystemTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for TaxiwayLightSystemTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TaxiwayLightSystemTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for TaxiwayLightSystemTimeSliceTypeXType {}
    pub type TaxiwayLightSystemTimeSliceTypeExtensionXElement =
        TaxiwayLightSystemTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayLightSystemTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "TaxiwayLightSystemTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: TaxiwayLightSystemTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TaxiwayLightSystemTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractTaxiwayLightSystemExtension")]
        AbstractTaxiwayLightSystemExtension(AbstractTaxiwayLightSystemExtensionXElement),
        #[serde(rename = "AbstractGroundLightSystemExtension")]
        AbstractGroundLightSystemExtension(AbstractGroundLightSystemExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayLightSystemTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<TaxiwayLightSystemTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for TaxiwayLightSystemTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for TaxiwayLightSystemTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TaxiwayLightSystemTypeXType {}
    impl AbstractAixmFeatureXElementTrait for TaxiwayLightSystemTypeXType {}
    impl AbstractGroundLightSystemXElementTrait for TaxiwayLightSystemTypeXType {}
    pub type TaxiwayMarkingXElement = TaxiwayMarkingTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayMarkingPropertyTypeXType {
        #[serde(
            default = "TaxiwayMarkingPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type TaxiwayMarkingTimeSliceXElement = TaxiwayMarkingTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayMarkingTimeSlicePropertyTypeXType {
        #[serde(
            default = "TaxiwayMarkingTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "TaxiwayMarkingTimeSlice")]
        pub taxiway_marking_time_slice: TaxiwayMarkingTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayMarkingTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content378")]
        pub content_378: TaxiwayMarkingTimeSliceContent378XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<TaxiwayMarkingTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for TaxiwayMarkingTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TaxiwayMarkingTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for TaxiwayMarkingTimeSliceTypeXType {}
    pub type TaxiwayMarkingTimeSliceTypeExtensionXElement =
        TaxiwayMarkingTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayMarkingTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "TaxiwayMarkingTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: TaxiwayMarkingTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TaxiwayMarkingTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractTaxiwayMarkingExtension")]
        AbstractTaxiwayMarkingExtension(AbstractTaxiwayMarkingExtensionXElement),
        #[serde(rename = "AbstractMarkingExtension")]
        AbstractMarkingExtension(AbstractMarkingExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayMarkingTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<TaxiwayMarkingTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for TaxiwayMarkingTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for TaxiwayMarkingTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TaxiwayMarkingTypeXType {}
    impl AbstractAixmFeatureXElementTrait for TaxiwayMarkingTypeXType {}
    impl AbstractMarkingXElementTrait for TaxiwayMarkingTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayPropertyTypeXType {
        #[serde(default = "TaxiwayPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type TaxiwayTimeSliceXElement = TaxiwayTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayTimeSlicePropertyTypeXType {
        #[serde(
            default = "TaxiwayTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "TaxiwayTimeSlice")]
        pub taxiway_time_slice: TaxiwayTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content585")]
        pub content_585: TaxiwayTimeSliceContent585XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<TaxiwayTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for TaxiwayTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TaxiwayTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for TaxiwayTimeSliceTypeXType {}
    pub type TaxiwayTimeSliceTypeExtensionXElement = TaxiwayTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "TaxiwayTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractTaxiwayExtension")]
        pub abstract_taxiway_extension: AbstractTaxiwayExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<TaxiwayTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for TaxiwayTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for TaxiwayTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TaxiwayTypeXType {}
    impl AbstractAixmFeatureXElementTrait for TaxiwayTypeXType {}
    pub type TelephoneContactXElement = TelephoneContactTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TelephoneContactPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "TelephoneContact")]
        pub telephone_contact: TelephoneContactXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TelephoneContactTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1522")]
        pub content_1522: TelephoneContactContent1522XType,
        #[serde(rename = "Content1523")]
        pub content_1523: TelephoneContactContent1523XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<TelephoneContactTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for TelephoneContactTypeXType {}
    pub type TelephoneContactTypeExtensionXElement = TelephoneContactTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TelephoneContactTypeExtensionXElementType {
        #[serde(
            default = "TelephoneContactTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: TelephoneContactTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TelephoneContactTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractTelephoneContactExtension")]
        AbstractTelephoneContactExtension(AbstractTelephoneContactExtensionXElement),
    }
    pub type TerminalArrivalAreaXElement = TerminalArrivalAreaTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TerminalArrivalAreaPropertyTypeXType {
        #[serde(
            default = "TerminalArrivalAreaPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type TerminalArrivalAreaSectorXElement = TerminalArrivalAreaSectorTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TerminalArrivalAreaSectorPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "TerminalArrivalAreaSector")]
        pub terminal_arrival_area_sector: TerminalArrivalAreaSectorXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TerminalArrivalAreaSectorTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1052")]
        pub content_1052: TerminalArrivalAreaSectorContent1052XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<TerminalArrivalAreaSectorTypeExtensionXElement>,
    }
    pub type TerminalArrivalAreaSectorTypeExtensionXElement =
        TerminalArrivalAreaSectorTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TerminalArrivalAreaSectorTypeExtensionXElementType {
        #[serde(
            default = "TerminalArrivalAreaSectorTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: TerminalArrivalAreaSectorTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TerminalArrivalAreaSectorTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractTerminalArrivalAreaSectorExtension")]
        AbstractTerminalArrivalAreaSectorExtension(
            AbstractTerminalArrivalAreaSectorExtensionXElement,
        ),
    }
    pub type TerminalArrivalAreaTimeSliceXElement = TerminalArrivalAreaTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TerminalArrivalAreaTimeSlicePropertyTypeXType {
        #[serde(
            default = "TerminalArrivalAreaTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "TerminalArrivalAreaTimeSlice")]
        pub terminal_arrival_area_time_slice: TerminalArrivalAreaTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TerminalArrivalAreaTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content1046")]
        pub content_1046: TerminalArrivalAreaTimeSliceContent1046XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<TerminalArrivalAreaTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for TerminalArrivalAreaTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TerminalArrivalAreaTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for TerminalArrivalAreaTimeSliceTypeXType {}
    pub type TerminalArrivalAreaTimeSliceTypeExtensionXElement =
        TerminalArrivalAreaTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TerminalArrivalAreaTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "TerminalArrivalAreaTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractTerminalArrivalAreaExtension")]
        pub abstract_terminal_arrival_area_extension: AbstractTerminalArrivalAreaExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TerminalArrivalAreaTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<TerminalArrivalAreaTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for TerminalArrivalAreaTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for TerminalArrivalAreaTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TerminalArrivalAreaTypeXType {}
    impl AbstractAixmFeatureXElementTrait for TerminalArrivalAreaTypeXType {}
    pub type TerminalSegmentPointXElement = TerminalSegmentPointTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TerminalSegmentPointPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "TerminalSegmentPoint")]
        pub terminal_segment_point: TerminalSegmentPointXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TerminalSegmentPointTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content906")]
        pub content_906: TerminalSegmentPointContent906XType,
        #[serde(rename = "Content908")]
        pub content_908: TerminalSegmentPointContent908XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<TerminalSegmentPointTypeExtensionXElement>,
    }
    impl AbstractSegmentPointXElementTrait for TerminalSegmentPointTypeXType {}
    pub type TerminalSegmentPointTypeExtensionXElement =
        TerminalSegmentPointTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TerminalSegmentPointTypeExtensionXElementType {
        #[serde(
            default = "TerminalSegmentPointTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: TerminalSegmentPointTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TerminalSegmentPointTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractSegmentPointExtension")]
        AbstractSegmentPointExtension(AbstractSegmentPointExtensionXElement),
        #[serde(rename = "AbstractTerminalSegmentPointExtension")]
        AbstractTerminalSegmentPointExtension(AbstractTerminalSegmentPointExtensionXElement),
    }
    pub type TextAddressBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TextAddressTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: TextAddressBaseTypeXType,
    }
    pub type TextDesignatorBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TextDesignatorTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: TextDesignatorBaseTypeXType,
    }
    pub type TextInstructionBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TextInstructionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: TextInstructionBaseTypeXType,
    }
    pub type TextNameBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TextNameTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: TextNameBaseTypeXType,
    }
    pub type TextNoteBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TextNoteTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(default, rename = "@lang")]
        pub lang: Option<super::xs::LanguageXType>,
        #[serde(rename = "$text")]
        pub content: TextNoteBaseTypeXType,
    }
    pub type TextPhoneBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TextPhoneTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: TextPhoneBaseTypeXType,
    }
    pub type TextPropertyNameBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TextPropertyNameTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: TextPropertyNameBaseTypeXType,
    }
    pub type TextRemarkBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TextRemarkTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: TextRemarkBaseTypeXType,
    }
    pub type TextSidstarDesignatorBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TextSidstarDesignatorTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: TextSidstarDesignatorBaseTypeXType,
    }
    pub type TimeBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: TimeBaseTypeXType,
    }
    pub type TimesheetXElement = TimesheetTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimesheetPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "Timesheet")]
        pub timesheet: TimesheetXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimesheetTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content1580")]
        pub content_1580: TimesheetContent1580XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<TimesheetTypeExtensionXElement>,
    }
    pub type TimesheetTypeExtensionXElement = TimesheetTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimesheetTypeExtensionXElementType {
        #[serde(
            default = "TimesheetTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: TimesheetTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TimesheetTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractTimesheetExtension")]
        AbstractTimesheetExtension(AbstractTimesheetExtensionXElement),
    }
    pub type TouchDownLiftOffXElement = TouchDownLiftOffTypeXType;
    pub type TouchDownLiftOffContaminationXElement = TouchDownLiftOffContaminationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffContaminationPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "TouchDownLiftOffContamination")]
        pub touch_down_lift_off_contamination: TouchDownLiftOffContaminationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffContaminationTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content562")]
        pub content_562: TouchDownLiftOffContaminationContent562XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<TouchDownLiftOffContaminationTypeExtensionXElement>,
    }
    impl AbstractSurfaceContaminationXElementTrait for TouchDownLiftOffContaminationTypeXType {}
    pub type TouchDownLiftOffContaminationTypeExtensionXElement =
        TouchDownLiftOffContaminationTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffContaminationTypeExtensionXElementType {
        #[serde(
            default = "TouchDownLiftOffContaminationTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: TouchDownLiftOffContaminationTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TouchDownLiftOffContaminationTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractSurfaceContaminationExtension")]
        AbstractSurfaceContaminationExtension(AbstractSurfaceContaminationExtensionXElement),
        #[serde(rename = "AbstractTouchDownLiftOffContaminationExtension")]
        AbstractTouchDownLiftOffContaminationExtension(
            AbstractTouchDownLiftOffContaminationExtensionXElement,
        ),
    }
    pub type TouchDownLiftOffLightSystemXElement = TouchDownLiftOffLightSystemTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffLightSystemPropertyTypeXType {
        #[serde(
            default = "TouchDownLiftOffLightSystemPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type TouchDownLiftOffLightSystemTimeSliceXElement =
        TouchDownLiftOffLightSystemTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffLightSystemTimeSlicePropertyTypeXType {
        #[serde(
            default = "TouchDownLiftOffLightSystemTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "TouchDownLiftOffLightSystemTimeSlice")]
        pub touch_down_lift_off_light_system_time_slice:
            TouchDownLiftOffLightSystemTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffLightSystemTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content307")]
        pub content_307: TouchDownLiftOffLightSystemTimeSliceContent307XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<TouchDownLiftOffLightSystemTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for TouchDownLiftOffLightSystemTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TouchDownLiftOffLightSystemTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for TouchDownLiftOffLightSystemTimeSliceTypeXType {}
    pub type TouchDownLiftOffLightSystemTimeSliceTypeExtensionXElement =
        TouchDownLiftOffLightSystemTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffLightSystemTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "TouchDownLiftOffLightSystemTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: TouchDownLiftOffLightSystemTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TouchDownLiftOffLightSystemTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractTouchDownLiftOffLightSystemExtension")]
        AbstractTouchDownLiftOffLightSystemExtension(
            AbstractTouchDownLiftOffLightSystemExtensionXElement,
        ),
        #[serde(rename = "AbstractGroundLightSystemExtension")]
        AbstractGroundLightSystemExtension(AbstractGroundLightSystemExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffLightSystemTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<TouchDownLiftOffLightSystemTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for TouchDownLiftOffLightSystemTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for TouchDownLiftOffLightSystemTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TouchDownLiftOffLightSystemTypeXType {}
    impl AbstractAixmFeatureXElementTrait for TouchDownLiftOffLightSystemTypeXType {}
    impl AbstractGroundLightSystemXElementTrait for TouchDownLiftOffLightSystemTypeXType {}
    pub type TouchDownLiftOffMarkingXElement = TouchDownLiftOffMarkingTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffMarkingPropertyTypeXType {
        #[serde(
            default = "TouchDownLiftOffMarkingPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type TouchDownLiftOffMarkingTimeSliceXElement = TouchDownLiftOffMarkingTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffMarkingTimeSlicePropertyTypeXType {
        #[serde(
            default = "TouchDownLiftOffMarkingTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "TouchDownLiftOffMarkingTimeSlice")]
        pub touch_down_lift_off_marking_time_slice: TouchDownLiftOffMarkingTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffMarkingTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content386")]
        pub content_386: TouchDownLiftOffMarkingTimeSliceContent386XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<TouchDownLiftOffMarkingTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for TouchDownLiftOffMarkingTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TouchDownLiftOffMarkingTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for TouchDownLiftOffMarkingTimeSliceTypeXType {}
    pub type TouchDownLiftOffMarkingTimeSliceTypeExtensionXElement =
        TouchDownLiftOffMarkingTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffMarkingTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "TouchDownLiftOffMarkingTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: TouchDownLiftOffMarkingTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TouchDownLiftOffMarkingTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractTouchDownLiftOffMarkingExtension")]
        AbstractTouchDownLiftOffMarkingExtension(AbstractTouchDownLiftOffMarkingExtensionXElement),
        #[serde(rename = "AbstractMarkingExtension")]
        AbstractMarkingExtension(AbstractMarkingExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffMarkingTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<TouchDownLiftOffMarkingTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for TouchDownLiftOffMarkingTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for TouchDownLiftOffMarkingTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TouchDownLiftOffMarkingTypeXType {}
    impl AbstractAixmFeatureXElementTrait for TouchDownLiftOffMarkingTypeXType {}
    impl AbstractMarkingXElementTrait for TouchDownLiftOffMarkingTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffPropertyTypeXType {
        #[serde(
            default = "TouchDownLiftOffPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type TouchDownLiftOffSafeAreaXElement = TouchDownLiftOffSafeAreaTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffSafeAreaPropertyTypeXType {
        #[serde(
            default = "TouchDownLiftOffSafeAreaPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type TouchDownLiftOffSafeAreaTimeSliceXElement = TouchDownLiftOffSafeAreaTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffSafeAreaTimeSlicePropertyTypeXType {
        #[serde(
            default = "TouchDownLiftOffSafeAreaTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "TouchDownLiftOffSafeAreaTimeSlice")]
        pub touch_down_lift_off_safe_area_time_slice: TouchDownLiftOffSafeAreaTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffSafeAreaTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content231")]
        pub content_231: TouchDownLiftOffSafeAreaTimeSliceContent231XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<TouchDownLiftOffSafeAreaTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for TouchDownLiftOffSafeAreaTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TouchDownLiftOffSafeAreaTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for TouchDownLiftOffSafeAreaTimeSliceTypeXType {}
    pub type TouchDownLiftOffSafeAreaTimeSliceTypeExtensionXElement =
        TouchDownLiftOffSafeAreaTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffSafeAreaTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "TouchDownLiftOffSafeAreaTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: TouchDownLiftOffSafeAreaTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TouchDownLiftOffSafeAreaTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractTouchDownLiftOffSafeAreaExtension")]
        AbstractTouchDownLiftOffSafeAreaExtension(
            AbstractTouchDownLiftOffSafeAreaExtensionXElement,
        ),
        #[serde(rename = "AbstractAirportHeliportProtectionAreaExtension")]
        AbstractAirportHeliportProtectionAreaExtension(
            AbstractAirportHeliportProtectionAreaExtensionXElement,
        ),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffSafeAreaTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<TouchDownLiftOffSafeAreaTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for TouchDownLiftOffSafeAreaTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for TouchDownLiftOffSafeAreaTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TouchDownLiftOffSafeAreaTypeXType {}
    impl AbstractAixmFeatureXElementTrait for TouchDownLiftOffSafeAreaTypeXType {}
    impl AbstractAirportHeliportProtectionAreaXElementTrait for TouchDownLiftOffSafeAreaTypeXType {}
    pub type TouchDownLiftOffTimeSliceXElement = TouchDownLiftOffTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffTimeSlicePropertyTypeXType {
        #[serde(
            default = "TouchDownLiftOffTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "TouchDownLiftOffTimeSlice")]
        pub touch_down_lift_off_time_slice: TouchDownLiftOffTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content224")]
        pub content_224: TouchDownLiftOffTimeSliceContent224XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<TouchDownLiftOffTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for TouchDownLiftOffTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TouchDownLiftOffTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for TouchDownLiftOffTimeSliceTypeXType {}
    pub type TouchDownLiftOffTimeSliceTypeExtensionXElement =
        TouchDownLiftOffTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "TouchDownLiftOffTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractTouchDownLiftOffExtension")]
        pub abstract_touch_down_lift_off_extension: AbstractTouchDownLiftOffExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<TouchDownLiftOffTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for TouchDownLiftOffTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for TouchDownLiftOffTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for TouchDownLiftOffTypeXType {}
    impl AbstractAixmFeatureXElementTrait for TouchDownLiftOffTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TrafficSeparationServicePropertyTypeXType {
        #[serde(
            default = "TrafficSeparationServicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type UnitXElement = UnitTypeXType;
    pub type UnitAvailabilityXElement = UnitAvailabilityTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitAvailabilityPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "UnitAvailability")]
        pub unit_availability: UnitAvailabilityXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitAvailabilityTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content992")]
        pub content_992: UnitAvailabilityContent992XType,
        #[serde(rename = "Content993")]
        pub content_993: UnitAvailabilityContent993XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<UnitAvailabilityTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for UnitAvailabilityTypeXType {}
    pub type UnitAvailabilityTypeExtensionXElement = UnitAvailabilityTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitAvailabilityTypeExtensionXElementType {
        #[serde(
            default = "UnitAvailabilityTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: UnitAvailabilityTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UnitAvailabilityTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractUnitAvailabilityExtension")]
        AbstractUnitAvailabilityExtension(AbstractUnitAvailabilityExtensionXElement),
    }
    pub type UnitDependencyXElement = UnitDependencyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitDependencyPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "UnitDependency")]
        pub unit_dependency: UnitDependencyXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitDependencyTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content998")]
        pub content_998: UnitDependencyContent998XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<UnitDependencyTypeExtensionXElement>,
    }
    pub type UnitDependencyTypeExtensionXElement = UnitDependencyTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitDependencyTypeExtensionXElementType {
        #[serde(
            default = "UnitDependencyTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: UnitDependencyTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UnitDependencyTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractUnitDependencyExtension")]
        AbstractUnitDependencyExtension(AbstractUnitDependencyExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitPropertyTypeXType {
        #[serde(default = "UnitPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type UnitTimeSliceXElement = UnitTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitTimeSlicePropertyTypeXType {
        #[serde(
            default = "UnitTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "UnitTimeSlice")]
        pub unit_time_slice: UnitTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content988")]
        pub content_988: UnitTimeSliceContent988XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<UnitTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for UnitTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for UnitTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for UnitTimeSliceTypeXType {}
    pub type UnitTimeSliceTypeExtensionXElement = UnitTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "UnitTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractUnitExtension")]
        pub abstract_unit_extension: AbstractUnitExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<UnitTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for UnitTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for UnitTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for UnitTypeXType {}
    impl AbstractAixmFeatureXElementTrait for UnitTypeXType {}
    pub type UnplannedHoldingXElement = UnplannedHoldingTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnplannedHoldingPropertyTypeXType {
        #[serde(
            default = "UnplannedHoldingPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type UnplannedHoldingTimeSliceXElement = UnplannedHoldingTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnplannedHoldingTimeSlicePropertyTypeXType {
        #[serde(
            default = "UnplannedHoldingTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "UnplannedHoldingTimeSlice")]
        pub unplanned_holding_time_slice: UnplannedHoldingTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnplannedHoldingTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content703")]
        pub content_703: UnplannedHoldingTimeSliceContent703XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<UnplannedHoldingTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for UnplannedHoldingTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for UnplannedHoldingTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for UnplannedHoldingTimeSliceTypeXType {}
    pub type UnplannedHoldingTimeSliceTypeExtensionXElement =
        UnplannedHoldingTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnplannedHoldingTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "UnplannedHoldingTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractUnplannedHoldingExtension")]
        pub abstract_unplanned_holding_extension: AbstractUnplannedHoldingExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnplannedHoldingTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<UnplannedHoldingTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for UnplannedHoldingTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for UnplannedHoldingTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for UnplannedHoldingTypeXType {}
    impl AbstractAixmFeatureXElementTrait for UnplannedHoldingTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomDepthTypeXType {
        UomDepthType2313(UomDepthType2313XType),
        UomDepthType2314(UomDepthType2314XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomDepthType2313XType {
        #[serde(rename = "MM")]
        Mm,
        #[serde(rename = "CM")]
        Cm,
        #[serde(rename = "IN")]
        In,
        #[serde(rename = "FT")]
        Ft,
    }
    pub type UomDepthType2314XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomDistanceTypeXType {
        UomDistanceType2315(UomDistanceType2315XType),
        UomDistanceType2316(UomDistanceType2316XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomDistanceType2315XType {
        #[serde(rename = "NM")]
        Nm,
        #[serde(rename = "KM")]
        Km,
        #[serde(rename = "M")]
        M,
        #[serde(rename = "FT")]
        Ft,
        #[serde(rename = "MI")]
        Mi,
        #[serde(rename = "CM")]
        Cm,
    }
    pub type UomDistanceType2316XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomDistanceVerticalTypeXType {
        UomDistanceVerticalType1856(UomDistanceVerticalType1856XType),
        UomDistanceVerticalType1857(UomDistanceVerticalType1857XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomDistanceVerticalType1856XType {
        #[serde(rename = "FT")]
        Ft,
        #[serde(rename = "M")]
        M,
        #[serde(rename = "FL")]
        Fl,
        #[serde(rename = "SM")]
        Sm,
    }
    pub type UomDistanceVerticalType1857XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomDurationTypeXType {
        UomDurationType2317(UomDurationType2317XType),
        UomDurationType2318(UomDurationType2318XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomDurationType2317XType {
        #[serde(rename = "HR")]
        Hr,
        #[serde(rename = "MIN")]
        Min,
        #[serde(rename = "SEC")]
        Sec,
    }
    pub type UomDurationType2318XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomFlTypeXType {
        UomFlType2319(UomFlType2319XType),
        UomFlType2320(UomFlType2320XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomFlType2319XType {
        #[serde(rename = "FL")]
        Fl,
        #[serde(rename = "SM")]
        Sm,
    }
    pub type UomFlType2320XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomFrequencyTypeXType {
        UomFrequencyType2321(UomFrequencyType2321XType),
        UomFrequencyType2322(UomFrequencyType2322XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomFrequencyType2321XType {
        #[serde(rename = "HZ")]
        Hz,
        #[serde(rename = "KHZ")]
        Khz,
        #[serde(rename = "MHZ")]
        Mhz,
        #[serde(rename = "GHZ")]
        Ghz,
    }
    pub type UomFrequencyType2322XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomLightIntensityTypeXType {
        UomLightIntensityType2323(UomLightIntensityType2323XType),
        UomLightIntensityType2324(UomLightIntensityType2324XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomLightIntensityType2323XType {
        #[serde(rename = "CD")]
        Cd,
    }
    pub type UomLightIntensityType2324XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomPressureTypeXType {
        UomPressureType2325(UomPressureType2325XType),
        UomPressureType2326(UomPressureType2326XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomPressureType2325XType {
        #[serde(rename = "PA")]
        Pa,
        #[serde(rename = "MPA")]
        Mpa,
        #[serde(rename = "PSI")]
        Psi,
        #[serde(rename = "BAR")]
        Bar,
        #[serde(rename = "TORR")]
        Torr,
        #[serde(rename = "ATM")]
        Atm,
        #[serde(rename = "HPA")]
        Hpa,
    }
    pub type UomPressureType2326XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomSpeedTypeXType {
        UomSpeedType2327(UomSpeedType2327XType),
        UomSpeedType2328(UomSpeedType2328XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomSpeedType2327XType {
        #[serde(rename = "KM_H")]
        KmH,
        #[serde(rename = "KT")]
        Kt,
        #[serde(rename = "MACH")]
        Mach,
        #[serde(rename = "M_MIN")]
        MMin,
        #[serde(rename = "FT_MIN")]
        FtMin,
        #[serde(rename = "M_SEC")]
        MSec,
        #[serde(rename = "FT_SEC")]
        FtSec,
        #[serde(rename = "MPH")]
        Mph,
    }
    pub type UomSpeedType2328XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomTemperatureTypeXType {
        UomTemperatureType2329(UomTemperatureType2329XType),
        UomTemperatureType2330(UomTemperatureType2330XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomTemperatureType2329XType {
        #[serde(rename = "C")]
        C,
        #[serde(rename = "F")]
        F,
        #[serde(rename = "K")]
        K,
    }
    pub type UomTemperatureType2330XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomWeightTypeXType {
        UomWeightType2331(UomWeightType2331XType),
        UomWeightType2332(UomWeightType2332XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomWeightType2331XType {
        #[serde(rename = "KG")]
        Kg,
        #[serde(rename = "T")]
        T,
        #[serde(rename = "LB")]
        Lb,
        #[serde(rename = "TON")]
        Ton,
    }
    pub type UomWeightType2332XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UsageConditionPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "AbstractUsageCondition")]
        pub abstract_usage_condition: AbstractUsageConditionXElement,
    }
    pub type VorXElement = VorTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VorPropertyTypeXType {
        #[serde(default = "VorPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type VorTimeSliceXElement = VorTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VorTimeSlicePropertyTypeXType {
        #[serde(
            default = "VorTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "VORTimeSlice")]
        pub vor_time_slice: VorTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VorTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content867")]
        pub content_867: VorTimeSliceContent867XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<VorTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for VorTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for VorTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for VorTimeSliceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VorTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<VorTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for VorTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for VorTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for VorTypeXType {}
    impl AbstractAixmFeatureXElementTrait for VorTypeXType {}
    impl AbstractNavaidEquipmentXElementTrait for VorTypeXType {}
    pub type ValAlarmLimitBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValAlarmLimitTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValAlarmLimitBaseTypeXType,
    }
    pub type ValAngleBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValAngleTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValAngleBaseTypeXType,
    }
    pub type ValBearingBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValBearingTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValBearingBaseTypeXType,
    }
    pub type ValChannelNumberBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValChannelNumberTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValChannelNumberBaseTypeXType,
    }
    pub type ValDepthBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValDepthTypeXType {
        #[serde(default, rename = "@uom")]
        pub uom: Option<UomDepthTypeXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValDepthBaseTypeXType,
    }
    pub type ValDistanceBaseTypeXType = f64;
    pub type ValDistanceSignedBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValDistanceSignedTypeXType {
        #[serde(default, rename = "@uom")]
        pub uom: Option<UomDistanceTypeXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValDistanceSignedBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValDistanceTypeXType {
        #[serde(default, rename = "@uom")]
        pub uom: Option<UomDistanceTypeXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValDistanceBaseTypeXType,
    }
    pub type ValDistanceVerticalBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValDistanceVerticalTypeXType {
        #[serde(default, rename = "@uom")]
        pub uom: Option<UomDistanceVerticalTypeXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValDistanceVerticalBaseTypeXType,
    }
    pub type ValDurationBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValDurationTypeXType {
        #[serde(default, rename = "@uom")]
        pub uom: Option<UomDurationTypeXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValDurationBaseTypeXType,
    }
    pub type ValFlBaseTypeXType = u32;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValFlTypeXType {
        #[serde(default, rename = "@uom")]
        pub uom: Option<UomFlTypeXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValFlBaseTypeXType,
    }
    pub type ValFrequencyBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValFrequencyTypeXType {
        #[serde(default, rename = "@uom")]
        pub uom: Option<UomFrequencyTypeXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValFrequencyBaseTypeXType,
    }
    pub type ValFrictionBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValFrictionTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValFrictionBaseTypeXType,
    }
    pub type ValHexBaseTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValHexTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValHexBaseTypeXType,
    }
    pub type ValLcnBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValLcnTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValLcnBaseTypeXType,
    }
    pub type ValLightIntensityBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValLightIntensityTypeXType {
        #[serde(default, rename = "@uom")]
        pub uom: Option<UomLightIntensityTypeXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValLightIntensityBaseTypeXType,
    }
    pub type ValMagneticVariationBaseTypeXType = f64;
    pub type ValMagneticVariationChangeBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValMagneticVariationChangeTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValMagneticVariationChangeBaseTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValMagneticVariationTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValMagneticVariationBaseTypeXType,
    }
    pub type ValPcnBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValPcnTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValPcnBaseTypeXType,
    }
    pub type ValPercentBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValPercentTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValPercentBaseTypeXType,
    }
    pub type ValPressureBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValPressureTypeXType {
        #[serde(default, rename = "@uom")]
        pub uom: Option<UomPressureTypeXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValPressureBaseTypeXType,
    }
    pub type ValSlopeBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValSlopeTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValSlopeBaseTypeXType,
    }
    pub type ValSpeedBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValSpeedTypeXType {
        #[serde(default, rename = "@uom")]
        pub uom: Option<UomSpeedTypeXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValSpeedBaseTypeXType,
    }
    pub type ValTemperatureBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValTemperatureTypeXType {
        #[serde(default, rename = "@uom")]
        pub uom: Option<UomTemperatureTypeXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValTemperatureBaseTypeXType,
    }
    pub type ValWeightBaseTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValWeightTypeXType {
        #[serde(default, rename = "@uom")]
        pub uom: Option<UomWeightTypeXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "$text")]
        pub content: ValWeightBaseTypeXType,
    }
    pub type VerticalStructureXElement = VerticalStructureTypeXType;
    pub type VerticalStructureLightingStatusXElement = VerticalStructureLightingStatusTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalStructureLightingStatusPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "VerticalStructureLightingStatus")]
        pub vertical_structure_lighting_status: VerticalStructureLightingStatusXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalStructureLightingStatusTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content960")]
        pub content_960: VerticalStructureLightingStatusContent960XType,
        #[serde(rename = "Content961")]
        pub content_961: VerticalStructureLightingStatusContent961XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<VerticalStructureLightingStatusTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for VerticalStructureLightingStatusTypeXType {}
    pub type VerticalStructureLightingStatusTypeExtensionXElement =
        VerticalStructureLightingStatusTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalStructureLightingStatusTypeExtensionXElementType {
        #[serde(
            default = "VerticalStructureLightingStatusTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: VerticalStructureLightingStatusTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum VerticalStructureLightingStatusTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractVerticalStructureLightingStatusExtension")]
        AbstractVerticalStructureLightingStatusExtension(
            AbstractVerticalStructureLightingStatusExtensionXElement,
        ),
    }
    pub type VerticalStructurePartXElement = VerticalStructurePartTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalStructurePartPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "VerticalStructurePart")]
        pub vertical_structure_part: VerticalStructurePartXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalStructurePartTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content966")]
        pub content_966: VerticalStructurePartContent966XType,
        #[serde(rename = "Content967")]
        pub content_967: VerticalStructurePartContent967XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<VerticalStructurePartTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for VerticalStructurePartTypeXType {}
    pub type VerticalStructurePartTypeExtensionXElement =
        VerticalStructurePartTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalStructurePartTypeExtensionXElementType {
        #[serde(
            default = "VerticalStructurePartTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: VerticalStructurePartTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum VerticalStructurePartTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractVerticalStructurePartExtension")]
        AbstractVerticalStructurePartExtension(AbstractVerticalStructurePartExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalStructurePropertyTypeXType {
        #[serde(
            default = "VerticalStructurePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type VerticalStructureTimeSliceXElement = VerticalStructureTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalStructureTimeSlicePropertyTypeXType {
        #[serde(
            default = "VerticalStructureTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "VerticalStructureTimeSlice")]
        pub vertical_structure_time_slice: VerticalStructureTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalStructureTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content956")]
        pub content_956: VerticalStructureTimeSliceContent956XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<VerticalStructureTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for VerticalStructureTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for VerticalStructureTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for VerticalStructureTimeSliceTypeXType {}
    pub type VerticalStructureTimeSliceTypeExtensionXElement =
        VerticalStructureTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalStructureTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "VerticalStructureTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractVerticalStructureExtension")]
        pub abstract_vertical_structure_extension: AbstractVerticalStructureExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalStructureTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<VerticalStructureTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for VerticalStructureTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for VerticalStructureTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for VerticalStructureTypeXType {}
    impl AbstractAixmFeatureXElementTrait for VerticalStructureTypeXType {}
    pub type VisualGlideSlopeIndicatorXElement = VisualGlideSlopeIndicatorTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VisualGlideSlopeIndicatorPropertyTypeXType {
        #[serde(
            default = "VisualGlideSlopeIndicatorPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type VisualGlideSlopeIndicatorTimeSliceXElement =
        VisualGlideSlopeIndicatorTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VisualGlideSlopeIndicatorTimeSlicePropertyTypeXType {
        #[serde(
            default = "VisualGlideSlopeIndicatorTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "VisualGlideSlopeIndicatorTimeSlice")]
        pub visual_glide_slope_indicator_time_slice: VisualGlideSlopeIndicatorTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VisualGlideSlopeIndicatorTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content480")]
        pub content_480: VisualGlideSlopeIndicatorTimeSliceContent480XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<VisualGlideSlopeIndicatorTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for VisualGlideSlopeIndicatorTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for VisualGlideSlopeIndicatorTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for VisualGlideSlopeIndicatorTimeSliceTypeXType {}
    pub type VisualGlideSlopeIndicatorTimeSliceTypeExtensionXElement =
        VisualGlideSlopeIndicatorTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VisualGlideSlopeIndicatorTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "VisualGlideSlopeIndicatorTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: VisualGlideSlopeIndicatorTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum VisualGlideSlopeIndicatorTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractVisualGlideSlopeIndicatorExtension")]
        AbstractVisualGlideSlopeIndicatorExtension(
            AbstractVisualGlideSlopeIndicatorExtensionXElement,
        ),
        #[serde(rename = "AbstractGroundLightSystemExtension")]
        AbstractGroundLightSystemExtension(AbstractGroundLightSystemExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VisualGlideSlopeIndicatorTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<VisualGlideSlopeIndicatorTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for VisualGlideSlopeIndicatorTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for VisualGlideSlopeIndicatorTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for VisualGlideSlopeIndicatorTypeXType {}
    impl AbstractAixmFeatureXElementTrait for VisualGlideSlopeIndicatorTypeXType {}
    impl AbstractGroundLightSystemXElementTrait for VisualGlideSlopeIndicatorTypeXType {}
    pub type VorTimeSliceTypeExtensionXElement = VorTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VorTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "VorTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: VorTimeSliceTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum VorTimeSliceTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractVORExtension")]
        AbstractVorExtension(AbstractVorExtensionXElement),
        #[serde(rename = "AbstractNavaidEquipmentExtension")]
        AbstractNavaidEquipmentExtension(AbstractNavaidEquipmentExtensionXElement),
    }
    pub type WorkAreaXElement = WorkAreaTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct WorkAreaPropertyTypeXType {
        #[serde(default = "WorkAreaPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
    }
    pub type WorkAreaTimeSliceXElement = WorkAreaTimeSliceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct WorkAreaTimeSlicePropertyTypeXType {
        #[serde(
            default = "WorkAreaTimeSlicePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "WorkAreaTimeSlice")]
        pub work_area_time_slice: WorkAreaTimeSliceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct WorkAreaTimeSliceTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
        #[serde(rename = "Content30")]
        pub content_30: AbstractAixmTimeSliceBaseContent30XType,
        #[serde(rename = "interpretation")]
        pub interpretation: InterpretationXElement,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<SequenceNumberXElement>,
        #[serde(default, rename = "correctionNumber")]
        pub correction_number: Option<CorrectionNumberXElement>,
        #[serde(default, rename = "timeSliceMetadata")]
        pub time_slice_metadata: Option<FeatureTimeSliceMetadataPropertyTypeXType>,
        #[serde(default, rename = "featureLifetime")]
        pub feature_lifetime: Option<FeatureLifetimeXElement>,
        #[serde(rename = "Content157")]
        pub content_157: WorkAreaTimeSliceContent157XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<WorkAreaTimeSliceTypeExtensionXElement>,
    }
    impl super::gml::AbstractGmlXElementTrait for WorkAreaTimeSliceTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for WorkAreaTimeSliceTypeXType {}
    impl super::gml::AbstractTimeSliceXElementTrait for WorkAreaTimeSliceTypeXType {}
    pub type WorkAreaTimeSliceTypeExtensionXElement = WorkAreaTimeSliceTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct WorkAreaTimeSliceTypeExtensionXElementType {
        #[serde(
            default = "WorkAreaTimeSliceTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "AbstractWorkAreaExtension")]
        pub abstract_work_area_extension: AbstractWorkAreaExtensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct WorkAreaTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "featureMetadata")]
        pub feature_metadata: Option<FeatureMetadataPropertyTypeXType>,
        #[serde(default, rename = "timeSlice")]
        pub time_slice: Vec<WorkAreaTimeSlicePropertyTypeXType>,
    }
    impl super::gml::AbstractFeatureXElementTrait for WorkAreaTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for WorkAreaTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for WorkAreaTypeXType {}
    impl AbstractAixmFeatureXElementTrait for WorkAreaTypeXType {}
    pub type WorkareaActivityXElement = WorkareaActivityTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct WorkareaActivityPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
        #[serde(rename = "WorkareaActivity")]
        pub workarea_activity: WorkareaActivityXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct WorkareaActivityTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content161")]
        pub content_161: WorkareaActivityContent161XType,
        #[serde(rename = "Content162")]
        pub content_162: WorkareaActivityContent162XType,
        #[serde(default, rename = "extension")]
        pub extension: Vec<WorkareaActivityTypeExtensionXElement>,
    }
    impl AbstractPropertiesWithScheduleXElementTrait for WorkareaActivityTypeXType {}
    pub type WorkareaActivityTypeExtensionXElement = WorkareaActivityTypeExtensionXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct WorkareaActivityTypeExtensionXElementType {
        #[serde(
            default = "WorkareaActivityTypeExtensionXElementType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: WorkareaActivityTypeExtensionXElementTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum WorkareaActivityTypeExtensionXElementTypeContent {
        #[serde(rename = "AbstractPropertiesWithScheduleExtension")]
        AbstractPropertiesWithScheduleExtension(AbstractPropertiesWithScheduleExtensionXElement),
        #[serde(rename = "AbstractWorkareaActivityExtension")]
        AbstractWorkareaActivityExtension(AbstractWorkareaActivityExtensionXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct XhtmlTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonEnumerationXType>,
    }
    pub type CorrectionNumberXElement = CorrectionNumberXElementType;
    pub type CorrectionNumberXElementType = u32;
    pub type FeatureLifetimeXElement = super::gml::TimePrimitivePropertyTypeXType;
    pub type InterpretationXElement = InterpretationXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum InterpretationXElementType {
        #[serde(rename = "BASELINE")]
        Baseline,
        #[serde(rename = "SNAPSHOT")]
        Snapshot,
        #[serde(rename = "TEMPDELTA")]
        Tempdelta,
        #[serde(rename = "PERMDELTA")]
        Permdelta,
    }
    pub type SequenceNumberXElement = SequenceNumberXElementType;
    pub type SequenceNumberXElementType = u32;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAixmFeatureBaseContent9XType {
        #[serde(rename = "Content10")]
        pub content_10: AbstractAixmFeatureBaseContent10XType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAixmFeatureBaseContent11XType {
        #[serde(default, rename = "boundedBy")]
        pub bounded_by: Option<super::gml::BoundedByXElement>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAixmTimeSliceBaseContent30XType {
        #[serde(rename = "validTime")]
        pub valid_time: super::gml::ValidTimeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AerialRefuellingAnchorContent42XType {
        #[serde(default, rename = "outboundCourse")]
        pub outbound_course: Option<ValBearingTypeXType>,
        #[serde(default, rename = "outboundCourseType")]
        pub outbound_course_type: Option<CodeCourseTypeXType>,
        #[serde(default, rename = "inboundCourse")]
        pub inbound_course: Option<ValBearingTypeXType>,
        #[serde(default, rename = "turnDirection")]
        pub turn_direction: Option<CodeDirectionTurnTypeXType>,
        #[serde(default, rename = "speedLimit")]
        pub speed_limit: Option<ValSpeedTypeXType>,
        #[serde(default, rename = "legSeparation")]
        pub leg_separation: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "legLength")]
        pub leg_length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "refuellingBaseLevel")]
        pub refuelling_base_level: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "refuellingBaseLevelReference")]
        pub refuelling_base_level_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<SurfacePropertyTypeXType>,
        #[serde(default, rename = "verticalExtent")]
        pub vertical_extent: Vec<AirspaceLayerPropertyTypeXType>,
        #[serde(default, rename = "point")]
        pub point: Vec<AerialRefuellingPointPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AerialRefuellingPointContent49XType {
        #[serde(default, rename = "reportingATC")]
        pub reporting_atc: Option<CodeAtcReportingTypeXType>,
        #[serde(default, rename = "flyOver")]
        pub fly_over: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "waypoint")]
        pub waypoint: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "radarGuidance")]
        pub radar_guidance: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "facilityMakeup")]
        pub facility_makeup: Vec<PointReferencePropertyTypeXType>,
        #[serde(rename = "Content50")]
        pub content_50: AerialRefuellingPointContent50XType,
        #[serde(default, rename = "extendedServiceVolume")]
        pub extended_service_volume: Option<RadioFrequencyAreaPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AerialRefuellingPointContent51XType {
        #[serde(default, rename = "sequence")]
        pub sequence: Option<NoSequenceTypeXType>,
        #[serde(default, rename = "usageType")]
        pub usage_type: Option<CodeAerialRefuellingPointTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AerialRefuellingTimeSliceContent35XType {
        #[serde(default, rename = "designatorPrefix")]
        pub designator_prefix: Option<CodeAerialRefuellingPrefixTypeXType>,
        #[serde(default, rename = "designatorNumber")]
        pub designator_number: Option<NoNumberTypeXType>,
        #[serde(default, rename = "designatorSuffix")]
        pub designator_suffix: Option<TextDesignatorTypeXType>,
        #[serde(default, rename = "designatorDirection")]
        pub designator_direction: Option<CodeCardinalDirectionTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeAerialRefuellingTypeXType>,
        #[serde(default, rename = "radarBeaconSetting")]
        pub radar_beacon_setting: Option<NoNumberTypeXType>,
        #[serde(default, rename = "xbandRadarSetting")]
        pub xband_radar_setting: Option<NoNumberTypeXType>,
        #[serde(default, rename = "tankerChannel")]
        pub tanker_channel: Option<CodeTacanChannelTypeXType>,
        #[serde(default, rename = "receiverChannel")]
        pub receiver_channel: Option<CodeTacanChannelTypeXType>,
        #[serde(default, rename = "helicopterRoute")]
        pub helicopter_route: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "specialRefuelling")]
        pub special_refuelling: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "bidirectionalUse")]
        pub bidirectional_use: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "reverseDirectionTurn")]
        pub reverse_direction_turn: Option<CodeDirectionTurnTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<RouteAvailabilityPropertyTypeXType>,
        #[serde(default, rename = "protectingAirspace")]
        pub protecting_airspace: Vec<AirspacePropertyTypeXType>,
        #[serde(default, rename = "track")]
        pub track: Vec<AerialRefuellingTrackPropertyTypeXType>,
        #[serde(default, rename = "anchor")]
        pub anchor: Vec<AerialRefuellingAnchorPropertyTypeXType>,
        #[serde(default, rename = "oppositeTrack")]
        pub opposite_track: Option<AerialRefuellingPropertyTypeXType>,
        #[serde(default, rename = "managingOrganisation")]
        pub managing_organisation: Vec<AuthorityForAerialRefuellingPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AerialRefuellingTrackContent56XType {
        #[serde(default, rename = "extent")]
        pub extent: Option<CurvePropertyTypeXType>,
        #[serde(default, rename = "point")]
        pub point: Vec<AerialRefuellingPointPropertyTypeXType>,
        #[serde(default, rename = "verticalExtent")]
        pub vertical_extent: Vec<AirspaceLayerPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AeronauticalGroundLightTimeSliceContent931XType {
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeGroundLightingTypeXType>,
        #[serde(default, rename = "colour")]
        pub colour: Option<CodeColourTypeXType>,
        #[serde(default, rename = "flashing")]
        pub flashing: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "structureBeacon")]
        pub structure_beacon: Option<VerticalStructurePropertyTypeXType>,
        #[serde(default, rename = "aerodromeBeacon")]
        pub aerodrome_beacon: Option<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirTrafficControlServiceTimeSliceContent1397XType {
        #[serde(default, rename = "Content1398")]
        pub content_1398: Option<AirTrafficControlServiceTimeSliceContent1398XType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeServiceAtcTypeXType>,
        #[serde(default, rename = "clientAirport")]
        pub client_airport: Vec<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "clientAirspace")]
        pub client_airspace: Vec<AirspacePropertyTypeXType>,
        #[serde(default, rename = "clientRoute")]
        pub client_route: Vec<RoutePortionPropertyTypeXType>,
        #[serde(default, rename = "clientProcedure")]
        pub client_procedure: Vec<ProcedurePropertyTypeXType>,
        #[serde(default, rename = "clientHolding")]
        pub client_holding: Vec<HoldingPatternPropertyTypeXType>,
        #[serde(default, rename = "clientAerialRefuelling")]
        pub client_aerial_refuelling: Vec<AerialRefuellingPropertyTypeXType>,
        #[serde(default, rename = "aircraftLocator")]
        pub aircraft_locator: Option<DirectionFinderPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirTrafficManagementServiceTimeSliceContent1406XType {
        #[serde(default, rename = "Content1407")]
        pub content_1407: Option<AirTrafficManagementServiceTimeSliceContent1407XType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeServiceAtfmTypeXType>,
        #[serde(default, rename = "clientAirspace")]
        pub client_airspace: Vec<AirspacePropertyTypeXType>,
        #[serde(default, rename = "clientAerialRefuelling")]
        pub client_aerial_refuelling: Vec<AerialRefuellingPropertyTypeXType>,
        #[serde(default, rename = "clientRoute")]
        pub client_route: Vec<RoutePortionPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftCharacteristicContent1528XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeAircraftTypeXType>,
        #[serde(default, rename = "engine")]
        pub engine: Option<CodeAircraftEngineTypeXType>,
        #[serde(default, rename = "numberEngine")]
        pub number_engine: Option<CodeAircraftEngineNumberTypeXType>,
        #[serde(default, rename = "typeAircraftICAO")]
        pub type_aircraft_icao: Option<CodeAircraftIcaoTypeXType>,
        #[serde(default, rename = "aircraftLandingCategory")]
        pub aircraft_landing_category: Option<CodeAircraftCategoryTypeXType>,
        #[serde(default, rename = "wingSpan")]
        pub wing_span: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "wingSpanInterpretation")]
        pub wing_span_interpretation: Option<CodeValueInterpretationTypeXType>,
        #[serde(default, rename = "classWingSpan")]
        pub class_wing_span: Option<CodeAircraftWingspanClassTypeXType>,
        #[serde(default, rename = "weight")]
        pub weight: Option<ValWeightTypeXType>,
        #[serde(default, rename = "weightInterpretation")]
        pub weight_interpretation: Option<CodeValueInterpretationTypeXType>,
        #[serde(default, rename = "passengers")]
        pub passengers: Option<NoNumberTypeXType>,
        #[serde(default, rename = "passengersInterpretation")]
        pub passengers_interpretation: Option<CodeValueInterpretationTypeXType>,
        #[serde(default, rename = "speed")]
        pub speed: Option<ValSpeedTypeXType>,
        #[serde(default, rename = "speedInterpretation")]
        pub speed_interpretation: Option<CodeValueInterpretationTypeXType>,
        #[serde(default, rename = "wakeTurbulence")]
        pub wake_turbulence: Option<CodeWakeTurbulenceTypeXType>,
        #[serde(default, rename = "navigationEquipment")]
        pub navigation_equipment: Option<CodeNavigationEquipmentTypeXType>,
        #[serde(default, rename = "navigationSpecification")]
        pub navigation_specification: Option<CodeNavigationSpecificationTypeXType>,
        #[serde(default, rename = "verticalSeparationCapability")]
        pub vertical_separation_capability: Option<CodeRvsmTypeXType>,
        #[serde(default, rename = "antiCollisionAndSeparationEquipment")]
        pub anti_collision_and_separation_equipment: Option<CodeEquipmentAntiCollisionTypeXType>,
        #[serde(default, rename = "communicationEquipment")]
        pub communication_equipment: Option<CodeCommunicationModeTypeXType>,
        #[serde(default, rename = "surveillanceEquipment")]
        pub surveillance_equipment: Option<CodeTransponderTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftGroundServiceTimeSliceContent1369XType {
        #[serde(default, rename = "Content1370")]
        pub content_1370: Option<AircraftGroundServiceTimeSliceContent1370XType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeAircraftGroundServiceTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftStandContaminationContent515XType {
        #[serde(default, rename = "observationTime")]
        pub observation_time: Option<DateTimeTypeXType>,
        #[serde(default, rename = "depth")]
        pub depth: Option<ValDepthTypeXType>,
        #[serde(default, rename = "frictionCoefficient")]
        pub friction_coefficient: Option<ValFrictionTypeXType>,
        #[serde(default, rename = "frictionEstimation")]
        pub friction_estimation: Option<CodeFrictionEstimateTypeXType>,
        #[serde(default, rename = "frictionDevice")]
        pub friction_device: Option<CodeFrictionDeviceTypeXType>,
        #[serde(default, rename = "obscuredLights")]
        pub obscured_lights: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "furtherClearanceTime")]
        pub further_clearance_time: Option<TimeTypeXType>,
        #[serde(default, rename = "furtherTotalClearance")]
        pub further_total_clearance: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "nextObservationTime")]
        pub next_observation_time: Option<DateTimeTypeXType>,
        #[serde(default, rename = "proportion")]
        pub proportion: Option<ValPercentTypeXType>,
        #[serde(default, rename = "criticalRidge")]
        pub critical_ridge: Vec<RidgePropertyTypeXType>,
        #[serde(default, rename = "layer")]
        pub layer: Vec<SurfaceContaminationLayerPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftStandTimeSliceContent170XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<TextDesignatorTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeAircraftStandTypeXType>,
        #[serde(default, rename = "visualDockingSystem")]
        pub visual_docking_system: Option<CodeVisualDockingGuidanceTypeXType>,
        #[serde(default, rename = "surfaceProperties")]
        pub surface_properties: Option<SurfaceCharacteristicsPropertyTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "apronLocation")]
        pub apron_location: Option<ApronElementPropertyTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<ElevatedSurfacePropertyTypeXType>,
        #[serde(default, rename = "contaminant")]
        pub contaminant: Vec<AircraftStandContaminationPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ApronAreaAvailabilityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportClearanceServiceTimeSliceContent1378XType {
        #[serde(default, rename = "Content1379")]
        pub content_1379: Option<AirportClearanceServiceTimeSliceContent1379XType>,
        #[serde(default, rename = "snowPlan")]
        pub snow_plan: Option<TextInstructionTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportAvailabilityContent75XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportAvailabilityContent76XType {
        #[serde(default, rename = "operationalStatus")]
        pub operational_status: Option<CodeStatusAirportTypeXType>,
        #[serde(default, rename = "warning")]
        pub warning: Option<CodeAirportWarningTypeXType>,
        #[serde(default, rename = "usage")]
        pub usage: Vec<AirportHeliportUsagePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportCollocationTimeSliceContent84XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeAirportHeliportCollocationTypeXType>,
        #[serde(default, rename = "hostAirport")]
        pub host_airport: Option<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "dependentAirport")]
        pub dependent_airport: Option<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportContaminationContent521XType {
        #[serde(default, rename = "observationTime")]
        pub observation_time: Option<DateTimeTypeXType>,
        #[serde(default, rename = "depth")]
        pub depth: Option<ValDepthTypeXType>,
        #[serde(default, rename = "frictionCoefficient")]
        pub friction_coefficient: Option<ValFrictionTypeXType>,
        #[serde(default, rename = "frictionEstimation")]
        pub friction_estimation: Option<CodeFrictionEstimateTypeXType>,
        #[serde(default, rename = "frictionDevice")]
        pub friction_device: Option<CodeFrictionDeviceTypeXType>,
        #[serde(default, rename = "obscuredLights")]
        pub obscured_lights: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "furtherClearanceTime")]
        pub further_clearance_time: Option<TimeTypeXType>,
        #[serde(default, rename = "furtherTotalClearance")]
        pub further_total_clearance: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "nextObservationTime")]
        pub next_observation_time: Option<DateTimeTypeXType>,
        #[serde(default, rename = "proportion")]
        pub proportion: Option<ValPercentTypeXType>,
        #[serde(default, rename = "criticalRidge")]
        pub critical_ridge: Vec<RidgePropertyTypeXType>,
        #[serde(default, rename = "layer")]
        pub layer: Vec<SurfaceContaminationLayerPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportResponsibilityOrganisationContent89XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportResponsibilityOrganisationContent90XType {
        #[serde(default, rename = "role")]
        pub role: Option<CodeAuthorityRoleTypeXType>,
        #[serde(default, rename = "theOrganisationAuthority")]
        pub the_organisation_authority: Option<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportTimeSliceContent69XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeAirportHeliportDesignatorTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "locationIndicatorICAO")]
        pub location_indicator_icao: Option<CodeIcaoTypeXType>,
        #[serde(default, rename = "designatorIATA")]
        pub designator_iata: Option<CodeIataTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeAirportHeliportTypeXType>,
        #[serde(default, rename = "certifiedICAO")]
        pub certified_icao: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "privateUse")]
        pub private_use: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "controlType")]
        pub control_type: Option<CodeMilitaryOperationsTypeXType>,
        #[serde(default, rename = "fieldElevation")]
        pub field_elevation: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "fieldElevationAccuracy")]
        pub field_elevation_accuracy: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "verticalDatum")]
        pub vertical_datum: Option<CodeVerticalDatumTypeXType>,
        #[serde(default, rename = "magneticVariation")]
        pub magnetic_variation: Option<ValMagneticVariationTypeXType>,
        #[serde(default, rename = "magneticVariationAccuracy")]
        pub magnetic_variation_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "dateMagneticVariation")]
        pub date_magnetic_variation: Option<DateYearTypeXType>,
        #[serde(default, rename = "magneticVariationChange")]
        pub magnetic_variation_change: Option<ValMagneticVariationChangeTypeXType>,
        #[serde(default, rename = "referenceTemperature")]
        pub reference_temperature: Option<ValTemperatureTypeXType>,
        #[serde(default, rename = "altimeterCheckLocation")]
        pub altimeter_check_location: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "secondaryPowerSupply")]
        pub secondary_power_supply: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "windDirectionIndicator")]
        pub wind_direction_indicator: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "landingDirectionIndicator")]
        pub landing_direction_indicator: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "transitionAltitude")]
        pub transition_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "transitionLevel")]
        pub transition_level: Option<ValFlTypeXType>,
        #[serde(default, rename = "lowestTemperature")]
        pub lowest_temperature: Option<ValTemperatureTypeXType>,
        #[serde(default, rename = "abandoned")]
        pub abandoned: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "certificationDate")]
        pub certification_date: Option<DateTypeXType>,
        #[serde(default, rename = "certificationExpirationDate")]
        pub certification_expiration_date: Option<DateTypeXType>,
        #[serde(default, rename = "contaminant")]
        pub contaminant: Vec<AirportHeliportContaminationPropertyTypeXType>,
        #[serde(default, rename = "servedCity")]
        pub served_city: Vec<CityPropertyTypeXType>,
        #[serde(default, rename = "responsibleOrganisation")]
        pub responsible_organisation:
            Option<AirportHeliportResponsibilityOrganisationPropertyTypeXType>,
        #[serde(default, rename = "ARP")]
        pub arp: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "aviationBoundary")]
        pub aviation_boundary: Option<ElevatedSurfacePropertyTypeXType>,
        #[serde(default, rename = "altimeterSource")]
        pub altimeter_source: Vec<AltimeterSourcePropertyTypeXType>,
        #[serde(default, rename = "contact")]
        pub contact: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<AirportHeliportAvailabilityPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportUsageContent97XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeUsageLimitationTypeXType>,
        #[serde(default, rename = "priorPermission")]
        pub prior_permission: Option<ValDurationTypeXType>,
        #[serde(default, rename = "contact")]
        pub contact: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "selection")]
        pub selection: Option<ConditionCombinationPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHeliportUsageContent98XType {
        #[serde(default, rename = "operation")]
        pub operation: Option<CodeOperationAirportHeliportTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportHotSpotTimeSliceContent106XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<TextDesignatorTypeXType>,
        #[serde(default, rename = "instruction")]
        pub instruction: Option<TextInstructionTypeXType>,
        #[serde(default, rename = "area")]
        pub area: Option<ElevatedSurfacePropertyTypeXType>,
        #[serde(default, rename = "affectedAirport")]
        pub affected_airport: Option<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportProtectionAreaMarkingTimeSliceContent316XType {
        #[serde(default, rename = "Content317")]
        pub content_317: Option<AirportProtectionAreaMarkingTimeSliceContent317XType>,
        #[serde(default, rename = "markingLocation")]
        pub marking_location: Option<CodeProtectAreaSectionTypeXType>,
        #[serde(default, rename = "markedProtectionArea")]
        pub marked_protection_area: Option<AirportHeliportProtectionAreaPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportSuppliesServiceTimeSliceContent1387XType {
        #[serde(default, rename = "Content1388")]
        pub content_1388: Option<AirportSuppliesServiceTimeSliceContent1388XType>,
        #[serde(default, rename = "fuelSupply")]
        pub fuel_supply: Vec<FuelPropertyTypeXType>,
        #[serde(default, rename = "oilSupply")]
        pub oil_supply: Vec<OilPropertyTypeXType>,
        #[serde(default, rename = "nitrogenSupply")]
        pub nitrogen_supply: Vec<NitrogenPropertyTypeXType>,
        #[serde(default, rename = "oxygenSupply")]
        pub oxygen_supply: Vec<OxygenPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceActivationContent603XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceActivationContent604XType {
        #[serde(default, rename = "activity")]
        pub activity: Option<CodeAirspaceActivityTypeXType>,
        #[serde(default, rename = "status")]
        pub status: Option<CodeStatusAirspaceTypeXType>,
        #[serde(default, rename = "levels")]
        pub levels: Vec<AirspaceLayerPropertyTypeXType>,
        #[serde(default, rename = "user")]
        pub user: Vec<OrganisationAuthorityPropertyTypeXType>,
        #[serde(default, rename = "aircraft")]
        pub aircraft: Vec<AircraftCharacteristicPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceBorderCrossingTimeSliceContent1294XType {
        #[serde(default, rename = "exitedAirspace")]
        pub exited_airspace: Option<AirspacePropertyTypeXType>,
        #[serde(default, rename = "enteredAirspace")]
        pub entered_airspace: Option<AirspacePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceGeometryComponentContent609XType {
        #[serde(default, rename = "operation")]
        pub operation: Option<CodeAirspaceAggregationTypeXType>,
        #[serde(default, rename = "operationSequence")]
        pub operation_sequence: Option<NoSequenceTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "theAirspaceVolume")]
        pub the_airspace_volume: Option<AirspaceVolumePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceLayerClassContent614XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceLayerClassContent615XType {
        #[serde(default, rename = "classification")]
        pub classification: Option<CodeAirspaceClassificationTypeXType>,
        #[serde(default, rename = "associatedLevels")]
        pub associated_levels: Vec<AirspaceLayerPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceLayerContent1538XType {
        #[serde(default, rename = "upperLimit")]
        pub upper_limit: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "upperLimitReference")]
        pub upper_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "lowerLimit")]
        pub lower_limit: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "lowerLimitReference")]
        pub lower_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "altitudeInterpretation")]
        pub altitude_interpretation: Option<CodeAltitudeUseTypeXType>,
        #[serde(default, rename = "discreteLevelSeries")]
        pub discrete_level_series: Option<StandardLevelColumnPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceTimeSliceContent599XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeAirspaceTypeXType>,
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeAirspaceDesignatorTypeXType>,
        #[serde(default, rename = "localType")]
        pub local_type: Option<TextNameTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "designatorICAO")]
        pub designator_icao: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "controlType")]
        pub control_type: Option<CodeMilitaryOperationsTypeXType>,
        #[serde(default, rename = "upperLowerSeparation")]
        pub upper_lower_separation: Option<ValFlTypeXType>,
        #[serde(default, rename = "class")]
        pub class: Vec<AirspaceLayerClassPropertyTypeXType>,
        #[serde(default, rename = "protectedRoute")]
        pub protected_route: Option<RoutePropertyTypeXType>,
        #[serde(default, rename = "geometryComponent")]
        pub geometry_component: Vec<AirspaceGeometryComponentPropertyTypeXType>,
        #[serde(default, rename = "activation")]
        pub activation: Vec<AirspaceActivationPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceVolumeDependencyContent625XType {
        #[serde(default, rename = "dependency")]
        pub dependency: Option<CodeAirspaceDependencyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "theAirspace")]
        pub the_airspace: Option<AirspacePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirspaceVolumeContent620XType {
        #[serde(default, rename = "upperLimit")]
        pub upper_limit: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "upperLimitReference")]
        pub upper_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "maximumLimit")]
        pub maximum_limit: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "maximumLimitReference")]
        pub maximum_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "lowerLimit")]
        pub lower_limit: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "lowerLimitReference")]
        pub lower_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "minimumLimit")]
        pub minimum_limit: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "minimumLimitReference")]
        pub minimum_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "width")]
        pub width: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "horizontalProjection")]
        pub horizontal_projection: Option<SurfacePropertyTypeXType>,
        #[serde(default, rename = "centreline")]
        pub centreline: Option<CurvePropertyTypeXType>,
        #[serde(default, rename = "contributorAirspace")]
        pub contributor_airspace: Option<AirspaceVolumeDependencyPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AltimeterSourceStatusContent117XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AltimeterSourceStatusContent118XType {
        #[serde(default, rename = "operationalStatus")]
        pub operational_status: Option<CodeStatusOperationsTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AltimeterSourceTimeSliceContent113XType {
        #[serde(default, rename = "isRemote")]
        pub is_remote: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "isPrimary")]
        pub is_primary: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<AltimeterSourceStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AltitudeAdjustmentContent1611XType {
        #[serde(default, rename = "altitudeAdjustmentType")]
        pub altitude_adjustment_type: Option<CodeAltitudeAdjustmentTypeXType>,
        #[serde(default, rename = "primaryAlternateMinimum")]
        pub primary_alternate_minimum: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "altitudeAdjustment")]
        pub altitude_adjustment: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "localRemoteCode")]
        pub local_remote_code: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AngleIndicationTimeSliceContent875XType {
        #[serde(default, rename = "angle")]
        pub angle: Option<ValBearingTypeXType>,
        #[serde(default, rename = "angleType")]
        pub angle_type: Option<CodeBearingTypeXType>,
        #[serde(default, rename = "indicationDirection")]
        pub indication_direction: Option<CodeDirectionReferenceTypeXType>,
        #[serde(default, rename = "trueAngle")]
        pub true_angle: Option<ValBearingTypeXType>,
        #[serde(default, rename = "cardinalDirection")]
        pub cardinal_direction: Option<CodeCardinalDirectionTypeXType>,
        #[serde(default, rename = "minimumReceptionAltitude")]
        pub minimum_reception_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "fix")]
        pub fix: Option<DesignatedPointPropertyTypeXType>,
        #[serde(rename = "Content876")]
        pub content_876: AngleIndicationTimeSliceContent876XType,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AngleUseContent880XType {
        #[serde(default, rename = "alongCourseGuidance")]
        pub along_course_guidance: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "theAngleIndication")]
        pub the_angle_indication: Option<AngleIndicationPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachAltitudeTableContent1003XType {
        #[serde(default, rename = "measurementPoint")]
        pub measurement_point: Option<CodeProcedureDistanceTypeXType>,
        #[serde(default, rename = "altitude")]
        pub altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "altitudeReference")]
        pub altitude_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachConditionContent1008XType {
        #[serde(default, rename = "finalApproachPath")]
        pub final_approach_path: Option<CodeMinimaFinalApproachPathTypeXType>,
        #[serde(default, rename = "requiredNavigationPerformance")]
        pub required_navigation_performance: Option<CodeRnpTypeXType>,
        #[serde(default, rename = "climbGradient")]
        pub climb_gradient: Option<ValSlopeTypeXType>,
        #[serde(default, rename = "minimumSet")]
        pub minimum_set: Option<MinimaPropertyTypeXType>,
        #[serde(default, rename = "circlingRestriction")]
        pub circling_restriction: Vec<CirclingRestrictionPropertyTypeXType>,
        #[serde(default, rename = "aircraftCategory")]
        pub aircraft_category: Vec<AircraftCharacteristicPropertyTypeXType>,
        #[serde(default, rename = "landingArea")]
        pub landing_area: Vec<LandingTakeoffAreaCollectionPropertyTypeXType>,
        #[serde(default, rename = "altimeter")]
        pub altimeter: Option<AltimeterSourcePropertyTypeXType>,
        #[serde(default, rename = "designSurface")]
        pub design_surface: Vec<ObstacleAssessmentAreaPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachDistanceTableContent1013XType {
        #[serde(default, rename = "startingMeasurementPoint")]
        pub starting_measurement_point: Option<CodeProcedureDistanceTypeXType>,
        #[serde(default, rename = "valueHAT")]
        pub value_hat: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "endingMeasurementPoint")]
        pub ending_measurement_point: Option<CodeProcedureDistanceTypeXType>,
        #[serde(default, rename = "distance")]
        pub distance: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachLightingSystemTimeSliceContent240XType {
        #[serde(default, rename = "Content241")]
        pub content_241: Option<ApproachLightingSystemTimeSliceContent241XType>,
        #[serde(default, rename = "classICAO")]
        pub class_icao: Option<CodeApproachLightingIcaoTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeApproachLightingTypeXType>,
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "sequencedFlashing")]
        pub sequenced_flashing: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "alignmentIndicator")]
        pub alignment_indicator: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "servedRunwayDirection")]
        pub served_runway_direction: Option<RunwayDirectionPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachTimingTableContent1018XType {
        #[serde(default, rename = "startingMeasurementPoint")]
        pub starting_measurement_point: Option<CodeProcedureDistanceTypeXType>,
        #[serde(default, rename = "endingMeasurementPoint")]
        pub ending_measurement_point: Option<CodeProcedureDistanceTypeXType>,
        #[serde(default, rename = "time")]
        pub time: Option<ValDurationTypeXType>,
        #[serde(default, rename = "speed")]
        pub speed: Option<ValSpeedTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronAreaAvailabilityContent181XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronAreaAvailabilityContent182XType {
        #[serde(default, rename = "operationalStatus")]
        pub operational_status: Option<CodeStatusAirportTypeXType>,
        #[serde(default, rename = "warning")]
        pub warning: Option<CodeAirportWarningTypeXType>,
        #[serde(default, rename = "usage")]
        pub usage: Vec<ApronAreaUsagePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronAreaUsageContent187XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeUsageLimitationTypeXType>,
        #[serde(default, rename = "priorPermission")]
        pub prior_permission: Option<ValDurationTypeXType>,
        #[serde(default, rename = "contact")]
        pub contact: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "selection")]
        pub selection: Option<ConditionCombinationPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronContaminationContent527XType {
        #[serde(default, rename = "observationTime")]
        pub observation_time: Option<DateTimeTypeXType>,
        #[serde(default, rename = "depth")]
        pub depth: Option<ValDepthTypeXType>,
        #[serde(default, rename = "frictionCoefficient")]
        pub friction_coefficient: Option<ValFrictionTypeXType>,
        #[serde(default, rename = "frictionEstimation")]
        pub friction_estimation: Option<CodeFrictionEstimateTypeXType>,
        #[serde(default, rename = "frictionDevice")]
        pub friction_device: Option<CodeFrictionDeviceTypeXType>,
        #[serde(default, rename = "obscuredLights")]
        pub obscured_lights: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "furtherClearanceTime")]
        pub further_clearance_time: Option<TimeTypeXType>,
        #[serde(default, rename = "furtherTotalClearance")]
        pub further_total_clearance: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "nextObservationTime")]
        pub next_observation_time: Option<DateTimeTypeXType>,
        #[serde(default, rename = "proportion")]
        pub proportion: Option<ValPercentTypeXType>,
        #[serde(default, rename = "criticalRidge")]
        pub critical_ridge: Vec<RidgePropertyTypeXType>,
        #[serde(default, rename = "layer")]
        pub layer: Vec<SurfaceContaminationLayerPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronElementTimeSliceContent196XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeApronElementTypeXType>,
        #[serde(default, rename = "jetwayAvailability")]
        pub jetway_availability: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "towingAvailability")]
        pub towing_availability: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "dockingAvailability")]
        pub docking_availability: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "groundPowerAvailability")]
        pub ground_power_availability: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "width")]
        pub width: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "associatedApron")]
        pub associated_apron: Option<ApronPropertyTypeXType>,
        #[serde(default, rename = "surfaceProperties")]
        pub surface_properties: Option<SurfaceCharacteristicsPropertyTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<ElevatedSurfacePropertyTypeXType>,
        #[serde(default, rename = "supplyService")]
        pub supply_service: Vec<AirportSuppliesServicePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ApronAreaAvailabilityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronLightSystemTimeSliceContent248XType {
        #[serde(default, rename = "Content249")]
        pub content_249: Option<ApronLightSystemTimeSliceContent249XType>,
        #[serde(default, rename = "position")]
        pub position: Option<CodeApronSectionTypeXType>,
        #[serde(default, rename = "lightedApron")]
        pub lighted_apron: Option<ApronPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronMarkingTimeSliceContent324XType {
        #[serde(default, rename = "Content325")]
        pub content_325: Option<ApronMarkingTimeSliceContent325XType>,
        #[serde(default, rename = "markingLocation")]
        pub marking_location: Option<CodeApronSectionTypeXType>,
        #[serde(default, rename = "markedApron")]
        pub marked_apron: Option<ApronPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronTimeSliceContent177XType {
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "abandoned")]
        pub abandoned: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "surfaceProperties")]
        pub surface_properties: Option<SurfaceCharacteristicsPropertyTypeXType>,
        #[serde(default, rename = "associatedAirportHeliport")]
        pub associated_airport_heliport: Option<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "contaminant")]
        pub contaminant: Vec<ApronContaminationPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ApronAreaAvailabilityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrestingGearTimeSliceContent394XType {
        #[serde(default, rename = "status")]
        pub status: Option<CodeStatusOperationsTypeXType>,
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "width")]
        pub width: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "engageDevice")]
        pub engage_device: Option<CodeArrestingGearEngageDeviceTypeXType>,
        #[serde(default, rename = "absorbType")]
        pub absorb_type: Option<CodeArrestingGearEnergyAbsorbTypeXType>,
        #[serde(default, rename = "bidirectional")]
        pub bidirectional: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "runwayDirection")]
        pub runway_direction: Vec<RunwayDirectionPropertyTypeXType>,
        #[serde(default, rename = "surfaceProperties")]
        pub surface_properties: Option<SurfaceCharacteristicsPropertyTypeXType>,
        #[serde(rename = "Content395")]
        pub content_395: ArrestingGearTimeSliceContent395XType,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrivalFeederLegTimeSliceContent1149XType {
        #[serde(default, rename = "Content1150")]
        pub content_1150: Option<ArrivalFeederLegTimeSliceContent1150XType>,
        #[serde(default, rename = "requiredNavigationPerformance")]
        pub required_navigation_performance: Option<CodeRnpTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrivalLegTimeSliceContent1158XType {
        #[serde(default, rename = "Content1159")]
        pub content_1159: Option<ArrivalLegTimeSliceContent1159XType>,
        #[serde(default, rename = "requiredNavigationPerformance")]
        pub required_navigation_performance: Option<CodeRnpTypeXType>,
        #[serde(default, rename = "arrival")]
        pub arrival: Option<StandardInstrumentArrivalPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForAerialRefuellingContent61XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeAuthorityTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "theOrganisationAuthority")]
        pub the_organisation_authority: Option<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForAirspaceTimeSliceContent633XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeAuthorityTypeXType>,
        #[serde(default, rename = "responsibleOrganisation")]
        pub responsible_organisation: Option<OrganisationAuthorityPropertyTypeXType>,
        #[serde(default, rename = "assignedAirspace")]
        pub assigned_airspace: Option<AirspacePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForNavaidEquipmentContent707XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeAuthorityRoleTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "theOrganisationAuthority")]
        pub the_organisation_authority: Option<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForSpecialNavigationStationContent712XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeAuthorityRoleTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "theOrganisationAuthority")]
        pub the_organisation_authority: Option<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AuthorityForSpecialNavigationSystemContent717XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeAuthorityRoleTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "theOrganisationAuthority")]
        pub the_organisation_authority: Option<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AzimuthTimeSliceContent726XType {
        #[serde(default, rename = "Content727")]
        pub content_727: Option<AzimuthTimeSliceContent727XType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeMlsAzimuthTypeXType>,
        #[serde(default, rename = "trueBearing")]
        pub true_bearing: Option<ValBearingTypeXType>,
        #[serde(default, rename = "trueBearingAccuracy")]
        pub true_bearing_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "magneticBearing")]
        pub magnetic_bearing: Option<ValBearingTypeXType>,
        #[serde(default, rename = "angleProportionalLeft")]
        pub angle_proportional_left: Option<ValAngleTypeXType>,
        #[serde(default, rename = "angleProportionalRight")]
        pub angle_proportional_right: Option<ValAngleTypeXType>,
        #[serde(default, rename = "angleCoverLeft")]
        pub angle_cover_left: Option<ValAngleTypeXType>,
        #[serde(default, rename = "angleCoverRight")]
        pub angle_cover_right: Option<ValAngleTypeXType>,
        #[serde(default, rename = "channel")]
        pub channel: Option<CodeMlsChannelTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CallsignDetailContent1411XType {
        #[serde(default, rename = "callSign")]
        pub call_sign: Option<TextNameTypeXType>,
        #[serde(default, rename = "language")]
        pub language: Option<CodeLanguageTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ChangeOverPointTimeSliceContent1251XType {
        #[serde(default, rename = "distance")]
        pub distance: Option<ValDistanceTypeXType>,
        #[serde(rename = "Content1252")]
        pub content_1252: ChangeOverPointTimeSliceContent1252XType,
        #[serde(default, rename = "applicableRoutePortion")]
        pub applicable_route_portion: Option<RoutePortionPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CheckpointInsTimeSliceContent735XType {
        #[serde(default, rename = "Content736")]
        pub content_736: Option<CheckpointInsTimeSliceContent736XType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CheckpointVorTimeSliceContent743XType {
        #[serde(default, rename = "Content744")]
        pub content_744: Option<CheckpointVorTimeSliceContent744XType>,
        #[serde(default, rename = "checkPointFacility")]
        pub check_point_facility: Option<VorPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CircleSectorContent1543XType {
        #[serde(default, rename = "arcDirection")]
        pub arc_direction: Option<CodeArcDirectionTypeXType>,
        #[serde(default, rename = "fromAngle")]
        pub from_angle: Option<ValBearingTypeXType>,
        #[serde(default, rename = "toAngle")]
        pub to_angle: Option<ValBearingTypeXType>,
        #[serde(default, rename = "angleType")]
        pub angle_type: Option<CodeBearingTypeXType>,
        #[serde(default, rename = "angleDirectionReference")]
        pub angle_direction_reference: Option<CodeDirectionReferenceTypeXType>,
        #[serde(default, rename = "innerDistance")]
        pub inner_distance: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "outerDistance")]
        pub outer_distance: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "upperLimit")]
        pub upper_limit: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "upperLimitReference")]
        pub upper_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "lowerLimit")]
        pub lower_limit: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "lowerLimitReference")]
        pub lower_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CirclingAreaTimeSliceContent1065XType {
        #[serde(default, rename = "extent")]
        pub extent: Option<SurfacePropertyTypeXType>,
        #[serde(default, rename = "approach")]
        pub approach: Option<InstrumentApproachProcedurePropertyTypeXType>,
        #[serde(default, rename = "condition")]
        pub condition: Vec<ApproachConditionPropertyTypeXType>,
        #[serde(default, rename = "aircraftCategory")]
        pub aircraft_category: Option<AircraftCharacteristicPropertyTypeXType>,
        #[serde(default, rename = "designSurface")]
        pub design_surface: Vec<ObstacleAssessmentAreaPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CirclingRestrictionContent1069XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CirclingRestrictionContent1070XType {
        #[serde(default, rename = "sectorDescription")]
        pub sector_description: Option<CircleSectorPropertyTypeXType>,
        #[serde(default, rename = "restrictionArea")]
        pub restriction_area: Option<SurfacePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CityContent123XType {
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ConditionCombinationContent128XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ConditionCombinationContent129XType {
        #[serde(default, rename = "logicalOperator")]
        pub logical_operator: Option<CodeLogicalOperatorTypeXType>,
        #[serde(default, rename = "weather")]
        pub weather: Vec<MeteorologyPropertyTypeXType>,
        #[serde(default, rename = "aircraft")]
        pub aircraft: Vec<AircraftCharacteristicPropertyTypeXType>,
        #[serde(default, rename = "flight")]
        pub flight: Vec<FlightCharacteristicPropertyTypeXType>,
        #[serde(default, rename = "subCondition")]
        pub sub_condition: Vec<ConditionCombinationPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ContactInformationContent1505XType {
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "title")]
        pub title: Option<TextNameTypeXType>,
        #[serde(default, rename = "address")]
        pub address: Vec<PostalAddressPropertyTypeXType>,
        #[serde(default, rename = "networkNode")]
        pub network_node: Vec<OnlineContactPropertyTypeXType>,
        #[serde(default, rename = "phoneFax")]
        pub phone_fax: Vec<TelephoneContactPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CurveContent649XType {
        #[serde(default, rename = "horizontalAccuracy")]
        pub horizontal_accuracy: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DmeTimeSliceContent759XType {
        #[serde(default, rename = "Content760")]
        pub content_760: Option<DmeTimeSliceContent760XType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeDmeTypeXType>,
        #[serde(default, rename = "channel")]
        pub channel: Option<CodeDmeChannelTypeXType>,
        #[serde(default, rename = "ghostFrequency")]
        pub ghost_frequency: Option<ValFrequencyTypeXType>,
        #[serde(default, rename = "displace")]
        pub displace: Option<ValDistanceTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DeicingAreaMarkingTimeSliceContent332XType {
        #[serde(default, rename = "Content333")]
        pub content_333: Option<DeicingAreaMarkingTimeSliceContent333XType>,
        #[serde(default, rename = "markedDeicingArea")]
        pub marked_deicing_area: Option<DeicingAreaPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DeicingAreaTimeSliceContent203XType {
        #[serde(default, rename = "associatedApron")]
        pub associated_apron: Option<ApronPropertyTypeXType>,
        #[serde(default, rename = "taxiwayLocation")]
        pub taxiway_location: Option<TaxiwayPropertyTypeXType>,
        #[serde(default, rename = "standLocation")]
        pub stand_location: Option<AircraftStandPropertyTypeXType>,
        #[serde(default, rename = "surfaceProperties")]
        pub surface_properties: Option<SurfaceCharacteristicsPropertyTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<ElevatedSurfacePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ApronAreaAvailabilityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DepartureArrivalConditionContent1099XType {
        #[serde(default, rename = "minimumEnrouteAltitude")]
        pub minimum_enroute_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "minimumCrossingAtEnd")]
        pub minimum_crossing_at_end: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "minimumCrossingAtEndReference")]
        pub minimum_crossing_at_end_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "maximumCrossingAtEnd")]
        pub maximum_crossing_at_end: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "maximumCrossingAtEndReference")]
        pub maximum_crossing_at_end_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "engineType")]
        pub engine_type: Option<AircraftCharacteristicPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DepartureLegTimeSliceContent1166XType {
        #[serde(default, rename = "Content1167")]
        pub content_1167: Option<DepartureLegTimeSliceContent1167XType>,
        #[serde(default, rename = "requiredNavigationPerformance")]
        pub required_navigation_performance: Option<CodeRnpTypeXType>,
        #[serde(default, rename = "minimumObstacleClearanceAltitude")]
        pub minimum_obstacle_clearance_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "departure")]
        pub departure: Option<StandardInstrumentDeparturePropertyTypeXType>,
        #[serde(default, rename = "condition")]
        pub condition: Vec<DepartureArrivalConditionPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DesignatedPointTimeSliceContent916XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeDesignatedPointDesignatorTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeDesignatedPointTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<PointPropertyTypeXType>,
        #[serde(default, rename = "aimingPoint")]
        pub aiming_point: Option<TouchDownLiftOffPropertyTypeXType>,
        #[serde(default, rename = "airportHeliport")]
        pub airport_heliport: Option<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "runwayPoint")]
        pub runway_point: Option<RunwayCentrelinePointPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectFlightClassContent1301XType {
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectFlightClassContent1302XType {
        #[serde(default, rename = "exceedLength")]
        pub exceed_length: Option<ValDistanceTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectFlightSegmentContent1307XType {
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectFlightSegmentContent1308XType {
        #[serde(rename = "Content1309")]
        pub content_1309: DirectFlightSegmentContent1309XType,
        #[serde(rename = "Content1310")]
        pub content_1310: DirectFlightSegmentContent1310XType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectionFinderTimeSliceContent751XType {
        #[serde(default, rename = "Content752")]
        pub content_752: Option<DirectionFinderTimeSliceContent752XType>,
        #[serde(default, rename = "doppler")]
        pub doppler: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "informationProvision")]
        pub information_provision: Vec<InformationServicePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DistanceIndicationTimeSliceContent888XType {
        #[serde(default, rename = "distance")]
        pub distance: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "minimumReceptionAltitude")]
        pub minimum_reception_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeDistanceIndicationTypeXType>,
        #[serde(default, rename = "fix")]
        pub fix: Option<DesignatedPointPropertyTypeXType>,
        #[serde(rename = "Content889")]
        pub content_889: DistanceIndicationTimeSliceContent889XType,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ElevatedCurveContent653XType {
        #[serde(default, rename = "elevation")]
        pub elevation: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "geoidUndulation")]
        pub geoid_undulation: Option<ValDistanceSignedTypeXType>,
        #[serde(default, rename = "verticalDatum")]
        pub vertical_datum: Option<CodeVerticalDatumTypeXType>,
        #[serde(default, rename = "verticalAccuracy")]
        pub vertical_accuracy: Option<ValDistanceTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PointContent661XType {
        #[serde(default, rename = "horizontalAccuracy")]
        pub horizontal_accuracy: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ElevatedPointContent664XType {
        #[serde(default, rename = "elevation")]
        pub elevation: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "geoidUndulation")]
        pub geoid_undulation: Option<ValDistanceSignedTypeXType>,
        #[serde(default, rename = "verticalDatum")]
        pub vertical_datum: Option<CodeVerticalDatumTypeXType>,
        #[serde(default, rename = "verticalAccuracy")]
        pub vertical_accuracy: Option<ValDistanceTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfaceContent672XType {
        #[serde(default, rename = "horizontalAccuracy")]
        pub horizontal_accuracy: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ElevatedSurfaceContent675XType {
        #[serde(default, rename = "elevation")]
        pub elevation: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "geoidUndulation")]
        pub geoid_undulation: Option<ValDistanceSignedTypeXType>,
        #[serde(default, rename = "verticalDatum")]
        pub vertical_datum: Option<CodeVerticalDatumTypeXType>,
        #[serde(default, rename = "verticalAccuracy")]
        pub vertical_accuracy: Option<ValDistanceTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ElevationTimeSliceContent767XType {
        #[serde(default, rename = "Content768")]
        pub content_768: Option<ElevationTimeSliceContent768XType>,
        #[serde(default, rename = "angleNominal")]
        pub angle_nominal: Option<ValAngleTypeXType>,
        #[serde(default, rename = "angleMinimum")]
        pub angle_minimum: Option<ValAngleTypeXType>,
        #[serde(default, rename = "angleSpan")]
        pub angle_span: Option<ValAngleTypeXType>,
        #[serde(default, rename = "angleAccuracy")]
        pub angle_accuracy: Option<ValAngleTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EnRouteSegmentPointContent893XType {
        #[serde(default, rename = "reportingATC")]
        pub reporting_atc: Option<CodeAtcReportingTypeXType>,
        #[serde(default, rename = "flyOver")]
        pub fly_over: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "waypoint")]
        pub waypoint: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "radarGuidance")]
        pub radar_guidance: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "facilityMakeup")]
        pub facility_makeup: Vec<PointReferencePropertyTypeXType>,
        #[serde(rename = "Content894")]
        pub content_894: EnRouteSegmentPointContent894XType,
        #[serde(default, rename = "extendedServiceVolume")]
        pub extended_service_volume: Option<RadioFrequencyAreaPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EnRouteSegmentPointContent895XType {
        #[serde(default, rename = "roleFreeFlight")]
        pub role_free_flight: Option<CodeFreeFlightTypeXType>,
        #[serde(default, rename = "roleRVSM")]
        pub role_rvsm: Option<CodeRvsmPointRoleTypeXType>,
        #[serde(default, rename = "turnRadius")]
        pub turn_radius: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "roleMilitaryTraining")]
        pub role_military_training: Option<CodeMilitaryRoutePointTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EquipmentUnavailableAdjustmentColumnContent1080XType {
        #[serde(default, rename = "guidanceEquipment")]
        pub guidance_equipment: Option<CodeApproachTypeXType>,
        #[serde(default, rename = "landingSystemLights")]
        pub landing_system_lights: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "equipmentRVR")]
        pub equipment_rvr: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "visibilityAdjustment")]
        pub visibility_adjustment: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "approachLightingInoperative")]
        pub approach_lighting_inoperative: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EquipmentUnavailableAdjustmentContent1075XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeEquipmentUnavailableTypeXType>,
        #[serde(default, rename = "approachLightingInoperative")]
        pub approach_lighting_inoperative: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "adjustmentINOPCol")]
        pub adjustment_inop_col: Vec<EquipmentUnavailableAdjustmentColumnPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FasDataBlockContent1057XType {
        #[serde(default, rename = "horizontalAlarmLimit")]
        pub horizontal_alarm_limit: Option<ValAlarmLimitTypeXType>,
        #[serde(default, rename = "verticalAlarmLimit")]
        pub vertical_alarm_limit: Option<ValAlarmLimitTypeXType>,
        #[serde(default, rename = "thresholdCourseWidth")]
        pub threshold_course_width: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "lengthOffset")]
        pub length_offset: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "CRCRemainder")]
        pub crc_remainder: Option<ValHexTypeXType>,
        #[serde(default, rename = "operationType")]
        pub operation_type: Option<NoSequenceTypeXType>,
        #[serde(default, rename = "serviceProviderSBAS")]
        pub service_provider_sbas: Option<NoSequenceTypeXType>,
        #[serde(default, rename = "approachPerformanceDesignator")]
        pub approach_performance_designator: Option<NoSequenceTypeXType>,
        #[serde(default, rename = "routeIndicator")]
        pub route_indicator: Option<CodeRouteIndicatorTypeXType>,
        #[serde(default, rename = "referencePathDataSelector")]
        pub reference_path_data_selector: Option<NoSequenceTypeXType>,
        #[serde(default, rename = "referencePathIdentifier")]
        pub reference_path_identifier: Option<CodeReferencePathIdentifierTypeXType>,
        #[serde(default, rename = "codeICAO")]
        pub code_icao: Option<CodeIcaoCountryTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FinalLegTimeSliceContent1174XType {
        #[serde(default, rename = "Content1175")]
        pub content_1175: Option<FinalLegTimeSliceContent1175XType>,
        #[serde(default, rename = "guidanceSystem")]
        pub guidance_system: Option<CodeFinalGuidanceTypeXType>,
        #[serde(default, rename = "landingSystemCategory")]
        pub landing_system_category: Option<CodeApproachGuidanceTypeXType>,
        #[serde(default, rename = "minimumBaroVnavTemperature")]
        pub minimum_baro_vnav_temperature: Option<ValTemperatureTypeXType>,
        #[serde(default, rename = "rnpDMEAuthorized")]
        pub rnp_dme_authorized: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "courseOffsetAngle")]
        pub course_offset_angle: Option<ValBearingTypeXType>,
        #[serde(default, rename = "courseOffsetSide")]
        pub course_offset_side: Option<CodeSideTypeXType>,
        #[serde(default, rename = "courseCentrelineDistance")]
        pub course_centreline_distance: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "courseOffsetDistance")]
        pub course_offset_distance: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "courseCentrelineIntersect")]
        pub course_centreline_intersect: Option<CodeRelativePositionTypeXType>,
        #[serde(default, rename = "condition")]
        pub condition: Vec<ApproachConditionPropertyTypeXType>,
        #[serde(rename = "Content1177")]
        pub content_1177: FinalLegTimeSliceContent1177XType,
        #[serde(default, rename = "visualDescentPoint")]
        pub visual_descent_point: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "FASData")]
        pub fas_data: Option<FasDataBlockPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FinalProfileContent1023XType {
        #[serde(default, rename = "altitude")]
        pub altitude: Vec<ApproachAltitudeTablePropertyTypeXType>,
        #[serde(default, rename = "distance")]
        pub distance: Vec<ApproachDistanceTablePropertyTypeXType>,
        #[serde(default, rename = "timing")]
        pub timing: Vec<ApproachTimingTablePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FireFightingServiceTimeSliceContent1419XType {
        #[serde(default, rename = "Content1420")]
        pub content_1420: Option<FireFightingServiceTimeSliceContent1420XType>,
        #[serde(default, rename = "category")]
        pub category: Option<CodeFireFightingTypeXType>,
        #[serde(default, rename = "standard")]
        pub standard: Option<CodeAviationStandardsTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightCharacteristicContent1533XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeFlightTypeXType>,
        #[serde(default, rename = "rule")]
        pub rule: Option<CodeFlightRuleTypeXType>,
        #[serde(default, rename = "status")]
        pub status: Option<CodeFlightStatusTypeXType>,
        #[serde(default, rename = "military")]
        pub military: Option<CodeMilitaryStatusTypeXType>,
        #[serde(default, rename = "origin")]
        pub origin: Option<CodeFlightOriginTypeXType>,
        #[serde(default, rename = "purpose")]
        pub purpose: Option<CodeFlightPurposeTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightConditionCircumstanceContent1315XType {
        #[serde(default, rename = "referenceLocation")]
        pub reference_location: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "relationWithLocation")]
        pub relation_with_location: Option<CodeLocationQualifierTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightConditionCombinationContent1320XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightConditionCombinationContent1321XType {
        #[serde(default, rename = "logicalOperator")]
        pub logical_operator: Option<CodeFlowConditionOperationTypeXType>,
        #[serde(default, rename = "element")]
        pub element: Vec<FlightConditionElementPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightConditionElementContent1326XType {
        #[serde(default, rename = "index")]
        pub index: Option<NoSequenceTypeXType>,
        #[serde(rename = "Content1327")]
        pub content_1327: FlightConditionElementContent1327XType,
        #[serde(default, rename = "operationalCondition")]
        pub operational_condition: Option<FlightConditionCircumstancePropertyTypeXType>,
        #[serde(default, rename = "flightLevel")]
        pub flight_level: Vec<FlightRestrictionLevelPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightRestrictionLevelContent1340XType {
        #[serde(default, rename = "upperLevel")]
        pub upper_level: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "upperLevelReference")]
        pub upper_level_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "lowerLevel")]
        pub lower_level: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "lowerLevelReference")]
        pub lower_level_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightRestrictionRouteContent1345XType {
        #[serde(default, rename = "priorPermission")]
        pub prior_permission: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "routeElement")]
        pub route_element: Vec<FlightRoutingElementPropertyTypeXType>,
        #[serde(default, rename = "contact")]
        pub contact: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightRestrictionTimeSliceContent1336XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeFlightRestrictionDesignatorTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeFlightRestrictionTypeXType>,
        #[serde(default, rename = "instruction")]
        pub instruction: Option<TextInstructionTypeXType>,
        #[serde(default, rename = "flight")]
        pub flight: Option<FlightConditionCombinationPropertyTypeXType>,
        #[serde(default, rename = "regulatedRoute")]
        pub regulated_route: Vec<FlightRestrictionRoutePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FlightRoutingElementContent1350XType {
        #[serde(default, rename = "orderNumber")]
        pub order_number: Option<NoSequenceTypeXType>,
        #[serde(default, rename = "speed")]
        pub speed: Option<ValSpeedTypeXType>,
        #[serde(default, rename = "speedReference")]
        pub speed_reference: Option<CodeSpeedReferenceTypeXType>,
        #[serde(default, rename = "speedCriteria")]
        pub speed_criteria: Option<CodeComparisonTypeXType>,
        #[serde(default, rename = "flightLevel")]
        pub flight_level: Vec<FlightRestrictionLevelPropertyTypeXType>,
        #[serde(rename = "Content1351")]
        pub content_1351: FlightRoutingElementContent1351XType,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FloatingDockSiteTimeSliceContent488XType {
        #[serde(default, rename = "extent")]
        pub extent: Option<ElevatedSurfacePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FuelContent1425XType {
        #[serde(default, rename = "category")]
        pub category: Option<CodeFuelTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeoBorderTimeSliceContent640XType {
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeGeoBorderTypeXType>,
        #[serde(default, rename = "border")]
        pub border: Option<CurvePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GlidepathTimeSliceContent775XType {
        #[serde(default, rename = "Content776")]
        pub content_776: Option<GlidepathTimeSliceContent776XType>,
        #[serde(default, rename = "frequency")]
        pub frequency: Option<ValFrequencyTypeXType>,
        #[serde(default, rename = "slope")]
        pub slope: Option<ValAngleTypeXType>,
        #[serde(default, rename = "angleAccuracy")]
        pub angle_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "rdh")]
        pub rdh: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "rdhAccuracy")]
        pub rdh_accuracy: Option<ValDistanceVerticalTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GroundLightingAvailabilityContent253XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GroundLightingAvailabilityContent254XType {
        #[serde(default, rename = "operationalStatus")]
        pub operational_status: Option<CodeStatusOperationsTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GroundTrafficControlServiceTimeSliceContent1433XType {
        #[serde(default, rename = "Content1434")]
        pub content_1434: Option<GroundTrafficControlServiceTimeSliceContent1434XType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeServiceGroundControlTypeXType>,
        #[serde(default, rename = "clientAirport")]
        pub client_airport: Option<AirportHeliportPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLineLightSystemTimeSliceContent262XType {
        #[serde(default, rename = "Content263")]
        pub content_263: Option<GuidanceLineLightSystemTimeSliceContent263XType>,
        #[serde(default, rename = "lightedGuidanceLine")]
        pub lighted_guidance_line: Option<GuidanceLinePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLineMarkingTimeSliceContent340XType {
        #[serde(default, rename = "Content341")]
        pub content_341: Option<GuidanceLineMarkingTimeSliceContent341XType>,
        #[serde(default, rename = "markedGuidanceLine")]
        pub marked_guidance_line: Option<GuidanceLinePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLineTimeSliceContent571XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<TextNameTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeGuidanceLineTypeXType>,
        #[serde(default, rename = "maxSpeed")]
        pub max_speed: Option<ValSpeedTypeXType>,
        #[serde(default, rename = "usageDirection")]
        pub usage_direction: Option<CodeDirectionTypeXType>,
        #[serde(default, rename = "connectedTouchDownLiftOff")]
        pub connected_touch_down_lift_off: Vec<TouchDownLiftOffPropertyTypeXType>,
        #[serde(default, rename = "connectedRunwayCentrelinePoint")]
        pub connected_runway_centreline_point: Vec<RunwayCentrelinePointPropertyTypeXType>,
        #[serde(default, rename = "connectedApron")]
        pub connected_apron: Vec<ApronPropertyTypeXType>,
        #[serde(default, rename = "connectedStand")]
        pub connected_stand: Vec<AircraftStandPropertyTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<ElevatedCurvePropertyTypeXType>,
        #[serde(default, rename = "connectedTaxiway")]
        pub connected_taxiway: Vec<TaxiwayPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingAssessmentTimeSliceContent1619XType {
        #[serde(default, rename = "upperLimit")]
        pub upper_limit: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "upperLimitReference")]
        pub upper_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "lowerLimit")]
        pub lower_limit: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "lowerLimitReference")]
        pub lower_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "speedLimit")]
        pub speed_limit: Option<ValSpeedTypeXType>,
        #[serde(default, rename = "patternTemplate")]
        pub pattern_template: Option<TextNameTypeXType>,
        #[serde(default, rename = "turbulentAir")]
        pub turbulent_air: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "legLengthToward")]
        pub leg_length_toward: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "legLengthAway")]
        pub leg_length_away: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "holdingPoint")]
        pub holding_point: Option<SegmentPointPropertyTypeXType>,
        #[serde(default, rename = "unplannedHolding")]
        pub unplanned_holding: Option<UnplannedHoldingPropertyTypeXType>,
        #[serde(default, rename = "assessedHoldingPattern")]
        pub assessed_holding_pattern: Option<HoldingPatternPropertyTypeXType>,
        #[serde(default, rename = "obstacleAssessment")]
        pub obstacle_assessment: Vec<ObstacleAssessmentAreaPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingPatternDistanceContent690XType {
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingPatternDurationContent695XType {
        #[serde(default, rename = "duration")]
        pub duration: Option<ValDurationTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingPatternTimeSliceContent685XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeHoldingUsageTypeXType>,
        #[serde(default, rename = "outboundCourse")]
        pub outbound_course: Option<ValBearingTypeXType>,
        #[serde(default, rename = "outboundCourseType")]
        pub outbound_course_type: Option<CodeCourseTypeXType>,
        #[serde(default, rename = "inboundCourse")]
        pub inbound_course: Option<ValBearingTypeXType>,
        #[serde(default, rename = "turnDirection")]
        pub turn_direction: Option<CodeDirectionTurnTypeXType>,
        #[serde(default, rename = "upperLimit")]
        pub upper_limit: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "upperLimitReference")]
        pub upper_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "lowerLimit")]
        pub lower_limit: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "lowerLimitReference")]
        pub lower_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "speedLimit")]
        pub speed_limit: Option<ValSpeedTypeXType>,
        #[serde(default, rename = "instruction")]
        pub instruction: Option<TextInstructionTypeXType>,
        #[serde(default, rename = "nonStandardHolding")]
        pub non_standard_holding: Option<CodeYesNoTypeXType>,
        #[serde(rename = "Content686")]
        pub content_686: HoldingPatternTimeSliceContent686XType,
        #[serde(default, rename = "holdingPoint")]
        pub holding_point: Option<SegmentPointPropertyTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<CurvePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HoldingUseContent1181XType {
        #[serde(default, rename = "holdingUse")]
        pub holding_use: Option<CodeHoldingUseTypeXType>,
        #[serde(default, rename = "instruction")]
        pub instruction: Option<TextInstructionTypeXType>,
        #[serde(default, rename = "instructedAltitude")]
        pub instructed_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "instructionAltitudeReference")]
        pub instruction_altitude_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "theHoldingPattern")]
        pub the_holding_pattern: Option<HoldingPatternPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InformationServiceTimeSliceContent1442XType {
        #[serde(default, rename = "Content1443")]
        pub content_1443: Option<InformationServiceTimeSliceContent1443XType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeServiceInformationTypeXType>,
        #[serde(default, rename = "voice")]
        pub voice: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "dataLink")]
        pub data_link: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "recorded")]
        pub recorded: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "navaidBroadcast")]
        pub navaid_broadcast: Vec<VorPropertyTypeXType>,
        #[serde(default, rename = "clientAirspace")]
        pub client_airspace: Vec<AirspacePropertyTypeXType>,
        #[serde(default, rename = "clientAirport")]
        pub client_airport: Vec<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "clientRoute")]
        pub client_route: Vec<RoutePortionPropertyTypeXType>,
        #[serde(default, rename = "clientProcedure")]
        pub client_procedure: Vec<ProcedurePropertyTypeXType>,
        #[serde(default, rename = "clientHolding")]
        pub client_holding: Vec<HoldingPatternPropertyTypeXType>,
        #[serde(default, rename = "clientAerialRefuelling")]
        pub client_aerial_refuelling: Vec<AerialRefuellingPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InitialLegTimeSliceContent1189XType {
        #[serde(default, rename = "Content1190")]
        pub content_1190: Option<InitialLegTimeSliceContent1190XType>,
        #[serde(default, rename = "requiredNavigationPerformance")]
        pub required_navigation_performance: Option<CodeRnpTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InstrumentApproachProcedureTimeSliceContent1032XType {
        #[serde(default, rename = "Content1033")]
        pub content_1033: Option<InstrumentApproachProcedureTimeSliceContent1033XType>,
        #[serde(default, rename = "approachPrefix")]
        pub approach_prefix: Option<CodeApproachPrefixTypeXType>,
        #[serde(default, rename = "approachType")]
        pub approach_type: Option<CodeApproachTypeXType>,
        #[serde(default, rename = "multipleIdentification")]
        pub multiple_identification: Option<CodeUpperAlphaTypeXType>,
        #[serde(default, rename = "copterTrack")]
        pub copter_track: Option<ValBearingTypeXType>,
        #[serde(default, rename = "circlingIdentification")]
        pub circling_identification: Option<CodeUpperAlphaTypeXType>,
        #[serde(default, rename = "courseReversalInstruction")]
        pub course_reversal_instruction: Option<TextInstructionTypeXType>,
        #[serde(default, rename = "additionalEquipment")]
        pub additional_equipment: Option<CodeApproachEquipmentAdditionalTypeXType>,
        #[serde(default, rename = "channelGNSS")]
        pub channel_gnss: Option<ValChannelNumberTypeXType>,
        #[serde(default, rename = "WAASReliable")]
        pub waas_reliable: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "landing")]
        pub landing: Option<LandingTakeoffAreaCollectionPropertyTypeXType>,
        #[serde(default, rename = "missedInstruction")]
        pub missed_instruction: Vec<MissedApproachGroupPropertyTypeXType>,
        #[serde(default, rename = "finalProfile")]
        pub final_profile: Option<FinalProfilePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct IntermediateLegTimeSliceContent1198XType {
        #[serde(default, rename = "Content1199")]
        pub content_1199: Option<IntermediateLegTimeSliceContent1199XType>,
        #[serde(default, rename = "requiredNavigationPerformance")]
        pub required_navigation_performance: Option<CodeRnpTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LandingTakeoffAreaCollectionContent1204XType {
        #[serde(default, rename = "runway")]
        pub runway: Vec<RunwayDirectionPropertyTypeXType>,
        #[serde(default, rename = "TLOF")]
        pub tlof: Vec<TouchDownLiftOffPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LightActivationContent267XType {
        #[serde(default, rename = "clicks")]
        pub clicks: Option<NoNumberTypeXType>,
        #[serde(default, rename = "intensityLevel")]
        pub intensity_level: Option<CodeLightIntensityTypeXType>,
        #[serde(default, rename = "activation")]
        pub activation: Option<CodeSystemActivationTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LightElementStatusContent1553XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LightElementStatusContent1554XType {
        #[serde(default, rename = "status")]
        pub status: Option<CodeStatusOperationsTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LightElementContent1548XType {
        #[serde(default, rename = "colour")]
        pub colour: Option<CodeColourTypeXType>,
        #[serde(default, rename = "intensityLevel")]
        pub intensity_level: Option<CodeLightIntensityTypeXType>,
        #[serde(default, rename = "intensity")]
        pub intensity: Option<ValLightIntensityTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeLightSourceTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<LightElementStatusPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LinguisticNoteContent935XType {
        #[serde(default, rename = "note")]
        pub note: Option<TextNoteTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LocalizerTimeSliceContent783XType {
        #[serde(default, rename = "Content784")]
        pub content_784: Option<LocalizerTimeSliceContent784XType>,
        #[serde(default, rename = "frequency")]
        pub frequency: Option<ValFrequencyTypeXType>,
        #[serde(default, rename = "magneticBearing")]
        pub magnetic_bearing: Option<ValBearingTypeXType>,
        #[serde(default, rename = "magneticBearingAccuracy")]
        pub magnetic_bearing_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "trueBearing")]
        pub true_bearing: Option<ValBearingTypeXType>,
        #[serde(default, rename = "trueBearingAccuracy")]
        pub true_bearing_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "declination")]
        pub declination: Option<ValMagneticVariationTypeXType>,
        #[serde(default, rename = "widthCourse")]
        pub width_course: Option<ValAngleTypeXType>,
        #[serde(default, rename = "widthCourseAccuracy")]
        pub width_course_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "backCourseUsable")]
        pub back_course_usable: Option<CodeIlsBackCourseTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ManoeuvringAreaAvailabilityContent399XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ManoeuvringAreaAvailabilityContent400XType {
        #[serde(default, rename = "operationalStatus")]
        pub operational_status: Option<CodeStatusAirportTypeXType>,
        #[serde(default, rename = "warning")]
        pub warning: Option<CodeAirportWarningTypeXType>,
        #[serde(default, rename = "usage")]
        pub usage: Vec<ManoeuvringAreaUsagePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ManoeuvringAreaUsageContent405XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeUsageLimitationTypeXType>,
        #[serde(default, rename = "priorPermission")]
        pub prior_permission: Option<ValDurationTypeXType>,
        #[serde(default, rename = "contact")]
        pub contact: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "selection")]
        pub selection: Option<ConditionCombinationPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ManoeuvringAreaUsageContent406XType {
        #[serde(default, rename = "operation")]
        pub operation: Option<CodeOperationManoeuvringAreaTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MarkerBeaconTimeSliceContent791XType {
        #[serde(default, rename = "Content792")]
        pub content_792: Option<MarkerBeaconTimeSliceContent792XType>,
        #[serde(default, rename = "class")]
        pub class: Option<CodeMarkerBeaconSignalTypeXType>,
        #[serde(default, rename = "frequency")]
        pub frequency: Option<ValFrequencyTypeXType>,
        #[serde(default, rename = "axisBearing")]
        pub axis_bearing: Option<ValBearingTypeXType>,
        #[serde(default, rename = "auralMorseCode")]
        pub aural_morse_code: Option<CodeAuralMorseTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MarkingBuoyTimeSliceContent495XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeBuoyDesignatorTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeBuoyTypeXType>,
        #[serde(default, rename = "colour")]
        pub colour: Option<CodeColourTypeXType>,
        #[serde(default, rename = "theSeaplaneLandingArea")]
        pub the_seaplane_landing_area: Option<SeaplaneLandingAreaPropertyTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MarkingElementContent345XType {
        #[serde(default, rename = "colour")]
        pub colour: Option<CodeColourTypeXType>,
        #[serde(default, rename = "style")]
        pub style: Option<CodeMarkingStyleTypeXType>,
        #[serde(rename = "Content346")]
        pub content_346: MarkingElementContent346XType,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MeteorologyContent1559XType {
        #[serde(default, rename = "flightConditions")]
        pub flight_conditions: Option<CodeMeteoConditionsTypeXType>,
        #[serde(default, rename = "visibility")]
        pub visibility: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "visibilityInterpretation")]
        pub visibility_interpretation: Option<CodeValueInterpretationTypeXType>,
        #[serde(default, rename = "runwayVisualRange")]
        pub runway_visual_range: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "runwayVisualRangeInterpretation")]
        pub runway_visual_range_interpretation: Option<CodeValueInterpretationTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MinimaContent1085XType {
        #[serde(default, rename = "altitude")]
        pub altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "altitudeCode")]
        pub altitude_code: Option<CodeMinimumAltitudeTypeXType>,
        #[serde(default, rename = "altitudeReference")]
        pub altitude_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "height")]
        pub height: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "militaryHeight")]
        pub military_height: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "radioHeight")]
        pub radio_height: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "heightCode")]
        pub height_code: Option<CodeMinimumHeightTypeXType>,
        #[serde(default, rename = "heightReference")]
        pub height_reference: Option<CodeHeightReferenceTypeXType>,
        #[serde(default, rename = "visibility")]
        pub visibility: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "militaryVisibility")]
        pub military_visibility: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "mandatoryRVR")]
        pub mandatory_rvr: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "remoteAltimeterMinima")]
        pub remote_altimeter_minima: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "adjustmentINOP")]
        pub adjustment_inop: Vec<EquipmentUnavailableAdjustmentPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MissedApproachGroupContent1038XType {
        #[serde(default, rename = "instruction")]
        pub instruction: Option<TextInstructionTypeXType>,
        #[serde(default, rename = "alternateClimbInstruction")]
        pub alternate_climb_instruction: Option<TextInstructionTypeXType>,
        #[serde(default, rename = "alternateClimbAltitude")]
        pub alternate_climb_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "altimeter")]
        pub altimeter: Vec<AltimeterSourcePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MissedApproachLegTimeSliceContent1212XType {
        #[serde(default, rename = "Content1213")]
        pub content_1213: Option<MissedApproachLegTimeSliceContent1213XType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeMissedApproachTypeXType>,
        #[serde(default, rename = "thresholdAfterMAPT")]
        pub threshold_after_mapt: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "heightMAPT")]
        pub height_mapt: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "requiredNavigationPerformance")]
        pub required_navigation_performance: Option<CodeRnpTypeXType>,
        #[serde(default, rename = "condition")]
        pub condition: Vec<ApproachConditionPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NdbTimeSliceContent823XType {
        #[serde(default, rename = "Content824")]
        pub content_824: Option<NdbTimeSliceContent824XType>,
        #[serde(default, rename = "frequency")]
        pub frequency: Option<ValFrequencyTypeXType>,
        #[serde(default, rename = "class")]
        pub class: Option<CodeNdbUsageTypeXType>,
        #[serde(default, rename = "emissionBand")]
        pub emission_band: Option<CodeEmissionBandTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidComponentContent803XType {
        #[serde(default, rename = "collocationGroup")]
        pub collocation_group: Option<NoSequenceTypeXType>,
        #[serde(default, rename = "markerPosition")]
        pub marker_position: Option<CodePositionInIlsTypeXType>,
        #[serde(default, rename = "providesNavigableLocation")]
        pub provides_navigable_location: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "theNavaidEquipment")]
        pub the_navaid_equipment: Option<NavaidEquipmentPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidEquipmentDistanceContent411XType {
        #[serde(default, rename = "distance")]
        pub distance: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "distanceAccuracy")]
        pub distance_accuracy: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "theNavaidEquipment")]
        pub the_navaid_equipment: Option<NavaidEquipmentPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidEquipmentMonitoringContent808XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidEquipmentMonitoringContent809XType {
        #[serde(default, rename = "monitored")]
        pub monitored: Option<CodeYesNoTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidOperationalStatusContent814XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidOperationalStatusContent815XType {
        #[serde(default, rename = "operationalStatus")]
        pub operational_status: Option<CodeStatusNavaidTypeXType>,
        #[serde(default, rename = "signalType")]
        pub signal_type: Option<CodeRadioSignalTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavaidTimeSliceContent799XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeNavaidServiceTypeXType>,
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeNavaidDesignatorTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "flightChecked")]
        pub flight_checked: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "purpose")]
        pub purpose: Option<CodeNavaidPurposeTypeXType>,
        #[serde(default, rename = "signalPerformance")]
        pub signal_performance: Option<CodeSignalPerformanceIlsTypeXType>,
        #[serde(default, rename = "courseQuality")]
        pub course_quality: Option<CodeCourseQualityIlsTypeXType>,
        #[serde(default, rename = "integrityLevel")]
        pub integrity_level: Option<CodeIntegrityLevelIlsTypeXType>,
        #[serde(default, rename = "touchDownLiftOff")]
        pub touch_down_lift_off: Vec<TouchDownLiftOffPropertyTypeXType>,
        #[serde(default, rename = "navaidEquipment")]
        pub navaid_equipment: Vec<NavaidComponentPropertyTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "runwayDirection")]
        pub runway_direction: Vec<RunwayDirectionPropertyTypeXType>,
        #[serde(default, rename = "servedAirport")]
        pub served_airport: Vec<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<NavaidOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavigationAreaRestrictionTimeSliceContent1221XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeNavigationAreaRestrictionTypeXType>,
        #[serde(default, rename = "procedure")]
        pub procedure: Vec<ProcedurePropertyTypeXType>,
        #[serde(default, rename = "designSurface")]
        pub design_surface: Option<ObstacleAssessmentAreaPropertyTypeXType>,
        #[serde(default, rename = "sectorDefinition")]
        pub sector_definition: Option<CircleSectorPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavigationAreaSectorContent1112XType {
        #[serde(default, rename = "sectorDefinition")]
        pub sector_definition: Option<CircleSectorPropertyTypeXType>,
        #[serde(default, rename = "significantObstacle")]
        pub significant_obstacle: Vec<ObstructionPropertyTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<SurfacePropertyTypeXType>,
        #[serde(default, rename = "sectorCriteria")]
        pub sector_criteria: Vec<SectorDesignPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NavigationAreaTimeSliceContent1107XType {
        #[serde(default, rename = "navigationAreaType")]
        pub navigation_area_type: Option<CodeNavigationAreaTypeXType>,
        #[serde(default, rename = "minimumCeiling")]
        pub minimum_ceiling: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "minimumVisibility")]
        pub minimum_visibility: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "departure")]
        pub departure: Option<StandardInstrumentDeparturePropertyTypeXType>,
        #[serde(default, rename = "sector")]
        pub sector: Vec<NavigationAreaSectorPropertyTypeXType>,
        #[serde(rename = "Content1108")]
        pub content_1108: NavigationAreaTimeSliceContent1108XType,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NitrogenContent1447XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeNitrogenTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NonMovementAreaTimeSliceContent137XType {
        #[serde(default, rename = "associatedAirportHeliport")]
        pub associated_airport_heliport: Option<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<ElevatedSurfacePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NoteContent940XType {
        #[serde(default, rename = "propertyName")]
        pub property_name: Option<TextPropertyNameTypeXType>,
        #[serde(default, rename = "purpose")]
        pub purpose: Option<CodeNotePurposeTypeXType>,
        #[serde(default, rename = "translatedNote")]
        pub translated_note: Vec<LinguisticNotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObstacleAreaTimeSliceContent948XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeObstacleAreaTypeXType>,
        #[serde(default, rename = "obstructionIdSurfaceCondition")]
        pub obstruction_id_surface_condition: Option<CodeObstacleAssessmentSurfaceTypeXType>,
        #[serde(rename = "Content949")]
        pub content_949: ObstacleAreaTimeSliceContent949XType,
        #[serde(default, rename = "surfaceExtent")]
        pub surface_extent: Option<SurfacePropertyTypeXType>,
        #[serde(default, rename = "obstacle")]
        pub obstacle: Vec<VerticalStructurePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObstacleAssessmentAreaContent1623XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeObstacleAssessmentSurfaceTypeXType>,
        #[serde(default, rename = "sectionNumber")]
        pub section_number: Option<NoNumberTypeXType>,
        #[serde(default, rename = "slope")]
        pub slope: Option<ValSlopeTypeXType>,
        #[serde(default, rename = "assessedAltitude")]
        pub assessed_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "slopeLowerAltitude")]
        pub slope_lower_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "gradientLowHigh")]
        pub gradient_low_high: Option<ValSlopeTypeXType>,
        #[serde(default, rename = "surfaceZone")]
        pub surface_zone: Option<CodeObstructionIdSurfaceZoneTypeXType>,
        #[serde(default, rename = "safetyRegulation")]
        pub safety_regulation: Option<TextNameTypeXType>,
        #[serde(default, rename = "aircraftCategory")]
        pub aircraft_category: Vec<AircraftCharacteristicPropertyTypeXType>,
        #[serde(default, rename = "significantObstacle")]
        pub significant_obstacle: Vec<ObstructionPropertyTypeXType>,
        #[serde(default, rename = "surface")]
        pub surface: Option<SurfacePropertyTypeXType>,
        #[serde(default, rename = "startingCurve")]
        pub starting_curve: Option<CurvePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObstaclePlacementContent1628XType {
        #[serde(default, rename = "obstacleBearing")]
        pub obstacle_bearing: Option<ValBearingTypeXType>,
        #[serde(default, rename = "obstacleDistance")]
        pub obstacle_distance: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "pointType")]
        pub point_type: Option<TextNameTypeXType>,
        #[serde(default, rename = "obstaclePlacement")]
        pub obstacle_placement: Option<CodeSideTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObstructionContent1633XType {
        #[serde(default, rename = "requiredClearance")]
        pub required_clearance: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "minimumAltitude")]
        pub minimum_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "surfacePenetration")]
        pub surface_penetration: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "slopePenetration")]
        pub slope_penetration: Option<ValAngleTypeXType>,
        #[serde(default, rename = "controlling")]
        pub controlling: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "closeIn")]
        pub close_in: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "theVerticalStructure")]
        pub the_vertical_structure: Option<VerticalStructurePropertyTypeXType>,
        #[serde(default, rename = "adjustment")]
        pub adjustment: Vec<AltitudeAdjustmentPropertyTypeXType>,
        #[serde(default, rename = "obstaclePlacement")]
        pub obstacle_placement: Vec<ObstaclePlacementPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OilContent1452XType {
        #[serde(default, rename = "category")]
        pub category: Option<CodeOilTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OnlineContactContent1510XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OnlineContactContent1511XType {
        #[serde(default, rename = "network")]
        pub network: Option<CodeTelecomNetworkTypeXType>,
        #[serde(default, rename = "linkage")]
        pub linkage: Option<TextAddressTypeXType>,
        #[serde(default, rename = "protocol")]
        pub protocol: Option<TextNameTypeXType>,
        #[serde(default, rename = "eMail")]
        pub e_mail: Option<TextAddressTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OrganisationAuthorityAssociationContent980XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeOrganisationHierarchyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "theOrganisationAuthority")]
        pub the_organisation_authority: Option<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OrganisationAuthorityTimeSliceContent976XType {
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeOrganisationDesignatorTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeOrganisationTypeXType>,
        #[serde(default, rename = "military")]
        pub military: Option<CodeMilitaryOperationsTypeXType>,
        #[serde(default, rename = "contact")]
        pub contact: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "relatedOrganisationAuthority")]
        pub related_organisation_authority: Vec<OrganisationAuthorityAssociationPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OxygenContent1457XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeOxygenTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PassengerLoadingBridgeTimeSliceContent210XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeLoadingBridgeTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<ElevatedSurfacePropertyTypeXType>,
        #[serde(default, rename = "associatedStand")]
        pub associated_stand: Vec<AircraftStandPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PassengerServiceTimeSliceContent1465XType {
        #[serde(default, rename = "Content1466")]
        pub content_1466: Option<PassengerServiceTimeSliceContent1466XType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodePassengerServiceTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PilotControlledLightingTimeSliceContent1474XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodePilotControlledLightingTypeXType>,
        #[serde(default, rename = "duration")]
        pub duration: Option<ValDurationTypeXType>,
        #[serde(default, rename = "intensitySteps")]
        pub intensity_steps: Option<NoNumberTypeXType>,
        #[serde(default, rename = "standByIntensity")]
        pub stand_by_intensity: Option<CodeIntensityStandByTypeXType>,
        #[serde(default, rename = "radioFrequency")]
        pub radio_frequency: Option<ValFrequencyTypeXType>,
        #[serde(default, rename = "activationInstruction")]
        pub activation_instruction: Option<TextInstructionTypeXType>,
        #[serde(default, rename = "controlledLightIntensity")]
        pub controlled_light_intensity: Vec<LightActivationPropertyTypeXType>,
        #[serde(default, rename = "activatedGroundLighting")]
        pub activated_ground_lighting: Vec<GroundLightSystemPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PointReferenceContent900XType {
        #[serde(default, rename = "role")]
        pub role: Option<CodeReferenceRoleTypeXType>,
        #[serde(default, rename = "priorFixTolerance")]
        pub prior_fix_tolerance: Option<ValDistanceSignedTypeXType>,
        #[serde(default, rename = "postFixTolerance")]
        pub post_fix_tolerance: Option<ValDistanceSignedTypeXType>,
        #[serde(default, rename = "point")]
        pub point: Option<DesignatedPointPropertyTypeXType>,
        #[serde(default, rename = "facilityAngle")]
        pub facility_angle: Vec<AngleUsePropertyTypeXType>,
        #[serde(default, rename = "facilityDistance")]
        pub facility_distance: Vec<DistanceIndicationPropertyTypeXType>,
        #[serde(default, rename = "fixToleranceArea")]
        pub fix_tolerance_area: Option<SurfacePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PostalAddressContent1516XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PostalAddressContent1517XType {
        #[serde(default, rename = "deliveryPoint")]
        pub delivery_point: Option<TextAddressTypeXType>,
        #[serde(default, rename = "city")]
        pub city: Option<TextNameTypeXType>,
        #[serde(default, rename = "administrativeArea")]
        pub administrative_area: Option<TextNameTypeXType>,
        #[serde(default, rename = "postalCode")]
        pub postal_code: Option<TextNameTypeXType>,
        #[serde(default, rename = "country")]
        pub country: Option<TextNameTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrecisionApproachRadarTimeSliceContent1642XType {
        #[serde(default, rename = "Content1643")]
        pub content_1643: Option<PrecisionApproachRadarTimeSliceContent1643XType>,
        #[serde(default, rename = "precisionApproachRadarType")]
        pub precision_approach_radar_type: Option<CodeParTypeXType>,
        #[serde(default, rename = "slope")]
        pub slope: Option<ValAngleTypeXType>,
        #[serde(default, rename = "slopeAccuracy")]
        pub slope_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "reflector")]
        pub reflector: Vec<ReflectorPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrimarySurveillanceRadarTimeSliceContent1651XType {
        #[serde(default, rename = "Content1652")]
        pub content_1652: Option<PrimarySurveillanceRadarTimeSliceContent1652XType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodePrimaryRadarTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedureAvailabilityContent1242XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedureAvailabilityContent1243XType {
        #[serde(default, rename = "status")]
        pub status: Option<CodeProcedureAvailabilityTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedureDmeTimeSliceContent1228XType {
        #[serde(default, rename = "criticalDME")]
        pub critical_dme: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "satisfactory")]
        pub satisfactory: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "DME")]
        pub dme: Option<DmePropertyTypeXType>,
        #[serde(default, rename = "segmentLeg")]
        pub segment_leg: Option<SegmentLegPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedureTransitionLegContent1237XType {
        #[serde(default, rename = "seqNumberARINC")]
        pub seq_number_arinc: Option<NoSequenceTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "theSegmentLeg")]
        pub the_segment_leg: Option<SegmentLegPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedureTransitionContent1232XType {
        #[serde(default, rename = "transitionId")]
        pub transition_id: Option<CodeDesignatedPointDesignatorTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeProcedurePhaseTypeXType>,
        #[serde(default, rename = "instruction")]
        pub instruction: Option<TextInstructionTypeXType>,
        #[serde(default, rename = "vectorHeading")]
        pub vector_heading: Option<ValBearingTypeXType>,
        #[serde(default, rename = "departureRunwayTransition")]
        pub departure_runway_transition: Option<LandingTakeoffAreaCollectionPropertyTypeXType>,
        #[serde(default, rename = "trajectory")]
        pub trajectory: Option<CurvePropertyTypeXType>,
        #[serde(default, rename = "transitionLeg")]
        pub transition_leg: Vec<ProcedureTransitionLegPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadarComponentContent1657XType {
        #[serde(default, rename = "collocationGroup")]
        pub collocation_group: Option<NoSequenceTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "theRadarEquipment")]
        pub the_radar_equipment: Option<RadarEquipmentPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadarSystemTimeSliceContent1665XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeRadarServiceTypeXType>,
        #[serde(default, rename = "model")]
        pub model: Option<TextNameTypeXType>,
        #[serde(default, rename = "generalTerrainMonitor")]
        pub general_terrain_monitor: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "broadcastIdentifier")]
        pub broadcast_identifier: Option<TextDesignatorTypeXType>,
        #[serde(default, rename = "radarEquipment")]
        pub radar_equipment: Vec<RadarComponentPropertyTypeXType>,
        #[serde(default, rename = "office")]
        pub office: Vec<OrganisationAuthorityPropertyTypeXType>,
        #[serde(default, rename = "airportHeliport")]
        pub airport_heliport: Option<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "PARRunway")]
        pub par_runway: Vec<RunwayPropertyTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadioCommunicationChannelTimeSliceContent1481XType {
        #[serde(default, rename = "mode")]
        pub mode: Option<CodeCommunicationModeTypeXType>,
        #[serde(default, rename = "rank")]
        pub rank: Option<CodeFacilityRankingTypeXType>,
        #[serde(default, rename = "frequencyTransmission")]
        pub frequency_transmission: Option<ValFrequencyTypeXType>,
        #[serde(default, rename = "frequencyReception")]
        pub frequency_reception: Option<ValFrequencyTypeXType>,
        #[serde(default, rename = "channel")]
        pub channel: Option<CodeCommunicationChannelTypeXType>,
        #[serde(default, rename = "logon")]
        pub logon: Option<TextDesignatorTypeXType>,
        #[serde(default, rename = "emissionType")]
        pub emission_type: Option<CodeRadioEmissionTypeXType>,
        #[serde(default, rename = "selectiveCall")]
        pub selective_call: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "flightChecked")]
        pub flight_checked: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "trafficDirection")]
        pub traffic_direction: Option<CodeCommunicationDirectionTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Vec<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<RadioCommunicationOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadioCommunicationOperationalStatusContent1485XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadioCommunicationOperationalStatusContent1486XType {
        #[serde(default, rename = "operationalStatus")]
        pub operational_status: Option<CodeStatusServiceTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RadioFrequencyAreaTimeSliceContent1567XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeRadioFrequencyAreaTypeXType>,
        #[serde(default, rename = "angleScallop")]
        pub angle_scallop: Option<ValAngleTypeXType>,
        #[serde(default, rename = "signalType")]
        pub signal_type: Option<CodeRadioSignalTypeXType>,
        #[serde(rename = "Content1568")]
        pub content_1568: RadioFrequencyAreaTimeSliceContent1568XType,
        #[serde(default, rename = "sector")]
        pub sector: Vec<CircleSectorPropertyTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Vec<SurfacePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ReflectorContent1669XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeReflectorTypeXType>,
        #[serde(default, rename = "touchdownReflector")]
        pub touchdown_reflector: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RidgeContent533XType {
        #[serde(default, rename = "side")]
        pub side: Option<CodeSideTypeXType>,
        #[serde(default, rename = "distance")]
        pub distance: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "depth")]
        pub depth: Option<ValDepthTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RoadTimeSliceContent217XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<TextNameTypeXType>,
        #[serde(default, rename = "status")]
        pub status: Option<CodeStatusOperationsTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeRoadTypeXType>,
        #[serde(default, rename = "abandoned")]
        pub abandoned: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "associatedAirport")]
        pub associated_airport: Option<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "surfaceProperties")]
        pub surface_properties: Option<SurfaceCharacteristicsPropertyTypeXType>,
        #[serde(default, rename = "accessibleStand")]
        pub accessible_stand: Vec<AircraftStandPropertyTypeXType>,
        #[serde(default, rename = "surfaceExtent")]
        pub surface_extent: Option<ElevatedSurfacePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteAvailabilityContent1263XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteAvailabilityContent1264XType {
        #[serde(default, rename = "direction")]
        pub direction: Option<CodeDirectionTypeXType>,
        #[serde(default, rename = "cardinalDirection")]
        pub cardinal_direction: Option<CodeCardinalDirectionTypeXType>,
        #[serde(default, rename = "status")]
        pub status: Option<CodeRouteAvailabilityTypeXType>,
        #[serde(default, rename = "levels")]
        pub levels: Vec<AirspaceLayerPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteDmeTimeSliceContent1272XType {
        #[serde(default, rename = "criticalDME")]
        pub critical_dme: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "satisfactory")]
        pub satisfactory: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "referencedDME")]
        pub referenced_dme: Option<DmePropertyTypeXType>,
        #[serde(default, rename = "applicableRoutePortion")]
        pub applicable_route_portion: Option<RoutePortionPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RoutePortionContent1276XType {
        #[serde(rename = "Content1277")]
        pub content_1277: RoutePortionContent1277XType,
        #[serde(rename = "Content1278")]
        pub content_1278: RoutePortionContent1278XType,
        #[serde(default, rename = "referencedRoute")]
        pub referenced_route: Option<RoutePropertyTypeXType>,
        #[serde(rename = "Content1279")]
        pub content_1279: RoutePortionContent1279XType,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteSegmentTimeSliceContent1287XType {
        #[serde(default, rename = "level")]
        pub level: Option<CodeLevelTypeXType>,
        #[serde(default, rename = "upperLimit")]
        pub upper_limit: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "upperLimitReference")]
        pub upper_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "lowerLimit")]
        pub lower_limit: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "lowerLimitReference")]
        pub lower_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "minimumObstacleClearanceAltitude")]
        pub minimum_obstacle_clearance_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "pathType")]
        pub path_type: Option<CodeRouteSegmentPathTypeXType>,
        #[serde(default, rename = "trueTrack")]
        pub true_track: Option<ValBearingTypeXType>,
        #[serde(default, rename = "magneticTrack")]
        pub magnetic_track: Option<ValBearingTypeXType>,
        #[serde(default, rename = "reverseTrueTrack")]
        pub reverse_true_track: Option<ValBearingTypeXType>,
        #[serde(default, rename = "reverseMagneticTrack")]
        pub reverse_magnetic_track: Option<ValBearingTypeXType>,
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "widthLeft")]
        pub width_left: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "widthRight")]
        pub width_right: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "turnDirection")]
        pub turn_direction: Option<CodeDirectionTurnTypeXType>,
        #[serde(default, rename = "signalGap")]
        pub signal_gap: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "minimumEnrouteAltitude")]
        pub minimum_enroute_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "minimumCrossingAtEnd")]
        pub minimum_crossing_at_end: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "minimumCrossingAtEndReference")]
        pub minimum_crossing_at_end_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "maximumCrossingAtEnd")]
        pub maximum_crossing_at_end: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "maximumCrossingAtEndReference")]
        pub maximum_crossing_at_end_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "navigationType")]
        pub navigation_type: Option<CodeRouteNavigationTypeXType>,
        #[serde(default, rename = "requiredNavigationPerformance")]
        pub required_navigation_performance: Option<CodeRnpTypeXType>,
        #[serde(default, rename = "designatorSuffix")]
        pub designator_suffix: Option<CodeRouteDesignatorSuffixTypeXType>,
        #[serde(default, rename = "start")]
        pub start: Option<EnRouteSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "routeFormed")]
        pub route_formed: Option<RoutePropertyTypeXType>,
        #[serde(default, rename = "evaluationArea")]
        pub evaluation_area: Option<ObstacleAssessmentAreaPropertyTypeXType>,
        #[serde(default, rename = "curveExtent")]
        pub curve_extent: Option<CurvePropertyTypeXType>,
        #[serde(default, rename = "end")]
        pub end: Option<EnRouteSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<RouteAvailabilityPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RouteTimeSliceContent1259XType {
        #[serde(default, rename = "designatorPrefix")]
        pub designator_prefix: Option<CodeRouteDesignatorPrefixTypeXType>,
        #[serde(default, rename = "designatorSecondLetter")]
        pub designator_second_letter: Option<CodeRouteDesignatorLetterTypeXType>,
        #[serde(default, rename = "designatorNumber")]
        pub designator_number: Option<NoNumberTypeXType>,
        #[serde(default, rename = "multipleIdentifier")]
        pub multiple_identifier: Option<CodeUpperAlphaTypeXType>,
        #[serde(default, rename = "locationDesignator")]
        pub location_designator: Option<TextDesignatorTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeRouteTypeXType>,
        #[serde(default, rename = "flightRule")]
        pub flight_rule: Option<CodeFlightRuleTypeXType>,
        #[serde(default, rename = "internationalUse")]
        pub international_use: Option<CodeRouteOriginTypeXType>,
        #[serde(default, rename = "militaryUse")]
        pub military_use: Option<CodeMilitaryStatusTypeXType>,
        #[serde(default, rename = "militaryTrainingType")]
        pub military_training_type: Option<CodeMilitaryTrainingTypeXType>,
        #[serde(default, rename = "userOrganisation")]
        pub user_organisation: Option<OrganisationAuthorityPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RulesProceduresTimeSliceContent1360XType {
        #[serde(default, rename = "category")]
        pub category: Option<CodeRuleProcedureTypeXType>,
        #[serde(default, rename = "title")]
        pub title: Option<CodeRuleProcedureTitleTypeXType>,
        #[serde(default, rename = "content")]
        pub content: Option<XhtmlTypeXType>,
        #[serde(default, rename = "affectedLocation")]
        pub affected_location: Vec<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "affectedArea")]
        pub affected_area: Vec<AirspacePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayBlastPadTimeSliceContent426XType {
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "status")]
        pub status: Option<CodeStatusOperationsTypeXType>,
        #[serde(default, rename = "usedRunwayDirection")]
        pub used_runway_direction: Option<RunwayDirectionPropertyTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<ElevatedSurfacePropertyTypeXType>,
        #[serde(default, rename = "surfaceProperties")]
        pub surface_properties: Option<SurfaceCharacteristicsPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayCentrelinePointTimeSliceContent433XType {
        #[serde(default, rename = "role")]
        pub role: Option<CodeRunwayPointRoleTypeXType>,
        #[serde(default, rename = "designator")]
        pub designator: Option<TextDesignatorTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "onRunway")]
        pub on_runway: Option<RunwayDirectionPropertyTypeXType>,
        #[serde(default, rename = "associatedDeclaredDistance")]
        pub associated_declared_distance: Vec<RunwayDeclaredDistancePropertyTypeXType>,
        #[serde(default, rename = "navaidEquipment")]
        pub navaid_equipment: Vec<NavaidEquipmentDistancePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayContaminationContent538XType {
        #[serde(default, rename = "observationTime")]
        pub observation_time: Option<DateTimeTypeXType>,
        #[serde(default, rename = "depth")]
        pub depth: Option<ValDepthTypeXType>,
        #[serde(default, rename = "frictionCoefficient")]
        pub friction_coefficient: Option<ValFrictionTypeXType>,
        #[serde(default, rename = "frictionEstimation")]
        pub friction_estimation: Option<CodeFrictionEstimateTypeXType>,
        #[serde(default, rename = "frictionDevice")]
        pub friction_device: Option<CodeFrictionDeviceTypeXType>,
        #[serde(default, rename = "obscuredLights")]
        pub obscured_lights: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "furtherClearanceTime")]
        pub further_clearance_time: Option<TimeTypeXType>,
        #[serde(default, rename = "furtherTotalClearance")]
        pub further_total_clearance: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "nextObservationTime")]
        pub next_observation_time: Option<DateTimeTypeXType>,
        #[serde(default, rename = "proportion")]
        pub proportion: Option<ValPercentTypeXType>,
        #[serde(default, rename = "criticalRidge")]
        pub critical_ridge: Vec<RidgePropertyTypeXType>,
        #[serde(default, rename = "layer")]
        pub layer: Vec<SurfaceContaminationLayerPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayContaminationContent539XType {
        #[serde(default, rename = "clearedLength")]
        pub cleared_length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "clearedWidth")]
        pub cleared_width: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "clearedSide")]
        pub cleared_side: Option<CodeSideTypeXType>,
        #[serde(default, rename = "furtherClearanceLength")]
        pub further_clearance_length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "furtherClearanceWidth")]
        pub further_clearance_width: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "obscuredLightsSide")]
        pub obscured_lights_side: Option<CodeSideTypeXType>,
        #[serde(default, rename = "clearedLengthBegin")]
        pub cleared_length_begin: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "taxiwayAvailable")]
        pub taxiway_available: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "apronAvailable")]
        pub apron_available: Option<CodeYesNoTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDeclaredDistanceContent437XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeDeclaredDistanceTypeXType>,
        #[serde(default, rename = "declaredValue")]
        pub declared_value: Vec<RunwayDeclaredDistanceValuePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDeclaredDistanceValueContent442XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDeclaredDistanceValueContent443XType {
        #[serde(default, rename = "distance")]
        pub distance: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "distanceAccuracy")]
        pub distance_accuracy: Option<ValDistanceTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDirectionLightSystemTimeSliceContent275XType {
        #[serde(default, rename = "Content276")]
        pub content_276: Option<RunwayDirectionLightSystemTimeSliceContent276XType>,
        #[serde(default, rename = "position")]
        pub position: Option<CodeRunwaySectionTypeXType>,
        #[serde(default, rename = "associatedRunwayDirection")]
        pub associated_runway_direction: Option<RunwayDirectionPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDirectionTimeSliceContent451XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<TextDesignatorTypeXType>,
        #[serde(default, rename = "trueBearing")]
        pub true_bearing: Option<ValBearingTypeXType>,
        #[serde(default, rename = "trueBearingAccuracy")]
        pub true_bearing_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "magneticBearing")]
        pub magnetic_bearing: Option<ValBearingTypeXType>,
        #[serde(default, rename = "patternVFR")]
        pub pattern_vfr: Option<CodeDirectionTurnTypeXType>,
        #[serde(default, rename = "slopeTDZ")]
        pub slope_tdz: Option<ValSlopeTypeXType>,
        #[serde(default, rename = "elevationTDZ")]
        pub elevation_tdz: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "elevationTDZAccuracy")]
        pub elevation_tdz_accuracy: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "approachMarkingType")]
        pub approach_marking_type: Option<CodeRunwayMarkingTypeXType>,
        #[serde(default, rename = "approachMarkingCondition")]
        pub approach_marking_condition: Option<CodeMarkingConditionTypeXType>,
        #[serde(default, rename = "classLightingJAR")]
        pub class_lighting_jar: Option<CodeLightingJarTypeXType>,
        #[serde(default, rename = "precisionApproachGuidance")]
        pub precision_approach_guidance: Option<CodeApproachGuidanceTypeXType>,
        #[serde(default, rename = "usedRunway")]
        pub used_runway: Option<RunwayPropertyTypeXType>,
        #[serde(default, rename = "startingElement")]
        pub starting_element: Option<RunwayElementPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ManoeuvringAreaAvailabilityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayElementTimeSliceContent458XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeRunwayElementTypeXType>,
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "width")]
        pub width: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "gradeSeparation")]
        pub grade_separation: Option<CodeGradeSeparationTypeXType>,
        #[serde(default, rename = "surfaceProperties")]
        pub surface_properties: Option<SurfaceCharacteristicsPropertyTypeXType>,
        #[serde(default, rename = "associatedRunway")]
        pub associated_runway: Vec<RunwayPropertyTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<ElevatedSurfacePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ManoeuvringAreaAvailabilityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayMarkingTimeSliceContent354XType {
        #[serde(default, rename = "Content355")]
        pub content_355: Option<RunwayMarkingTimeSliceContent355XType>,
        #[serde(default, rename = "markingLocation")]
        pub marking_location: Option<CodeRunwaySectionTypeXType>,
        #[serde(default, rename = "markedRunway")]
        pub marked_runway: Option<RunwayPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayProtectAreaLightSystemTimeSliceContent283XType {
        #[serde(default, rename = "Content284")]
        pub content_284: Option<RunwayProtectAreaLightSystemTimeSliceContent284XType>,
        #[serde(default, rename = "position")]
        pub position: Option<CodeProtectAreaSectionTypeXType>,
        #[serde(default, rename = "lightedArea")]
        pub lighted_area: Option<RunwayProtectAreaPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayProtectAreaTimeSliceContent465XType {
        #[serde(default, rename = "Content466")]
        pub content_466: Option<RunwayProtectAreaTimeSliceContent466XType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeRunwayProtectionAreaTypeXType>,
        #[serde(default, rename = "status")]
        pub status: Option<CodeStatusOperationsTypeXType>,
        #[serde(default, rename = "protectedRunwayDirection")]
        pub protected_runway_direction: Option<RunwayDirectionPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwaySectionContaminationContent544XType {
        #[serde(default, rename = "observationTime")]
        pub observation_time: Option<DateTimeTypeXType>,
        #[serde(default, rename = "depth")]
        pub depth: Option<ValDepthTypeXType>,
        #[serde(default, rename = "frictionCoefficient")]
        pub friction_coefficient: Option<ValFrictionTypeXType>,
        #[serde(default, rename = "frictionEstimation")]
        pub friction_estimation: Option<CodeFrictionEstimateTypeXType>,
        #[serde(default, rename = "frictionDevice")]
        pub friction_device: Option<CodeFrictionDeviceTypeXType>,
        #[serde(default, rename = "obscuredLights")]
        pub obscured_lights: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "furtherClearanceTime")]
        pub further_clearance_time: Option<TimeTypeXType>,
        #[serde(default, rename = "furtherTotalClearance")]
        pub further_total_clearance: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "nextObservationTime")]
        pub next_observation_time: Option<DateTimeTypeXType>,
        #[serde(default, rename = "proportion")]
        pub proportion: Option<ValPercentTypeXType>,
        #[serde(default, rename = "criticalRidge")]
        pub critical_ridge: Vec<RidgePropertyTypeXType>,
        #[serde(default, rename = "layer")]
        pub layer: Vec<SurfaceContaminationLayerPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwaySectionContaminationContent545XType {
        #[serde(default, rename = "section")]
        pub section: Option<CodeRunwaySectionTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayTimeSliceContent419XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<TextDesignatorTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeRunwayTypeXType>,
        #[serde(default, rename = "nominalLength")]
        pub nominal_length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "lengthAccuracy")]
        pub length_accuracy: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "nominalWidth")]
        pub nominal_width: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "widthAccuracy")]
        pub width_accuracy: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "widthShoulder")]
        pub width_shoulder: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "lengthStrip")]
        pub length_strip: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "widthStrip")]
        pub width_strip: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "lengthOffset")]
        pub length_offset: Option<ValDistanceSignedTypeXType>,
        #[serde(default, rename = "widthOffset")]
        pub width_offset: Option<ValDistanceSignedTypeXType>,
        #[serde(default, rename = "abandoned")]
        pub abandoned: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "surfaceProperties")]
        pub surface_properties: Option<SurfaceCharacteristicsPropertyTypeXType>,
        #[serde(default, rename = "associatedAirportHeliport")]
        pub associated_airport_heliport: Option<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "overallContaminant")]
        pub overall_contaminant: Vec<RunwayContaminationPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "areaContaminant")]
        pub area_contaminant: Vec<RunwaySectionContaminationPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayVisualRangeTimeSliceContent473XType {
        #[serde(default, rename = "readingPosition")]
        pub reading_position: Option<CodeRvrReadingTypeXType>,
        #[serde(default, rename = "associatedRunwayDirection")]
        pub associated_runway_direction: Vec<RunwayDirectionPropertyTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SdfTimeSliceContent831XType {
        #[serde(default, rename = "Content832")]
        pub content_832: Option<SdfTimeSliceContent832XType>,
        #[serde(default, rename = "frequency")]
        pub frequency: Option<ValFrequencyTypeXType>,
        #[serde(default, rename = "magneticBearing")]
        pub magnetic_bearing: Option<ValBearingTypeXType>,
        #[serde(default, rename = "trueBearing")]
        pub true_bearing: Option<ValBearingTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SafeAltitudeAreaSectorContent1139XType {
        #[serde(default, rename = "bufferWidth")]
        pub buffer_width: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<SurfacePropertyTypeXType>,
        #[serde(default, rename = "significantObstacle")]
        pub significant_obstacle: Vec<ObstructionPropertyTypeXType>,
        #[serde(default, rename = "sectorDefinition")]
        pub sector_definition: Option<CircleSectorPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SafeAltitudeAreaTimeSliceContent1134XType {
        #[serde(default, rename = "safeAreaType")]
        pub safe_area_type: Option<CodeSafeAltitudeTypeXType>,
        #[serde(rename = "Content1135")]
        pub content_1135: SafeAltitudeAreaTimeSliceContent1135XType,
        #[serde(default, rename = "sector")]
        pub sector: Vec<SafeAltitudeAreaSectorPropertyTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Vec<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SeaplaneLandingAreaTimeSliceContent502XType {
        #[serde(default, rename = "rampSite")]
        pub ramp_site: Vec<SeaplaneRampSitePropertyTypeXType>,
        #[serde(default, rename = "dockSite")]
        pub dock_site: Vec<FloatingDockSitePropertyTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<ElevatedSurfacePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ManoeuvringAreaAvailabilityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SeaplaneRampSiteTimeSliceContent509XType {
        #[serde(default, rename = "extent")]
        pub extent: Option<ElevatedSurfacePropertyTypeXType>,
        #[serde(default, rename = "centreline")]
        pub centreline: Option<ElevatedCurvePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SearchRescueServiceTimeSliceContent1494XType {
        #[serde(default, rename = "Content1495")]
        pub content_1495: Option<SearchRescueServiceTimeSliceContent1495XType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeServiceSarTypeXType>,
        #[serde(default, rename = "clientAirspace")]
        pub client_airspace: Vec<AirspacePropertyTypeXType>,
        #[serde(default, rename = "clientRoute")]
        pub client_route: Vec<RoutePortionPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SecondarySurveillanceRadarTimeSliceContent1677XType {
        #[serde(default, rename = "Content1678")]
        pub content_1678: Option<SecondarySurveillanceRadarTimeSliceContent1678XType>,
        #[serde(default, rename = "transponder")]
        pub transponder: Option<CodeTransponderTypeXType>,
        #[serde(default, rename = "autonomous")]
        pub autonomous: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "monopulse")]
        pub monopulse: Option<CodeYesNoTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SectorDesignContent1117XType {
        #[serde(default, rename = "turnDirection")]
        pub turn_direction: Option<CodeDirectionTurnTypeXType>,
        #[serde(default, rename = "designGradient")]
        pub design_gradient: Option<ValSlopeTypeXType>,
        #[serde(default, rename = "terminationAltitude")]
        pub termination_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "turnPermitted")]
        pub turn_permitted: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ServiceOperationalStatusContent1499XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ServiceOperationalStatusContent1500XType {
        #[serde(default, rename = "operationalStatus")]
        pub operational_status: Option<CodeStatusServiceTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SignificantPointInAirspaceTimeSliceContent923XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeAirspacePointRoleTypeXType>,
        #[serde(default, rename = "relativeLocation")]
        pub relative_location: Option<CodeAirspacePointPositionTypeXType>,
        #[serde(default, rename = "containingAirspace")]
        pub containing_airspace: Option<AirspacePropertyTypeXType>,
        #[serde(rename = "Content924")]
        pub content_924: SignificantPointInAirspaceTimeSliceContent924XType,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialDateTimeSliceContent1576XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeSpecialDateTypeXType>,
        #[serde(default, rename = "dateDay")]
        pub date_day: Option<DateMonthDayTypeXType>,
        #[serde(default, rename = "dateYear")]
        pub date_year: Option<DateYearTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "authority")]
        pub authority: Option<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialNavigationStationStatusContent843XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialNavigationStationStatusContent844XType {
        #[serde(default, rename = "operationalStatus")]
        pub operational_status: Option<CodeStatusNavaidTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialNavigationStationTimeSliceContent839XType {
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeSpecialNavigationStationTypeXType>,
        #[serde(default, rename = "frequency")]
        pub frequency: Option<ValFrequencyTypeXType>,
        #[serde(default, rename = "emission")]
        pub emission: Option<CodeRadioEmissionTypeXType>,
        #[serde(default, rename = "systemChain")]
        pub system_chain: Option<SpecialNavigationSystemPropertyTypeXType>,
        #[serde(default, rename = "responsibleOrganisation")]
        pub responsible_organisation: Option<AuthorityForSpecialNavigationStationPropertyTypeXType>,
        #[serde(default, rename = "position")]
        pub position: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<SpecialNavigationStationStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpecialNavigationSystemTimeSliceContent852XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeSpecialNavigationSystemTypeXType>,
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeSpecialNavigationChainDesignatorTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "responsibleOrganisation")]
        pub responsible_organisation: Option<AuthorityForSpecialNavigationSystemPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandMarkingTimeSliceContent362XType {
        #[serde(default, rename = "Content363")]
        pub content_363: Option<StandMarkingTimeSliceContent363XType>,
        #[serde(default, rename = "markedStand")]
        pub marked_stand: Option<AircraftStandPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardInstrumentArrivalTimeSliceContent1093XType {
        #[serde(default, rename = "Content1094")]
        pub content_1094: Option<StandardInstrumentArrivalTimeSliceContent1094XType>,
        #[serde(default, rename = "designator")]
        pub designator: Option<TextSidstarDesignatorTypeXType>,
        #[serde(default, rename = "arrival")]
        pub arrival: Option<LandingTakeoffAreaCollectionPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardInstrumentDepartureTimeSliceContent1125XType {
        #[serde(default, rename = "Content1126")]
        pub content_1126: Option<StandardInstrumentDepartureTimeSliceContent1126XType>,
        #[serde(default, rename = "designator")]
        pub designator: Option<TextSidstarDesignatorTypeXType>,
        #[serde(default, rename = "contingencyRoute")]
        pub contingency_route: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "takeoff")]
        pub takeoff: Option<LandingTakeoffAreaCollectionPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelColumnTimeSliceContent1593XType {
        #[serde(default, rename = "series")]
        pub series: Option<CodeLevelSeriesTypeXType>,
        #[serde(default, rename = "unitOfMeasurement")]
        pub unit_of_measurement: Option<CodeDistanceVerticalUomTypeXType>,
        #[serde(default, rename = "separation")]
        pub separation: Option<CodeRvsmTypeXType>,
        #[serde(default, rename = "level")]
        pub level: Vec<StandardLevelPropertyTypeXType>,
        #[serde(default, rename = "levelTable")]
        pub level_table: Option<StandardLevelTablePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelSectorTimeSliceContent1600XType {
        #[serde(default, rename = "flightRule")]
        pub flight_rule: Option<CodeFlightRuleTypeXType>,
        #[serde(default, rename = "fromTrack")]
        pub from_track: Option<ValBearingTypeXType>,
        #[serde(default, rename = "toTrack")]
        pub to_track: Option<ValBearingTypeXType>,
        #[serde(default, rename = "angleType")]
        pub angle_type: Option<CodeNorthReferenceTypeXType>,
        #[serde(default, rename = "applicableAirspace")]
        pub applicable_airspace: Vec<AirspacePropertyTypeXType>,
        #[serde(default, rename = "applicableLevelColumn")]
        pub applicable_level_column: Option<StandardLevelColumnPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelTableTimeSliceContent1607XType {
        #[serde(default, rename = "name")]
        pub name: Option<CodeLevelTableDesignatorTypeXType>,
        #[serde(default, rename = "standardICAO")]
        pub standard_icao: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardLevelContent1585XType {
        #[serde(default, rename = "verticalDistance")]
        pub vertical_distance: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfaceCharacteristicsContent141XType {
        #[serde(default, rename = "composition")]
        pub composition: Option<CodeSurfaceCompositionTypeXType>,
        #[serde(default, rename = "preparation")]
        pub preparation: Option<CodeSurfacePreparationTypeXType>,
        #[serde(default, rename = "surfaceCondition")]
        pub surface_condition: Option<CodeSurfaceConditionTypeXType>,
        #[serde(default, rename = "classPCN")]
        pub class_pcn: Option<ValPcnTypeXType>,
        #[serde(default, rename = "pavementTypePCN")]
        pub pavement_type_pcn: Option<CodePcnPavementTypeXType>,
        #[serde(default, rename = "pavementSubgradePCN")]
        pub pavement_subgrade_pcn: Option<CodePcnSubgradeTypeXType>,
        #[serde(default, rename = "maxTyrePressurePCN")]
        pub max_tyre_pressure_pcn: Option<CodePcnTyrePressureTypeXType>,
        #[serde(default, rename = "evaluationMethodPCN")]
        pub evaluation_method_pcn: Option<CodePcnMethodTypeXType>,
        #[serde(default, rename = "classLCN")]
        pub class_lcn: Option<ValLcnTypeXType>,
        #[serde(default, rename = "weightSIWL")]
        pub weight_siwl: Option<ValWeightTypeXType>,
        #[serde(default, rename = "tyrePressureSIWL")]
        pub tyre_pressure_siwl: Option<ValPressureTypeXType>,
        #[serde(default, rename = "weightAUW")]
        pub weight_auw: Option<ValWeightTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfaceContaminationLayerContent551XType {
        #[serde(default, rename = "layerOrder")]
        pub layer_order: Option<NoSequenceTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeContaminationTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Vec<ElevatedSurfacePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurveillanceGroundStationContent1683XType {
        #[serde(default, rename = "videoMap")]
        pub video_map: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "theUnit")]
        pub the_unit: Option<UnitPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurveyControlPointTimeSliceContent149XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<TextNameTypeXType>,
        #[serde(default, rename = "associatedAirportHeliport")]
        pub associated_airport_heliport: Option<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TacanTimeSliceContent859XType {
        #[serde(default, rename = "Content860")]
        pub content_860: Option<TacanTimeSliceContent860XType>,
        #[serde(default, rename = "channel")]
        pub channel: Option<CodeTacanChannelTypeXType>,
        #[serde(default, rename = "declination")]
        pub declination: Option<ValMagneticVariationTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionLightSystemTimeSliceContent291XType {
        #[serde(default, rename = "Content292")]
        pub content_292: Option<TaxiHoldingPositionLightSystemTimeSliceContent292XType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeLightHoldingPositionTypeXType>,
        #[serde(default, rename = "taxiHolding")]
        pub taxi_holding: Option<TaxiHoldingPositionPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionMarkingTimeSliceContent370XType {
        #[serde(default, rename = "Content371")]
        pub content_371: Option<TaxiHoldingPositionMarkingTimeSliceContent371XType>,
        #[serde(default, rename = "markedTaxiHold")]
        pub marked_taxi_hold: Option<TaxiHoldingPositionPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionTimeSliceContent578XType {
        #[serde(default, rename = "landingCategory")]
        pub landing_category: Option<CodeHoldingCategoryTypeXType>,
        #[serde(default, rename = "status")]
        pub status: Option<CodeStatusOperationsTypeXType>,
        #[serde(default, rename = "associatedGuidanceLine")]
        pub associated_guidance_line: Option<GuidanceLinePropertyTypeXType>,
        #[serde(default, rename = "protectedRunway")]
        pub protected_runway: Vec<RunwayPropertyTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayContaminationContent556XType {
        #[serde(default, rename = "observationTime")]
        pub observation_time: Option<DateTimeTypeXType>,
        #[serde(default, rename = "depth")]
        pub depth: Option<ValDepthTypeXType>,
        #[serde(default, rename = "frictionCoefficient")]
        pub friction_coefficient: Option<ValFrictionTypeXType>,
        #[serde(default, rename = "frictionEstimation")]
        pub friction_estimation: Option<CodeFrictionEstimateTypeXType>,
        #[serde(default, rename = "frictionDevice")]
        pub friction_device: Option<CodeFrictionDeviceTypeXType>,
        #[serde(default, rename = "obscuredLights")]
        pub obscured_lights: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "furtherClearanceTime")]
        pub further_clearance_time: Option<TimeTypeXType>,
        #[serde(default, rename = "furtherTotalClearance")]
        pub further_total_clearance: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "nextObservationTime")]
        pub next_observation_time: Option<DateTimeTypeXType>,
        #[serde(default, rename = "proportion")]
        pub proportion: Option<ValPercentTypeXType>,
        #[serde(default, rename = "criticalRidge")]
        pub critical_ridge: Vec<RidgePropertyTypeXType>,
        #[serde(default, rename = "layer")]
        pub layer: Vec<SurfaceContaminationLayerPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayContaminationContent557XType {
        #[serde(default, rename = "clearedWidth")]
        pub cleared_width: Option<ValDistanceTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayElementTimeSliceContent592XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeTaxiwayElementTypeXType>,
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "width")]
        pub width: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "gradeSeparation")]
        pub grade_separation: Option<CodeGradeSeparationTypeXType>,
        #[serde(default, rename = "surfaceProperties")]
        pub surface_properties: Option<SurfaceCharacteristicsPropertyTypeXType>,
        #[serde(default, rename = "associatedTaxiway")]
        pub associated_taxiway: Option<TaxiwayPropertyTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<ElevatedSurfacePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ManoeuvringAreaAvailabilityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayLightSystemTimeSliceContent299XType {
        #[serde(default, rename = "Content300")]
        pub content_300: Option<TaxiwayLightSystemTimeSliceContent300XType>,
        #[serde(default, rename = "position")]
        pub position: Option<CodeTaxiwaySectionTypeXType>,
        #[serde(default, rename = "lightedTaxiway")]
        pub lighted_taxiway: Option<TaxiwayPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayMarkingTimeSliceContent378XType {
        #[serde(default, rename = "Content379")]
        pub content_379: Option<TaxiwayMarkingTimeSliceContent379XType>,
        #[serde(default, rename = "markingLocation")]
        pub marking_location: Option<CodeTaxiwaySectionTypeXType>,
        #[serde(default, rename = "markedTaxiway")]
        pub marked_taxiway: Option<TaxiwayPropertyTypeXType>,
        #[serde(default, rename = "markedElement")]
        pub marked_element: Option<TaxiwayElementPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayTimeSliceContent585XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<TextDesignatorTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeTaxiwayTypeXType>,
        #[serde(default, rename = "width")]
        pub width: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "widthShoulder")]
        pub width_shoulder: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "abandoned")]
        pub abandoned: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "surfaceProperties")]
        pub surface_properties: Option<SurfaceCharacteristicsPropertyTypeXType>,
        #[serde(default, rename = "associatedAirportHeliport")]
        pub associated_airport_heliport: Option<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "contaminant")]
        pub contaminant: Vec<TaxiwayContaminationPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ManoeuvringAreaAvailabilityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TelephoneContactContent1522XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TelephoneContactContent1523XType {
        #[serde(default, rename = "voice")]
        pub voice: Option<TextPhoneTypeXType>,
        #[serde(default, rename = "facsimile")]
        pub facsimile: Option<TextPhoneTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TerminalArrivalAreaSectorContent1052XType {
        #[serde(default, rename = "flyByCode")]
        pub fly_by_code: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "procedureTurnRequired")]
        pub procedure_turn_required: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "altitudeDescription")]
        pub altitude_description: Option<CodeAltitudeUseTypeXType>,
        #[serde(default, rename = "sectorDefinition")]
        pub sector_definition: Option<CircleSectorPropertyTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<SurfacePropertyTypeXType>,
        #[serde(default, rename = "significantObstacle")]
        pub significant_obstacle: Vec<ObstructionPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TerminalArrivalAreaTimeSliceContent1046XType {
        #[serde(default, rename = "arrivalAreaType")]
        pub arrival_area_type: Option<CodeTaaTypeXType>,
        #[serde(default, rename = "outerBufferWidth")]
        pub outer_buffer_width: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "lateralBufferWidth")]
        pub lateral_buffer_width: Option<ValDistanceTypeXType>,
        #[serde(rename = "Content1047")]
        pub content_1047: TerminalArrivalAreaTimeSliceContent1047XType,
        #[serde(rename = "Content1048")]
        pub content_1048: TerminalArrivalAreaTimeSliceContent1048XType,
        #[serde(default, rename = "buffer")]
        pub buffer: Option<SurfacePropertyTypeXType>,
        #[serde(default, rename = "sector")]
        pub sector: Vec<TerminalArrivalAreaSectorPropertyTypeXType>,
        #[serde(default, rename = "approachRNAV")]
        pub approach_rnav: Option<InstrumentApproachProcedurePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TerminalSegmentPointContent906XType {
        #[serde(default, rename = "reportingATC")]
        pub reporting_atc: Option<CodeAtcReportingTypeXType>,
        #[serde(default, rename = "flyOver")]
        pub fly_over: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "waypoint")]
        pub waypoint: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "radarGuidance")]
        pub radar_guidance: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "facilityMakeup")]
        pub facility_makeup: Vec<PointReferencePropertyTypeXType>,
        #[serde(rename = "Content907")]
        pub content_907: TerminalSegmentPointContent907XType,
        #[serde(default, rename = "extendedServiceVolume")]
        pub extended_service_volume: Option<RadioFrequencyAreaPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TerminalSegmentPointContent908XType {
        #[serde(default, rename = "role")]
        pub role: Option<CodeProcedureFixRoleTypeXType>,
        #[serde(default, rename = "leadRadial")]
        pub lead_radial: Option<ValBearingTypeXType>,
        #[serde(default, rename = "leadDME")]
        pub lead_dme: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "indicatorFACF")]
        pub indicator_facf: Option<CodeYesNoTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimesheetContent1580XType {
        #[serde(default, rename = "timeReference")]
        pub time_reference: Option<CodeTimeReferenceTypeXType>,
        #[serde(default, rename = "startDate")]
        pub start_date: Option<DateMonthDayTypeXType>,
        #[serde(default, rename = "endDate")]
        pub end_date: Option<DateMonthDayTypeXType>,
        #[serde(default, rename = "day")]
        pub day: Option<CodeDayTypeXType>,
        #[serde(default, rename = "dayTil")]
        pub day_til: Option<CodeDayTypeXType>,
        #[serde(default, rename = "startTime")]
        pub start_time: Option<TimeTypeXType>,
        #[serde(default, rename = "startEvent")]
        pub start_event: Option<CodeTimeEventTypeXType>,
        #[serde(default, rename = "startTimeRelativeEvent")]
        pub start_time_relative_event: Option<ValDurationTypeXType>,
        #[serde(default, rename = "startEventInterpretation")]
        pub start_event_interpretation: Option<CodeTimeEventCombinationTypeXType>,
        #[serde(default, rename = "endTime")]
        pub end_time: Option<TimeTypeXType>,
        #[serde(default, rename = "endEvent")]
        pub end_event: Option<CodeTimeEventTypeXType>,
        #[serde(default, rename = "endTimeRelativeEvent")]
        pub end_time_relative_event: Option<ValDurationTypeXType>,
        #[serde(default, rename = "endEventInterpretation")]
        pub end_event_interpretation: Option<CodeTimeEventCombinationTypeXType>,
        #[serde(default, rename = "daylightSavingAdjust")]
        pub daylight_saving_adjust: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "excluded")]
        pub excluded: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffContaminationContent562XType {
        #[serde(default, rename = "observationTime")]
        pub observation_time: Option<DateTimeTypeXType>,
        #[serde(default, rename = "depth")]
        pub depth: Option<ValDepthTypeXType>,
        #[serde(default, rename = "frictionCoefficient")]
        pub friction_coefficient: Option<ValFrictionTypeXType>,
        #[serde(default, rename = "frictionEstimation")]
        pub friction_estimation: Option<CodeFrictionEstimateTypeXType>,
        #[serde(default, rename = "frictionDevice")]
        pub friction_device: Option<CodeFrictionDeviceTypeXType>,
        #[serde(default, rename = "obscuredLights")]
        pub obscured_lights: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "furtherClearanceTime")]
        pub further_clearance_time: Option<TimeTypeXType>,
        #[serde(default, rename = "furtherTotalClearance")]
        pub further_total_clearance: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "nextObservationTime")]
        pub next_observation_time: Option<DateTimeTypeXType>,
        #[serde(default, rename = "proportion")]
        pub proportion: Option<ValPercentTypeXType>,
        #[serde(default, rename = "criticalRidge")]
        pub critical_ridge: Vec<RidgePropertyTypeXType>,
        #[serde(default, rename = "layer")]
        pub layer: Vec<SurfaceContaminationLayerPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffLightSystemTimeSliceContent307XType {
        #[serde(default, rename = "Content308")]
        pub content_308: Option<TouchDownLiftOffLightSystemTimeSliceContent308XType>,
        #[serde(default, rename = "position")]
        pub position: Option<CodeTlofSectionTypeXType>,
        #[serde(default, rename = "lightedTouchDownLiftOff")]
        pub lighted_touch_down_lift_off: Option<TouchDownLiftOffPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffMarkingTimeSliceContent386XType {
        #[serde(default, rename = "Content387")]
        pub content_387: Option<TouchDownLiftOffMarkingTimeSliceContent387XType>,
        #[serde(default, rename = "markingLocation")]
        pub marking_location: Option<CodeTlofSectionTypeXType>,
        #[serde(default, rename = "markedTouchDownLiftOff")]
        pub marked_touch_down_lift_off: Option<TouchDownLiftOffPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffSafeAreaTimeSliceContent231XType {
        #[serde(default, rename = "Content232")]
        pub content_232: Option<TouchDownLiftOffSafeAreaTimeSliceContent232XType>,
        #[serde(default, rename = "protectedTouchDownLiftOff")]
        pub protected_touch_down_lift_off: Option<TouchDownLiftOffPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffTimeSliceContent224XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<TextDesignatorTypeXType>,
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "width")]
        pub width: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "slope")]
        pub slope: Option<ValSlopeTypeXType>,
        #[serde(default, rename = "helicopterClass")]
        pub helicopter_class: Option<CodeHelicopterPerformanceTypeXType>,
        #[serde(default, rename = "abandoned")]
        pub abandoned: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "aimingPoint")]
        pub aiming_point: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<ElevatedSurfacePropertyTypeXType>,
        #[serde(default, rename = "surfaceProperties")]
        pub surface_properties: Option<SurfaceCharacteristicsPropertyTypeXType>,
        #[serde(default, rename = "associatedAirportHeliport")]
        pub associated_airport_heliport: Option<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "approachTakeOffArea")]
        pub approach_take_off_area: Option<RunwayPropertyTypeXType>,
        #[serde(default, rename = "contaminant")]
        pub contaminant: Vec<TouchDownLiftOffContaminationPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ManoeuvringAreaAvailabilityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitAvailabilityContent992XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitAvailabilityContent993XType {
        #[serde(default, rename = "operationalStatus")]
        pub operational_status: Option<CodeStatusOperationsTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitDependencyContent998XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeUnitDependencyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "theUnit")]
        pub the_unit: Option<UnitPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitTimeSliceContent988XType {
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeUnitTypeXType>,
        #[serde(default, rename = "compliantICAO")]
        pub compliant_icao: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeOrganisationDesignatorTypeXType>,
        #[serde(default, rename = "military")]
        pub military: Option<CodeMilitaryOperationsTypeXType>,
        #[serde(default, rename = "position")]
        pub position: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "airportLocation")]
        pub airport_location: Option<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "ownerOrganisation")]
        pub owner_organisation: Option<OrganisationAuthorityPropertyTypeXType>,
        #[serde(default, rename = "contact")]
        pub contact: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "relatedUnit")]
        pub related_unit: Vec<UnitDependencyPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<UnitAvailabilityPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnplannedHoldingTimeSliceContent703XType {
        #[serde(default, rename = "unplannedHolding")]
        pub unplanned_holding: Option<CodeApprovalTypeXType>,
        #[serde(default, rename = "authorizedAltitude")]
        pub authorized_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "altitudeReference")]
        pub altitude_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "controlledAirspace")]
        pub controlled_airspace: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "holdingPoint")]
        pub holding_point: Option<SegmentPointPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VorTimeSliceContent867XType {
        #[serde(default, rename = "Content868")]
        pub content_868: Option<VorTimeSliceContent868XType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeVorTypeXType>,
        #[serde(default, rename = "frequency")]
        pub frequency: Option<ValFrequencyTypeXType>,
        #[serde(default, rename = "zeroBearingDirection")]
        pub zero_bearing_direction: Option<CodeNorthReferenceTypeXType>,
        #[serde(default, rename = "declination")]
        pub declination: Option<ValMagneticVariationTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalStructureLightingStatusContent960XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalStructureLightingStatusContent961XType {
        #[serde(default, rename = "status")]
        pub status: Option<CodeStatusOperationsTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalStructurePartContent966XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalStructurePartContent967XType {
        #[serde(default, rename = "verticalExtent")]
        pub vertical_extent: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "verticalExtentAccuracy")]
        pub vertical_extent_accuracy: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeVerticalStructureTypeXType>,
        #[serde(default, rename = "constructionStatus")]
        pub construction_status: Option<CodeStatusConstructionTypeXType>,
        #[serde(default, rename = "markingPattern")]
        pub marking_pattern: Option<CodeVerticalStructureMarkingTypeXType>,
        #[serde(default, rename = "markingFirstColour")]
        pub marking_first_colour: Option<CodeColourTypeXType>,
        #[serde(default, rename = "markingSecondColour")]
        pub marking_second_colour: Option<CodeColourTypeXType>,
        #[serde(default, rename = "mobile")]
        pub mobile: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "frangible")]
        pub frangible: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "visibleMaterial")]
        pub visible_material: Option<CodeVerticalStructureMaterialTypeXType>,
        #[serde(default, rename = "designator")]
        pub designator: Option<TextDesignatorTypeXType>,
        #[serde(rename = "Content968")]
        pub content_968: VerticalStructurePartContent968XType,
        #[serde(default, rename = "lighting")]
        pub lighting: Vec<LightElementPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalStructureTimeSliceContent956XType {
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeVerticalStructureTypeXType>,
        #[serde(default, rename = "lighted")]
        pub lighted: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "markingICAOStandard")]
        pub marking_icao_standard: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "group")]
        pub group: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "width")]
        pub width: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "radius")]
        pub radius: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "lightingICAOStandard")]
        pub lighting_icao_standard: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "synchronisedLighting")]
        pub synchronised_lighting: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "marker")]
        pub marker: Option<MarkerBeaconPropertyTypeXType>,
        #[serde(default, rename = "part")]
        pub part: Vec<VerticalStructurePartPropertyTypeXType>,
        #[serde(default, rename = "hostedPassengerService")]
        pub hosted_passenger_service: Vec<PassengerServicePropertyTypeXType>,
        #[serde(default, rename = "supportedGroundLight")]
        pub supported_ground_light: Vec<GroundLightSystemPropertyTypeXType>,
        #[serde(default, rename = "hostedNavaidEquipment")]
        pub hosted_navaid_equipment: Vec<NavaidEquipmentPropertyTypeXType>,
        #[serde(default, rename = "hostedSpecialNavStation")]
        pub hosted_special_nav_station: Vec<SpecialNavigationStationPropertyTypeXType>,
        #[serde(default, rename = "hostedUnit")]
        pub hosted_unit: Vec<UnitPropertyTypeXType>,
        #[serde(default, rename = "hostedOrganisation")]
        pub hosted_organisation: Vec<OrganisationAuthorityPropertyTypeXType>,
        #[serde(default, rename = "supportedService")]
        pub supported_service: Vec<ServicePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "lightingAvailability")]
        pub lighting_availability: Vec<VerticalStructureLightingStatusPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VisualGlideSlopeIndicatorTimeSliceContent480XType {
        #[serde(default, rename = "Content481")]
        pub content_481: Option<VisualGlideSlopeIndicatorTimeSliceContent481XType>,
        #[serde(default, rename = "type")]
        pub type_: Option<CodeVasisTypeXType>,
        #[serde(default, rename = "position")]
        pub position: Option<CodeSideTypeXType>,
        #[serde(default, rename = "numberBox")]
        pub number_box: Option<NoNumberTypeXType>,
        #[serde(default, rename = "portable")]
        pub portable: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "slopeAngle")]
        pub slope_angle: Option<ValAngleTypeXType>,
        #[serde(default, rename = "minimumEyeHeightOverThreshold")]
        pub minimum_eye_height_over_threshold: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "runwayDirection")]
        pub runway_direction: Option<RunwayDirectionPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct WorkAreaTimeSliceContent157XType {
        #[serde(default, rename = "type")]
        pub type_: Option<CodeWorkAreaTypeXType>,
        #[serde(default, rename = "plannedOperational")]
        pub planned_operational: Option<DateTypeXType>,
        #[serde(default, rename = "associatedAirportHeliport")]
        pub associated_airport_heliport: Option<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<ElevatedSurfacePropertyTypeXType>,
        #[serde(default, rename = "activation")]
        pub activation: Vec<WorkareaActivityPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct WorkareaActivityContent161XType {
        #[serde(default, rename = "timeInterval")]
        pub time_interval: Vec<TimesheetPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "specialDateAuthority")]
        pub special_date_authority: Vec<OrganisationAuthorityPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct WorkareaActivityContent162XType {
        #[serde(default, rename = "isActive")]
        pub is_active: Option<CodeYesNoTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAixmFeatureBaseContent10XType {
        #[serde(default, rename = "description")]
        pub description: Option<super::gml::DescriptionXElement>,
        #[serde(default, rename = "identifier")]
        pub identifier: Option<super::gml::IdentifierXElement>,
        #[serde(default, rename = "name")]
        pub name: Vec<super::gml::NameXElement>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AerialRefuellingPointContent50XType {
        #[serde(rename = "pointChoice_fixDesignatedPoint")]
        PointChoiceFixDesignatedPoint(Option<DesignatedPointPropertyTypeXType>),
        #[serde(rename = "pointChoice_navaidSystem")]
        PointChoiceNavaidSystem(Option<NavaidPropertyTypeXType>),
        #[serde(rename = "pointChoice_position")]
        PointChoicePosition(Option<PointPropertyTypeXType>),
        #[serde(rename = "pointChoice_runwayPoint")]
        PointChoiceRunwayPoint(Option<RunwayCentrelinePointPropertyTypeXType>),
        #[serde(rename = "pointChoice_aimingPoint")]
        PointChoiceAimingPoint(Option<TouchDownLiftOffPropertyTypeXType>),
        #[serde(rename = "pointChoice_airportReferencePoint")]
        PointChoiceAirportReferencePoint(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirTrafficControlServiceTimeSliceContent1398XType {
        #[serde(default, rename = "Content1399")]
        pub content_1399: Option<AirTrafficControlServiceTimeSliceContent1399XType>,
        #[serde(default, rename = "radarAssisted")]
        pub radar_assisted: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "dataLinkEnabled")]
        pub data_link_enabled: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "dataLinkChannel")]
        pub data_link_channel: Option<CodeCommunicationChannelTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirTrafficManagementServiceTimeSliceContent1407XType {
        #[serde(default, rename = "flightOperations")]
        pub flight_operations: Option<CodeFlightDestinationTypeXType>,
        #[serde(default, rename = "rank")]
        pub rank: Option<CodeFacilityRankingTypeXType>,
        #[serde(default, rename = "compliantICAO")]
        pub compliant_icao: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "serviceProvider")]
        pub service_provider: Option<UnitPropertyTypeXType>,
        #[serde(default, rename = "call-sign")]
        pub call_sign: Vec<CallsignDetailPropertyTypeXType>,
        #[serde(default, rename = "radioCommunication")]
        pub radio_communication: Vec<RadioCommunicationChannelPropertyTypeXType>,
        #[serde(default, rename = "groundCommunication")]
        pub ground_communication: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ServiceOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftGroundServiceTimeSliceContent1370XType {
        #[serde(default, rename = "Content1371")]
        pub content_1371: Option<AircraftGroundServiceTimeSliceContent1371XType>,
        #[serde(default, rename = "airportHeliport")]
        pub airport_heliport: Vec<AirportHeliportPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportClearanceServiceTimeSliceContent1379XType {
        #[serde(default, rename = "Content1380")]
        pub content_1380: Option<AirportClearanceServiceTimeSliceContent1380XType>,
        #[serde(default, rename = "airportHeliport")]
        pub airport_heliport: Vec<AirportHeliportPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportProtectionAreaMarkingTimeSliceContent317XType {
        #[serde(default, rename = "markingICAOStandard")]
        pub marking_icao_standard: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "condition")]
        pub condition: Option<CodeMarkingConditionTypeXType>,
        #[serde(default, rename = "element")]
        pub element: Vec<MarkingElementPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportSuppliesServiceTimeSliceContent1388XType {
        #[serde(default, rename = "Content1389")]
        pub content_1389: Option<AirportSuppliesServiceTimeSliceContent1389XType>,
        #[serde(default, rename = "airportHeliport")]
        pub airport_heliport: Vec<AirportHeliportPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AngleIndicationTimeSliceContent876XType {
        #[serde(rename = "pointChoice_fixDesignatedPoint")]
        PointChoiceFixDesignatedPoint(Option<DesignatedPointPropertyTypeXType>),
        #[serde(rename = "pointChoice_navaidSystem")]
        PointChoiceNavaidSystem(Option<NavaidPropertyTypeXType>),
        #[serde(rename = "pointChoice_position")]
        PointChoicePosition(Option<PointPropertyTypeXType>),
        #[serde(rename = "pointChoice_runwayPoint")]
        PointChoiceRunwayPoint(Option<RunwayCentrelinePointPropertyTypeXType>),
        #[serde(rename = "pointChoice_aimingPoint")]
        PointChoiceAimingPoint(Option<TouchDownLiftOffPropertyTypeXType>),
        #[serde(rename = "pointChoice_airportReferencePoint")]
        PointChoiceAirportReferencePoint(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApproachLightingSystemTimeSliceContent241XType {
        #[serde(default, rename = "emergencyLighting")]
        pub emergency_lighting: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "intensityLevel")]
        pub intensity_level: Option<CodeLightIntensityTypeXType>,
        #[serde(default, rename = "colour")]
        pub colour: Option<CodeColourTypeXType>,
        #[serde(default, rename = "element")]
        pub element: Vec<LightElementPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<GroundLightingAvailabilityPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronLightSystemTimeSliceContent249XType {
        #[serde(default, rename = "emergencyLighting")]
        pub emergency_lighting: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "intensityLevel")]
        pub intensity_level: Option<CodeLightIntensityTypeXType>,
        #[serde(default, rename = "colour")]
        pub colour: Option<CodeColourTypeXType>,
        #[serde(default, rename = "element")]
        pub element: Vec<LightElementPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<GroundLightingAvailabilityPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ApronMarkingTimeSliceContent325XType {
        #[serde(default, rename = "markingICAOStandard")]
        pub marking_icao_standard: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "condition")]
        pub condition: Option<CodeMarkingConditionTypeXType>,
        #[serde(default, rename = "element")]
        pub element: Vec<MarkingElementPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ArrestingGearTimeSliceContent395XType {
        #[serde(rename = "extent_surfaceExtent")]
        ExtentSurfaceExtent(Option<ElevatedSurfacePropertyTypeXType>),
        #[serde(rename = "extent_curveExtent")]
        ExtentCurveExtent(Option<ElevatedCurvePropertyTypeXType>),
        #[serde(rename = "extent_pointExtent")]
        ExtentPointExtent(Option<ElevatedPointPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrivalFeederLegTimeSliceContent1150XType {
        #[serde(default, rename = "Content1151")]
        pub content_1151: Option<ArrivalFeederLegTimeSliceContent1151XType>,
        #[serde(default, rename = "approach")]
        pub approach: Option<InstrumentApproachProcedurePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrivalLegTimeSliceContent1159XType {
        #[serde(default, rename = "endConditionDesignator")]
        pub end_condition_designator: Option<CodeSegmentTerminationTypeXType>,
        #[serde(default, rename = "legPath")]
        pub leg_path: Option<CodeTrajectoryTypeXType>,
        #[serde(default, rename = "legTypeARINC")]
        pub leg_type_arinc: Option<CodeSegmentPathTypeXType>,
        #[serde(default, rename = "course")]
        pub course: Option<ValBearingTypeXType>,
        #[serde(default, rename = "courseType")]
        pub course_type: Option<CodeCourseTypeXType>,
        #[serde(default, rename = "courseDirection")]
        pub course_direction: Option<CodeDirectionReferenceTypeXType>,
        #[serde(default, rename = "turnDirection")]
        pub turn_direction: Option<CodeDirectionTurnTypeXType>,
        #[serde(default, rename = "speedLimit")]
        pub speed_limit: Option<ValSpeedTypeXType>,
        #[serde(default, rename = "speedReference")]
        pub speed_reference: Option<CodeSpeedReferenceTypeXType>,
        #[serde(default, rename = "speedInterpretation")]
        pub speed_interpretation: Option<CodeAltitudeUseTypeXType>,
        #[serde(default, rename = "bankAngle")]
        pub bank_angle: Option<ValAngleTypeXType>,
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "duration")]
        pub duration: Option<ValDurationTypeXType>,
        #[serde(default, rename = "procedureTurnRequired")]
        pub procedure_turn_required: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "upperLimitAltitude")]
        pub upper_limit_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "upperLimitReference")]
        pub upper_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "lowerLimitAltitude")]
        pub lower_limit_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "lowerLimitReference")]
        pub lower_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "altitudeInterpretation")]
        pub altitude_interpretation: Option<CodeAltitudeUseTypeXType>,
        #[serde(default, rename = "altitudeOverrideATC")]
        pub altitude_override_atc: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "altitudeOverrideReference")]
        pub altitude_override_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "verticalAngle")]
        pub vertical_angle: Option<ValAngleTypeXType>,
        #[serde(default, rename = "startPoint")]
        pub start_point: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "endPoint")]
        pub end_point: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "trajectory")]
        pub trajectory: Option<CurvePropertyTypeXType>,
        #[serde(default, rename = "arcCentre")]
        pub arc_centre: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "angle")]
        pub angle: Option<AngleIndicationPropertyTypeXType>,
        #[serde(default, rename = "distance")]
        pub distance: Option<DistanceIndicationPropertyTypeXType>,
        #[serde(default, rename = "aircraftCategory")]
        pub aircraft_category: Vec<AircraftCharacteristicPropertyTypeXType>,
        #[serde(default, rename = "holding")]
        pub holding: Option<HoldingUsePropertyTypeXType>,
        #[serde(default, rename = "designSurface")]
        pub design_surface: Vec<ObstacleAssessmentAreaPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AzimuthTimeSliceContent727XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeNavaidDesignatorTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "emissionClass")]
        pub emission_class: Option<CodeRadioEmissionTypeXType>,
        #[serde(default, rename = "mobile")]
        pub mobile: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "magneticVariation")]
        pub magnetic_variation: Option<ValMagneticVariationTypeXType>,
        #[serde(default, rename = "magneticVariationAccuracy")]
        pub magnetic_variation_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "dateMagneticVariation")]
        pub date_magnetic_variation: Option<DateYearTypeXType>,
        #[serde(default, rename = "flightChecked")]
        pub flight_checked: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "authority")]
        pub authority: Vec<AuthorityForNavaidEquipmentPropertyTypeXType>,
        #[serde(default, rename = "monitoring")]
        pub monitoring: Vec<NavaidEquipmentMonitoringPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<NavaidOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ChangeOverPointTimeSliceContent1252XType {
        #[serde(rename = "location_fixDesignatedPoint")]
        LocationFixDesignatedPoint(Option<DesignatedPointPropertyTypeXType>),
        #[serde(rename = "location_navaidSystem")]
        LocationNavaidSystem(Option<NavaidPropertyTypeXType>),
        #[serde(rename = "location_position")]
        LocationPosition(Option<PointPropertyTypeXType>),
        #[serde(rename = "location_runwayPoint")]
        LocationRunwayPoint(Option<RunwayCentrelinePointPropertyTypeXType>),
        #[serde(rename = "location_aimingPoint")]
        LocationAimingPoint(Option<TouchDownLiftOffPropertyTypeXType>),
        #[serde(rename = "location_airportReferencePoint")]
        LocationAirportReferencePoint(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CheckpointInsTimeSliceContent736XType {
        #[serde(default, rename = "category")]
        pub category: Option<CodeCheckpointCategoryTypeXType>,
        #[serde(default, rename = "upperLimit")]
        pub upper_limit: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "upperLimitReference")]
        pub upper_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "lowerLimit")]
        pub lower_limit: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "lowerLimitReference")]
        pub lower_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "altitudeInterpretation")]
        pub altitude_interpretation: Option<CodeAltitudeUseTypeXType>,
        #[serde(default, rename = "distance")]
        pub distance: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "angle")]
        pub angle: Option<ValBearingTypeXType>,
        #[serde(default, rename = "position")]
        pub position: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "airportHeliport")]
        pub airport_heliport: Option<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CheckpointVorTimeSliceContent744XType {
        #[serde(default, rename = "category")]
        pub category: Option<CodeCheckpointCategoryTypeXType>,
        #[serde(default, rename = "upperLimit")]
        pub upper_limit: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "upperLimitReference")]
        pub upper_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "lowerLimit")]
        pub lower_limit: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "lowerLimitReference")]
        pub lower_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "altitudeInterpretation")]
        pub altitude_interpretation: Option<CodeAltitudeUseTypeXType>,
        #[serde(default, rename = "distance")]
        pub distance: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "angle")]
        pub angle: Option<ValBearingTypeXType>,
        #[serde(default, rename = "position")]
        pub position: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "airportHeliport")]
        pub airport_heliport: Option<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DmeTimeSliceContent760XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeNavaidDesignatorTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "emissionClass")]
        pub emission_class: Option<CodeRadioEmissionTypeXType>,
        #[serde(default, rename = "mobile")]
        pub mobile: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "magneticVariation")]
        pub magnetic_variation: Option<ValMagneticVariationTypeXType>,
        #[serde(default, rename = "magneticVariationAccuracy")]
        pub magnetic_variation_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "dateMagneticVariation")]
        pub date_magnetic_variation: Option<DateYearTypeXType>,
        #[serde(default, rename = "flightChecked")]
        pub flight_checked: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "authority")]
        pub authority: Vec<AuthorityForNavaidEquipmentPropertyTypeXType>,
        #[serde(default, rename = "monitoring")]
        pub monitoring: Vec<NavaidEquipmentMonitoringPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<NavaidOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DeicingAreaMarkingTimeSliceContent333XType {
        #[serde(default, rename = "markingICAOStandard")]
        pub marking_icao_standard: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "condition")]
        pub condition: Option<CodeMarkingConditionTypeXType>,
        #[serde(default, rename = "element")]
        pub element: Vec<MarkingElementPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DepartureLegTimeSliceContent1167XType {
        #[serde(default, rename = "endConditionDesignator")]
        pub end_condition_designator: Option<CodeSegmentTerminationTypeXType>,
        #[serde(default, rename = "legPath")]
        pub leg_path: Option<CodeTrajectoryTypeXType>,
        #[serde(default, rename = "legTypeARINC")]
        pub leg_type_arinc: Option<CodeSegmentPathTypeXType>,
        #[serde(default, rename = "course")]
        pub course: Option<ValBearingTypeXType>,
        #[serde(default, rename = "courseType")]
        pub course_type: Option<CodeCourseTypeXType>,
        #[serde(default, rename = "courseDirection")]
        pub course_direction: Option<CodeDirectionReferenceTypeXType>,
        #[serde(default, rename = "turnDirection")]
        pub turn_direction: Option<CodeDirectionTurnTypeXType>,
        #[serde(default, rename = "speedLimit")]
        pub speed_limit: Option<ValSpeedTypeXType>,
        #[serde(default, rename = "speedReference")]
        pub speed_reference: Option<CodeSpeedReferenceTypeXType>,
        #[serde(default, rename = "speedInterpretation")]
        pub speed_interpretation: Option<CodeAltitudeUseTypeXType>,
        #[serde(default, rename = "bankAngle")]
        pub bank_angle: Option<ValAngleTypeXType>,
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "duration")]
        pub duration: Option<ValDurationTypeXType>,
        #[serde(default, rename = "procedureTurnRequired")]
        pub procedure_turn_required: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "upperLimitAltitude")]
        pub upper_limit_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "upperLimitReference")]
        pub upper_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "lowerLimitAltitude")]
        pub lower_limit_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "lowerLimitReference")]
        pub lower_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "altitudeInterpretation")]
        pub altitude_interpretation: Option<CodeAltitudeUseTypeXType>,
        #[serde(default, rename = "altitudeOverrideATC")]
        pub altitude_override_atc: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "altitudeOverrideReference")]
        pub altitude_override_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "verticalAngle")]
        pub vertical_angle: Option<ValAngleTypeXType>,
        #[serde(default, rename = "startPoint")]
        pub start_point: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "endPoint")]
        pub end_point: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "trajectory")]
        pub trajectory: Option<CurvePropertyTypeXType>,
        #[serde(default, rename = "arcCentre")]
        pub arc_centre: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "angle")]
        pub angle: Option<AngleIndicationPropertyTypeXType>,
        #[serde(default, rename = "distance")]
        pub distance: Option<DistanceIndicationPropertyTypeXType>,
        #[serde(default, rename = "aircraftCategory")]
        pub aircraft_category: Vec<AircraftCharacteristicPropertyTypeXType>,
        #[serde(default, rename = "holding")]
        pub holding: Option<HoldingUsePropertyTypeXType>,
        #[serde(default, rename = "designSurface")]
        pub design_surface: Vec<ObstacleAssessmentAreaPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DirectFlightSegmentContent1309XType {
        #[serde(rename = "end_fixDesignatedPoint")]
        EndFixDesignatedPoint(Option<DesignatedPointPropertyTypeXType>),
        #[serde(rename = "end_navaidSystem")]
        EndNavaidSystem(Option<NavaidPropertyTypeXType>),
        #[serde(rename = "end_position")]
        EndPosition(Option<PointPropertyTypeXType>),
        #[serde(rename = "end_runwayPoint")]
        EndRunwayPoint(Option<RunwayCentrelinePointPropertyTypeXType>),
        #[serde(rename = "end_aimingPoint")]
        EndAimingPoint(Option<TouchDownLiftOffPropertyTypeXType>),
        #[serde(rename = "end_airportReferencePoint")]
        EndAirportReferencePoint(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DirectFlightSegmentContent1310XType {
        #[serde(rename = "start_fixDesignatedPoint")]
        StartFixDesignatedPoint(Option<DesignatedPointPropertyTypeXType>),
        #[serde(rename = "start_navaidSystem")]
        StartNavaidSystem(Option<NavaidPropertyTypeXType>),
        #[serde(rename = "start_position")]
        StartPosition(Option<PointPropertyTypeXType>),
        #[serde(rename = "start_runwayPoint")]
        StartRunwayPoint(Option<RunwayCentrelinePointPropertyTypeXType>),
        #[serde(rename = "start_aimingPoint")]
        StartAimingPoint(Option<TouchDownLiftOffPropertyTypeXType>),
        #[serde(rename = "start_airportReferencePoint")]
        StartAirportReferencePoint(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectionFinderTimeSliceContent752XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeNavaidDesignatorTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "emissionClass")]
        pub emission_class: Option<CodeRadioEmissionTypeXType>,
        #[serde(default, rename = "mobile")]
        pub mobile: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "magneticVariation")]
        pub magnetic_variation: Option<ValMagneticVariationTypeXType>,
        #[serde(default, rename = "magneticVariationAccuracy")]
        pub magnetic_variation_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "dateMagneticVariation")]
        pub date_magnetic_variation: Option<DateYearTypeXType>,
        #[serde(default, rename = "flightChecked")]
        pub flight_checked: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "authority")]
        pub authority: Vec<AuthorityForNavaidEquipmentPropertyTypeXType>,
        #[serde(default, rename = "monitoring")]
        pub monitoring: Vec<NavaidEquipmentMonitoringPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<NavaidOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DistanceIndicationTimeSliceContent889XType {
        #[serde(rename = "pointChoice_fixDesignatedPoint")]
        PointChoiceFixDesignatedPoint(Option<DesignatedPointPropertyTypeXType>),
        #[serde(rename = "pointChoice_navaidSystem")]
        PointChoiceNavaidSystem(Option<NavaidPropertyTypeXType>),
        #[serde(rename = "pointChoice_position")]
        PointChoicePosition(Option<PointPropertyTypeXType>),
        #[serde(rename = "pointChoice_runwayPoint")]
        PointChoiceRunwayPoint(Option<RunwayCentrelinePointPropertyTypeXType>),
        #[serde(rename = "pointChoice_aimingPoint")]
        PointChoiceAimingPoint(Option<TouchDownLiftOffPropertyTypeXType>),
        #[serde(rename = "pointChoice_airportReferencePoint")]
        PointChoiceAirportReferencePoint(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ElevationTimeSliceContent768XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeNavaidDesignatorTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "emissionClass")]
        pub emission_class: Option<CodeRadioEmissionTypeXType>,
        #[serde(default, rename = "mobile")]
        pub mobile: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "magneticVariation")]
        pub magnetic_variation: Option<ValMagneticVariationTypeXType>,
        #[serde(default, rename = "magneticVariationAccuracy")]
        pub magnetic_variation_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "dateMagneticVariation")]
        pub date_magnetic_variation: Option<DateYearTypeXType>,
        #[serde(default, rename = "flightChecked")]
        pub flight_checked: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "authority")]
        pub authority: Vec<AuthorityForNavaidEquipmentPropertyTypeXType>,
        #[serde(default, rename = "monitoring")]
        pub monitoring: Vec<NavaidEquipmentMonitoringPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<NavaidOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum EnRouteSegmentPointContent894XType {
        #[serde(rename = "pointChoice_fixDesignatedPoint")]
        PointChoiceFixDesignatedPoint(Option<DesignatedPointPropertyTypeXType>),
        #[serde(rename = "pointChoice_navaidSystem")]
        PointChoiceNavaidSystem(Option<NavaidPropertyTypeXType>),
        #[serde(rename = "pointChoice_position")]
        PointChoicePosition(Option<PointPropertyTypeXType>),
        #[serde(rename = "pointChoice_runwayPoint")]
        PointChoiceRunwayPoint(Option<RunwayCentrelinePointPropertyTypeXType>),
        #[serde(rename = "pointChoice_aimingPoint")]
        PointChoiceAimingPoint(Option<TouchDownLiftOffPropertyTypeXType>),
        #[serde(rename = "pointChoice_airportReferencePoint")]
        PointChoiceAirportReferencePoint(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FinalLegTimeSliceContent1175XType {
        #[serde(default, rename = "Content1176")]
        pub content_1176: Option<FinalLegTimeSliceContent1176XType>,
        #[serde(default, rename = "approach")]
        pub approach: Option<InstrumentApproachProcedurePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum FinalLegTimeSliceContent1177XType {
        #[serde(rename = "finalPathAlignmentPoint_fixDesignatedPoint")]
        FinalPathAlignmentPointFixDesignatedPoint(Option<DesignatedPointPropertyTypeXType>),
        #[serde(rename = "finalPathAlignmentPoint_navaidSystem")]
        FinalPathAlignmentPointNavaidSystem(Option<NavaidPropertyTypeXType>),
        #[serde(rename = "finalPathAlignmentPoint_position")]
        FinalPathAlignmentPointPosition(Option<PointPropertyTypeXType>),
        #[serde(rename = "finalPathAlignmentPoint_runwayPoint")]
        FinalPathAlignmentPointRunwayPoint(Option<RunwayCentrelinePointPropertyTypeXType>),
        #[serde(rename = "finalPathAlignmentPoint_aimingPoint")]
        FinalPathAlignmentPointAimingPoint(Option<TouchDownLiftOffPropertyTypeXType>),
        #[serde(rename = "finalPathAlignmentPoint_airportReferencePoint")]
        FinalPathAlignmentPointAirportReferencePoint(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FireFightingServiceTimeSliceContent1420XType {
        #[serde(default, rename = "Content1421")]
        pub content_1421: Option<FireFightingServiceTimeSliceContent1421XType>,
        #[serde(default, rename = "airportHeliport")]
        pub airport_heliport: Vec<AirportHeliportPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum FlightConditionElementContent1327XType {
        #[serde(rename = "flightCondition_weather")]
        FlightConditionWeather(Option<MeteorologyPropertyTypeXType>),
        #[serde(rename = "flightCondition_aircraft")]
        FlightConditionAircraft(Option<AircraftCharacteristicPropertyTypeXType>),
        #[serde(rename = "flightCondition_flight")]
        FlightConditionFlight(Option<FlightCharacteristicPropertyTypeXType>),
        #[serde(rename = "flightCondition_directFlightCondition")]
        FlightConditionDirectFlightCondition(Option<DirectFlightPropertyTypeXType>),
        #[serde(rename = "flightCondition_borderCrossingCondition")]
        FlightConditionBorderCrossingCondition(Option<AirspaceBorderCrossingPropertyTypeXType>),
        #[serde(rename = "flightCondition_operand")]
        FlightConditionOperand(Option<FlightConditionCombinationPropertyTypeXType>),
        #[serde(rename = "flightCondition_routePortionCondition")]
        FlightConditionRoutePortionCondition(Option<RoutePortionPropertyTypeXType>),
        #[serde(rename = "flightCondition_standardInstrumentDepartureCondition")]
        FlightConditionStandardInstrumentDepartureCondition(
            Option<StandardInstrumentDeparturePropertyTypeXType>,
        ),
        #[serde(rename = "flightCondition_standardInstrumentArrivalCondition")]
        FlightConditionStandardInstrumentArrivalCondition(
            Option<StandardInstrumentArrivalPropertyTypeXType>,
        ),
        #[serde(rename = "flightCondition_organisationCondition")]
        FlightConditionOrganisationCondition(Option<OrganisationAuthorityPropertyTypeXType>),
        #[serde(rename = "Content1328")]
        Content1328(FlightConditionElementContent1328XType),
        #[serde(rename = "flightCondition_airspaceCondition")]
        FlightConditionAirspaceCondition(Option<AirspacePropertyTypeXType>),
        #[serde(rename = "flightCondition_airportHeliportCondition")]
        FlightConditionAirportHeliportCondition(Option<AirportHeliportPropertyTypeXType>),
        #[serde(rename = "flightCondition_aerialRefuellingCondition")]
        FlightConditionAerialRefuellingCondition(Option<AerialRefuellingPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum FlightRoutingElementContent1351XType {
        #[serde(rename = "element_directFlightElement")]
        ElementDirectFlightElement(Option<DirectFlightSegmentPropertyTypeXType>),
        #[serde(rename = "element_routePortionElement")]
        ElementRoutePortionElement(Option<RoutePortionPropertyTypeXType>),
        #[serde(rename = "element_standardInstrumentDepartureElement")]
        ElementStandardInstrumentDepartureElement(
            Option<StandardInstrumentDeparturePropertyTypeXType>,
        ),
        #[serde(rename = "element_standardInstrumentArrivalElement")]
        ElementStandardInstrumentArrivalElement(Option<StandardInstrumentArrivalPropertyTypeXType>),
        #[serde(rename = "Content1352")]
        Content1352(FlightRoutingElementContent1352XType),
        #[serde(rename = "element_airspaceElement")]
        ElementAirspaceElement(Option<AirspacePropertyTypeXType>),
        #[serde(rename = "element_airportHeliportElement")]
        ElementAirportHeliportElement(Option<AirportHeliportPropertyTypeXType>),
        #[serde(rename = "element_aerialRefuellingElement")]
        ElementAerialRefuellingElement(Option<AerialRefuellingPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GlidepathTimeSliceContent776XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeNavaidDesignatorTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "emissionClass")]
        pub emission_class: Option<CodeRadioEmissionTypeXType>,
        #[serde(default, rename = "mobile")]
        pub mobile: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "magneticVariation")]
        pub magnetic_variation: Option<ValMagneticVariationTypeXType>,
        #[serde(default, rename = "magneticVariationAccuracy")]
        pub magnetic_variation_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "dateMagneticVariation")]
        pub date_magnetic_variation: Option<DateYearTypeXType>,
        #[serde(default, rename = "flightChecked")]
        pub flight_checked: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "authority")]
        pub authority: Vec<AuthorityForNavaidEquipmentPropertyTypeXType>,
        #[serde(default, rename = "monitoring")]
        pub monitoring: Vec<NavaidEquipmentMonitoringPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<NavaidOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GroundTrafficControlServiceTimeSliceContent1434XType {
        #[serde(default, rename = "Content1435")]
        pub content_1435: Option<GroundTrafficControlServiceTimeSliceContent1435XType>,
        #[serde(default, rename = "radarAssisted")]
        pub radar_assisted: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "dataLinkEnabled")]
        pub data_link_enabled: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "dataLinkChannel")]
        pub data_link_channel: Option<CodeCommunicationChannelTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLineLightSystemTimeSliceContent263XType {
        #[serde(default, rename = "emergencyLighting")]
        pub emergency_lighting: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "intensityLevel")]
        pub intensity_level: Option<CodeLightIntensityTypeXType>,
        #[serde(default, rename = "colour")]
        pub colour: Option<CodeColourTypeXType>,
        #[serde(default, rename = "element")]
        pub element: Vec<LightElementPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<GroundLightingAvailabilityPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GuidanceLineMarkingTimeSliceContent341XType {
        #[serde(default, rename = "markingICAOStandard")]
        pub marking_icao_standard: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "condition")]
        pub condition: Option<CodeMarkingConditionTypeXType>,
        #[serde(default, rename = "element")]
        pub element: Vec<MarkingElementPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum HoldingPatternTimeSliceContent686XType {
        #[serde(rename = "outboundLegSpan_endPoint")]
        OutboundLegSpanEndPoint(Option<SegmentPointPropertyTypeXType>),
        #[serde(rename = "outboundLegSpan_endDistance")]
        OutboundLegSpanEndDistance(Option<HoldingPatternDistancePropertyTypeXType>),
        #[serde(rename = "outboundLegSpan_endTime")]
        OutboundLegSpanEndTime(Option<HoldingPatternDurationPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InformationServiceTimeSliceContent1443XType {
        #[serde(default, rename = "flightOperations")]
        pub flight_operations: Option<CodeFlightDestinationTypeXType>,
        #[serde(default, rename = "rank")]
        pub rank: Option<CodeFacilityRankingTypeXType>,
        #[serde(default, rename = "compliantICAO")]
        pub compliant_icao: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "serviceProvider")]
        pub service_provider: Option<UnitPropertyTypeXType>,
        #[serde(default, rename = "call-sign")]
        pub call_sign: Vec<CallsignDetailPropertyTypeXType>,
        #[serde(default, rename = "radioCommunication")]
        pub radio_communication: Vec<RadioCommunicationChannelPropertyTypeXType>,
        #[serde(default, rename = "groundCommunication")]
        pub ground_communication: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ServiceOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InitialLegTimeSliceContent1190XType {
        #[serde(default, rename = "Content1191")]
        pub content_1191: Option<InitialLegTimeSliceContent1191XType>,
        #[serde(default, rename = "approach")]
        pub approach: Option<InstrumentApproachProcedurePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InstrumentApproachProcedureTimeSliceContent1033XType {
        #[serde(default, rename = "communicationFailureInstruction")]
        pub communication_failure_instruction: Option<TextInstructionTypeXType>,
        #[serde(default, rename = "instruction")]
        pub instruction: Option<TextInstructionTypeXType>,
        #[serde(default, rename = "designCriteria")]
        pub design_criteria: Option<CodeDesignStandardTypeXType>,
        #[serde(default, rename = "codingStandard")]
        pub coding_standard: Option<CodeProcedureCodingStandardTypeXType>,
        #[serde(default, rename = "flightChecked")]
        pub flight_checked: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "RNAV")]
        pub rnav: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ProcedureAvailabilityPropertyTypeXType>,
        #[serde(default, rename = "airportHeliport")]
        pub airport_heliport: Vec<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "aircraftCharacteristic")]
        pub aircraft_characteristic: Vec<AircraftCharacteristicPropertyTypeXType>,
        #[serde(default, rename = "flightTransition")]
        pub flight_transition: Vec<ProcedureTransitionPropertyTypeXType>,
        #[serde(rename = "Content1034")]
        pub content_1034: InstrumentApproachProcedureTimeSliceContent1034XType,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "safeAltitude")]
        pub safe_altitude: Option<SafeAltitudeAreaPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct IntermediateLegTimeSliceContent1199XType {
        #[serde(default, rename = "Content1200")]
        pub content_1200: Option<IntermediateLegTimeSliceContent1200XType>,
        #[serde(default, rename = "approach")]
        pub approach: Option<InstrumentApproachProcedurePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LocalizerTimeSliceContent784XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeNavaidDesignatorTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "emissionClass")]
        pub emission_class: Option<CodeRadioEmissionTypeXType>,
        #[serde(default, rename = "mobile")]
        pub mobile: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "magneticVariation")]
        pub magnetic_variation: Option<ValMagneticVariationTypeXType>,
        #[serde(default, rename = "magneticVariationAccuracy")]
        pub magnetic_variation_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "dateMagneticVariation")]
        pub date_magnetic_variation: Option<DateYearTypeXType>,
        #[serde(default, rename = "flightChecked")]
        pub flight_checked: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "authority")]
        pub authority: Vec<AuthorityForNavaidEquipmentPropertyTypeXType>,
        #[serde(default, rename = "monitoring")]
        pub monitoring: Vec<NavaidEquipmentMonitoringPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<NavaidOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MarkerBeaconTimeSliceContent792XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeNavaidDesignatorTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "emissionClass")]
        pub emission_class: Option<CodeRadioEmissionTypeXType>,
        #[serde(default, rename = "mobile")]
        pub mobile: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "magneticVariation")]
        pub magnetic_variation: Option<ValMagneticVariationTypeXType>,
        #[serde(default, rename = "magneticVariationAccuracy")]
        pub magnetic_variation_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "dateMagneticVariation")]
        pub date_magnetic_variation: Option<DateYearTypeXType>,
        #[serde(default, rename = "flightChecked")]
        pub flight_checked: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "authority")]
        pub authority: Vec<AuthorityForNavaidEquipmentPropertyTypeXType>,
        #[serde(default, rename = "monitoring")]
        pub monitoring: Vec<NavaidEquipmentMonitoringPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<NavaidOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum MarkingElementContent346XType {
        #[serde(rename = "extent_curveExtent")]
        ExtentCurveExtent(Option<ElevatedCurvePropertyTypeXType>),
        #[serde(rename = "extent_surfaceExtent")]
        ExtentSurfaceExtent(Option<ElevatedSurfacePropertyTypeXType>),
        #[serde(rename = "extent_location")]
        ExtentLocation(Option<ElevatedPointPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MissedApproachLegTimeSliceContent1213XType {
        #[serde(default, rename = "Content1214")]
        pub content_1214: Option<MissedApproachLegTimeSliceContent1214XType>,
        #[serde(default, rename = "approach")]
        pub approach: Option<InstrumentApproachProcedurePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NdbTimeSliceContent824XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeNavaidDesignatorTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "emissionClass")]
        pub emission_class: Option<CodeRadioEmissionTypeXType>,
        #[serde(default, rename = "mobile")]
        pub mobile: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "magneticVariation")]
        pub magnetic_variation: Option<ValMagneticVariationTypeXType>,
        #[serde(default, rename = "magneticVariationAccuracy")]
        pub magnetic_variation_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "dateMagneticVariation")]
        pub date_magnetic_variation: Option<DateYearTypeXType>,
        #[serde(default, rename = "flightChecked")]
        pub flight_checked: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "authority")]
        pub authority: Vec<AuthorityForNavaidEquipmentPropertyTypeXType>,
        #[serde(default, rename = "monitoring")]
        pub monitoring: Vec<NavaidEquipmentMonitoringPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<NavaidOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum NavigationAreaTimeSliceContent1108XType {
        #[serde(rename = "centrePoint_fixDesignatedPoint")]
        CentrePointFixDesignatedPoint(Option<DesignatedPointPropertyTypeXType>),
        #[serde(rename = "centrePoint_navaidSystem")]
        CentrePointNavaidSystem(Option<NavaidPropertyTypeXType>),
        #[serde(rename = "centrePoint_position")]
        CentrePointPosition(Option<PointPropertyTypeXType>),
        #[serde(rename = "centrePoint_runwayPoint")]
        CentrePointRunwayPoint(Option<RunwayCentrelinePointPropertyTypeXType>),
        #[serde(rename = "centrePoint_aimingPoint")]
        CentrePointAimingPoint(Option<TouchDownLiftOffPropertyTypeXType>),
        #[serde(rename = "centrePoint_airportReferencePoint")]
        CentrePointAirportReferencePoint(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ObstacleAreaTimeSliceContent949XType {
        #[serde(rename = "reference_ownerOrganisation")]
        ReferenceOwnerOrganisation(Option<OrganisationAuthorityPropertyTypeXType>),
        #[serde(rename = "reference_ownerRunway")]
        ReferenceOwnerRunway(Option<RunwayDirectionPropertyTypeXType>),
        #[serde(rename = "reference_ownerAirport")]
        ReferenceOwnerAirport(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PassengerServiceTimeSliceContent1466XType {
        #[serde(default, rename = "Content1467")]
        pub content_1467: Option<PassengerServiceTimeSliceContent1467XType>,
        #[serde(default, rename = "airportHeliport")]
        pub airport_heliport: Vec<AirportHeliportPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrecisionApproachRadarTimeSliceContent1643XType {
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "serialNumber")]
        pub serial_number: Option<TextDesignatorTypeXType>,
        #[serde(default, rename = "range")]
        pub range: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "rangeAccuracy")]
        pub range_accuracy: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "dualChannel")]
        pub dual_channel: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "movingTargetIndicator")]
        pub moving_target_indicator: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "standbyPower")]
        pub standby_power: Option<CodeStandbyPowerTypeXType>,
        #[serde(default, rename = "digital")]
        pub digital: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "militaryUseOnly")]
        pub military_use_only: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "specialUseOnly")]
        pub special_use_only: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "specialAircraftOnly")]
        pub special_aircraft_only: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "magneticVariation")]
        pub magnetic_variation: Option<ValMagneticVariationTypeXType>,
        #[serde(default, rename = "magneticVariationAccuracy")]
        pub magnetic_variation_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "dateMagneticVariation")]
        pub date_magnetic_variation: Option<DateYearTypeXType>,
        #[serde(default, rename = "contact")]
        pub contact: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrimarySurveillanceRadarTimeSliceContent1652XType {
        #[serde(default, rename = "Content1653")]
        pub content_1653: Option<PrimarySurveillanceRadarTimeSliceContent1653XType>,
        #[serde(default, rename = "verticalCoverageAltitude")]
        pub vertical_coverage_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "verticalCoverageDistance")]
        pub vertical_coverage_distance: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "verticalCoverageAzimuth")]
        pub vertical_coverage_azimuth: Option<ValBearingTypeXType>,
        #[serde(default, rename = "antennaTiltFixed")]
        pub antenna_tilt_fixed: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "tiltAngle")]
        pub tilt_angle: Option<ValAngleTypeXType>,
        #[serde(default, rename = "automatedRadarTerminalSystem")]
        pub automated_radar_terminal_system: Option<TextDesignatorTypeXType>,
        #[serde(default, rename = "groundStation")]
        pub ground_station: Vec<SurveillanceGroundStationPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RadioFrequencyAreaTimeSliceContent1568XType {
        #[serde(rename = "equipment_radar")]
        EquipmentRadar(Option<SecondarySurveillanceRadarPropertyTypeXType>),
        #[serde(rename = "equipment_precisionApproachRadar")]
        EquipmentPrecisionApproachRadar(Option<PrecisionApproachRadarPropertyTypeXType>),
        #[serde(rename = "equipment_frequency")]
        EquipmentFrequency(Option<RadioCommunicationChannelPropertyTypeXType>),
        #[serde(rename = "equipment_specialNavigationStation")]
        EquipmentSpecialNavigationStation(Option<SpecialNavigationStationPropertyTypeXType>),
        #[serde(rename = "equipment_navaidEquipment")]
        EquipmentNavaidEquipment(Option<NavaidEquipmentPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RoutePortionContent1277XType {
        #[serde(rename = "start_fixDesignatedPoint")]
        StartFixDesignatedPoint(Option<DesignatedPointPropertyTypeXType>),
        #[serde(rename = "start_navaidSystem")]
        StartNavaidSystem(Option<NavaidPropertyTypeXType>),
        #[serde(rename = "start_position")]
        StartPosition(Option<PointPropertyTypeXType>),
        #[serde(rename = "start_runwayPoint")]
        StartRunwayPoint(Option<RunwayCentrelinePointPropertyTypeXType>),
        #[serde(rename = "start_aimingPoint")]
        StartAimingPoint(Option<TouchDownLiftOffPropertyTypeXType>),
        #[serde(rename = "start_airportReferencePoint")]
        StartAirportReferencePoint(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RoutePortionContent1278XType {
        #[serde(rename = "intermediatePoint_fixDesignatedPoint")]
        IntermediatePointFixDesignatedPoint(Option<DesignatedPointPropertyTypeXType>),
        #[serde(rename = "intermediatePoint_navaidSystem")]
        IntermediatePointNavaidSystem(Option<NavaidPropertyTypeXType>),
        #[serde(rename = "intermediatePoint_position")]
        IntermediatePointPosition(Option<PointPropertyTypeXType>),
        #[serde(rename = "intermediatePoint_runwayPoint")]
        IntermediatePointRunwayPoint(Option<RunwayCentrelinePointPropertyTypeXType>),
        #[serde(rename = "intermediatePoint_aimingPoint")]
        IntermediatePointAimingPoint(Option<TouchDownLiftOffPropertyTypeXType>),
        #[serde(rename = "intermediatePoint_airportReferencePoint")]
        IntermediatePointAirportReferencePoint(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RoutePortionContent1279XType {
        #[serde(rename = "end_fixDesignatedPoint")]
        EndFixDesignatedPoint(Option<DesignatedPointPropertyTypeXType>),
        #[serde(rename = "end_navaidSystem")]
        EndNavaidSystem(Option<NavaidPropertyTypeXType>),
        #[serde(rename = "end_position")]
        EndPosition(Option<PointPropertyTypeXType>),
        #[serde(rename = "end_runwayPoint")]
        EndRunwayPoint(Option<RunwayCentrelinePointPropertyTypeXType>),
        #[serde(rename = "end_aimingPoint")]
        EndAimingPoint(Option<TouchDownLiftOffPropertyTypeXType>),
        #[serde(rename = "end_airportReferencePoint")]
        EndAirportReferencePoint(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayDirectionLightSystemTimeSliceContent276XType {
        #[serde(default, rename = "emergencyLighting")]
        pub emergency_lighting: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "intensityLevel")]
        pub intensity_level: Option<CodeLightIntensityTypeXType>,
        #[serde(default, rename = "colour")]
        pub colour: Option<CodeColourTypeXType>,
        #[serde(default, rename = "element")]
        pub element: Vec<LightElementPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<GroundLightingAvailabilityPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayMarkingTimeSliceContent355XType {
        #[serde(default, rename = "markingICAOStandard")]
        pub marking_icao_standard: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "condition")]
        pub condition: Option<CodeMarkingConditionTypeXType>,
        #[serde(default, rename = "element")]
        pub element: Vec<MarkingElementPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayProtectAreaLightSystemTimeSliceContent284XType {
        #[serde(default, rename = "emergencyLighting")]
        pub emergency_lighting: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "intensityLevel")]
        pub intensity_level: Option<CodeLightIntensityTypeXType>,
        #[serde(default, rename = "colour")]
        pub colour: Option<CodeColourTypeXType>,
        #[serde(default, rename = "element")]
        pub element: Vec<LightElementPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<GroundLightingAvailabilityPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RunwayProtectAreaTimeSliceContent466XType {
        #[serde(default, rename = "width")]
        pub width: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "lighting")]
        pub lighting: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "obstacleFree")]
        pub obstacle_free: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "surfaceProperties")]
        pub surface_properties: Option<SurfaceCharacteristicsPropertyTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<ElevatedSurfacePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SdfTimeSliceContent832XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeNavaidDesignatorTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "emissionClass")]
        pub emission_class: Option<CodeRadioEmissionTypeXType>,
        #[serde(default, rename = "mobile")]
        pub mobile: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "magneticVariation")]
        pub magnetic_variation: Option<ValMagneticVariationTypeXType>,
        #[serde(default, rename = "magneticVariationAccuracy")]
        pub magnetic_variation_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "dateMagneticVariation")]
        pub date_magnetic_variation: Option<DateYearTypeXType>,
        #[serde(default, rename = "flightChecked")]
        pub flight_checked: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "authority")]
        pub authority: Vec<AuthorityForNavaidEquipmentPropertyTypeXType>,
        #[serde(default, rename = "monitoring")]
        pub monitoring: Vec<NavaidEquipmentMonitoringPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<NavaidOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum SafeAltitudeAreaTimeSliceContent1135XType {
        #[serde(rename = "centrePoint_fixDesignatedPoint")]
        CentrePointFixDesignatedPoint(Option<DesignatedPointPropertyTypeXType>),
        #[serde(rename = "centrePoint_navaidSystem")]
        CentrePointNavaidSystem(Option<NavaidPropertyTypeXType>),
        #[serde(rename = "centrePoint_position")]
        CentrePointPosition(Option<PointPropertyTypeXType>),
        #[serde(rename = "centrePoint_runwayPoint")]
        CentrePointRunwayPoint(Option<RunwayCentrelinePointPropertyTypeXType>),
        #[serde(rename = "centrePoint_aimingPoint")]
        CentrePointAimingPoint(Option<TouchDownLiftOffPropertyTypeXType>),
        #[serde(rename = "centrePoint_airportReferencePoint")]
        CentrePointAirportReferencePoint(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SearchRescueServiceTimeSliceContent1495XType {
        #[serde(default, rename = "flightOperations")]
        pub flight_operations: Option<CodeFlightDestinationTypeXType>,
        #[serde(default, rename = "rank")]
        pub rank: Option<CodeFacilityRankingTypeXType>,
        #[serde(default, rename = "compliantICAO")]
        pub compliant_icao: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "serviceProvider")]
        pub service_provider: Option<UnitPropertyTypeXType>,
        #[serde(default, rename = "call-sign")]
        pub call_sign: Vec<CallsignDetailPropertyTypeXType>,
        #[serde(default, rename = "radioCommunication")]
        pub radio_communication: Vec<RadioCommunicationChannelPropertyTypeXType>,
        #[serde(default, rename = "groundCommunication")]
        pub ground_communication: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ServiceOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SecondarySurveillanceRadarTimeSliceContent1678XType {
        #[serde(default, rename = "Content1679")]
        pub content_1679: Option<SecondarySurveillanceRadarTimeSliceContent1679XType>,
        #[serde(default, rename = "verticalCoverageAltitude")]
        pub vertical_coverage_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "verticalCoverageDistance")]
        pub vertical_coverage_distance: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "verticalCoverageAzimuth")]
        pub vertical_coverage_azimuth: Option<ValBearingTypeXType>,
        #[serde(default, rename = "antennaTiltFixed")]
        pub antenna_tilt_fixed: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "tiltAngle")]
        pub tilt_angle: Option<ValAngleTypeXType>,
        #[serde(default, rename = "automatedRadarTerminalSystem")]
        pub automated_radar_terminal_system: Option<TextDesignatorTypeXType>,
        #[serde(default, rename = "groundStation")]
        pub ground_station: Vec<SurveillanceGroundStationPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum SignificantPointInAirspaceTimeSliceContent924XType {
        #[serde(rename = "location_fixDesignatedPoint")]
        LocationFixDesignatedPoint(Option<DesignatedPointPropertyTypeXType>),
        #[serde(rename = "location_navaidSystem")]
        LocationNavaidSystem(Option<NavaidPropertyTypeXType>),
        #[serde(rename = "location_position")]
        LocationPosition(Option<PointPropertyTypeXType>),
        #[serde(rename = "location_runwayPoint")]
        LocationRunwayPoint(Option<RunwayCentrelinePointPropertyTypeXType>),
        #[serde(rename = "location_aimingPoint")]
        LocationAimingPoint(Option<TouchDownLiftOffPropertyTypeXType>),
        #[serde(rename = "location_airportReferencePoint")]
        LocationAirportReferencePoint(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandMarkingTimeSliceContent363XType {
        #[serde(default, rename = "markingICAOStandard")]
        pub marking_icao_standard: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "condition")]
        pub condition: Option<CodeMarkingConditionTypeXType>,
        #[serde(default, rename = "element")]
        pub element: Vec<MarkingElementPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardInstrumentArrivalTimeSliceContent1094XType {
        #[serde(default, rename = "communicationFailureInstruction")]
        pub communication_failure_instruction: Option<TextInstructionTypeXType>,
        #[serde(default, rename = "instruction")]
        pub instruction: Option<TextInstructionTypeXType>,
        #[serde(default, rename = "designCriteria")]
        pub design_criteria: Option<CodeDesignStandardTypeXType>,
        #[serde(default, rename = "codingStandard")]
        pub coding_standard: Option<CodeProcedureCodingStandardTypeXType>,
        #[serde(default, rename = "flightChecked")]
        pub flight_checked: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "RNAV")]
        pub rnav: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ProcedureAvailabilityPropertyTypeXType>,
        #[serde(default, rename = "airportHeliport")]
        pub airport_heliport: Vec<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "aircraftCharacteristic")]
        pub aircraft_characteristic: Vec<AircraftCharacteristicPropertyTypeXType>,
        #[serde(default, rename = "flightTransition")]
        pub flight_transition: Vec<ProcedureTransitionPropertyTypeXType>,
        #[serde(rename = "Content1095")]
        pub content_1095: StandardInstrumentArrivalTimeSliceContent1095XType,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "safeAltitude")]
        pub safe_altitude: Option<SafeAltitudeAreaPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StandardInstrumentDepartureTimeSliceContent1126XType {
        #[serde(default, rename = "communicationFailureInstruction")]
        pub communication_failure_instruction: Option<TextInstructionTypeXType>,
        #[serde(default, rename = "instruction")]
        pub instruction: Option<TextInstructionTypeXType>,
        #[serde(default, rename = "designCriteria")]
        pub design_criteria: Option<CodeDesignStandardTypeXType>,
        #[serde(default, rename = "codingStandard")]
        pub coding_standard: Option<CodeProcedureCodingStandardTypeXType>,
        #[serde(default, rename = "flightChecked")]
        pub flight_checked: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "RNAV")]
        pub rnav: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ProcedureAvailabilityPropertyTypeXType>,
        #[serde(default, rename = "airportHeliport")]
        pub airport_heliport: Vec<AirportHeliportPropertyTypeXType>,
        #[serde(default, rename = "aircraftCharacteristic")]
        pub aircraft_characteristic: Vec<AircraftCharacteristicPropertyTypeXType>,
        #[serde(default, rename = "flightTransition")]
        pub flight_transition: Vec<ProcedureTransitionPropertyTypeXType>,
        #[serde(rename = "Content1127")]
        pub content_1127: StandardInstrumentDepartureTimeSliceContent1127XType,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
        #[serde(default, rename = "safeAltitude")]
        pub safe_altitude: Option<SafeAltitudeAreaPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TacanTimeSliceContent860XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeNavaidDesignatorTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "emissionClass")]
        pub emission_class: Option<CodeRadioEmissionTypeXType>,
        #[serde(default, rename = "mobile")]
        pub mobile: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "magneticVariation")]
        pub magnetic_variation: Option<ValMagneticVariationTypeXType>,
        #[serde(default, rename = "magneticVariationAccuracy")]
        pub magnetic_variation_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "dateMagneticVariation")]
        pub date_magnetic_variation: Option<DateYearTypeXType>,
        #[serde(default, rename = "flightChecked")]
        pub flight_checked: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "authority")]
        pub authority: Vec<AuthorityForNavaidEquipmentPropertyTypeXType>,
        #[serde(default, rename = "monitoring")]
        pub monitoring: Vec<NavaidEquipmentMonitoringPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<NavaidOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionLightSystemTimeSliceContent292XType {
        #[serde(default, rename = "emergencyLighting")]
        pub emergency_lighting: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "intensityLevel")]
        pub intensity_level: Option<CodeLightIntensityTypeXType>,
        #[serde(default, rename = "colour")]
        pub colour: Option<CodeColourTypeXType>,
        #[serde(default, rename = "element")]
        pub element: Vec<LightElementPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<GroundLightingAvailabilityPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiHoldingPositionMarkingTimeSliceContent371XType {
        #[serde(default, rename = "markingICAOStandard")]
        pub marking_icao_standard: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "condition")]
        pub condition: Option<CodeMarkingConditionTypeXType>,
        #[serde(default, rename = "element")]
        pub element: Vec<MarkingElementPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayLightSystemTimeSliceContent300XType {
        #[serde(default, rename = "emergencyLighting")]
        pub emergency_lighting: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "intensityLevel")]
        pub intensity_level: Option<CodeLightIntensityTypeXType>,
        #[serde(default, rename = "colour")]
        pub colour: Option<CodeColourTypeXType>,
        #[serde(default, rename = "element")]
        pub element: Vec<LightElementPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<GroundLightingAvailabilityPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TaxiwayMarkingTimeSliceContent379XType {
        #[serde(default, rename = "markingICAOStandard")]
        pub marking_icao_standard: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "condition")]
        pub condition: Option<CodeMarkingConditionTypeXType>,
        #[serde(default, rename = "element")]
        pub element: Vec<MarkingElementPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TerminalArrivalAreaTimeSliceContent1047XType {
        #[serde(rename = "IF_fixDesignatedPoint")]
        IfFixDesignatedPoint(Option<DesignatedPointPropertyTypeXType>),
        #[serde(rename = "IF_navaidSystem")]
        IfNavaidSystem(Option<NavaidPropertyTypeXType>),
        #[serde(rename = "IF_position")]
        IfPosition(Option<PointPropertyTypeXType>),
        #[serde(rename = "IF_runwayPoint")]
        IfRunwayPoint(Option<RunwayCentrelinePointPropertyTypeXType>),
        #[serde(rename = "IF_aimingPoint")]
        IfAimingPoint(Option<TouchDownLiftOffPropertyTypeXType>),
        #[serde(rename = "IF_airportReferencePoint")]
        IfAirportReferencePoint(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TerminalArrivalAreaTimeSliceContent1048XType {
        #[serde(rename = "IAF_fixDesignatedPoint")]
        IafFixDesignatedPoint(Option<DesignatedPointPropertyTypeXType>),
        #[serde(rename = "IAF_navaidSystem")]
        IafNavaidSystem(Option<NavaidPropertyTypeXType>),
        #[serde(rename = "IAF_position")]
        IafPosition(Option<PointPropertyTypeXType>),
        #[serde(rename = "IAF_runwayPoint")]
        IafRunwayPoint(Option<RunwayCentrelinePointPropertyTypeXType>),
        #[serde(rename = "IAF_aimingPoint")]
        IafAimingPoint(Option<TouchDownLiftOffPropertyTypeXType>),
        #[serde(rename = "IAF_airportReferencePoint")]
        IafAirportReferencePoint(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TerminalSegmentPointContent907XType {
        #[serde(rename = "pointChoice_fixDesignatedPoint")]
        PointChoiceFixDesignatedPoint(Option<DesignatedPointPropertyTypeXType>),
        #[serde(rename = "pointChoice_navaidSystem")]
        PointChoiceNavaidSystem(Option<NavaidPropertyTypeXType>),
        #[serde(rename = "pointChoice_position")]
        PointChoicePosition(Option<PointPropertyTypeXType>),
        #[serde(rename = "pointChoice_runwayPoint")]
        PointChoiceRunwayPoint(Option<RunwayCentrelinePointPropertyTypeXType>),
        #[serde(rename = "pointChoice_aimingPoint")]
        PointChoiceAimingPoint(Option<TouchDownLiftOffPropertyTypeXType>),
        #[serde(rename = "pointChoice_airportReferencePoint")]
        PointChoiceAirportReferencePoint(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffLightSystemTimeSliceContent308XType {
        #[serde(default, rename = "emergencyLighting")]
        pub emergency_lighting: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "intensityLevel")]
        pub intensity_level: Option<CodeLightIntensityTypeXType>,
        #[serde(default, rename = "colour")]
        pub colour: Option<CodeColourTypeXType>,
        #[serde(default, rename = "element")]
        pub element: Vec<LightElementPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<GroundLightingAvailabilityPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffMarkingTimeSliceContent387XType {
        #[serde(default, rename = "markingICAOStandard")]
        pub marking_icao_standard: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "condition")]
        pub condition: Option<CodeMarkingConditionTypeXType>,
        #[serde(default, rename = "element")]
        pub element: Vec<MarkingElementPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TouchDownLiftOffSafeAreaTimeSliceContent232XType {
        #[serde(default, rename = "width")]
        pub width: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "lighting")]
        pub lighting: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "obstacleFree")]
        pub obstacle_free: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "surfaceProperties")]
        pub surface_properties: Option<SurfaceCharacteristicsPropertyTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<ElevatedSurfacePropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VorTimeSliceContent868XType {
        #[serde(default, rename = "designator")]
        pub designator: Option<CodeNavaidDesignatorTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "emissionClass")]
        pub emission_class: Option<CodeRadioEmissionTypeXType>,
        #[serde(default, rename = "mobile")]
        pub mobile: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "magneticVariation")]
        pub magnetic_variation: Option<ValMagneticVariationTypeXType>,
        #[serde(default, rename = "magneticVariationAccuracy")]
        pub magnetic_variation_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "dateMagneticVariation")]
        pub date_magnetic_variation: Option<DateYearTypeXType>,
        #[serde(default, rename = "flightChecked")]
        pub flight_checked: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "authority")]
        pub authority: Vec<AuthorityForNavaidEquipmentPropertyTypeXType>,
        #[serde(default, rename = "monitoring")]
        pub monitoring: Vec<NavaidEquipmentMonitoringPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<NavaidOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum VerticalStructurePartContent968XType {
        #[serde(rename = "horizontalProjection_surfaceExtent")]
        HorizontalProjectionSurfaceExtent(Option<ElevatedSurfacePropertyTypeXType>),
        #[serde(rename = "horizontalProjection_linearExtent")]
        HorizontalProjectionLinearExtent(Option<ElevatedCurvePropertyTypeXType>),
        #[serde(rename = "horizontalProjection_location")]
        HorizontalProjectionLocation(Option<ElevatedPointPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VisualGlideSlopeIndicatorTimeSliceContent481XType {
        #[serde(default, rename = "emergencyLighting")]
        pub emergency_lighting: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "intensityLevel")]
        pub intensity_level: Option<CodeLightIntensityTypeXType>,
        #[serde(default, rename = "colour")]
        pub colour: Option<CodeColourTypeXType>,
        #[serde(default, rename = "element")]
        pub element: Vec<LightElementPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<GroundLightingAvailabilityPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirTrafficControlServiceTimeSliceContent1399XType {
        #[serde(default, rename = "flightOperations")]
        pub flight_operations: Option<CodeFlightDestinationTypeXType>,
        #[serde(default, rename = "rank")]
        pub rank: Option<CodeFacilityRankingTypeXType>,
        #[serde(default, rename = "compliantICAO")]
        pub compliant_icao: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "serviceProvider")]
        pub service_provider: Option<UnitPropertyTypeXType>,
        #[serde(default, rename = "call-sign")]
        pub call_sign: Vec<CallsignDetailPropertyTypeXType>,
        #[serde(default, rename = "radioCommunication")]
        pub radio_communication: Vec<RadioCommunicationChannelPropertyTypeXType>,
        #[serde(default, rename = "groundCommunication")]
        pub ground_communication: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ServiceOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AircraftGroundServiceTimeSliceContent1371XType {
        #[serde(default, rename = "flightOperations")]
        pub flight_operations: Option<CodeFlightDestinationTypeXType>,
        #[serde(default, rename = "rank")]
        pub rank: Option<CodeFacilityRankingTypeXType>,
        #[serde(default, rename = "compliantICAO")]
        pub compliant_icao: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "serviceProvider")]
        pub service_provider: Option<UnitPropertyTypeXType>,
        #[serde(default, rename = "call-sign")]
        pub call_sign: Vec<CallsignDetailPropertyTypeXType>,
        #[serde(default, rename = "radioCommunication")]
        pub radio_communication: Vec<RadioCommunicationChannelPropertyTypeXType>,
        #[serde(default, rename = "groundCommunication")]
        pub ground_communication: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ServiceOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportClearanceServiceTimeSliceContent1380XType {
        #[serde(default, rename = "flightOperations")]
        pub flight_operations: Option<CodeFlightDestinationTypeXType>,
        #[serde(default, rename = "rank")]
        pub rank: Option<CodeFacilityRankingTypeXType>,
        #[serde(default, rename = "compliantICAO")]
        pub compliant_icao: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "serviceProvider")]
        pub service_provider: Option<UnitPropertyTypeXType>,
        #[serde(default, rename = "call-sign")]
        pub call_sign: Vec<CallsignDetailPropertyTypeXType>,
        #[serde(default, rename = "radioCommunication")]
        pub radio_communication: Vec<RadioCommunicationChannelPropertyTypeXType>,
        #[serde(default, rename = "groundCommunication")]
        pub ground_communication: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ServiceOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AirportSuppliesServiceTimeSliceContent1389XType {
        #[serde(default, rename = "flightOperations")]
        pub flight_operations: Option<CodeFlightDestinationTypeXType>,
        #[serde(default, rename = "rank")]
        pub rank: Option<CodeFacilityRankingTypeXType>,
        #[serde(default, rename = "compliantICAO")]
        pub compliant_icao: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "serviceProvider")]
        pub service_provider: Option<UnitPropertyTypeXType>,
        #[serde(default, rename = "call-sign")]
        pub call_sign: Vec<CallsignDetailPropertyTypeXType>,
        #[serde(default, rename = "radioCommunication")]
        pub radio_communication: Vec<RadioCommunicationChannelPropertyTypeXType>,
        #[serde(default, rename = "groundCommunication")]
        pub ground_communication: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ServiceOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrivalFeederLegTimeSliceContent1151XType {
        #[serde(default, rename = "endConditionDesignator")]
        pub end_condition_designator: Option<CodeSegmentTerminationTypeXType>,
        #[serde(default, rename = "legPath")]
        pub leg_path: Option<CodeTrajectoryTypeXType>,
        #[serde(default, rename = "legTypeARINC")]
        pub leg_type_arinc: Option<CodeSegmentPathTypeXType>,
        #[serde(default, rename = "course")]
        pub course: Option<ValBearingTypeXType>,
        #[serde(default, rename = "courseType")]
        pub course_type: Option<CodeCourseTypeXType>,
        #[serde(default, rename = "courseDirection")]
        pub course_direction: Option<CodeDirectionReferenceTypeXType>,
        #[serde(default, rename = "turnDirection")]
        pub turn_direction: Option<CodeDirectionTurnTypeXType>,
        #[serde(default, rename = "speedLimit")]
        pub speed_limit: Option<ValSpeedTypeXType>,
        #[serde(default, rename = "speedReference")]
        pub speed_reference: Option<CodeSpeedReferenceTypeXType>,
        #[serde(default, rename = "speedInterpretation")]
        pub speed_interpretation: Option<CodeAltitudeUseTypeXType>,
        #[serde(default, rename = "bankAngle")]
        pub bank_angle: Option<ValAngleTypeXType>,
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "duration")]
        pub duration: Option<ValDurationTypeXType>,
        #[serde(default, rename = "procedureTurnRequired")]
        pub procedure_turn_required: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "upperLimitAltitude")]
        pub upper_limit_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "upperLimitReference")]
        pub upper_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "lowerLimitAltitude")]
        pub lower_limit_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "lowerLimitReference")]
        pub lower_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "altitudeInterpretation")]
        pub altitude_interpretation: Option<CodeAltitudeUseTypeXType>,
        #[serde(default, rename = "altitudeOverrideATC")]
        pub altitude_override_atc: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "altitudeOverrideReference")]
        pub altitude_override_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "verticalAngle")]
        pub vertical_angle: Option<ValAngleTypeXType>,
        #[serde(default, rename = "startPoint")]
        pub start_point: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "endPoint")]
        pub end_point: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "trajectory")]
        pub trajectory: Option<CurvePropertyTypeXType>,
        #[serde(default, rename = "arcCentre")]
        pub arc_centre: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "angle")]
        pub angle: Option<AngleIndicationPropertyTypeXType>,
        #[serde(default, rename = "distance")]
        pub distance: Option<DistanceIndicationPropertyTypeXType>,
        #[serde(default, rename = "aircraftCategory")]
        pub aircraft_category: Vec<AircraftCharacteristicPropertyTypeXType>,
        #[serde(default, rename = "holding")]
        pub holding: Option<HoldingUsePropertyTypeXType>,
        #[serde(default, rename = "designSurface")]
        pub design_surface: Vec<ObstacleAssessmentAreaPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FinalLegTimeSliceContent1176XType {
        #[serde(default, rename = "endConditionDesignator")]
        pub end_condition_designator: Option<CodeSegmentTerminationTypeXType>,
        #[serde(default, rename = "legPath")]
        pub leg_path: Option<CodeTrajectoryTypeXType>,
        #[serde(default, rename = "legTypeARINC")]
        pub leg_type_arinc: Option<CodeSegmentPathTypeXType>,
        #[serde(default, rename = "course")]
        pub course: Option<ValBearingTypeXType>,
        #[serde(default, rename = "courseType")]
        pub course_type: Option<CodeCourseTypeXType>,
        #[serde(default, rename = "courseDirection")]
        pub course_direction: Option<CodeDirectionReferenceTypeXType>,
        #[serde(default, rename = "turnDirection")]
        pub turn_direction: Option<CodeDirectionTurnTypeXType>,
        #[serde(default, rename = "speedLimit")]
        pub speed_limit: Option<ValSpeedTypeXType>,
        #[serde(default, rename = "speedReference")]
        pub speed_reference: Option<CodeSpeedReferenceTypeXType>,
        #[serde(default, rename = "speedInterpretation")]
        pub speed_interpretation: Option<CodeAltitudeUseTypeXType>,
        #[serde(default, rename = "bankAngle")]
        pub bank_angle: Option<ValAngleTypeXType>,
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "duration")]
        pub duration: Option<ValDurationTypeXType>,
        #[serde(default, rename = "procedureTurnRequired")]
        pub procedure_turn_required: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "upperLimitAltitude")]
        pub upper_limit_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "upperLimitReference")]
        pub upper_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "lowerLimitAltitude")]
        pub lower_limit_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "lowerLimitReference")]
        pub lower_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "altitudeInterpretation")]
        pub altitude_interpretation: Option<CodeAltitudeUseTypeXType>,
        #[serde(default, rename = "altitudeOverrideATC")]
        pub altitude_override_atc: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "altitudeOverrideReference")]
        pub altitude_override_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "verticalAngle")]
        pub vertical_angle: Option<ValAngleTypeXType>,
        #[serde(default, rename = "startPoint")]
        pub start_point: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "endPoint")]
        pub end_point: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "trajectory")]
        pub trajectory: Option<CurvePropertyTypeXType>,
        #[serde(default, rename = "arcCentre")]
        pub arc_centre: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "angle")]
        pub angle: Option<AngleIndicationPropertyTypeXType>,
        #[serde(default, rename = "distance")]
        pub distance: Option<DistanceIndicationPropertyTypeXType>,
        #[serde(default, rename = "aircraftCategory")]
        pub aircraft_category: Vec<AircraftCharacteristicPropertyTypeXType>,
        #[serde(default, rename = "holding")]
        pub holding: Option<HoldingUsePropertyTypeXType>,
        #[serde(default, rename = "designSurface")]
        pub design_surface: Vec<ObstacleAssessmentAreaPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FireFightingServiceTimeSliceContent1421XType {
        #[serde(default, rename = "flightOperations")]
        pub flight_operations: Option<CodeFlightDestinationTypeXType>,
        #[serde(default, rename = "rank")]
        pub rank: Option<CodeFacilityRankingTypeXType>,
        #[serde(default, rename = "compliantICAO")]
        pub compliant_icao: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "serviceProvider")]
        pub service_provider: Option<UnitPropertyTypeXType>,
        #[serde(default, rename = "call-sign")]
        pub call_sign: Vec<CallsignDetailPropertyTypeXType>,
        #[serde(default, rename = "radioCommunication")]
        pub radio_communication: Vec<RadioCommunicationChannelPropertyTypeXType>,
        #[serde(default, rename = "groundCommunication")]
        pub ground_communication: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ServiceOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum FlightConditionElementContent1328XType {
        #[serde(rename = "significantPointCondition_fixDesignatedPoint")]
        SignificantPointConditionFixDesignatedPoint(Option<DesignatedPointPropertyTypeXType>),
        #[serde(rename = "significantPointCondition_navaidSystem")]
        SignificantPointConditionNavaidSystem(Option<NavaidPropertyTypeXType>),
        #[serde(rename = "significantPointCondition_position")]
        SignificantPointConditionPosition(Option<PointPropertyTypeXType>),
        #[serde(rename = "significantPointCondition_runwayPoint")]
        SignificantPointConditionRunwayPoint(Option<RunwayCentrelinePointPropertyTypeXType>),
        #[serde(rename = "significantPointCondition_aimingPoint")]
        SignificantPointConditionAimingPoint(Option<TouchDownLiftOffPropertyTypeXType>),
        #[serde(rename = "significantPointCondition_airportReferencePoint")]
        SignificantPointConditionAirportReferencePoint(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum FlightRoutingElementContent1352XType {
        #[serde(rename = "pointElement_fixDesignatedPoint")]
        PointElementFixDesignatedPoint(Option<DesignatedPointPropertyTypeXType>),
        #[serde(rename = "pointElement_navaidSystem")]
        PointElementNavaidSystem(Option<NavaidPropertyTypeXType>),
        #[serde(rename = "pointElement_position")]
        PointElementPosition(Option<PointPropertyTypeXType>),
        #[serde(rename = "pointElement_runwayPoint")]
        PointElementRunwayPoint(Option<RunwayCentrelinePointPropertyTypeXType>),
        #[serde(rename = "pointElement_aimingPoint")]
        PointElementAimingPoint(Option<TouchDownLiftOffPropertyTypeXType>),
        #[serde(rename = "pointElement_airportReferencePoint")]
        PointElementAirportReferencePoint(Option<AirportHeliportPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GroundTrafficControlServiceTimeSliceContent1435XType {
        #[serde(default, rename = "flightOperations")]
        pub flight_operations: Option<CodeFlightDestinationTypeXType>,
        #[serde(default, rename = "rank")]
        pub rank: Option<CodeFacilityRankingTypeXType>,
        #[serde(default, rename = "compliantICAO")]
        pub compliant_icao: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "serviceProvider")]
        pub service_provider: Option<UnitPropertyTypeXType>,
        #[serde(default, rename = "call-sign")]
        pub call_sign: Vec<CallsignDetailPropertyTypeXType>,
        #[serde(default, rename = "radioCommunication")]
        pub radio_communication: Vec<RadioCommunicationChannelPropertyTypeXType>,
        #[serde(default, rename = "groundCommunication")]
        pub ground_communication: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ServiceOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InitialLegTimeSliceContent1191XType {
        #[serde(default, rename = "endConditionDesignator")]
        pub end_condition_designator: Option<CodeSegmentTerminationTypeXType>,
        #[serde(default, rename = "legPath")]
        pub leg_path: Option<CodeTrajectoryTypeXType>,
        #[serde(default, rename = "legTypeARINC")]
        pub leg_type_arinc: Option<CodeSegmentPathTypeXType>,
        #[serde(default, rename = "course")]
        pub course: Option<ValBearingTypeXType>,
        #[serde(default, rename = "courseType")]
        pub course_type: Option<CodeCourseTypeXType>,
        #[serde(default, rename = "courseDirection")]
        pub course_direction: Option<CodeDirectionReferenceTypeXType>,
        #[serde(default, rename = "turnDirection")]
        pub turn_direction: Option<CodeDirectionTurnTypeXType>,
        #[serde(default, rename = "speedLimit")]
        pub speed_limit: Option<ValSpeedTypeXType>,
        #[serde(default, rename = "speedReference")]
        pub speed_reference: Option<CodeSpeedReferenceTypeXType>,
        #[serde(default, rename = "speedInterpretation")]
        pub speed_interpretation: Option<CodeAltitudeUseTypeXType>,
        #[serde(default, rename = "bankAngle")]
        pub bank_angle: Option<ValAngleTypeXType>,
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "duration")]
        pub duration: Option<ValDurationTypeXType>,
        #[serde(default, rename = "procedureTurnRequired")]
        pub procedure_turn_required: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "upperLimitAltitude")]
        pub upper_limit_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "upperLimitReference")]
        pub upper_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "lowerLimitAltitude")]
        pub lower_limit_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "lowerLimitReference")]
        pub lower_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "altitudeInterpretation")]
        pub altitude_interpretation: Option<CodeAltitudeUseTypeXType>,
        #[serde(default, rename = "altitudeOverrideATC")]
        pub altitude_override_atc: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "altitudeOverrideReference")]
        pub altitude_override_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "verticalAngle")]
        pub vertical_angle: Option<ValAngleTypeXType>,
        #[serde(default, rename = "startPoint")]
        pub start_point: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "endPoint")]
        pub end_point: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "trajectory")]
        pub trajectory: Option<CurvePropertyTypeXType>,
        #[serde(default, rename = "arcCentre")]
        pub arc_centre: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "angle")]
        pub angle: Option<AngleIndicationPropertyTypeXType>,
        #[serde(default, rename = "distance")]
        pub distance: Option<DistanceIndicationPropertyTypeXType>,
        #[serde(default, rename = "aircraftCategory")]
        pub aircraft_category: Vec<AircraftCharacteristicPropertyTypeXType>,
        #[serde(default, rename = "holding")]
        pub holding: Option<HoldingUsePropertyTypeXType>,
        #[serde(default, rename = "designSurface")]
        pub design_surface: Vec<ObstacleAssessmentAreaPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum InstrumentApproachProcedureTimeSliceContent1034XType {
        #[serde(rename = "guidanceFacility_specialNavigationSystem")]
        GuidanceFacilitySpecialNavigationSystem(Option<SpecialNavigationSystemPropertyTypeXType>),
        #[serde(rename = "guidanceFacility_radar")]
        GuidanceFacilityRadar(Option<RadarSystemPropertyTypeXType>),
        #[serde(rename = "guidanceFacility_navaid")]
        GuidanceFacilityNavaid(Option<NavaidPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct IntermediateLegTimeSliceContent1200XType {
        #[serde(default, rename = "endConditionDesignator")]
        pub end_condition_designator: Option<CodeSegmentTerminationTypeXType>,
        #[serde(default, rename = "legPath")]
        pub leg_path: Option<CodeTrajectoryTypeXType>,
        #[serde(default, rename = "legTypeARINC")]
        pub leg_type_arinc: Option<CodeSegmentPathTypeXType>,
        #[serde(default, rename = "course")]
        pub course: Option<ValBearingTypeXType>,
        #[serde(default, rename = "courseType")]
        pub course_type: Option<CodeCourseTypeXType>,
        #[serde(default, rename = "courseDirection")]
        pub course_direction: Option<CodeDirectionReferenceTypeXType>,
        #[serde(default, rename = "turnDirection")]
        pub turn_direction: Option<CodeDirectionTurnTypeXType>,
        #[serde(default, rename = "speedLimit")]
        pub speed_limit: Option<ValSpeedTypeXType>,
        #[serde(default, rename = "speedReference")]
        pub speed_reference: Option<CodeSpeedReferenceTypeXType>,
        #[serde(default, rename = "speedInterpretation")]
        pub speed_interpretation: Option<CodeAltitudeUseTypeXType>,
        #[serde(default, rename = "bankAngle")]
        pub bank_angle: Option<ValAngleTypeXType>,
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "duration")]
        pub duration: Option<ValDurationTypeXType>,
        #[serde(default, rename = "procedureTurnRequired")]
        pub procedure_turn_required: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "upperLimitAltitude")]
        pub upper_limit_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "upperLimitReference")]
        pub upper_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "lowerLimitAltitude")]
        pub lower_limit_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "lowerLimitReference")]
        pub lower_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "altitudeInterpretation")]
        pub altitude_interpretation: Option<CodeAltitudeUseTypeXType>,
        #[serde(default, rename = "altitudeOverrideATC")]
        pub altitude_override_atc: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "altitudeOverrideReference")]
        pub altitude_override_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "verticalAngle")]
        pub vertical_angle: Option<ValAngleTypeXType>,
        #[serde(default, rename = "startPoint")]
        pub start_point: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "endPoint")]
        pub end_point: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "trajectory")]
        pub trajectory: Option<CurvePropertyTypeXType>,
        #[serde(default, rename = "arcCentre")]
        pub arc_centre: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "angle")]
        pub angle: Option<AngleIndicationPropertyTypeXType>,
        #[serde(default, rename = "distance")]
        pub distance: Option<DistanceIndicationPropertyTypeXType>,
        #[serde(default, rename = "aircraftCategory")]
        pub aircraft_category: Vec<AircraftCharacteristicPropertyTypeXType>,
        #[serde(default, rename = "holding")]
        pub holding: Option<HoldingUsePropertyTypeXType>,
        #[serde(default, rename = "designSurface")]
        pub design_surface: Vec<ObstacleAssessmentAreaPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MissedApproachLegTimeSliceContent1214XType {
        #[serde(default, rename = "endConditionDesignator")]
        pub end_condition_designator: Option<CodeSegmentTerminationTypeXType>,
        #[serde(default, rename = "legPath")]
        pub leg_path: Option<CodeTrajectoryTypeXType>,
        #[serde(default, rename = "legTypeARINC")]
        pub leg_type_arinc: Option<CodeSegmentPathTypeXType>,
        #[serde(default, rename = "course")]
        pub course: Option<ValBearingTypeXType>,
        #[serde(default, rename = "courseType")]
        pub course_type: Option<CodeCourseTypeXType>,
        #[serde(default, rename = "courseDirection")]
        pub course_direction: Option<CodeDirectionReferenceTypeXType>,
        #[serde(default, rename = "turnDirection")]
        pub turn_direction: Option<CodeDirectionTurnTypeXType>,
        #[serde(default, rename = "speedLimit")]
        pub speed_limit: Option<ValSpeedTypeXType>,
        #[serde(default, rename = "speedReference")]
        pub speed_reference: Option<CodeSpeedReferenceTypeXType>,
        #[serde(default, rename = "speedInterpretation")]
        pub speed_interpretation: Option<CodeAltitudeUseTypeXType>,
        #[serde(default, rename = "bankAngle")]
        pub bank_angle: Option<ValAngleTypeXType>,
        #[serde(default, rename = "length")]
        pub length: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "duration")]
        pub duration: Option<ValDurationTypeXType>,
        #[serde(default, rename = "procedureTurnRequired")]
        pub procedure_turn_required: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "upperLimitAltitude")]
        pub upper_limit_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "upperLimitReference")]
        pub upper_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "lowerLimitAltitude")]
        pub lower_limit_altitude: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "lowerLimitReference")]
        pub lower_limit_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "altitudeInterpretation")]
        pub altitude_interpretation: Option<CodeAltitudeUseTypeXType>,
        #[serde(default, rename = "altitudeOverrideATC")]
        pub altitude_override_atc: Option<ValDistanceVerticalTypeXType>,
        #[serde(default, rename = "altitudeOverrideReference")]
        pub altitude_override_reference: Option<CodeVerticalReferenceTypeXType>,
        #[serde(default, rename = "verticalAngle")]
        pub vertical_angle: Option<ValAngleTypeXType>,
        #[serde(default, rename = "startPoint")]
        pub start_point: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "endPoint")]
        pub end_point: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "trajectory")]
        pub trajectory: Option<CurvePropertyTypeXType>,
        #[serde(default, rename = "arcCentre")]
        pub arc_centre: Option<TerminalSegmentPointPropertyTypeXType>,
        #[serde(default, rename = "angle")]
        pub angle: Option<AngleIndicationPropertyTypeXType>,
        #[serde(default, rename = "distance")]
        pub distance: Option<DistanceIndicationPropertyTypeXType>,
        #[serde(default, rename = "aircraftCategory")]
        pub aircraft_category: Vec<AircraftCharacteristicPropertyTypeXType>,
        #[serde(default, rename = "holding")]
        pub holding: Option<HoldingUsePropertyTypeXType>,
        #[serde(default, rename = "designSurface")]
        pub design_surface: Vec<ObstacleAssessmentAreaPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PassengerServiceTimeSliceContent1467XType {
        #[serde(default, rename = "flightOperations")]
        pub flight_operations: Option<CodeFlightDestinationTypeXType>,
        #[serde(default, rename = "rank")]
        pub rank: Option<CodeFacilityRankingTypeXType>,
        #[serde(default, rename = "compliantICAO")]
        pub compliant_icao: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "serviceProvider")]
        pub service_provider: Option<UnitPropertyTypeXType>,
        #[serde(default, rename = "call-sign")]
        pub call_sign: Vec<CallsignDetailPropertyTypeXType>,
        #[serde(default, rename = "radioCommunication")]
        pub radio_communication: Vec<RadioCommunicationChannelPropertyTypeXType>,
        #[serde(default, rename = "groundCommunication")]
        pub ground_communication: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "availability")]
        pub availability: Vec<ServiceOperationalStatusPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrimarySurveillanceRadarTimeSliceContent1653XType {
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "serialNumber")]
        pub serial_number: Option<TextDesignatorTypeXType>,
        #[serde(default, rename = "range")]
        pub range: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "rangeAccuracy")]
        pub range_accuracy: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "dualChannel")]
        pub dual_channel: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "movingTargetIndicator")]
        pub moving_target_indicator: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "standbyPower")]
        pub standby_power: Option<CodeStandbyPowerTypeXType>,
        #[serde(default, rename = "digital")]
        pub digital: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "militaryUseOnly")]
        pub military_use_only: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "specialUseOnly")]
        pub special_use_only: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "specialAircraftOnly")]
        pub special_aircraft_only: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "magneticVariation")]
        pub magnetic_variation: Option<ValMagneticVariationTypeXType>,
        #[serde(default, rename = "magneticVariationAccuracy")]
        pub magnetic_variation_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "dateMagneticVariation")]
        pub date_magnetic_variation: Option<DateYearTypeXType>,
        #[serde(default, rename = "contact")]
        pub contact: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SecondarySurveillanceRadarTimeSliceContent1679XType {
        #[serde(default, rename = "name")]
        pub name: Option<TextNameTypeXType>,
        #[serde(default, rename = "serialNumber")]
        pub serial_number: Option<TextDesignatorTypeXType>,
        #[serde(default, rename = "range")]
        pub range: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "rangeAccuracy")]
        pub range_accuracy: Option<ValDistanceTypeXType>,
        #[serde(default, rename = "dualChannel")]
        pub dual_channel: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "movingTargetIndicator")]
        pub moving_target_indicator: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "standbyPower")]
        pub standby_power: Option<CodeStandbyPowerTypeXType>,
        #[serde(default, rename = "digital")]
        pub digital: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "militaryUseOnly")]
        pub military_use_only: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "specialUseOnly")]
        pub special_use_only: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "specialAircraftOnly")]
        pub special_aircraft_only: Option<CodeYesNoTypeXType>,
        #[serde(default, rename = "magneticVariation")]
        pub magnetic_variation: Option<ValMagneticVariationTypeXType>,
        #[serde(default, rename = "magneticVariationAccuracy")]
        pub magnetic_variation_accuracy: Option<ValAngleTypeXType>,
        #[serde(default, rename = "dateMagneticVariation")]
        pub date_magnetic_variation: Option<DateYearTypeXType>,
        #[serde(default, rename = "contact")]
        pub contact: Vec<ContactInformationPropertyTypeXType>,
        #[serde(default, rename = "location")]
        pub location: Option<ElevatedPointPropertyTypeXType>,
        #[serde(default, rename = "annotation")]
        pub annotation: Vec<NotePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum StandardInstrumentArrivalTimeSliceContent1095XType {
        #[serde(rename = "guidanceFacility_specialNavigationSystem")]
        GuidanceFacilitySpecialNavigationSystem(Option<SpecialNavigationSystemPropertyTypeXType>),
        #[serde(rename = "guidanceFacility_radar")]
        GuidanceFacilityRadar(Option<RadarSystemPropertyTypeXType>),
        #[serde(rename = "guidanceFacility_navaid")]
        GuidanceFacilityNavaid(Option<NavaidPropertyTypeXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum StandardInstrumentDepartureTimeSliceContent1127XType {
        #[serde(rename = "guidanceFacility_specialNavigationSystem")]
        GuidanceFacilitySpecialNavigationSystem(Option<SpecialNavigationSystemPropertyTypeXType>),
        #[serde(rename = "guidanceFacility_radar")]
        GuidanceFacilityRadar(Option<RadarSystemPropertyTypeXType>),
        #[serde(rename = "guidanceFacility_navaid")]
        GuidanceFacilityNavaid(Option<NavaidPropertyTypeXType>),
    }
}
pub mod gco {
    use core::fmt::Debug;
    use serde::{de::DeserializeOwned, Deserialize, Serialize};
    use xsd_parser::AsAny;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGenericNameXElement(pub Box<dyn AbstractGenericNameXElementTrait>);
    pub trait AbstractGenericNameXElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractObjectXElement(pub Box<dyn AbstractObjectXElementTrait>);
    pub trait AbstractObjectXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractObjectTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
    }
    pub type AngleXElement = super::gml::AngleTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AnglePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<AnglePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AnglePropertyTypeXTypeContent {
        #[serde(rename = "Angle")]
        pub angle: AngleXElement,
    }
    pub type BinaryXElement = BinaryTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct BinaryPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<BinaryPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct BinaryPropertyTypeXTypeContent {
        #[serde(rename = "Binary")]
        pub binary: BinaryXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct BinaryTypeXType {
        #[serde(default, rename = "@src")]
        pub src: Option<super::xs::AnyUriXType>,
        #[serde(rename = "$text")]
        pub content: super::xs::StringXType,
    }
    pub type BooleanXElement = super::xs::BooleanXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct BooleanPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<BooleanPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct BooleanPropertyTypeXTypeContent {
        #[serde(rename = "Boolean")]
        pub boolean: BooleanXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CharacterStringXElement(pub Box<dyn CharacterStringXElementTrait>);
    pub trait CharacterStringXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CharacterStringPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<CharacterStringPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CharacterStringPropertyTypeXTypeContent {
        #[serde(rename = "CharacterString")]
        pub character_string: CharacterStringXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeListValueTypeXType {
        #[serde(rename = "@codeList")]
        pub code_list: super::xs::AnyUriXType,
        #[serde(rename = "@codeListValue")]
        pub code_list_value: super::xs::AnyUriXType,
        #[serde(default, rename = "@codeSpace")]
        pub code_space: Option<super::xs::AnyUriXType>,
        #[serde(rename = "$text")]
        pub content: super::xs::StringXType,
    }
    impl CharacterStringXElementTrait for CodeListValueTypeXType {}
    pub type DateXElement = DateTypeXType;
    pub type DateTimeXElement = super::xs::DateTimeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DateTimePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DateTimePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DateTimePropertyTypeXTypeContent {
        #[serde(rename = "DateTime")]
        pub date_time: DateTimeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DatePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DatePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DatePropertyTypeXTypeContent {
        #[serde(rename = "Date")]
        Date(DateXElement),
        #[serde(rename = "DateTime")]
        DateTime(DateTimeXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DateTypeXType {
        Date(super::xs::DateXType),
        GYearMonth(super::xs::GYearMonthXType),
        GYear(super::xs::GYearXType),
    }
    pub type DecimalXElement = super::xs::DecimalXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DecimalPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DecimalPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DecimalPropertyTypeXTypeContent {
        #[serde(rename = "Decimal")]
        pub decimal: DecimalXElement,
    }
    pub type DistanceXElement = super::gml::LengthTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DistancePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DistancePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DistancePropertyTypeXTypeContent {
        #[serde(rename = "Distance")]
        pub distance: DistanceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GenericNamePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<GenericNamePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GenericNamePropertyTypeXTypeContent {
        #[serde(rename = "AbstractGenericName")]
        pub abstract_generic_name: AbstractGenericNameXElement,
    }
    pub type IntegerXElement = super::xs::IntegerXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct IntegerPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<IntegerPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct IntegerPropertyTypeXTypeContent {
        #[serde(rename = "Integer")]
        pub integer: IntegerXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LengthXElement(pub Box<dyn LengthXElementTrait>);
    pub trait LengthXElementTrait: MeasureXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LengthPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<LengthPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LengthPropertyTypeXTypeContent {
        #[serde(rename = "Length")]
        pub length: LengthXElement,
    }
    pub type LocalNameXElement = super::gml::CodeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LocalNamePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<LocalNamePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LocalNamePropertyTypeXTypeContent {
        #[serde(rename = "LocalName")]
        pub local_name: LocalNameXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MeasureXElement(pub Box<dyn MeasureXElementTrait>);
    pub trait MeasureXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MeasurePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MeasurePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MeasurePropertyTypeXTypeContent {
        #[serde(rename = "Measure")]
        pub measure: MeasureXElement,
    }
    pub type MemberNameXElement = MemberNameTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MemberNamePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MemberNamePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MemberNamePropertyTypeXTypeContent {
        #[serde(rename = "MemberName")]
        pub member_name: MemberNameXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MemberNameTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "aName")]
        pub a_name: CharacterStringPropertyTypeXType,
        #[serde(rename = "attributeType")]
        pub attribute_type: TypeNamePropertyTypeXType,
    }
    pub type MultiplicityXElement = MultiplicityTypeXType;
    pub type MultiplicityRangeXElement = MultiplicityRangeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiplicityRangePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MultiplicityRangePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiplicityRangePropertyTypeXTypeContent {
        #[serde(rename = "MultiplicityRange")]
        pub multiplicity_range: MultiplicityRangeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiplicityRangeTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "lower")]
        pub lower: IntegerPropertyTypeXType,
        #[serde(rename = "upper")]
        pub upper: UnlimitedIntegerPropertyTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiplicityPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MultiplicityPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiplicityPropertyTypeXTypeContent {
        #[serde(rename = "Multiplicity")]
        pub multiplicity: MultiplicityXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiplicityTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "range")]
        pub range: Vec<MultiplicityRangePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NumberPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<NumberPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum NumberPropertyTypeXTypeContent {
        #[serde(rename = "Real")]
        Real(RealXElement),
        #[serde(rename = "Decimal")]
        Decimal(DecimalXElement),
        #[serde(rename = "Integer")]
        Integer(IntegerXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObjectReferencePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
    }
    pub type RealXElement = super::xs::DoubleXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RealPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<RealPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RealPropertyTypeXTypeContent {
        #[serde(rename = "Real")]
        pub real: RealXElement,
    }
    pub type RecordXElement = super::xs::AnyTypeXType;
    pub type RecordTypeXElement = RecordTypeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RecordTypePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<RecordTypePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RecordTypePropertyTypeXTypeContent {
        #[serde(rename = "RecordType")]
        pub record_type: RecordTypeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RecordTypeTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(rename = "$text")]
        pub content: super::xs::StringXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RecordPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<RecordPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RecordPropertyTypeXTypeContent {
        #[serde(rename = "Record")]
        pub record: RecordXElement,
    }
    pub type ScaleXElement = super::gml::ScaleTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ScalePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<ScalePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ScalePropertyTypeXTypeContent {
        #[serde(rename = "Scale")]
        pub scale: ScaleXElement,
    }
    pub type ScopedNameXElement = super::gml::CodeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ScopedNamePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<ScopedNamePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ScopedNamePropertyTypeXTypeContent {
        #[serde(rename = "ScopedName")]
        pub scoped_name: ScopedNameXElement,
    }
    pub type TypeNameXElement = TypeNameTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TypeNamePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<TypeNamePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TypeNamePropertyTypeXTypeContent {
        #[serde(rename = "TypeName")]
        pub type_name: TypeNameXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TypeNameTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "aName")]
        pub a_name: CharacterStringPropertyTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitOfMeasurePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<UnitOfMeasurePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitOfMeasurePropertyTypeXTypeContent {
        #[serde(rename = "UnitDefinition")]
        pub unit_definition: super::gml::UnitDefinitionXElement,
    }
    pub type UnlimitedIntegerXElement = UnlimitedIntegerTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnlimitedIntegerPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<UnlimitedIntegerPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnlimitedIntegerPropertyTypeXTypeContent {
        #[serde(rename = "UnlimitedInteger")]
        pub unlimited_integer: UnlimitedIntegerXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnlimitedIntegerTypeXType {
        #[serde(default, rename = "@isInfinite")]
        pub is_infinite: Option<super::xs::BooleanXType>,
        #[serde(rename = "$text")]
        pub content: super::xs::NonNegativeIntegerXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UomAnglePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<UomAnglePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UomAnglePropertyTypeXTypeContent {
        #[serde(rename = "UnitDefinition")]
        pub unit_definition: super::gml::UnitDefinitionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UomAreaPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<UomAreaPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UomAreaPropertyTypeXTypeContent {
        #[serde(rename = "UnitDefinition")]
        pub unit_definition: super::gml::UnitDefinitionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UomLengthPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<UomLengthPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UomLengthPropertyTypeXTypeContent {
        #[serde(rename = "UnitDefinition")]
        pub unit_definition: super::gml::UnitDefinitionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UomScalePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<UomScalePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UomScalePropertyTypeXTypeContent {
        #[serde(rename = "UnitDefinition")]
        pub unit_definition: super::gml::UnitDefinitionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UomTimePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<UomTimePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UomTimePropertyTypeXTypeContent {
        #[serde(rename = "UnitDefinition")]
        pub unit_definition: super::gml::UnitDefinitionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UomVelocityPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<UomVelocityPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UomVelocityPropertyTypeXTypeContent {
        #[serde(rename = "UnitDefinition")]
        pub unit_definition: super::gml::UnitDefinitionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UomVolumePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<UomVolumePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UomVolumePropertyTypeXTypeContent {
        #[serde(rename = "UnitDefinition")]
        pub unit_definition: super::gml::UnitDefinitionXElement,
    }
    pub type IsoType = super::xs::StringXType;
    pub type NilReason = super::gml::NilReasonTypeXType;
}
pub mod gmd {
    use core::fmt::Debug;
    use serde::{de::DeserializeOwned, Deserialize, Serialize};
    use xsd_parser::AsAny;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDqCompletenessXElement(pub Box<dyn AbstractDqCompletenessXElementTrait>);
    pub trait AbstractDqCompletenessXElementTrait: AbstractDqElementXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDqCompletenessTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqElementXElementTrait for AbstractDqCompletenessTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDqElementXElement(pub Box<dyn AbstractDqElementXElementTrait>);
    pub trait AbstractDqElementXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDqElementTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDqLogicalConsistencyXElement(
        pub Box<dyn AbstractDqLogicalConsistencyXElementTrait>,
    );
    pub trait AbstractDqLogicalConsistencyXElementTrait: AbstractDqElementXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDqLogicalConsistencyTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqElementXElementTrait for AbstractDqLogicalConsistencyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDqPositionalAccuracyXElement(
        pub Box<dyn AbstractDqPositionalAccuracyXElementTrait>,
    );
    pub trait AbstractDqPositionalAccuracyXElementTrait: AbstractDqElementXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDqPositionalAccuracyTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqElementXElementTrait for AbstractDqPositionalAccuracyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDqResultXElement(pub Box<dyn AbstractDqResultXElementTrait>);
    pub trait AbstractDqResultXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDqResultTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDqTemporalAccuracyXElement(
        pub Box<dyn AbstractDqTemporalAccuracyXElementTrait>,
    );
    pub trait AbstractDqTemporalAccuracyXElementTrait: AbstractDqElementXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDqTemporalAccuracyTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqElementXElementTrait for AbstractDqTemporalAccuracyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDqThematicAccuracyXElement(
        pub Box<dyn AbstractDqThematicAccuracyXElementTrait>,
    );
    pub trait AbstractDqThematicAccuracyXElementTrait: AbstractDqElementXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDqThematicAccuracyTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqElementXElementTrait for AbstractDqThematicAccuracyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDsAggregateXElement(pub Box<dyn AbstractDsAggregateXElementTrait>);
    pub trait AbstractDsAggregateXElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDsAggregateTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "composedOf")]
        pub composed_of: Vec<DsDataSetPropertyTypeXType>,
        #[serde(default, rename = "seriesMetadata")]
        pub series_metadata: Vec<MdMetadataPropertyTypeXType>,
        #[serde(default, rename = "subset")]
        pub subset: Vec<DsAggregatePropertyTypeXType>,
        #[serde(default, rename = "superset")]
        pub superset: Vec<DsAggregatePropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractExGeographicExtentXElement(
        pub Box<dyn AbstractExGeographicExtentXElementTrait>,
    );
    pub trait AbstractExGeographicExtentXElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractExGeographicExtentTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "extentTypeCode")]
        pub extent_type_code: Option<super::gco::BooleanPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMdContentInformationXElement(
        pub Box<dyn AbstractMdContentInformationXElementTrait>,
    );
    pub trait AbstractMdContentInformationXElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMdContentInformationTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMdIdentificationXElement(pub Box<dyn AbstractMdIdentificationXElementTrait>);
    pub trait AbstractMdIdentificationXElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMdIdentificationTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "citation")]
        pub citation: CiCitationPropertyTypeXType,
        #[serde(rename = "abstract")]
        pub abstract_: super::gco::CharacterStringPropertyTypeXType,
        #[serde(default, rename = "purpose")]
        pub purpose: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "credit")]
        pub credit: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "status")]
        pub status: Vec<MdProgressCodePropertyTypeXType>,
        #[serde(default, rename = "pointOfContact")]
        pub point_of_contact: Vec<CiResponsiblePartyPropertyTypeXType>,
        #[serde(default, rename = "resourceMaintenance")]
        pub resource_maintenance: Vec<MdMaintenanceInformationPropertyTypeXType>,
        #[serde(default, rename = "graphicOverview")]
        pub graphic_overview: Vec<MdBrowseGraphicPropertyTypeXType>,
        #[serde(default, rename = "resourceFormat")]
        pub resource_format: Vec<MdFormatPropertyTypeXType>,
        #[serde(default, rename = "descriptiveKeywords")]
        pub descriptive_keywords: Vec<MdKeywordsPropertyTypeXType>,
        #[serde(default, rename = "resourceSpecificUsage")]
        pub resource_specific_usage: Vec<MdUsagePropertyTypeXType>,
        #[serde(default, rename = "resourceConstraints")]
        pub resource_constraints: Vec<MdConstraintsPropertyTypeXType>,
        #[serde(default, rename = "aggregationInfo")]
        pub aggregation_info: Vec<MdAggregateInformationPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMdSpatialRepresentationXElement(
        pub Box<dyn AbstractMdSpatialRepresentationXElementTrait>,
    );
    pub trait AbstractMdSpatialRepresentationXElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMdSpatialRepresentationTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRsReferenceSystemXElement(
        pub Box<dyn AbstractRsReferenceSystemXElementTrait>,
    );
    pub trait AbstractRsReferenceSystemXElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRsReferenceSystemTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "name")]
        pub name: RsIdentifierPropertyTypeXType,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Vec<ExExtentPropertyTypeXType>,
    }
    pub type CiAddressXElement = CiAddressTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiAddressPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<CiAddressPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiAddressPropertyTypeXTypeContent {
        #[serde(rename = "CI_Address")]
        pub ci_address: CiAddressXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiAddressTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "deliveryPoint")]
        pub delivery_point: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "city")]
        pub city: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "administrativeArea")]
        pub administrative_area: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "postalCode")]
        pub postal_code: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "country")]
        pub country: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "electronicMailAddress")]
        pub electronic_mail_address: Vec<super::gco::CharacterStringPropertyTypeXType>,
    }
    pub type CiCitationXElement = CiCitationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiCitationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<CiCitationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiCitationPropertyTypeXTypeContent {
        #[serde(rename = "CI_Citation")]
        pub ci_citation: CiCitationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiCitationTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "title")]
        pub title: super::gco::CharacterStringPropertyTypeXType,
        #[serde(default, rename = "alternateTitle")]
        pub alternate_title: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "date")]
        pub date: Vec<CiDatePropertyTypeXType>,
        #[serde(default, rename = "edition")]
        pub edition: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "editionDate")]
        pub edition_date: Option<super::gco::DatePropertyTypeXType>,
        #[serde(default, rename = "identifier")]
        pub identifier: Vec<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "citedResponsibleParty")]
        pub cited_responsible_party: Vec<CiResponsiblePartyPropertyTypeXType>,
        #[serde(default, rename = "presentationForm")]
        pub presentation_form: Vec<CiPresentationFormCodePropertyTypeXType>,
        #[serde(default, rename = "series")]
        pub series: Option<CiSeriesPropertyTypeXType>,
        #[serde(default, rename = "otherCitationDetails")]
        pub other_citation_details: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "collectiveTitle")]
        pub collective_title: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "ISBN")]
        pub isbn: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "ISSN")]
        pub issn: Option<super::gco::CharacterStringPropertyTypeXType>,
    }
    pub type CiContactXElement = CiContactTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiContactPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<CiContactPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiContactPropertyTypeXTypeContent {
        #[serde(rename = "CI_Contact")]
        pub ci_contact: CiContactXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiContactTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "phone")]
        pub phone: Option<CiTelephonePropertyTypeXType>,
        #[serde(default, rename = "address")]
        pub address: Option<CiAddressPropertyTypeXType>,
        #[serde(default, rename = "onlineResource")]
        pub online_resource: Option<CiOnlineResourcePropertyTypeXType>,
        #[serde(default, rename = "hoursOfService")]
        pub hours_of_service: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "contactInstructions")]
        pub contact_instructions: Option<super::gco::CharacterStringPropertyTypeXType>,
    }
    pub type CiDateXElement = CiDateTypeXType;
    pub type CiDateTypeCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiDateTypeCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<CiDateTypeCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiDateTypeCodePropertyTypeXTypeContent {
        #[serde(rename = "CI_DateTypeCode")]
        pub ci_date_type_code: CiDateTypeCodeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiDatePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<CiDatePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiDatePropertyTypeXTypeContent {
        #[serde(rename = "CI_Date")]
        pub ci_date: CiDateXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiDateTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "date")]
        pub date: super::gco::DatePropertyTypeXType,
        #[serde(rename = "dateType")]
        pub date_type: CiDateTypeCodePropertyTypeXType,
    }
    pub type CiOnLineFunctionCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiOnLineFunctionCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<CiOnLineFunctionCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiOnLineFunctionCodePropertyTypeXTypeContent {
        #[serde(rename = "CI_OnLineFunctionCode")]
        pub ci_on_line_function_code: CiOnLineFunctionCodeXElement,
    }
    pub type CiOnlineResourceXElement = CiOnlineResourceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiOnlineResourcePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<CiOnlineResourcePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiOnlineResourcePropertyTypeXTypeContent {
        #[serde(rename = "CI_OnlineResource")]
        pub ci_online_resource: CiOnlineResourceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiOnlineResourceTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "linkage")]
        pub linkage: UrlPropertyTypeXType,
        #[serde(default, rename = "protocol")]
        pub protocol: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "applicationProfile")]
        pub application_profile: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "name")]
        pub name: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "description")]
        pub description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "function")]
        pub function: Option<CiOnLineFunctionCodePropertyTypeXType>,
    }
    pub type CiPresentationFormCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiPresentationFormCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<CiPresentationFormCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiPresentationFormCodePropertyTypeXTypeContent {
        #[serde(rename = "CI_PresentationFormCode")]
        pub ci_presentation_form_code: CiPresentationFormCodeXElement,
    }
    pub type CiResponsiblePartyXElement = CiResponsiblePartyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiResponsiblePartyPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<CiResponsiblePartyPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiResponsiblePartyPropertyTypeXTypeContent {
        #[serde(rename = "CI_ResponsibleParty")]
        pub ci_responsible_party: CiResponsiblePartyXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiResponsiblePartyTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "individualName")]
        pub individual_name: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "organisationName")]
        pub organisation_name: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "positionName")]
        pub position_name: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "contactInfo")]
        pub contact_info: Option<CiContactPropertyTypeXType>,
        #[serde(rename = "role")]
        pub role: CiRoleCodePropertyTypeXType,
    }
    pub type CiRoleCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiRoleCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<CiRoleCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiRoleCodePropertyTypeXTypeContent {
        #[serde(rename = "CI_RoleCode")]
        pub ci_role_code: CiRoleCodeXElement,
    }
    pub type CiSeriesXElement = CiSeriesTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiSeriesPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<CiSeriesPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiSeriesPropertyTypeXTypeContent {
        #[serde(rename = "CI_Series")]
        pub ci_series: CiSeriesXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiSeriesTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "name")]
        pub name: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "issueIdentification")]
        pub issue_identification: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "page")]
        pub page: Option<super::gco::CharacterStringPropertyTypeXType>,
    }
    pub type CiTelephoneXElement = CiTelephoneTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiTelephonePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<CiTelephonePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiTelephonePropertyTypeXTypeContent {
        #[serde(rename = "CI_Telephone")]
        pub ci_telephone: CiTelephoneXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CiTelephoneTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "voice")]
        pub voice: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "facsimile")]
        pub facsimile: Vec<super::gco::CharacterStringPropertyTypeXType>,
    }
    pub type CountryXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CountryPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<CountryPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CountryPropertyTypeXTypeContent {
        #[serde(rename = "Country")]
        pub country: CountryXElement,
    }
    pub type DqAbsoluteExternalPositionalAccuracyXElement =
        DqAbsoluteExternalPositionalAccuracyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqAbsoluteExternalPositionalAccuracyPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqAbsoluteExternalPositionalAccuracyPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqAbsoluteExternalPositionalAccuracyPropertyTypeXTypeContent {
        #[serde(rename = "DQ_AbsoluteExternalPositionalAccuracy")]
        pub dq_absolute_external_positional_accuracy: DqAbsoluteExternalPositionalAccuracyXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqAbsoluteExternalPositionalAccuracyTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqElementXElementTrait for DqAbsoluteExternalPositionalAccuracyTypeXType {}
    impl AbstractDqPositionalAccuracyXElementTrait for DqAbsoluteExternalPositionalAccuracyTypeXType {}
    pub type DqAccuracyOfATimeMeasurementXElement = DqAccuracyOfATimeMeasurementTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqAccuracyOfATimeMeasurementPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqAccuracyOfATimeMeasurementPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqAccuracyOfATimeMeasurementPropertyTypeXTypeContent {
        #[serde(rename = "DQ_AccuracyOfATimeMeasurement")]
        pub dq_accuracy_of_a_time_measurement: DqAccuracyOfATimeMeasurementXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqAccuracyOfATimeMeasurementTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqElementXElementTrait for DqAccuracyOfATimeMeasurementTypeXType {}
    impl AbstractDqTemporalAccuracyXElementTrait for DqAccuracyOfATimeMeasurementTypeXType {}
    pub type DqCompletenessCommissionXElement = DqCompletenessCommissionTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqCompletenessCommissionPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqCompletenessCommissionPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqCompletenessCommissionPropertyTypeXTypeContent {
        #[serde(rename = "DQ_CompletenessCommission")]
        pub dq_completeness_commission: DqCompletenessCommissionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqCompletenessCommissionTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqCompletenessXElementTrait for DqCompletenessCommissionTypeXType {}
    impl AbstractDqElementXElementTrait for DqCompletenessCommissionTypeXType {}
    pub type DqCompletenessOmissionXElement = DqCompletenessOmissionTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqCompletenessOmissionPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqCompletenessOmissionPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqCompletenessOmissionPropertyTypeXTypeContent {
        #[serde(rename = "DQ_CompletenessOmission")]
        pub dq_completeness_omission: DqCompletenessOmissionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqCompletenessOmissionTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqCompletenessXElementTrait for DqCompletenessOmissionTypeXType {}
    impl AbstractDqElementXElementTrait for DqCompletenessOmissionTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqCompletenessPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqCompletenessPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqCompletenessPropertyTypeXTypeContent {
        #[serde(rename = "AbstractDQ_Completeness")]
        pub abstract_dq_completeness: AbstractDqCompletenessXElement,
    }
    pub type DqConceptualConsistencyXElement = DqConceptualConsistencyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqConceptualConsistencyPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqConceptualConsistencyPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqConceptualConsistencyPropertyTypeXTypeContent {
        #[serde(rename = "DQ_ConceptualConsistency")]
        pub dq_conceptual_consistency: DqConceptualConsistencyXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqConceptualConsistencyTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqElementXElementTrait for DqConceptualConsistencyTypeXType {}
    impl AbstractDqLogicalConsistencyXElementTrait for DqConceptualConsistencyTypeXType {}
    pub type DqConformanceResultXElement = DqConformanceResultTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqConformanceResultPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqConformanceResultPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqConformanceResultPropertyTypeXTypeContent {
        #[serde(rename = "DQ_ConformanceResult")]
        pub dq_conformance_result: DqConformanceResultXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqConformanceResultTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "specification")]
        pub specification: CiCitationPropertyTypeXType,
        #[serde(rename = "explanation")]
        pub explanation: super::gco::CharacterStringPropertyTypeXType,
        #[serde(rename = "pass")]
        pub pass: super::gco::BooleanPropertyTypeXType,
    }
    impl AbstractDqResultXElementTrait for DqConformanceResultTypeXType {}
    pub type DqDataQualityXElement = DqDataQualityTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqDataQualityPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqDataQualityPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqDataQualityPropertyTypeXTypeContent {
        #[serde(rename = "DQ_DataQuality")]
        pub dq_data_quality: DqDataQualityXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqDataQualityTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "scope")]
        pub scope: DqScopePropertyTypeXType,
        #[serde(default, rename = "report")]
        pub report: Vec<DqElementPropertyTypeXType>,
        #[serde(default, rename = "lineage")]
        pub lineage: Option<LiLineagePropertyTypeXType>,
    }
    pub type DqDomainConsistencyXElement = DqDomainConsistencyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqDomainConsistencyPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqDomainConsistencyPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqDomainConsistencyPropertyTypeXTypeContent {
        #[serde(rename = "DQ_DomainConsistency")]
        pub dq_domain_consistency: DqDomainConsistencyXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqDomainConsistencyTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqElementXElementTrait for DqDomainConsistencyTypeXType {}
    impl AbstractDqLogicalConsistencyXElementTrait for DqDomainConsistencyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqElementPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqElementPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqElementPropertyTypeXTypeContent {
        #[serde(rename = "AbstractDQ_Element")]
        pub abstract_dq_element: AbstractDqElementXElement,
    }
    pub type DqEvaluationMethodTypeCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqEvaluationMethodTypeCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqEvaluationMethodTypeCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqEvaluationMethodTypeCodePropertyTypeXTypeContent {
        #[serde(rename = "DQ_EvaluationMethodTypeCode")]
        pub dq_evaluation_method_type_code: DqEvaluationMethodTypeCodeXElement,
    }
    pub type DqFormatConsistencyXElement = DqFormatConsistencyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqFormatConsistencyPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqFormatConsistencyPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqFormatConsistencyPropertyTypeXTypeContent {
        #[serde(rename = "DQ_FormatConsistency")]
        pub dq_format_consistency: DqFormatConsistencyXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqFormatConsistencyTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqElementXElementTrait for DqFormatConsistencyTypeXType {}
    impl AbstractDqLogicalConsistencyXElementTrait for DqFormatConsistencyTypeXType {}
    pub type DqGriddedDataPositionalAccuracyXElement = DqGriddedDataPositionalAccuracyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqGriddedDataPositionalAccuracyPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqGriddedDataPositionalAccuracyPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqGriddedDataPositionalAccuracyPropertyTypeXTypeContent {
        #[serde(rename = "DQ_GriddedDataPositionalAccuracy")]
        pub dq_gridded_data_positional_accuracy: DqGriddedDataPositionalAccuracyXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqGriddedDataPositionalAccuracyTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqElementXElementTrait for DqGriddedDataPositionalAccuracyTypeXType {}
    impl AbstractDqPositionalAccuracyXElementTrait for DqGriddedDataPositionalAccuracyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqLogicalConsistencyPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqLogicalConsistencyPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqLogicalConsistencyPropertyTypeXTypeContent {
        #[serde(rename = "AbstractDQ_LogicalConsistency")]
        pub abstract_dq_logical_consistency: AbstractDqLogicalConsistencyXElement,
    }
    pub type DqNonQuantitativeAttributeAccuracyXElement =
        DqNonQuantitativeAttributeAccuracyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqNonQuantitativeAttributeAccuracyPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqNonQuantitativeAttributeAccuracyPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqNonQuantitativeAttributeAccuracyPropertyTypeXTypeContent {
        #[serde(rename = "DQ_NonQuantitativeAttributeAccuracy")]
        pub dq_non_quantitative_attribute_accuracy: DqNonQuantitativeAttributeAccuracyXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqNonQuantitativeAttributeAccuracyTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqElementXElementTrait for DqNonQuantitativeAttributeAccuracyTypeXType {}
    impl AbstractDqThematicAccuracyXElementTrait for DqNonQuantitativeAttributeAccuracyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqPositionalAccuracyPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqPositionalAccuracyPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqPositionalAccuracyPropertyTypeXTypeContent {
        #[serde(rename = "AbstractDQ_PositionalAccuracy")]
        pub abstract_dq_positional_accuracy: AbstractDqPositionalAccuracyXElement,
    }
    pub type DqQuantitativeAttributeAccuracyXElement = DqQuantitativeAttributeAccuracyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqQuantitativeAttributeAccuracyPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqQuantitativeAttributeAccuracyPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqQuantitativeAttributeAccuracyPropertyTypeXTypeContent {
        #[serde(rename = "DQ_QuantitativeAttributeAccuracy")]
        pub dq_quantitative_attribute_accuracy: DqQuantitativeAttributeAccuracyXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqQuantitativeAttributeAccuracyTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqElementXElementTrait for DqQuantitativeAttributeAccuracyTypeXType {}
    impl AbstractDqThematicAccuracyXElementTrait for DqQuantitativeAttributeAccuracyTypeXType {}
    pub type DqQuantitativeResultXElement = DqQuantitativeResultTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqQuantitativeResultPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqQuantitativeResultPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqQuantitativeResultPropertyTypeXTypeContent {
        #[serde(rename = "DQ_QuantitativeResult")]
        pub dq_quantitative_result: DqQuantitativeResultXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqQuantitativeResultTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "valueType")]
        pub value_type: Option<super::gco::RecordTypePropertyTypeXType>,
        #[serde(rename = "valueUnit")]
        pub value_unit: super::gco::UnitOfMeasurePropertyTypeXType,
        #[serde(default, rename = "errorStatistic")]
        pub error_statistic: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "value")]
        pub value: Vec<super::gco::RecordPropertyTypeXType>,
    }
    impl AbstractDqResultXElementTrait for DqQuantitativeResultTypeXType {}
    pub type DqRelativeInternalPositionalAccuracyXElement =
        DqRelativeInternalPositionalAccuracyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqRelativeInternalPositionalAccuracyPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqRelativeInternalPositionalAccuracyPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqRelativeInternalPositionalAccuracyPropertyTypeXTypeContent {
        #[serde(rename = "DQ_RelativeInternalPositionalAccuracy")]
        pub dq_relative_internal_positional_accuracy: DqRelativeInternalPositionalAccuracyXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqRelativeInternalPositionalAccuracyTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqElementXElementTrait for DqRelativeInternalPositionalAccuracyTypeXType {}
    impl AbstractDqPositionalAccuracyXElementTrait for DqRelativeInternalPositionalAccuracyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqResultPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqResultPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqResultPropertyTypeXTypeContent {
        #[serde(rename = "AbstractDQ_Result")]
        pub abstract_dq_result: AbstractDqResultXElement,
    }
    pub type DqScopeXElement = DqScopeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqScopePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqScopePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqScopePropertyTypeXTypeContent {
        #[serde(rename = "DQ_Scope")]
        pub dq_scope: DqScopeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqScopeTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "level")]
        pub level: MdScopeCodePropertyTypeXType,
        #[serde(default, rename = "extent")]
        pub extent: Option<ExExtentPropertyTypeXType>,
        #[serde(default, rename = "levelDescription")]
        pub level_description: Vec<MdScopeDescriptionPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqTemporalAccuracyPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqTemporalAccuracyPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqTemporalAccuracyPropertyTypeXTypeContent {
        #[serde(rename = "AbstractDQ_TemporalAccuracy")]
        pub abstract_dq_temporal_accuracy: AbstractDqTemporalAccuracyXElement,
    }
    pub type DqTemporalConsistencyXElement = DqTemporalConsistencyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqTemporalConsistencyPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqTemporalConsistencyPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqTemporalConsistencyPropertyTypeXTypeContent {
        #[serde(rename = "DQ_TemporalConsistency")]
        pub dq_temporal_consistency: DqTemporalConsistencyXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqTemporalConsistencyTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqElementXElementTrait for DqTemporalConsistencyTypeXType {}
    impl AbstractDqTemporalAccuracyXElementTrait for DqTemporalConsistencyTypeXType {}
    pub type DqTemporalValidityXElement = DqTemporalValidityTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqTemporalValidityPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqTemporalValidityPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqTemporalValidityPropertyTypeXTypeContent {
        #[serde(rename = "DQ_TemporalValidity")]
        pub dq_temporal_validity: DqTemporalValidityXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqTemporalValidityTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqElementXElementTrait for DqTemporalValidityTypeXType {}
    impl AbstractDqTemporalAccuracyXElementTrait for DqTemporalValidityTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqThematicAccuracyPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqThematicAccuracyPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqThematicAccuracyPropertyTypeXTypeContent {
        #[serde(rename = "AbstractDQ_ThematicAccuracy")]
        pub abstract_dq_thematic_accuracy: AbstractDqThematicAccuracyXElement,
    }
    pub type DqThematicClassificationCorrectnessXElement =
        DqThematicClassificationCorrectnessTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqThematicClassificationCorrectnessPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqThematicClassificationCorrectnessPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqThematicClassificationCorrectnessPropertyTypeXTypeContent {
        #[serde(rename = "DQ_ThematicClassificationCorrectness")]
        pub dq_thematic_classification_correctness: DqThematicClassificationCorrectnessXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqThematicClassificationCorrectnessTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqElementXElementTrait for DqThematicClassificationCorrectnessTypeXType {}
    impl AbstractDqThematicAccuracyXElementTrait for DqThematicClassificationCorrectnessTypeXType {}
    pub type DqTopologicalConsistencyXElement = DqTopologicalConsistencyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqTopologicalConsistencyPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DqTopologicalConsistencyPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqTopologicalConsistencyPropertyTypeXTypeContent {
        #[serde(rename = "DQ_TopologicalConsistency")]
        pub dq_topological_consistency: DqTopologicalConsistencyXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DqTopologicalConsistencyTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "nameOfMeasure")]
        pub name_of_measure: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "measureIdentification")]
        pub measure_identification: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "measureDescription")]
        pub measure_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodType")]
        pub evaluation_method_type: Option<DqEvaluationMethodTypeCodePropertyTypeXType>,
        #[serde(default, rename = "evaluationMethodDescription")]
        pub evaluation_method_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "evaluationProcedure")]
        pub evaluation_procedure: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Vec<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "result")]
        pub result: Vec<DqResultPropertyTypeXType>,
    }
    impl AbstractDqElementXElementTrait for DqTopologicalConsistencyTypeXType {}
    impl AbstractDqLogicalConsistencyXElementTrait for DqTopologicalConsistencyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsAggregatePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DsAggregatePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsAggregatePropertyTypeXTypeContent {
        #[serde(rename = "AbstractDS_Aggregate")]
        pub abstract_ds_aggregate: AbstractDsAggregateXElement,
    }
    pub type DsAssociationXElement = DsAssociationTypeXType;
    pub type DsAssociationTypeCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsAssociationTypeCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DsAssociationTypeCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsAssociationTypeCodePropertyTypeXTypeContent {
        #[serde(rename = "DS_AssociationTypeCode")]
        pub ds_association_type_code: DsAssociationTypeCodeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsAssociationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DsAssociationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsAssociationPropertyTypeXTypeContent {
        #[serde(rename = "DS_Association")]
        pub ds_association: DsAssociationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsAssociationTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
    }
    pub type DsDataSetXElement = DsDataSetTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsDataSetPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DsDataSetPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsDataSetPropertyTypeXTypeContent {
        #[serde(rename = "DS_DataSet")]
        pub ds_data_set: DsDataSetXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsDataSetTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "has")]
        pub has: Vec<MdMetadataPropertyTypeXType>,
        #[serde(default, rename = "partOf")]
        pub part_of: Vec<DsAggregatePropertyTypeXType>,
    }
    pub type DsInitiativeXElement = DsInitiativeTypeXType;
    pub type DsInitiativeTypeCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsInitiativeTypeCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DsInitiativeTypeCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsInitiativeTypeCodePropertyTypeXTypeContent {
        #[serde(rename = "DS_InitiativeTypeCode")]
        pub ds_initiative_type_code: DsInitiativeTypeCodeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsInitiativePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DsInitiativePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsInitiativePropertyTypeXTypeContent {
        #[serde(rename = "DS_Initiative")]
        pub ds_initiative: DsInitiativeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsInitiativeTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "composedOf")]
        pub composed_of: Vec<DsDataSetPropertyTypeXType>,
        #[serde(default, rename = "seriesMetadata")]
        pub series_metadata: Vec<MdMetadataPropertyTypeXType>,
        #[serde(default, rename = "subset")]
        pub subset: Vec<DsAggregatePropertyTypeXType>,
        #[serde(default, rename = "superset")]
        pub superset: Vec<DsAggregatePropertyTypeXType>,
    }
    impl AbstractDsAggregateXElementTrait for DsInitiativeTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsOtherAggregateXElement(pub Box<dyn DsOtherAggregateXElementTrait>);
    pub trait DsOtherAggregateXElementTrait: AbstractDsAggregateXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsOtherAggregatePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DsOtherAggregatePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsOtherAggregatePropertyTypeXTypeContent {
        #[serde(rename = "DS_OtherAggregate")]
        pub ds_other_aggregate: DsOtherAggregateXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsOtherAggregateTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "composedOf")]
        pub composed_of: Vec<DsDataSetPropertyTypeXType>,
        #[serde(default, rename = "seriesMetadata")]
        pub series_metadata: Vec<MdMetadataPropertyTypeXType>,
        #[serde(default, rename = "subset")]
        pub subset: Vec<DsAggregatePropertyTypeXType>,
        #[serde(default, rename = "superset")]
        pub superset: Vec<DsAggregatePropertyTypeXType>,
    }
    impl AbstractDsAggregateXElementTrait for DsOtherAggregateTypeXType {}
    impl DsOtherAggregateXElementTrait for DsOtherAggregateTypeXType {}
    pub type DsPlatformXElement = DsPlatformTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsPlatformPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DsPlatformPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsPlatformPropertyTypeXTypeContent {
        #[serde(rename = "DS_Platform")]
        pub ds_platform: DsPlatformXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsPlatformTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "composedOf")]
        pub composed_of: Vec<DsDataSetPropertyTypeXType>,
        #[serde(default, rename = "seriesMetadata")]
        pub series_metadata: Vec<MdMetadataPropertyTypeXType>,
        #[serde(default, rename = "subset")]
        pub subset: Vec<DsAggregatePropertyTypeXType>,
        #[serde(default, rename = "superset")]
        pub superset: Vec<DsAggregatePropertyTypeXType>,
    }
    impl AbstractDsAggregateXElementTrait for DsPlatformTypeXType {}
    impl DsSeriesXElementTrait for DsPlatformTypeXType {}
    pub type DsProductionSeriesXElement = DsProductionSeriesTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsProductionSeriesPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DsProductionSeriesPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsProductionSeriesPropertyTypeXTypeContent {
        #[serde(rename = "DS_ProductionSeries")]
        pub ds_production_series: DsProductionSeriesXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsProductionSeriesTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "composedOf")]
        pub composed_of: Vec<DsDataSetPropertyTypeXType>,
        #[serde(default, rename = "seriesMetadata")]
        pub series_metadata: Vec<MdMetadataPropertyTypeXType>,
        #[serde(default, rename = "subset")]
        pub subset: Vec<DsAggregatePropertyTypeXType>,
        #[serde(default, rename = "superset")]
        pub superset: Vec<DsAggregatePropertyTypeXType>,
    }
    impl AbstractDsAggregateXElementTrait for DsProductionSeriesTypeXType {}
    impl DsSeriesXElementTrait for DsProductionSeriesTypeXType {}
    pub type DsSensorXElement = DsSensorTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsSensorPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DsSensorPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsSensorPropertyTypeXTypeContent {
        #[serde(rename = "DS_Sensor")]
        pub ds_sensor: DsSensorXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsSensorTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "composedOf")]
        pub composed_of: Vec<DsDataSetPropertyTypeXType>,
        #[serde(default, rename = "seriesMetadata")]
        pub series_metadata: Vec<MdMetadataPropertyTypeXType>,
        #[serde(default, rename = "subset")]
        pub subset: Vec<DsAggregatePropertyTypeXType>,
        #[serde(default, rename = "superset")]
        pub superset: Vec<DsAggregatePropertyTypeXType>,
    }
    impl AbstractDsAggregateXElementTrait for DsSensorTypeXType {}
    impl DsSeriesXElementTrait for DsSensorTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsSeriesXElement(pub Box<dyn DsSeriesXElementTrait>);
    pub trait DsSeriesXElementTrait: AbstractDsAggregateXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsSeriesPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DsSeriesPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsSeriesPropertyTypeXTypeContent {
        #[serde(rename = "DS_Series")]
        pub ds_series: DsSeriesXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsSeriesTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "composedOf")]
        pub composed_of: Vec<DsDataSetPropertyTypeXType>,
        #[serde(default, rename = "seriesMetadata")]
        pub series_metadata: Vec<MdMetadataPropertyTypeXType>,
        #[serde(default, rename = "subset")]
        pub subset: Vec<DsAggregatePropertyTypeXType>,
        #[serde(default, rename = "superset")]
        pub superset: Vec<DsAggregatePropertyTypeXType>,
    }
    impl AbstractDsAggregateXElementTrait for DsSeriesTypeXType {}
    impl DsSeriesXElementTrait for DsSeriesTypeXType {}
    pub type DsStereoMateXElement = DsStereoMateTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsStereoMatePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<DsStereoMatePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsStereoMatePropertyTypeXTypeContent {
        #[serde(rename = "DS_StereoMate")]
        pub ds_stereo_mate: DsStereoMateXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DsStereoMateTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "composedOf")]
        pub composed_of: Vec<DsDataSetPropertyTypeXType>,
        #[serde(default, rename = "seriesMetadata")]
        pub series_metadata: Vec<MdMetadataPropertyTypeXType>,
        #[serde(default, rename = "subset")]
        pub subset: Vec<DsAggregatePropertyTypeXType>,
        #[serde(default, rename = "superset")]
        pub superset: Vec<DsAggregatePropertyTypeXType>,
    }
    impl AbstractDsAggregateXElementTrait for DsStereoMateTypeXType {}
    impl DsOtherAggregateXElementTrait for DsStereoMateTypeXType {}
    pub type ExBoundingPolygonXElement = ExBoundingPolygonTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExBoundingPolygonPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<ExBoundingPolygonPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExBoundingPolygonPropertyTypeXTypeContent {
        #[serde(rename = "EX_BoundingPolygon")]
        pub ex_bounding_polygon: ExBoundingPolygonXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExBoundingPolygonTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "extentTypeCode")]
        pub extent_type_code: Option<super::gco::BooleanPropertyTypeXType>,
        #[serde(default, rename = "polygon")]
        pub polygon: Vec<super::gss::GmObjectPropertyTypeXType>,
    }
    impl AbstractExGeographicExtentXElementTrait for ExBoundingPolygonTypeXType {}
    pub type ExExtentXElement = ExExtentTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExExtentPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<ExExtentPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExExtentPropertyTypeXTypeContent {
        #[serde(rename = "EX_Extent")]
        pub ex_extent: ExExtentXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExExtentTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "description")]
        pub description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "geographicElement")]
        pub geographic_element: Vec<ExGeographicExtentPropertyTypeXType>,
        #[serde(default, rename = "temporalElement")]
        pub temporal_element: Vec<ExTemporalExtentPropertyTypeXType>,
        #[serde(default, rename = "verticalElement")]
        pub vertical_element: Vec<ExVerticalExtentPropertyTypeXType>,
    }
    pub type ExGeographicBoundingBoxXElement = ExGeographicBoundingBoxTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExGeographicBoundingBoxPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<ExGeographicBoundingBoxPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExGeographicBoundingBoxPropertyTypeXTypeContent {
        #[serde(rename = "EX_GeographicBoundingBox")]
        pub ex_geographic_bounding_box: ExGeographicBoundingBoxXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExGeographicBoundingBoxTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "extentTypeCode")]
        pub extent_type_code: Option<super::gco::BooleanPropertyTypeXType>,
        #[serde(rename = "westBoundLongitude")]
        pub west_bound_longitude: super::gco::DecimalPropertyTypeXType,
        #[serde(rename = "eastBoundLongitude")]
        pub east_bound_longitude: super::gco::DecimalPropertyTypeXType,
        #[serde(rename = "southBoundLatitude")]
        pub south_bound_latitude: super::gco::DecimalPropertyTypeXType,
        #[serde(rename = "northBoundLatitude")]
        pub north_bound_latitude: super::gco::DecimalPropertyTypeXType,
    }
    impl AbstractExGeographicExtentXElementTrait for ExGeographicBoundingBoxTypeXType {}
    pub type ExGeographicDescriptionXElement = ExGeographicDescriptionTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExGeographicDescriptionPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<ExGeographicDescriptionPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExGeographicDescriptionPropertyTypeXTypeContent {
        #[serde(rename = "EX_GeographicDescription")]
        pub ex_geographic_description: ExGeographicDescriptionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExGeographicDescriptionTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "extentTypeCode")]
        pub extent_type_code: Option<super::gco::BooleanPropertyTypeXType>,
        #[serde(rename = "geographicIdentifier")]
        pub geographic_identifier: MdIdentifierPropertyTypeXType,
    }
    impl AbstractExGeographicExtentXElementTrait for ExGeographicDescriptionTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExGeographicExtentPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<ExGeographicExtentPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExGeographicExtentPropertyTypeXTypeContent {
        #[serde(rename = "AbstractEX_GeographicExtent")]
        pub abstract_ex_geographic_extent: AbstractExGeographicExtentXElement,
    }
    pub type ExSpatialTemporalExtentXElement = ExSpatialTemporalExtentTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExSpatialTemporalExtentPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<ExSpatialTemporalExtentPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExSpatialTemporalExtentPropertyTypeXTypeContent {
        #[serde(rename = "EX_SpatialTemporalExtent")]
        pub ex_spatial_temporal_extent: ExSpatialTemporalExtentXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExSpatialTemporalExtentTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "extent")]
        pub extent: super::gts::TmPrimitivePropertyTypeXType,
        #[serde(default, rename = "spatialExtent")]
        pub spatial_extent: Vec<ExGeographicExtentPropertyTypeXType>,
    }
    impl ExTemporalExtentXElementTrait for ExSpatialTemporalExtentTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExTemporalExtentXElement(pub Box<dyn ExTemporalExtentXElementTrait>);
    pub trait ExTemporalExtentXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExTemporalExtentPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<ExTemporalExtentPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExTemporalExtentPropertyTypeXTypeContent {
        #[serde(rename = "EX_TemporalExtent")]
        pub ex_temporal_extent: ExTemporalExtentXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExTemporalExtentTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "extent")]
        pub extent: super::gts::TmPrimitivePropertyTypeXType,
    }
    impl ExTemporalExtentXElementTrait for ExTemporalExtentTypeXType {}
    pub type ExVerticalExtentXElement = ExVerticalExtentTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExVerticalExtentPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<ExVerticalExtentPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExVerticalExtentPropertyTypeXTypeContent {
        #[serde(rename = "EX_VerticalExtent")]
        pub ex_vertical_extent: ExVerticalExtentXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExVerticalExtentTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "minimumValue")]
        pub minimum_value: super::gco::RealPropertyTypeXType,
        #[serde(rename = "maximumValue")]
        pub maximum_value: super::gco::RealPropertyTypeXType,
        #[serde(rename = "verticalCRS")]
        pub vertical_crs: super::gsr::ScCrsPropertyTypeXType,
    }
    pub type LiLineageXElement = LiLineageTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LiLineagePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<LiLineagePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LiLineagePropertyTypeXTypeContent {
        #[serde(rename = "LI_Lineage")]
        pub li_lineage: LiLineageXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LiLineageTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "statement")]
        pub statement: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "processStep")]
        pub process_step: Vec<LiProcessStepPropertyTypeXType>,
        #[serde(default, rename = "source")]
        pub source: Vec<LiSourcePropertyTypeXType>,
    }
    pub type LiProcessStepXElement = LiProcessStepTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LiProcessStepPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<LiProcessStepPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LiProcessStepPropertyTypeXTypeContent {
        #[serde(rename = "LI_ProcessStep")]
        pub li_process_step: LiProcessStepXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LiProcessStepTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "description")]
        pub description: super::gco::CharacterStringPropertyTypeXType,
        #[serde(default, rename = "rationale")]
        pub rationale: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "dateTime")]
        pub date_time: Option<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "processor")]
        pub processor: Vec<CiResponsiblePartyPropertyTypeXType>,
        #[serde(default, rename = "source")]
        pub source: Vec<LiSourcePropertyTypeXType>,
    }
    pub type LiSourceXElement = LiSourceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LiSourcePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<LiSourcePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LiSourcePropertyTypeXTypeContent {
        #[serde(rename = "LI_Source")]
        pub li_source: LiSourceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LiSourceTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "description")]
        pub description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "scaleDenominator")]
        pub scale_denominator: Option<MdRepresentativeFractionPropertyTypeXType>,
        #[serde(default, rename = "sourceReferenceSystem")]
        pub source_reference_system: Option<MdReferenceSystemPropertyTypeXType>,
        #[serde(default, rename = "sourceCitation")]
        pub source_citation: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "sourceExtent")]
        pub source_extent: Vec<ExExtentPropertyTypeXType>,
        #[serde(default, rename = "sourceStep")]
        pub source_step: Vec<LiProcessStepPropertyTypeXType>,
    }
    pub type LanguageCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LanguageCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<LanguageCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LanguageCodePropertyTypeXTypeContent {
        #[serde(rename = "LanguageCode")]
        pub language_code: LanguageCodeXElement,
    }
    pub type LocalisedCharacterStringXElement = LocalisedCharacterStringTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LocalisedCharacterStringPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<LocalisedCharacterStringPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LocalisedCharacterStringPropertyTypeXTypeContent {
        #[serde(rename = "LocalisedCharacterString")]
        pub localised_character_string: LocalisedCharacterStringXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LocalisedCharacterStringTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@locale")]
        pub locale: Option<super::xs::AnyUriXType>,
        #[serde(rename = "$text")]
        pub content: super::xs::StringXType,
    }
    impl super::gco::CharacterStringXElementTrait for LocalisedCharacterStringTypeXType {}
    pub type MdAggregateInformationXElement = MdAggregateInformationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdAggregateInformationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdAggregateInformationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdAggregateInformationPropertyTypeXTypeContent {
        #[serde(rename = "MD_AggregateInformation")]
        pub md_aggregate_information: MdAggregateInformationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdAggregateInformationTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "aggregateDataSetName")]
        pub aggregate_data_set_name: Option<CiCitationPropertyTypeXType>,
        #[serde(default, rename = "aggregateDataSetIdentifier")]
        pub aggregate_data_set_identifier: Option<MdIdentifierPropertyTypeXType>,
        #[serde(rename = "associationType")]
        pub association_type: DsAssociationTypeCodePropertyTypeXType,
        #[serde(default, rename = "initiativeType")]
        pub initiative_type: Option<DsInitiativeTypeCodePropertyTypeXType>,
    }
    pub type MdApplicationSchemaInformationXElement = MdApplicationSchemaInformationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdApplicationSchemaInformationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdApplicationSchemaInformationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdApplicationSchemaInformationPropertyTypeXTypeContent {
        #[serde(rename = "MD_ApplicationSchemaInformation")]
        pub md_application_schema_information: MdApplicationSchemaInformationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdApplicationSchemaInformationTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "name")]
        pub name: CiCitationPropertyTypeXType,
        #[serde(rename = "schemaLanguage")]
        pub schema_language: super::gco::CharacterStringPropertyTypeXType,
        #[serde(rename = "constraintLanguage")]
        pub constraint_language: super::gco::CharacterStringPropertyTypeXType,
        #[serde(default, rename = "schemaAscii")]
        pub schema_ascii: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "graphicsFile")]
        pub graphics_file: Option<super::gco::BinaryPropertyTypeXType>,
        #[serde(default, rename = "softwareDevelopmentFile")]
        pub software_development_file: Option<super::gco::BinaryPropertyTypeXType>,
        #[serde(default, rename = "softwareDevelopmentFileFormat")]
        pub software_development_file_format: Option<super::gco::CharacterStringPropertyTypeXType>,
    }
    pub type MdBandXElement = MdBandTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdBandPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdBandPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdBandPropertyTypeXTypeContent {
        #[serde(rename = "MD_Band")]
        pub md_band: MdBandXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdBandTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "sequenceIdentifier")]
        pub sequence_identifier: Option<super::gco::MemberNamePropertyTypeXType>,
        #[serde(default, rename = "descriptor")]
        pub descriptor: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "maxValue")]
        pub max_value: Option<super::gco::RealPropertyTypeXType>,
        #[serde(default, rename = "minValue")]
        pub min_value: Option<super::gco::RealPropertyTypeXType>,
        #[serde(default, rename = "units")]
        pub units: Option<super::gco::UomLengthPropertyTypeXType>,
        #[serde(default, rename = "peakResponse")]
        pub peak_response: Option<super::gco::RealPropertyTypeXType>,
        #[serde(default, rename = "bitsPerValue")]
        pub bits_per_value: Option<super::gco::IntegerPropertyTypeXType>,
        #[serde(default, rename = "toneGradation")]
        pub tone_gradation: Option<super::gco::IntegerPropertyTypeXType>,
        #[serde(default, rename = "scaleFactor")]
        pub scale_factor: Option<super::gco::RealPropertyTypeXType>,
        #[serde(default, rename = "offset")]
        pub offset: Option<super::gco::RealPropertyTypeXType>,
    }
    impl MdRangeDimensionXElementTrait for MdBandTypeXType {}
    pub type MdBrowseGraphicXElement = MdBrowseGraphicTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdBrowseGraphicPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdBrowseGraphicPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdBrowseGraphicPropertyTypeXTypeContent {
        #[serde(rename = "MD_BrowseGraphic")]
        pub md_browse_graphic: MdBrowseGraphicXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdBrowseGraphicTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "fileName")]
        pub file_name: super::gco::CharacterStringPropertyTypeXType,
        #[serde(default, rename = "fileDescription")]
        pub file_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "fileType")]
        pub file_type: Option<super::gco::CharacterStringPropertyTypeXType>,
    }
    pub type MdCellGeometryCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdCellGeometryCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdCellGeometryCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdCellGeometryCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_CellGeometryCode")]
        pub md_cell_geometry_code: MdCellGeometryCodeXElement,
    }
    pub type MdCharacterSetCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdCharacterSetCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdCharacterSetCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdCharacterSetCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_CharacterSetCode")]
        pub md_character_set_code: MdCharacterSetCodeXElement,
    }
    pub type MdClassificationCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdClassificationCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdClassificationCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdClassificationCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_ClassificationCode")]
        pub md_classification_code: MdClassificationCodeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdConstraintsXElement(pub Box<dyn MdConstraintsXElementTrait>);
    pub trait MdConstraintsXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdConstraintsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdConstraintsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdConstraintsPropertyTypeXTypeContent {
        #[serde(rename = "MD_Constraints")]
        pub md_constraints: MdConstraintsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdConstraintsTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "useLimitation")]
        pub use_limitation: Vec<super::gco::CharacterStringPropertyTypeXType>,
    }
    impl MdConstraintsXElementTrait for MdConstraintsTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdContentInformationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdContentInformationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdContentInformationPropertyTypeXTypeContent {
        #[serde(rename = "AbstractMD_ContentInformation")]
        pub abstract_md_content_information: AbstractMdContentInformationXElement,
    }
    pub type MdCoverageContentTypeCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdCoverageContentTypeCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdCoverageContentTypeCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdCoverageContentTypeCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_CoverageContentTypeCode")]
        pub md_coverage_content_type_code: MdCoverageContentTypeCodeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdCoverageDescriptionXElement(pub Box<dyn MdCoverageDescriptionXElementTrait>);
    pub trait MdCoverageDescriptionXElementTrait:
        AbstractMdContentInformationXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdCoverageDescriptionPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdCoverageDescriptionPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdCoverageDescriptionPropertyTypeXTypeContent {
        #[serde(rename = "MD_CoverageDescription")]
        pub md_coverage_description: MdCoverageDescriptionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdCoverageDescriptionTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "attributeDescription")]
        pub attribute_description: super::gco::RecordTypePropertyTypeXType,
        #[serde(rename = "contentType")]
        pub content_type: MdCoverageContentTypeCodePropertyTypeXType,
        #[serde(default, rename = "dimension")]
        pub dimension: Vec<MdRangeDimensionPropertyTypeXType>,
    }
    impl AbstractMdContentInformationXElementTrait for MdCoverageDescriptionTypeXType {}
    impl MdCoverageDescriptionXElementTrait for MdCoverageDescriptionTypeXType {}
    pub type MdDataIdentificationXElement = MdDataIdentificationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDataIdentificationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdDataIdentificationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDataIdentificationPropertyTypeXTypeContent {
        #[serde(rename = "MD_DataIdentification")]
        pub md_data_identification: MdDataIdentificationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDataIdentificationTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "citation")]
        pub citation: CiCitationPropertyTypeXType,
        #[serde(rename = "abstract")]
        pub abstract_: super::gco::CharacterStringPropertyTypeXType,
        #[serde(default, rename = "purpose")]
        pub purpose: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "credit")]
        pub credit: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "status")]
        pub status: Vec<MdProgressCodePropertyTypeXType>,
        #[serde(default, rename = "pointOfContact")]
        pub point_of_contact: Vec<CiResponsiblePartyPropertyTypeXType>,
        #[serde(default, rename = "resourceMaintenance")]
        pub resource_maintenance: Vec<MdMaintenanceInformationPropertyTypeXType>,
        #[serde(default, rename = "graphicOverview")]
        pub graphic_overview: Vec<MdBrowseGraphicPropertyTypeXType>,
        #[serde(default, rename = "resourceFormat")]
        pub resource_format: Vec<MdFormatPropertyTypeXType>,
        #[serde(default, rename = "descriptiveKeywords")]
        pub descriptive_keywords: Vec<MdKeywordsPropertyTypeXType>,
        #[serde(default, rename = "resourceSpecificUsage")]
        pub resource_specific_usage: Vec<MdUsagePropertyTypeXType>,
        #[serde(default, rename = "resourceConstraints")]
        pub resource_constraints: Vec<MdConstraintsPropertyTypeXType>,
        #[serde(default, rename = "aggregationInfo")]
        pub aggregation_info: Vec<MdAggregateInformationPropertyTypeXType>,
        #[serde(default, rename = "spatialRepresentationType")]
        pub spatial_representation_type: Vec<MdSpatialRepresentationTypeCodePropertyTypeXType>,
        #[serde(default, rename = "spatialResolution")]
        pub spatial_resolution: Vec<MdResolutionPropertyTypeXType>,
        #[serde(default, rename = "language")]
        pub language: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "characterSet")]
        pub character_set: Vec<MdCharacterSetCodePropertyTypeXType>,
        #[serde(default, rename = "topicCategory")]
        pub topic_category: Vec<MdTopicCategoryCodePropertyTypeXType>,
        #[serde(default, rename = "environmentDescription")]
        pub environment_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Vec<ExExtentPropertyTypeXType>,
        #[serde(default, rename = "supplementalInformation")]
        pub supplemental_information: Option<super::gco::CharacterStringPropertyTypeXType>,
    }
    impl AbstractMdIdentificationXElementTrait for MdDataIdentificationTypeXType {}
    pub type MdDatatypeCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDatatypeCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdDatatypeCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDatatypeCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_DatatypeCode")]
        pub md_datatype_code: MdDatatypeCodeXElement,
    }
    pub type MdDigitalTransferOptionsXElement = MdDigitalTransferOptionsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDigitalTransferOptionsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdDigitalTransferOptionsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDigitalTransferOptionsPropertyTypeXTypeContent {
        #[serde(rename = "MD_DigitalTransferOptions")]
        pub md_digital_transfer_options: MdDigitalTransferOptionsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDigitalTransferOptionsTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "unitsOfDistribution")]
        pub units_of_distribution: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "transferSize")]
        pub transfer_size: Option<super::gco::RealPropertyTypeXType>,
        #[serde(default, rename = "onLine")]
        pub on_line: Vec<CiOnlineResourcePropertyTypeXType>,
        #[serde(default, rename = "offLine")]
        pub off_line: Option<MdMediumPropertyTypeXType>,
    }
    pub type MdDimensionXElement = MdDimensionTypeXType;
    pub type MdDimensionNameTypeCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDimensionNameTypeCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdDimensionNameTypeCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDimensionNameTypeCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_DimensionNameTypeCode")]
        pub md_dimension_name_type_code: MdDimensionNameTypeCodeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDimensionPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdDimensionPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDimensionPropertyTypeXTypeContent {
        #[serde(rename = "MD_Dimension")]
        pub md_dimension: MdDimensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDimensionTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "dimensionName")]
        pub dimension_name: MdDimensionNameTypeCodePropertyTypeXType,
        #[serde(rename = "dimensionSize")]
        pub dimension_size: super::gco::IntegerPropertyTypeXType,
        #[serde(default, rename = "resolution")]
        pub resolution: Option<super::gco::MeasurePropertyTypeXType>,
    }
    pub type MdDistributionXElement = MdDistributionTypeXType;
    pub type MdDistributionUnitsXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDistributionUnitsPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdDistributionUnitsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDistributionUnitsPropertyTypeXTypeContent {
        #[serde(rename = "MD_DistributionUnits")]
        pub md_distribution_units: MdDistributionUnitsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDistributionPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdDistributionPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDistributionPropertyTypeXTypeContent {
        #[serde(rename = "MD_Distribution")]
        pub md_distribution: MdDistributionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDistributionTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "distributionFormat")]
        pub distribution_format: Vec<MdFormatPropertyTypeXType>,
        #[serde(default, rename = "distributor")]
        pub distributor: Vec<MdDistributorPropertyTypeXType>,
        #[serde(default, rename = "transferOptions")]
        pub transfer_options: Vec<MdDigitalTransferOptionsPropertyTypeXType>,
    }
    pub type MdDistributorXElement = MdDistributorTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDistributorPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdDistributorPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDistributorPropertyTypeXTypeContent {
        #[serde(rename = "MD_Distributor")]
        pub md_distributor: MdDistributorXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdDistributorTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "distributorContact")]
        pub distributor_contact: CiResponsiblePartyPropertyTypeXType,
        #[serde(default, rename = "distributionOrderProcess")]
        pub distribution_order_process: Vec<MdStandardOrderProcessPropertyTypeXType>,
        #[serde(default, rename = "distributorFormat")]
        pub distributor_format: Vec<MdFormatPropertyTypeXType>,
        #[serde(default, rename = "distributorTransferOptions")]
        pub distributor_transfer_options: Vec<MdDigitalTransferOptionsPropertyTypeXType>,
    }
    pub type MdExtendedElementInformationXElement = MdExtendedElementInformationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdExtendedElementInformationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdExtendedElementInformationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdExtendedElementInformationPropertyTypeXTypeContent {
        #[serde(rename = "MD_ExtendedElementInformation")]
        pub md_extended_element_information: MdExtendedElementInformationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdExtendedElementInformationTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "name")]
        pub name: super::gco::CharacterStringPropertyTypeXType,
        #[serde(default, rename = "shortName")]
        pub short_name: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "domainCode")]
        pub domain_code: Option<super::gco::IntegerPropertyTypeXType>,
        #[serde(rename = "definition")]
        pub definition: super::gco::CharacterStringPropertyTypeXType,
        #[serde(default, rename = "obligation")]
        pub obligation: Option<MdObligationCodePropertyTypeXType>,
        #[serde(default, rename = "condition")]
        pub condition: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(rename = "dataType")]
        pub data_type: MdDatatypeCodePropertyTypeXType,
        #[serde(default, rename = "maximumOccurrence")]
        pub maximum_occurrence: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "domainValue")]
        pub domain_value: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "parentEntity")]
        pub parent_entity: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(rename = "rule")]
        pub rule: super::gco::CharacterStringPropertyTypeXType,
        #[serde(default, rename = "rationale")]
        pub rationale: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "source")]
        pub source: Vec<CiResponsiblePartyPropertyTypeXType>,
    }
    pub type MdFeatureCatalogueDescriptionXElement = MdFeatureCatalogueDescriptionTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdFeatureCatalogueDescriptionPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdFeatureCatalogueDescriptionPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdFeatureCatalogueDescriptionPropertyTypeXTypeContent {
        #[serde(rename = "MD_FeatureCatalogueDescription")]
        pub md_feature_catalogue_description: MdFeatureCatalogueDescriptionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdFeatureCatalogueDescriptionTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "complianceCode")]
        pub compliance_code: Option<super::gco::BooleanPropertyTypeXType>,
        #[serde(default, rename = "language")]
        pub language: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(rename = "includedWithDataset")]
        pub included_with_dataset: super::gco::BooleanPropertyTypeXType,
        #[serde(default, rename = "featureTypes")]
        pub feature_types: Vec<super::gco::GenericNamePropertyTypeXType>,
        #[serde(default, rename = "featureCatalogueCitation")]
        pub feature_catalogue_citation: Vec<CiCitationPropertyTypeXType>,
    }
    impl AbstractMdContentInformationXElementTrait for MdFeatureCatalogueDescriptionTypeXType {}
    pub type MdFormatXElement = MdFormatTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdFormatPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdFormatPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdFormatPropertyTypeXTypeContent {
        #[serde(rename = "MD_Format")]
        pub md_format: MdFormatXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdFormatTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "name")]
        pub name: super::gco::CharacterStringPropertyTypeXType,
        #[serde(rename = "version")]
        pub version: super::gco::CharacterStringPropertyTypeXType,
        #[serde(default, rename = "amendmentNumber")]
        pub amendment_number: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "specification")]
        pub specification: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "fileDecompressionTechnique")]
        pub file_decompression_technique: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "formatDistributor")]
        pub format_distributor: Vec<MdDistributorPropertyTypeXType>,
    }
    pub type MdGeometricObjectTypeCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdGeometricObjectTypeCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdGeometricObjectTypeCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdGeometricObjectTypeCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_GeometricObjectTypeCode")]
        pub md_geometric_object_type_code: MdGeometricObjectTypeCodeXElement,
    }
    pub type MdGeometricObjectsXElement = MdGeometricObjectsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdGeometricObjectsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdGeometricObjectsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdGeometricObjectsPropertyTypeXTypeContent {
        #[serde(rename = "MD_GeometricObjects")]
        pub md_geometric_objects: MdGeometricObjectsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdGeometricObjectsTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "geometricObjectType")]
        pub geometric_object_type: MdGeometricObjectTypeCodePropertyTypeXType,
        #[serde(default, rename = "geometricObjectCount")]
        pub geometric_object_count: Option<super::gco::IntegerPropertyTypeXType>,
    }
    pub type MdGeorectifiedXElement = MdGeorectifiedTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdGeorectifiedPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdGeorectifiedPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdGeorectifiedPropertyTypeXTypeContent {
        #[serde(rename = "MD_Georectified")]
        pub md_georectified: MdGeorectifiedXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdGeorectifiedTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "numberOfDimensions")]
        pub number_of_dimensions: super::gco::IntegerPropertyTypeXType,
        #[serde(default, rename = "axisDimensionProperties")]
        pub axis_dimension_properties: Vec<MdDimensionPropertyTypeXType>,
        #[serde(rename = "cellGeometry")]
        pub cell_geometry: MdCellGeometryCodePropertyTypeXType,
        #[serde(rename = "transformationParameterAvailability")]
        pub transformation_parameter_availability: super::gco::BooleanPropertyTypeXType,
        #[serde(rename = "checkPointAvailability")]
        pub check_point_availability: super::gco::BooleanPropertyTypeXType,
        #[serde(default, rename = "checkPointDescription")]
        pub check_point_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "cornerPoints")]
        pub corner_points: Vec<super::gss::GmPointPropertyTypeXType>,
        #[serde(default, rename = "centerPoint")]
        pub center_point: Option<super::gss::GmPointPropertyTypeXType>,
        #[serde(rename = "pointInPixel")]
        pub point_in_pixel: MdPixelOrientationCodePropertyTypeXType,
        #[serde(default, rename = "transformationDimensionDescription")]
        pub transformation_dimension_description:
            Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "transformationDimensionMapping")]
        pub transformation_dimension_mapping: Vec<super::gco::CharacterStringPropertyTypeXType>,
    }
    impl AbstractMdSpatialRepresentationXElementTrait for MdGeorectifiedTypeXType {}
    impl MdGridSpatialRepresentationXElementTrait for MdGeorectifiedTypeXType {}
    pub type MdGeoreferenceableXElement = MdGeoreferenceableTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdGeoreferenceablePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdGeoreferenceablePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdGeoreferenceablePropertyTypeXTypeContent {
        #[serde(rename = "MD_Georeferenceable")]
        pub md_georeferenceable: MdGeoreferenceableXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdGeoreferenceableTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "numberOfDimensions")]
        pub number_of_dimensions: super::gco::IntegerPropertyTypeXType,
        #[serde(default, rename = "axisDimensionProperties")]
        pub axis_dimension_properties: Vec<MdDimensionPropertyTypeXType>,
        #[serde(rename = "cellGeometry")]
        pub cell_geometry: MdCellGeometryCodePropertyTypeXType,
        #[serde(rename = "transformationParameterAvailability")]
        pub transformation_parameter_availability: super::gco::BooleanPropertyTypeXType,
        #[serde(rename = "controlPointAvailability")]
        pub control_point_availability: super::gco::BooleanPropertyTypeXType,
        #[serde(rename = "orientationParameterAvailability")]
        pub orientation_parameter_availability: super::gco::BooleanPropertyTypeXType,
        #[serde(default, rename = "orientationParameterDescription")]
        pub orientation_parameter_description: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(rename = "georeferencedParameters")]
        pub georeferenced_parameters: super::gco::RecordPropertyTypeXType,
        #[serde(default, rename = "parameterCitation")]
        pub parameter_citation: Vec<CiCitationPropertyTypeXType>,
    }
    impl AbstractMdSpatialRepresentationXElementTrait for MdGeoreferenceableTypeXType {}
    impl MdGridSpatialRepresentationXElementTrait for MdGeoreferenceableTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdGridSpatialRepresentationXElement(
        pub Box<dyn MdGridSpatialRepresentationXElementTrait>,
    );
    pub trait MdGridSpatialRepresentationXElementTrait:
        AbstractMdSpatialRepresentationXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdGridSpatialRepresentationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdGridSpatialRepresentationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdGridSpatialRepresentationPropertyTypeXTypeContent {
        #[serde(rename = "MD_GridSpatialRepresentation")]
        pub md_grid_spatial_representation: MdGridSpatialRepresentationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdGridSpatialRepresentationTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "numberOfDimensions")]
        pub number_of_dimensions: super::gco::IntegerPropertyTypeXType,
        #[serde(default, rename = "axisDimensionProperties")]
        pub axis_dimension_properties: Vec<MdDimensionPropertyTypeXType>,
        #[serde(rename = "cellGeometry")]
        pub cell_geometry: MdCellGeometryCodePropertyTypeXType,
        #[serde(rename = "transformationParameterAvailability")]
        pub transformation_parameter_availability: super::gco::BooleanPropertyTypeXType,
    }
    impl AbstractMdSpatialRepresentationXElementTrait for MdGridSpatialRepresentationTypeXType {}
    impl MdGridSpatialRepresentationXElementTrait for MdGridSpatialRepresentationTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdIdentificationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdIdentificationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdIdentificationPropertyTypeXTypeContent {
        #[serde(rename = "AbstractMD_Identification")]
        pub abstract_md_identification: AbstractMdIdentificationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdIdentifierXElement(pub Box<dyn MdIdentifierXElementTrait>);
    pub trait MdIdentifierXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdIdentifierPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdIdentifierPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdIdentifierPropertyTypeXTypeContent {
        #[serde(rename = "MD_Identifier")]
        pub md_identifier: MdIdentifierXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdIdentifierTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "authority")]
        pub authority: Option<CiCitationPropertyTypeXType>,
        #[serde(rename = "code")]
        pub code: super::gco::CharacterStringPropertyTypeXType,
    }
    impl MdIdentifierXElementTrait for MdIdentifierTypeXType {}
    pub type MdImageDescriptionXElement = MdImageDescriptionTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdImageDescriptionPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdImageDescriptionPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdImageDescriptionPropertyTypeXTypeContent {
        #[serde(rename = "MD_ImageDescription")]
        pub md_image_description: MdImageDescriptionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdImageDescriptionTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "attributeDescription")]
        pub attribute_description: super::gco::RecordTypePropertyTypeXType,
        #[serde(rename = "contentType")]
        pub content_type: MdCoverageContentTypeCodePropertyTypeXType,
        #[serde(default, rename = "dimension")]
        pub dimension: Vec<MdRangeDimensionPropertyTypeXType>,
        #[serde(default, rename = "illuminationElevationAngle")]
        pub illumination_elevation_angle: Option<super::gco::RealPropertyTypeXType>,
        #[serde(default, rename = "illuminationAzimuthAngle")]
        pub illumination_azimuth_angle: Option<super::gco::RealPropertyTypeXType>,
        #[serde(default, rename = "imagingCondition")]
        pub imaging_condition: Option<MdImagingConditionCodePropertyTypeXType>,
        #[serde(default, rename = "imageQualityCode")]
        pub image_quality_code: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "cloudCoverPercentage")]
        pub cloud_cover_percentage: Option<super::gco::RealPropertyTypeXType>,
        #[serde(default, rename = "processingLevelCode")]
        pub processing_level_code: Option<MdIdentifierPropertyTypeXType>,
        #[serde(default, rename = "compressionGenerationQuantity")]
        pub compression_generation_quantity: Option<super::gco::IntegerPropertyTypeXType>,
        #[serde(default, rename = "triangulationIndicator")]
        pub triangulation_indicator: Option<super::gco::BooleanPropertyTypeXType>,
        #[serde(default, rename = "radiometricCalibrationDataAvailability")]
        pub radiometric_calibration_data_availability: Option<super::gco::BooleanPropertyTypeXType>,
        #[serde(default, rename = "cameraCalibrationInformationAvailability")]
        pub camera_calibration_information_availability:
            Option<super::gco::BooleanPropertyTypeXType>,
        #[serde(default, rename = "filmDistortionInformationAvailability")]
        pub film_distortion_information_availability: Option<super::gco::BooleanPropertyTypeXType>,
        #[serde(default, rename = "lensDistortionInformationAvailability")]
        pub lens_distortion_information_availability: Option<super::gco::BooleanPropertyTypeXType>,
    }
    impl AbstractMdContentInformationXElementTrait for MdImageDescriptionTypeXType {}
    impl MdCoverageDescriptionXElementTrait for MdImageDescriptionTypeXType {}
    pub type MdImagingConditionCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdImagingConditionCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdImagingConditionCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdImagingConditionCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_ImagingConditionCode")]
        pub md_imaging_condition_code: MdImagingConditionCodeXElement,
    }
    pub type MdKeywordTypeCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdKeywordTypeCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdKeywordTypeCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdKeywordTypeCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_KeywordTypeCode")]
        pub md_keyword_type_code: MdKeywordTypeCodeXElement,
    }
    pub type MdKeywordsXElement = MdKeywordsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdKeywordsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdKeywordsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdKeywordsPropertyTypeXTypeContent {
        #[serde(rename = "MD_Keywords")]
        pub md_keywords: MdKeywordsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdKeywordsTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "keyword")]
        pub keyword: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "type")]
        pub type_: Option<MdKeywordTypeCodePropertyTypeXType>,
        #[serde(default, rename = "thesaurusName")]
        pub thesaurus_name: Option<CiCitationPropertyTypeXType>,
    }
    pub type MdLegalConstraintsXElement = MdLegalConstraintsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdLegalConstraintsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdLegalConstraintsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdLegalConstraintsPropertyTypeXTypeContent {
        #[serde(rename = "MD_LegalConstraints")]
        pub md_legal_constraints: MdLegalConstraintsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdLegalConstraintsTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "useLimitation")]
        pub use_limitation: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "accessConstraints")]
        pub access_constraints: Vec<MdRestrictionCodePropertyTypeXType>,
        #[serde(default, rename = "useConstraints")]
        pub use_constraints: Vec<MdRestrictionCodePropertyTypeXType>,
        #[serde(default, rename = "otherConstraints")]
        pub other_constraints: Vec<super::gco::CharacterStringPropertyTypeXType>,
    }
    impl MdConstraintsXElementTrait for MdLegalConstraintsTypeXType {}
    pub type MdMaintenanceFrequencyCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdMaintenanceFrequencyCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdMaintenanceFrequencyCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdMaintenanceFrequencyCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_MaintenanceFrequencyCode")]
        pub md_maintenance_frequency_code: MdMaintenanceFrequencyCodeXElement,
    }
    pub type MdMaintenanceInformationXElement = MdMaintenanceInformationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdMaintenanceInformationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdMaintenanceInformationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdMaintenanceInformationPropertyTypeXTypeContent {
        #[serde(rename = "MD_MaintenanceInformation")]
        pub md_maintenance_information: MdMaintenanceInformationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdMaintenanceInformationTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "maintenanceAndUpdateFrequency")]
        pub maintenance_and_update_frequency: MdMaintenanceFrequencyCodePropertyTypeXType,
        #[serde(default, rename = "dateOfNextUpdate")]
        pub date_of_next_update: Option<super::gco::DatePropertyTypeXType>,
        #[serde(default, rename = "userDefinedMaintenanceFrequency")]
        pub user_defined_maintenance_frequency:
            Option<super::gts::TmPeriodDurationPropertyTypeXType>,
        #[serde(default, rename = "updateScope")]
        pub update_scope: Vec<MdScopeCodePropertyTypeXType>,
        #[serde(default, rename = "updateScopeDescription")]
        pub update_scope_description: Vec<MdScopeDescriptionPropertyTypeXType>,
        #[serde(default, rename = "maintenanceNote")]
        pub maintenance_note: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "contact")]
        pub contact: Vec<CiResponsiblePartyPropertyTypeXType>,
    }
    pub type MdMediumXElement = MdMediumTypeXType;
    pub type MdMediumFormatCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdMediumFormatCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdMediumFormatCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdMediumFormatCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_MediumFormatCode")]
        pub md_medium_format_code: MdMediumFormatCodeXElement,
    }
    pub type MdMediumNameCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdMediumNameCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdMediumNameCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdMediumNameCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_MediumNameCode")]
        pub md_medium_name_code: MdMediumNameCodeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdMediumPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdMediumPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdMediumPropertyTypeXTypeContent {
        #[serde(rename = "MD_Medium")]
        pub md_medium: MdMediumXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdMediumTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "name")]
        pub name: Option<MdMediumNameCodePropertyTypeXType>,
        #[serde(default, rename = "density")]
        pub density: Vec<super::gco::RealPropertyTypeXType>,
        #[serde(default, rename = "densityUnits")]
        pub density_units: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "volumes")]
        pub volumes: Option<super::gco::IntegerPropertyTypeXType>,
        #[serde(default, rename = "mediumFormat")]
        pub medium_format: Vec<MdMediumFormatCodePropertyTypeXType>,
        #[serde(default, rename = "mediumNote")]
        pub medium_note: Option<super::gco::CharacterStringPropertyTypeXType>,
    }
    pub type MdMetadataXElement = MdMetadataTypeXType;
    pub type MdMetadataExtensionInformationXElement = MdMetadataExtensionInformationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdMetadataExtensionInformationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdMetadataExtensionInformationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdMetadataExtensionInformationPropertyTypeXTypeContent {
        #[serde(rename = "MD_MetadataExtensionInformation")]
        pub md_metadata_extension_information: MdMetadataExtensionInformationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdMetadataExtensionInformationTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "extensionOnLineResource")]
        pub extension_on_line_resource: Option<CiOnlineResourcePropertyTypeXType>,
        #[serde(default, rename = "extendedElementInformation")]
        pub extended_element_information: Vec<MdExtendedElementInformationPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdMetadataPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdMetadataPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdMetadataPropertyTypeXTypeContent {
        #[serde(rename = "MD_Metadata")]
        pub md_metadata: MdMetadataXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdMetadataTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "fileIdentifier")]
        pub file_identifier: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "language")]
        pub language: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "characterSet")]
        pub character_set: Option<MdCharacterSetCodePropertyTypeXType>,
        #[serde(default, rename = "parentIdentifier")]
        pub parent_identifier: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "hierarchyLevel")]
        pub hierarchy_level: Vec<MdScopeCodePropertyTypeXType>,
        #[serde(default, rename = "hierarchyLevelName")]
        pub hierarchy_level_name: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "contact")]
        pub contact: Vec<CiResponsiblePartyPropertyTypeXType>,
        #[serde(rename = "dateStamp")]
        pub date_stamp: super::gco::DatePropertyTypeXType,
        #[serde(default, rename = "metadataStandardName")]
        pub metadata_standard_name: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "metadataStandardVersion")]
        pub metadata_standard_version: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "dataSetURI")]
        pub data_set_uri: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "locale")]
        pub locale: Vec<PtLocalePropertyTypeXType>,
        #[serde(default, rename = "spatialRepresentationInfo")]
        pub spatial_representation_info: Vec<MdSpatialRepresentationPropertyTypeXType>,
        #[serde(default, rename = "referenceSystemInfo")]
        pub reference_system_info: Vec<MdReferenceSystemPropertyTypeXType>,
        #[serde(default, rename = "metadataExtensionInfo")]
        pub metadata_extension_info: Vec<MdMetadataExtensionInformationPropertyTypeXType>,
        #[serde(default, rename = "identificationInfo")]
        pub identification_info: Vec<MdIdentificationPropertyTypeXType>,
        #[serde(default, rename = "contentInfo")]
        pub content_info: Vec<MdContentInformationPropertyTypeXType>,
        #[serde(default, rename = "distributionInfo")]
        pub distribution_info: Option<MdDistributionPropertyTypeXType>,
        #[serde(default, rename = "dataQualityInfo")]
        pub data_quality_info: Vec<DqDataQualityPropertyTypeXType>,
        #[serde(default, rename = "portrayalCatalogueInfo")]
        pub portrayal_catalogue_info: Vec<MdPortrayalCatalogueReferencePropertyTypeXType>,
        #[serde(default, rename = "metadataConstraints")]
        pub metadata_constraints: Vec<MdConstraintsPropertyTypeXType>,
        #[serde(default, rename = "applicationSchemaInfo")]
        pub application_schema_info: Vec<MdApplicationSchemaInformationPropertyTypeXType>,
        #[serde(default, rename = "metadataMaintenance")]
        pub metadata_maintenance: Option<MdMaintenanceInformationPropertyTypeXType>,
        #[serde(default, rename = "series")]
        pub series: Vec<DsAggregatePropertyTypeXType>,
        #[serde(default, rename = "describes")]
        pub describes: Vec<DsDataSetPropertyTypeXType>,
        #[serde(default, rename = "propertyType")]
        pub property_type: Vec<super::gco::ObjectReferencePropertyTypeXType>,
        #[serde(default, rename = "featureType")]
        pub feature_type: Vec<super::gco::ObjectReferencePropertyTypeXType>,
        #[serde(default, rename = "featureAttribute")]
        pub feature_attribute: Vec<super::gco::ObjectReferencePropertyTypeXType>,
    }
    pub type MdObligationCodeXElement = MdObligationCodeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdObligationCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdObligationCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdObligationCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_ObligationCode")]
        pub md_obligation_code: MdObligationCodeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum MdObligationCodeTypeXType {
        #[serde(rename = "mandatory")]
        Mandatory,
        #[serde(rename = "optional")]
        Optional,
        #[serde(rename = "conditional")]
        Conditional,
    }
    impl super::gco::CharacterStringXElementTrait for MdObligationCodeTypeXType {}
    pub type MdPixelOrientationCodeXElement = MdPixelOrientationCodeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdPixelOrientationCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdPixelOrientationCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdPixelOrientationCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_PixelOrientationCode")]
        pub md_pixel_orientation_code: MdPixelOrientationCodeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum MdPixelOrientationCodeTypeXType {
        #[serde(rename = "center")]
        Center,
        #[serde(rename = "lowerLeft")]
        LowerLeft,
        #[serde(rename = "lowerRight")]
        LowerRight,
        #[serde(rename = "upperRight")]
        UpperRight,
        #[serde(rename = "upperLeft")]
        UpperLeft,
    }
    impl super::gco::CharacterStringXElementTrait for MdPixelOrientationCodeTypeXType {}
    pub type MdPortrayalCatalogueReferenceXElement = MdPortrayalCatalogueReferenceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdPortrayalCatalogueReferencePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdPortrayalCatalogueReferencePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdPortrayalCatalogueReferencePropertyTypeXTypeContent {
        #[serde(rename = "MD_PortrayalCatalogueReference")]
        pub md_portrayal_catalogue_reference: MdPortrayalCatalogueReferenceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdPortrayalCatalogueReferenceTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "portrayalCatalogueCitation")]
        pub portrayal_catalogue_citation: Vec<CiCitationPropertyTypeXType>,
    }
    pub type MdProgressCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdProgressCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdProgressCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdProgressCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_ProgressCode")]
        pub md_progress_code: MdProgressCodeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdRangeDimensionXElement(pub Box<dyn MdRangeDimensionXElementTrait>);
    pub trait MdRangeDimensionXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdRangeDimensionPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdRangeDimensionPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdRangeDimensionPropertyTypeXTypeContent {
        #[serde(rename = "MD_RangeDimension")]
        pub md_range_dimension: MdRangeDimensionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdRangeDimensionTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "sequenceIdentifier")]
        pub sequence_identifier: Option<super::gco::MemberNamePropertyTypeXType>,
        #[serde(default, rename = "descriptor")]
        pub descriptor: Option<super::gco::CharacterStringPropertyTypeXType>,
    }
    impl MdRangeDimensionXElementTrait for MdRangeDimensionTypeXType {}
    pub type MdReferenceSystemXElement = MdReferenceSystemTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdReferenceSystemPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdReferenceSystemPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdReferenceSystemPropertyTypeXTypeContent {
        #[serde(rename = "MD_ReferenceSystem")]
        pub md_reference_system: MdReferenceSystemXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdReferenceSystemTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "referenceSystemIdentifier")]
        pub reference_system_identifier: Option<RsIdentifierPropertyTypeXType>,
    }
    pub type MdRepresentativeFractionXElement = MdRepresentativeFractionTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdRepresentativeFractionPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdRepresentativeFractionPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdRepresentativeFractionPropertyTypeXTypeContent {
        #[serde(rename = "MD_RepresentativeFraction")]
        pub md_representative_fraction: MdRepresentativeFractionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdRepresentativeFractionTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "denominator")]
        pub denominator: super::gco::IntegerPropertyTypeXType,
    }
    pub type MdResolutionXElement = MdResolutionTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdResolutionPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdResolutionPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdResolutionPropertyTypeXTypeContent {
        #[serde(rename = "MD_Resolution")]
        pub md_resolution: MdResolutionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum MdResolutionTypeXType {
        #[serde(rename = "equivalentScale")]
        EquivalentScale(MdRepresentativeFractionPropertyTypeXType),
        #[serde(rename = "distance")]
        Distance(super::gco::DistancePropertyTypeXType),
    }
    pub type MdRestrictionCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdRestrictionCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdRestrictionCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdRestrictionCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_RestrictionCode")]
        pub md_restriction_code: MdRestrictionCodeXElement,
    }
    pub type MdScopeCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdScopeCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdScopeCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdScopeCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_ScopeCode")]
        pub md_scope_code: MdScopeCodeXElement,
    }
    pub type MdScopeDescriptionXElement = MdScopeDescriptionTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdScopeDescriptionPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdScopeDescriptionPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdScopeDescriptionPropertyTypeXTypeContent {
        #[serde(rename = "MD_ScopeDescription")]
        pub md_scope_description: MdScopeDescriptionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum MdScopeDescriptionTypeXType {
        #[serde(rename = "attributes")]
        Attributes(Vec<super::gco::ObjectReferencePropertyTypeXType>),
        #[serde(rename = "features")]
        Features(Vec<super::gco::ObjectReferencePropertyTypeXType>),
        #[serde(rename = "featureInstances")]
        FeatureInstances(Vec<super::gco::ObjectReferencePropertyTypeXType>),
        #[serde(rename = "attributeInstances")]
        AttributeInstances(Vec<super::gco::ObjectReferencePropertyTypeXType>),
        #[serde(rename = "dataset")]
        Dataset(super::gco::CharacterStringPropertyTypeXType),
        #[serde(rename = "other")]
        Other(super::gco::CharacterStringPropertyTypeXType),
    }
    pub type MdSecurityConstraintsXElement = MdSecurityConstraintsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdSecurityConstraintsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdSecurityConstraintsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdSecurityConstraintsPropertyTypeXTypeContent {
        #[serde(rename = "MD_SecurityConstraints")]
        pub md_security_constraints: MdSecurityConstraintsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdSecurityConstraintsTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "useLimitation")]
        pub use_limitation: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(rename = "classification")]
        pub classification: MdClassificationCodePropertyTypeXType,
        #[serde(default, rename = "userNote")]
        pub user_note: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "classificationSystem")]
        pub classification_system: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "handlingDescription")]
        pub handling_description: Option<super::gco::CharacterStringPropertyTypeXType>,
    }
    impl MdConstraintsXElementTrait for MdSecurityConstraintsTypeXType {}
    pub type MdServiceIdentificationXElement = MdServiceIdentificationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdServiceIdentificationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdServiceIdentificationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdServiceIdentificationPropertyTypeXTypeContent {
        #[serde(rename = "MD_ServiceIdentification")]
        pub md_service_identification: MdServiceIdentificationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdServiceIdentificationTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "citation")]
        pub citation: CiCitationPropertyTypeXType,
        #[serde(rename = "abstract")]
        pub abstract_: super::gco::CharacterStringPropertyTypeXType,
        #[serde(default, rename = "purpose")]
        pub purpose: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "credit")]
        pub credit: Vec<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "status")]
        pub status: Vec<MdProgressCodePropertyTypeXType>,
        #[serde(default, rename = "pointOfContact")]
        pub point_of_contact: Vec<CiResponsiblePartyPropertyTypeXType>,
        #[serde(default, rename = "resourceMaintenance")]
        pub resource_maintenance: Vec<MdMaintenanceInformationPropertyTypeXType>,
        #[serde(default, rename = "graphicOverview")]
        pub graphic_overview: Vec<MdBrowseGraphicPropertyTypeXType>,
        #[serde(default, rename = "resourceFormat")]
        pub resource_format: Vec<MdFormatPropertyTypeXType>,
        #[serde(default, rename = "descriptiveKeywords")]
        pub descriptive_keywords: Vec<MdKeywordsPropertyTypeXType>,
        #[serde(default, rename = "resourceSpecificUsage")]
        pub resource_specific_usage: Vec<MdUsagePropertyTypeXType>,
        #[serde(default, rename = "resourceConstraints")]
        pub resource_constraints: Vec<MdConstraintsPropertyTypeXType>,
        #[serde(default, rename = "aggregationInfo")]
        pub aggregation_info: Vec<MdAggregateInformationPropertyTypeXType>,
    }
    impl AbstractMdIdentificationXElementTrait for MdServiceIdentificationTypeXType {}
    pub type MdSpatialRepresentationTypeCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdSpatialRepresentationTypeCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdSpatialRepresentationTypeCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdSpatialRepresentationTypeCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_SpatialRepresentationTypeCode")]
        pub md_spatial_representation_type_code: MdSpatialRepresentationTypeCodeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdSpatialRepresentationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdSpatialRepresentationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdSpatialRepresentationPropertyTypeXTypeContent {
        #[serde(rename = "AbstractMD_SpatialRepresentation")]
        pub abstract_md_spatial_representation: AbstractMdSpatialRepresentationXElement,
    }
    pub type MdStandardOrderProcessXElement = MdStandardOrderProcessTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdStandardOrderProcessPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdStandardOrderProcessPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdStandardOrderProcessPropertyTypeXTypeContent {
        #[serde(rename = "MD_StandardOrderProcess")]
        pub md_standard_order_process: MdStandardOrderProcessXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdStandardOrderProcessTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "fees")]
        pub fees: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "plannedAvailableDateTime")]
        pub planned_available_date_time: Option<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "orderingInstructions")]
        pub ordering_instructions: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "turnaround")]
        pub turnaround: Option<super::gco::CharacterStringPropertyTypeXType>,
    }
    pub type MdTopicCategoryCodeXElement = MdTopicCategoryCodeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdTopicCategoryCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdTopicCategoryCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdTopicCategoryCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_TopicCategoryCode")]
        pub md_topic_category_code: MdTopicCategoryCodeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum MdTopicCategoryCodeTypeXType {
        #[serde(rename = "farming")]
        Farming,
        #[serde(rename = "biota")]
        Biota,
        #[serde(rename = "boundaries")]
        Boundaries,
        #[serde(rename = "climatologyMeteorologyAtmosphere")]
        ClimatologyMeteorologyAtmosphere,
        #[serde(rename = "economy")]
        Economy,
        #[serde(rename = "elevation")]
        Elevation,
        #[serde(rename = "environment")]
        Environment,
        #[serde(rename = "geoscientificInformation")]
        GeoscientificInformation,
        #[serde(rename = "health")]
        Health,
        #[serde(rename = "imageryBaseMapsEarthCover")]
        ImageryBaseMapsEarthCover,
        #[serde(rename = "intelligenceMilitary")]
        IntelligenceMilitary,
        #[serde(rename = "inlandWaters")]
        InlandWaters,
        #[serde(rename = "location")]
        Location,
        #[serde(rename = "oceans")]
        Oceans,
        #[serde(rename = "planningCadastre")]
        PlanningCadastre,
        #[serde(rename = "society")]
        Society,
        #[serde(rename = "structure")]
        Structure,
        #[serde(rename = "transportation")]
        Transportation,
        #[serde(rename = "utilitiesCommunication")]
        UtilitiesCommunication,
    }
    impl super::gco::CharacterStringXElementTrait for MdTopicCategoryCodeTypeXType {}
    pub type MdTopologyLevelCodeXElement = super::gco::CodeListValueTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdTopologyLevelCodePropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdTopologyLevelCodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdTopologyLevelCodePropertyTypeXTypeContent {
        #[serde(rename = "MD_TopologyLevelCode")]
        pub md_topology_level_code: MdTopologyLevelCodeXElement,
    }
    pub type MdUsageXElement = MdUsageTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdUsagePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdUsagePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdUsagePropertyTypeXTypeContent {
        #[serde(rename = "MD_Usage")]
        pub md_usage: MdUsageXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdUsageTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "specificUsage")]
        pub specific_usage: super::gco::CharacterStringPropertyTypeXType,
        #[serde(default, rename = "usageDateTime")]
        pub usage_date_time: Option<super::gco::DateTimePropertyTypeXType>,
        #[serde(default, rename = "userDeterminedLimitations")]
        pub user_determined_limitations: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "userContactInfo")]
        pub user_contact_info: Vec<CiResponsiblePartyPropertyTypeXType>,
    }
    pub type MdVectorSpatialRepresentationXElement = MdVectorSpatialRepresentationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdVectorSpatialRepresentationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<MdVectorSpatialRepresentationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdVectorSpatialRepresentationPropertyTypeXTypeContent {
        #[serde(rename = "MD_VectorSpatialRepresentation")]
        pub md_vector_spatial_representation: MdVectorSpatialRepresentationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MdVectorSpatialRepresentationTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "topologyLevel")]
        pub topology_level: Option<MdTopologyLevelCodePropertyTypeXType>,
        #[serde(default, rename = "geometricObjects")]
        pub geometric_objects: Vec<MdGeometricObjectsPropertyTypeXType>,
    }
    impl AbstractMdSpatialRepresentationXElementTrait for MdVectorSpatialRepresentationTypeXType {}
    pub type PtFreeTextXElement = PtFreeTextTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PtFreeTextPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<PtFreeTextPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PtFreeTextPropertyTypeXTypeContent {
        #[serde(rename = "CharacterString")]
        pub character_string: super::gco::CharacterStringXElement,
        #[serde(rename = "PT_FreeText")]
        pub pt_free_text: PtFreeTextXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PtFreeTextTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "textGroup")]
        pub text_group: Vec<LocalisedCharacterStringPropertyTypeXType>,
    }
    pub type PtLocaleXElement = PtLocaleTypeXType;
    pub type PtLocaleContainerXElement = PtLocaleContainerTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PtLocaleContainerPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<PtLocaleContainerPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PtLocaleContainerPropertyTypeXTypeContent {
        #[serde(rename = "PT_LocaleContainer")]
        pub pt_locale_container: PtLocaleContainerXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PtLocaleContainerTypeXType {
        #[serde(rename = "description")]
        pub description: super::gco::CharacterStringPropertyTypeXType,
        #[serde(rename = "locale")]
        pub locale: PtLocalePropertyTypeXType,
        #[serde(default, rename = "date")]
        pub date: Vec<CiDatePropertyTypeXType>,
        #[serde(default, rename = "responsibleParty")]
        pub responsible_party: Vec<CiResponsiblePartyPropertyTypeXType>,
        #[serde(default, rename = "localisedString")]
        pub localised_string: Vec<LocalisedCharacterStringPropertyTypeXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PtLocalePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<PtLocalePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PtLocalePropertyTypeXTypeContent {
        #[serde(rename = "PT_Locale")]
        pub pt_locale: PtLocaleXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PtLocaleTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(rename = "languageCode")]
        pub language_code: LanguageCodePropertyTypeXType,
        #[serde(default, rename = "country")]
        pub country: Option<CountryPropertyTypeXType>,
        #[serde(rename = "characterEncoding")]
        pub character_encoding: MdCharacterSetCodePropertyTypeXType,
    }
    pub type RsIdentifierXElement = RsIdentifierTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RsIdentifierPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<RsIdentifierPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RsIdentifierPropertyTypeXTypeContent {
        #[serde(rename = "RS_Identifier")]
        pub rs_identifier: RsIdentifierXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RsIdentifierTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<super::xs::IdXType>,
        #[serde(default, rename = "@uuid")]
        pub uuid: Option<super::xs::StringXType>,
        #[serde(default, rename = "authority")]
        pub authority: Option<CiCitationPropertyTypeXType>,
        #[serde(rename = "code")]
        pub code: super::gco::CharacterStringPropertyTypeXType,
        #[serde(default, rename = "codeSpace")]
        pub code_space: Option<super::gco::CharacterStringPropertyTypeXType>,
        #[serde(default, rename = "version")]
        pub version: Option<super::gco::CharacterStringPropertyTypeXType>,
    }
    impl MdIdentifierXElementTrait for RsIdentifierTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RsReferenceSystemPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<RsReferenceSystemPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RsReferenceSystemPropertyTypeXTypeContent {
        #[serde(rename = "AbstractRS_ReferenceSystem")]
        pub abstract_rs_reference_system: AbstractRsReferenceSystemXElement,
    }
    pub type UrlXElement = super::xs::AnyUriXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UrlPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<UrlPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UrlPropertyTypeXTypeContent {
        #[serde(rename = "URL")]
        pub url: UrlXElement,
    }
}
pub mod gml {
    use core::fmt::Debug;
    use serde::{de::DeserializeOwned, Deserialize, Serialize};
    use xsd_parser::AsAny;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractCrsXElement(pub Box<dyn AbstractCrsXElementTrait>);
    pub trait AbstractCrsXElementTrait: DefinitionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractCrsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Vec<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
    }
    impl AbstractCrsXElementTrait for AbstractCrsTypeXType {}
    impl AbstractGmlXElementTrait for AbstractCrsTypeXType {}
    impl AbstractObjectXElementTrait for AbstractCrsTypeXType {}
    impl DefinitionXElementTrait for AbstractCrsTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractContinuousCoverageXElement(
        pub Box<dyn AbstractContinuousCoverageXElementTrait>,
    );
    pub trait AbstractContinuousCoverageXElementTrait: AbstractFeatureXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractContinuousCoverageTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "boundedBy")]
        pub bounded_by: Option<BoundedByXElement>,
        #[serde(default, rename = "location")]
        pub location: Option<LocationPropertyElement>,
        #[serde(rename = "domainSet")]
        pub domain_set: DomainSetXElement,
        #[serde(rename = "rangeSet")]
        pub range_set: RangeSetXElement,
        #[serde(default, rename = "coverageFunction")]
        pub coverage_function: Option<CoverageFunctionXElement>,
    }
    impl AbstractFeatureXElementTrait for AbstractContinuousCoverageTypeXType {}
    impl AbstractGmlXElementTrait for AbstractContinuousCoverageTypeXType {}
    impl AbstractObjectXElementTrait for AbstractContinuousCoverageTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractCoordinateOperationXElement(
        pub Box<dyn AbstractCoordinateOperationXElementTrait>,
    );
    pub trait AbstractCoordinateOperationXElementTrait: DefinitionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractCoordinateOperationTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Option<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(default, rename = "operationVersion")]
        pub operation_version: Option<OperationVersionXElement>,
        #[serde(default, rename = "coordinateOperationAccuracy")]
        pub coordinate_operation_accuracy: Vec<CoordinateOperationAccuracyXElement>,
        #[serde(default, rename = "sourceCRS")]
        pub source_crs: Option<SourceCrsXElement>,
        #[serde(default, rename = "targetCRS")]
        pub target_crs: Option<TargetCrsXElement>,
    }
    impl AbstractCoordinateOperationXElementTrait for AbstractCoordinateOperationTypeXType {}
    impl AbstractGmlXElementTrait for AbstractCoordinateOperationTypeXType {}
    impl AbstractObjectXElementTrait for AbstractCoordinateOperationTypeXType {}
    impl AbstractSingleOperationXElementTrait for AbstractCoordinateOperationTypeXType {}
    impl DefinitionXElementTrait for AbstractCoordinateOperationTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractCoordinateSystemXElement(pub Box<dyn AbstractCoordinateSystemXElementTrait>);
    pub trait AbstractCoordinateSystemXElementTrait: DefinitionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractCoordinateSystemTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "axis")]
        pub axis: Vec<AxisXElement>,
    }
    impl AbstractGmlXElementTrait for AbstractCoordinateSystemTypeXType {}
    impl AbstractObjectXElementTrait for AbstractCoordinateSystemTypeXType {}
    impl DefinitionXElementTrait for AbstractCoordinateSystemTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractCoverageXElement(pub Box<dyn AbstractCoverageXElementTrait>);
    pub trait AbstractCoverageXElementTrait: AbstractFeatureXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractCoverageTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "boundedBy")]
        pub bounded_by: Option<BoundedByXElement>,
        #[serde(default, rename = "location")]
        pub location: Option<LocationPropertyElement>,
        #[serde(rename = "domainSet")]
        pub domain_set: DomainSetXElement,
        #[serde(rename = "rangeSet")]
        pub range_set: RangeSetXElement,
    }
    impl AbstractFeatureXElementTrait for AbstractCoverageTypeXType {}
    impl AbstractGmlXElementTrait for AbstractCoverageTypeXType {}
    impl AbstractObjectXElementTrait for AbstractCoverageTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractCurveXElement(pub Box<dyn AbstractCurveXElementTrait>);
    pub trait AbstractCurveXElementTrait: AbstractGeometricPrimitiveXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractCurveSegmentXElement(pub Box<dyn AbstractCurveSegmentXElementTrait>);
    pub trait AbstractCurveSegmentXElementTrait: AbstractObjectXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractCurveSegmentTypeXType {
        #[serde(
            default = "AbstractCurveSegmentTypeXType::default_num_derivatives_at_start",
            rename = "@numDerivativesAtStart"
        )]
        pub num_derivatives_at_start: super::xs::IntegerXType,
        #[serde(
            default = "AbstractCurveSegmentTypeXType::default_num_derivatives_at_end",
            rename = "@numDerivativesAtEnd"
        )]
        pub num_derivatives_at_end: super::xs::IntegerXType,
        #[serde(
            default = "AbstractCurveSegmentTypeXType::default_num_derivative_interior",
            rename = "@numDerivativeInterior"
        )]
        pub num_derivative_interior: super::xs::IntegerXType,
    }
    impl AbstractObjectXElementTrait for AbstractCurveSegmentTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractCurveTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
    }
    impl AbstractGmlXElementTrait for AbstractCurveTypeXType {}
    impl AbstractGeometricPrimitiveXElementTrait for AbstractCurveTypeXType {}
    impl AbstractGeometryXElementTrait for AbstractCurveTypeXType {}
    impl AbstractObjectXElementTrait for AbstractCurveTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDatumXElement(pub Box<dyn AbstractDatumXElementTrait>);
    pub trait AbstractDatumXElementTrait: DefinitionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDatumTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Option<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(default, rename = "anchorDefinition")]
        pub anchor_definition: Option<AnchorDefinitionXElement>,
        #[serde(default, rename = "realizationEpoch")]
        pub realization_epoch: Option<RealizationEpochXElement>,
    }
    impl AbstractGmlXElementTrait for AbstractDatumTypeXType {}
    impl AbstractObjectXElementTrait for AbstractDatumTypeXType {}
    impl DefinitionXElementTrait for AbstractDatumTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractDiscreteCoverageXElement(pub Box<dyn AbstractDiscreteCoverageXElementTrait>);
    pub trait AbstractDiscreteCoverageXElementTrait: AbstractCoverageXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractFeatureXElement(pub Box<dyn AbstractFeatureXElementTrait>);
    pub trait AbstractFeatureXElementTrait: AbstractGmlXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractFeatureCollectionXElement(
        pub Box<dyn AbstractFeatureCollectionXElementTrait>,
    );
    pub trait AbstractFeatureCollectionXElementTrait: AbstractFeatureXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractFeatureCollectionTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "boundedBy")]
        pub bounded_by: Option<BoundedByXElement>,
        #[serde(default, rename = "location")]
        pub location: Option<LocationPropertyElement>,
        #[serde(default, rename = "featureMember")]
        pub feature_member: Vec<FeatureMemberXElement>,
        #[serde(default, rename = "featureMembers")]
        pub feature_members: Option<FeatureMembersXElement>,
    }
    impl AbstractFeatureXElementTrait for AbstractFeatureCollectionTypeXType {}
    impl AbstractGmlXElementTrait for AbstractFeatureCollectionTypeXType {}
    impl AbstractObjectXElementTrait for AbstractFeatureCollectionTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractFeatureMemberTypeXType {
        #[serde(
            default = "AbstractFeatureMemberTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractFeatureTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "boundedBy")]
        pub bounded_by: Option<BoundedByXElement>,
        #[serde(default, rename = "location")]
        pub location: Option<LocationPropertyElement>,
    }
    impl AbstractGmlXElementTrait for AbstractFeatureTypeXType {}
    impl AbstractObjectXElementTrait for AbstractFeatureTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGmlXElement(pub Box<dyn AbstractGmlXElementTrait>);
    pub trait AbstractGmlXElementTrait: AbstractObjectXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGmlTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
    }
    impl AbstractObjectXElementTrait for AbstractGmlTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeneralConversionXElement(
        pub Box<dyn AbstractGeneralConversionXElementTrait>,
    );
    pub trait AbstractGeneralConversionXElementTrait: AbstractOperationXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeneralConversionTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Option<DomainOfValidityXElement>,
        #[serde(default, rename = "coordinateOperationAccuracy")]
        pub coordinate_operation_accuracy: Vec<CoordinateOperationAccuracyXElement>,
    }
    impl AbstractCoordinateOperationXElementTrait for AbstractGeneralConversionTypeXType {}
    impl AbstractGmlXElementTrait for AbstractGeneralConversionTypeXType {}
    impl AbstractObjectXElementTrait for AbstractGeneralConversionTypeXType {}
    impl AbstractOperationXElementTrait for AbstractGeneralConversionTypeXType {}
    impl AbstractSingleOperationXElementTrait for AbstractGeneralConversionTypeXType {}
    impl DefinitionXElementTrait for AbstractGeneralConversionTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeneralDerivedCrsXElement(
        pub Box<dyn AbstractGeneralDerivedCrsXElementTrait>,
    );
    pub trait AbstractGeneralDerivedCrsXElementTrait: AbstractSingleCrsXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeneralDerivedCrsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Vec<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(rename = "conversion")]
        pub conversion: ConversionProperty,
    }
    impl AbstractCrsXElementTrait for AbstractGeneralDerivedCrsTypeXType {}
    impl AbstractGmlXElementTrait for AbstractGeneralDerivedCrsTypeXType {}
    impl AbstractObjectXElementTrait for AbstractGeneralDerivedCrsTypeXType {}
    impl AbstractSingleCrsXElementTrait for AbstractGeneralDerivedCrsTypeXType {}
    impl DefinitionXElementTrait for AbstractGeneralDerivedCrsTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeneralOperationParameterXElement(
        pub Box<dyn AbstractGeneralOperationParameterXElementTrait>,
    );
    pub trait AbstractGeneralOperationParameterXElementTrait: DefinitionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeneralOperationParameterPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<AbstractGeneralOperationParameterPropertyTypeXTypeContent>,
    }
    impl GeneralOperationParameterXElementTrait for AbstractGeneralOperationParameterPropertyTypeXType {}
    impl ParameterXElementTrait for AbstractGeneralOperationParameterPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeneralOperationParameterPropertyTypeXTypeContent {
        #[serde(rename = "AbstractGeneralOperationParameter")]
        pub abstract_general_operation_parameter: AbstractGeneralOperationParameterXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeneralOperationParameterTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "minimumOccurs")]
        pub minimum_occurs: Option<MinimumOccursXElement>,
    }
    impl AbstractGmlXElementTrait for AbstractGeneralOperationParameterTypeXType {}
    impl AbstractObjectXElementTrait for AbstractGeneralOperationParameterTypeXType {}
    impl DefinitionXElementTrait for AbstractGeneralOperationParameterTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeneralParameterValueXElement(
        pub Box<dyn AbstractGeneralParameterValueXElementTrait>,
    );
    pub trait AbstractGeneralParameterValueXElementTrait: AbstractObjectXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeneralParameterValuePropertyTypeXType {
        #[serde(rename = "AbstractGeneralParameterValue")]
        pub abstract_general_parameter_value: AbstractGeneralParameterValueXElement,
    }
    impl ParameterValuePropertyTrait for AbstractGeneralParameterValuePropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeneralParameterValueTypeXType;
    impl AbstractObjectXElementTrait for AbstractGeneralParameterValueTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeneralTransformationXElement(
        pub Box<dyn AbstractGeneralTransformationXElementTrait>,
    );
    pub trait AbstractGeneralTransformationXElementTrait: AbstractOperationXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeneralTransformationTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Option<DomainOfValidityXElement>,
        #[serde(rename = "operationVersion")]
        pub operation_version: OperationVersionXElement,
        #[serde(default, rename = "coordinateOperationAccuracy")]
        pub coordinate_operation_accuracy: Vec<CoordinateOperationAccuracyXElement>,
        #[serde(rename = "sourceCRS")]
        pub source_crs: SourceCrsXElement,
        #[serde(rename = "targetCRS")]
        pub target_crs: TargetCrsXElement,
    }
    impl AbstractCoordinateOperationXElementTrait for AbstractGeneralTransformationTypeXType {}
    impl AbstractGmlXElementTrait for AbstractGeneralTransformationTypeXType {}
    impl AbstractObjectXElementTrait for AbstractGeneralTransformationTypeXType {}
    impl AbstractOperationXElementTrait for AbstractGeneralTransformationTypeXType {}
    impl AbstractSingleOperationXElementTrait for AbstractGeneralTransformationTypeXType {}
    impl DefinitionXElementTrait for AbstractGeneralTransformationTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeometricAggregateXElement(
        pub Box<dyn AbstractGeometricAggregateXElementTrait>,
    );
    pub trait AbstractGeometricAggregateXElementTrait: AbstractGeometryXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeometricAggregateTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
    }
    impl AbstractGmlXElementTrait for AbstractGeometricAggregateTypeXType {}
    impl AbstractGeometryXElementTrait for AbstractGeometricAggregateTypeXType {}
    impl AbstractObjectXElementTrait for AbstractGeometricAggregateTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeometricPrimitiveXElement(
        pub Box<dyn AbstractGeometricPrimitiveXElementTrait>,
    );
    pub trait AbstractGeometricPrimitiveXElementTrait: AbstractGeometryXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeometricPrimitiveTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
    }
    impl AbstractGmlXElementTrait for AbstractGeometricPrimitiveTypeXType {}
    impl AbstractGeometryXElementTrait for AbstractGeometricPrimitiveTypeXType {}
    impl AbstractObjectXElementTrait for AbstractGeometricPrimitiveTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeometryXElement(pub Box<dyn AbstractGeometryXElementTrait>);
    pub trait AbstractGeometryXElementTrait: AbstractGmlXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGeometryTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
    }
    impl AbstractGmlXElementTrait for AbstractGeometryTypeXType {}
    impl AbstractGeometryXElementTrait for AbstractGeometryTypeXType {}
    impl AbstractObjectXElementTrait for AbstractGeometryTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGriddedSurfaceXElement(pub Box<dyn AbstractGriddedSurfaceXElementTrait>);
    pub trait AbstractGriddedSurfaceXElementTrait:
        AbstractParametricCurveSurfaceXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGriddedSurfaceTypeXType {
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(default, rename = "@rows")]
        pub rows: Option<super::xs::IntegerXType>,
        #[serde(default, rename = "@columns")]
        pub columns: Option<super::xs::IntegerXType>,
        #[serde(rename = "Content2592")]
        pub content_2592: AbstractGriddedSurfaceContent2592XType,
    }
    impl AbstractParametricCurveSurfaceXElementTrait for AbstractGriddedSurfaceTypeXType {}
    impl AbstractSurfacePatchXElementTrait for AbstractGriddedSurfaceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractImplicitGeometryXElement(pub Box<dyn AbstractImplicitGeometryXElementTrait>);
    pub trait AbstractImplicitGeometryXElementTrait: AbstractGeometryXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMemberTypeXType {
        #[serde(default = "AbstractMemberTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMetaDataXElement(pub Box<dyn AbstractMetaDataXElementTrait>);
    pub trait AbstractMetaDataXElementTrait: AbstractObjectXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMetaDataTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
    }
    impl AbstractObjectXElementTrait for AbstractMetaDataTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractMetadataPropertyTypeXType {
        #[serde(
            default = "AbstractMetadataPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractObjectXElement(pub Box<dyn AbstractObjectXElementTrait>);
    pub trait AbstractObjectXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractOperationXElement(pub Box<dyn AbstractOperationXElementTrait>);
    pub trait AbstractOperationXElementTrait: AbstractSingleOperationXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractParametricCurveSurfaceXElement(
        pub Box<dyn AbstractParametricCurveSurfaceXElementTrait>,
    );
    pub trait AbstractParametricCurveSurfaceXElementTrait:
        AbstractSurfacePatchXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractParametricCurveSurfaceTypeXType {
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
    }
    impl AbstractSurfacePatchXElementTrait for AbstractParametricCurveSurfaceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRingXElement(pub Box<dyn AbstractRingXElementTrait>);
    pub trait AbstractRingXElementTrait: AbstractCurveXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRingPropertyTypeXType {
        #[serde(rename = "AbstractRing")]
        pub abstract_ring: AbstractRingXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractRingTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
    }
    impl AbstractCurveXElementTrait for AbstractRingTypeXType {}
    impl AbstractGmlXElementTrait for AbstractRingTypeXType {}
    impl AbstractGeometricPrimitiveXElementTrait for AbstractRingTypeXType {}
    impl AbstractGeometryXElementTrait for AbstractRingTypeXType {}
    impl AbstractObjectXElementTrait for AbstractRingTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractScalarValueXElement(pub Box<dyn AbstractScalarValueXElementTrait>);
    pub trait AbstractScalarValueXElementTrait: AbstractValueXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractScalarValueListXElement(pub Box<dyn AbstractScalarValueListXElementTrait>);
    pub trait AbstractScalarValueListXElementTrait: AbstractValueXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSingleCrsXElement(pub Box<dyn AbstractSingleCrsXElementTrait>);
    pub trait AbstractSingleCrsXElementTrait: AbstractCrsXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSingleOperationXElement(pub Box<dyn AbstractSingleOperationXElementTrait>);
    pub trait AbstractSingleOperationXElementTrait:
        AbstractCoordinateOperationXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSolidXElement(pub Box<dyn AbstractSolidXElementTrait>);
    pub trait AbstractSolidXElementTrait: AbstractGeometricPrimitiveXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSolidTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
    }
    impl AbstractGmlXElementTrait for AbstractSolidTypeXType {}
    impl AbstractGeometricPrimitiveXElementTrait for AbstractSolidTypeXType {}
    impl AbstractGeometryXElementTrait for AbstractSolidTypeXType {}
    impl AbstractObjectXElementTrait for AbstractSolidTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSurfaceXElement(pub Box<dyn AbstractSurfaceXElementTrait>);
    pub trait AbstractSurfaceXElementTrait: AbstractGeometricPrimitiveXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSurfacePatchXElement(pub Box<dyn AbstractSurfacePatchXElementTrait>);
    pub trait AbstractSurfacePatchXElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSurfacePatchTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractSurfaceTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
    }
    impl AbstractGmlXElementTrait for AbstractSurfaceTypeXType {}
    impl AbstractGeometricPrimitiveXElementTrait for AbstractSurfaceTypeXType {}
    impl AbstractGeometryXElementTrait for AbstractSurfaceTypeXType {}
    impl AbstractObjectXElementTrait for AbstractSurfaceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTimeComplexXElement(pub Box<dyn AbstractTimeComplexXElementTrait>);
    pub trait AbstractTimeComplexXElementTrait: AbstractTimeObjectXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTimeComplexTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
    }
    impl AbstractGmlXElementTrait for AbstractTimeComplexTypeXType {}
    impl AbstractObjectXElementTrait for AbstractTimeComplexTypeXType {}
    impl AbstractTimeObjectXElementTrait for AbstractTimeComplexTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTimeGeometricPrimitiveXElement(
        pub Box<dyn AbstractTimeGeometricPrimitiveXElementTrait>,
    );
    pub trait AbstractTimeGeometricPrimitiveXElementTrait:
        AbstractTimePrimitiveXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTimeGeometricPrimitiveTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(
            default = "AbstractTimeGeometricPrimitiveTypeXType::default_frame",
            rename = "@frame"
        )]
        pub frame: super::xs::AnyUriXType,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "relatedTime")]
        pub related_time: Vec<RelatedTimeTypeXType>,
    }
    impl AbstractGmlXElementTrait for AbstractTimeGeometricPrimitiveTypeXType {}
    impl AbstractObjectXElementTrait for AbstractTimeGeometricPrimitiveTypeXType {}
    impl AbstractTimeObjectXElementTrait for AbstractTimeGeometricPrimitiveTypeXType {}
    impl AbstractTimePrimitiveXElementTrait for AbstractTimeGeometricPrimitiveTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTimeObjectXElement(pub Box<dyn AbstractTimeObjectXElementTrait>);
    pub trait AbstractTimeObjectXElementTrait: AbstractGmlXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTimeObjectTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
    }
    impl AbstractGmlXElementTrait for AbstractTimeObjectTypeXType {}
    impl AbstractObjectXElementTrait for AbstractTimeObjectTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTimePrimitiveXElement(pub Box<dyn AbstractTimePrimitiveXElementTrait>);
    pub trait AbstractTimePrimitiveXElementTrait: AbstractTimeObjectXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTimePrimitiveTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "relatedTime")]
        pub related_time: Vec<RelatedTimeTypeXType>,
    }
    impl AbstractGmlXElementTrait for AbstractTimePrimitiveTypeXType {}
    impl AbstractObjectXElementTrait for AbstractTimePrimitiveTypeXType {}
    impl AbstractTimeObjectXElementTrait for AbstractTimePrimitiveTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTimeSliceXElement(pub Box<dyn AbstractTimeSliceXElementTrait>);
    pub trait AbstractTimeSliceXElementTrait: AbstractGmlXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTimeSliceTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: ValidTimeXElement,
        #[serde(default, rename = "dataSource")]
        pub data_source: Option<DataSourceXElement>,
    }
    impl AbstractGmlXElementTrait for AbstractTimeSliceTypeXType {}
    impl AbstractObjectXElementTrait for AbstractTimeSliceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTimeTopologyPrimitiveXElement(
        pub Box<dyn AbstractTimeTopologyPrimitiveXElementTrait>,
    );
    pub trait AbstractTimeTopologyPrimitiveXElementTrait:
        AbstractTimePrimitiveXElementTrait
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTimeTopologyPrimitiveTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "relatedTime")]
        pub related_time: Vec<RelatedTimeTypeXType>,
        #[serde(default, rename = "complex")]
        pub complex: Option<ReferenceTypeXType>,
    }
    impl AbstractGmlXElementTrait for AbstractTimeTopologyPrimitiveTypeXType {}
    impl AbstractObjectXElementTrait for AbstractTimeTopologyPrimitiveTypeXType {}
    impl AbstractTimeObjectXElementTrait for AbstractTimeTopologyPrimitiveTypeXType {}
    impl AbstractTimePrimitiveXElementTrait for AbstractTimeTopologyPrimitiveTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTopoPrimitiveXElement(pub Box<dyn AbstractTopoPrimitiveXElementTrait>);
    pub trait AbstractTopoPrimitiveXElementTrait: AbstractTopologyXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTopoPrimitiveTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
    }
    impl AbstractGmlXElementTrait for AbstractTopoPrimitiveTypeXType {}
    impl AbstractObjectXElementTrait for AbstractTopoPrimitiveTypeXType {}
    impl AbstractTopologyXElementTrait for AbstractTopoPrimitiveTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTopologyXElement(pub Box<dyn AbstractTopologyXElementTrait>);
    pub trait AbstractTopologyXElementTrait: AbstractGmlXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractTopologyTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
    }
    impl AbstractGmlXElementTrait for AbstractTopologyTypeXType {}
    impl AbstractObjectXElementTrait for AbstractTopologyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractValueXElement(pub Box<dyn AbstractValueXElementTrait>);
    pub trait AbstractValueXElementTrait: AbstractObjectXElementTrait {}
    pub type AffineCsXElement = AffineCsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AffineCsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<AffineCsPropertyTypeXTypeContent>,
    }
    impl AffineCsPropertyElementTrait for AffineCsPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AffineCsPropertyTypeXTypeContent {
        #[serde(rename = "AffineCS")]
        pub affine_cs: AffineCsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AffineCsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "axis")]
        pub axis: Vec<AxisXElement>,
    }
    impl AbstractCoordinateSystemXElementTrait for AffineCsTypeXType {}
    impl AbstractGmlXElementTrait for AffineCsTypeXType {}
    impl AbstractObjectXElementTrait for AffineCsTypeXType {}
    impl DefinitionXElementTrait for AffineCsTypeXType {}
    pub type AffinePlacementXElement = AffinePlacementTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AffinePlacementTypeXType {
        #[serde(rename = "location")]
        pub location: DirectPositionTypeXType,
        #[serde(default, rename = "refDirection")]
        pub ref_direction: Vec<VectorTypeXType>,
        #[serde(rename = "inDimension")]
        pub in_dimension: super::xs::PositiveIntegerXType,
        #[serde(rename = "outDimension")]
        pub out_dimension: super::xs::PositiveIntegerXType,
    }
    impl AbstractObjectXElementTrait for AffinePlacementTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AggregationTypeXType {
        #[serde(rename = "set")]
        Set,
        #[serde(rename = "bag")]
        Bag,
        #[serde(rename = "sequence")]
        Sequence,
        #[serde(rename = "array")]
        Array,
        #[serde(rename = "record")]
        Record,
        #[serde(rename = "table")]
        Table,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum AngleChoiceTypeXType {
        #[serde(rename = "angle")]
        Angle(AngleXElement),
        #[serde(rename = "dmsAngle")]
        DmsAngle(DmsAngleXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AngleTypeXType {
        #[serde(rename = "@uom")]
        pub uom: UomIdentifierXType,
        #[serde(rename = "$text")]
        pub content: super::xs::DoubleXType,
    }
    impl super::gco::MeasureXElementTrait for AngleTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArcXElement(pub Box<dyn ArcXElementTrait>);
    pub trait ArcXElementTrait: ArcStringXElementTrait {}
    pub type ArcByBulgeXElement = ArcByBulgeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArcByBulgeTypeXType {
        #[serde(
            default = "ArcByBulgeTypeXType::default_num_derivatives_at_start",
            rename = "@numDerivativesAtStart"
        )]
        pub num_derivatives_at_start: super::xs::IntegerXType,
        #[serde(
            default = "ArcByBulgeTypeXType::default_num_derivatives_at_end",
            rename = "@numDerivativesAtEnd"
        )]
        pub num_derivatives_at_end: super::xs::IntegerXType,
        #[serde(
            default = "ArcByBulgeTypeXType::default_num_derivative_interior",
            rename = "@numDerivativeInterior"
        )]
        pub num_derivative_interior: super::xs::IntegerXType,
        #[serde(default, rename = "@interpolation")]
        pub interpolation: Option<CurveInterpolationTypeXType>,
        #[serde(default, rename = "@numArc")]
        pub num_arc: Option<super::xs::IntegerXType>,
        #[serde(rename = "Content2548")]
        pub content_2548: ArcStringByBulgeContent2548XType,
        #[serde(rename = "bulge")]
        pub bulge: super::xs::DoubleXType,
        #[serde(rename = "normal")]
        pub normal: VectorTypeXType,
        #[serde(rename = "Content2552")]
        pub content_2552: ArcByBulgeContent2552XType,
    }
    impl AbstractCurveSegmentXElementTrait for ArcByBulgeTypeXType {}
    impl AbstractObjectXElementTrait for ArcByBulgeTypeXType {}
    impl ArcStringByBulgeXElementTrait for ArcByBulgeTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArcByCenterPointXElement(pub Box<dyn ArcByCenterPointXElementTrait>);
    pub trait ArcByCenterPointXElementTrait: AbstractCurveSegmentXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArcByCenterPointTypeXType {
        #[serde(
            default = "ArcByCenterPointTypeXType::default_num_derivatives_at_start",
            rename = "@numDerivativesAtStart"
        )]
        pub num_derivatives_at_start: super::xs::IntegerXType,
        #[serde(
            default = "ArcByCenterPointTypeXType::default_num_derivatives_at_end",
            rename = "@numDerivativesAtEnd"
        )]
        pub num_derivatives_at_end: super::xs::IntegerXType,
        #[serde(
            default = "ArcByCenterPointTypeXType::default_num_derivative_interior",
            rename = "@numDerivativeInterior"
        )]
        pub num_derivative_interior: super::xs::IntegerXType,
        #[serde(default, rename = "@interpolation")]
        pub interpolation: Option<CurveInterpolationTypeXType>,
        #[serde(rename = "@numArc")]
        pub num_arc: super::xs::IntegerXType,
        #[serde(rename = "Content2555")]
        pub content_2555: ArcByCenterPointContent2555XType,
        #[serde(rename = "radius")]
        pub radius: LengthTypeXType,
        #[serde(default, rename = "startAngle")]
        pub start_angle: Option<AngleTypeXType>,
        #[serde(default, rename = "endAngle")]
        pub end_angle: Option<AngleTypeXType>,
    }
    impl AbstractCurveSegmentXElementTrait for ArcByCenterPointTypeXType {}
    impl AbstractObjectXElementTrait for ArcByCenterPointTypeXType {}
    impl ArcByCenterPointXElementTrait for ArcByCenterPointTypeXType {}
    pub type ArcMinutesTypeXType = usize;
    pub type ArcSecondsTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArcStringXElement(pub Box<dyn ArcStringXElementTrait>);
    pub trait ArcStringXElementTrait: AbstractCurveSegmentXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArcStringByBulgeXElement(pub Box<dyn ArcStringByBulgeXElementTrait>);
    pub trait ArcStringByBulgeXElementTrait: AbstractCurveSegmentXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArcStringByBulgeTypeXType {
        #[serde(
            default = "ArcStringByBulgeTypeXType::default_num_derivatives_at_start",
            rename = "@numDerivativesAtStart"
        )]
        pub num_derivatives_at_start: super::xs::IntegerXType,
        #[serde(
            default = "ArcStringByBulgeTypeXType::default_num_derivatives_at_end",
            rename = "@numDerivativesAtEnd"
        )]
        pub num_derivatives_at_end: super::xs::IntegerXType,
        #[serde(
            default = "ArcStringByBulgeTypeXType::default_num_derivative_interior",
            rename = "@numDerivativeInterior"
        )]
        pub num_derivative_interior: super::xs::IntegerXType,
        #[serde(default, rename = "@interpolation")]
        pub interpolation: Option<CurveInterpolationTypeXType>,
        #[serde(default, rename = "@numArc")]
        pub num_arc: Option<super::xs::IntegerXType>,
        #[serde(rename = "Content2548")]
        pub content_2548: ArcStringByBulgeContent2548XType,
        #[serde(default, rename = "bulge")]
        pub bulge: Vec<super::xs::DoubleXType>,
        #[serde(default, rename = "normal")]
        pub normal: Vec<VectorTypeXType>,
    }
    impl AbstractCurveSegmentXElementTrait for ArcStringByBulgeTypeXType {}
    impl AbstractObjectXElementTrait for ArcStringByBulgeTypeXType {}
    impl ArcStringByBulgeXElementTrait for ArcStringByBulgeTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArcStringTypeXType {
        #[serde(
            default = "ArcStringTypeXType::default_num_derivatives_at_start",
            rename = "@numDerivativesAtStart"
        )]
        pub num_derivatives_at_start: super::xs::IntegerXType,
        #[serde(
            default = "ArcStringTypeXType::default_num_derivatives_at_end",
            rename = "@numDerivativesAtEnd"
        )]
        pub num_derivatives_at_end: super::xs::IntegerXType,
        #[serde(
            default = "ArcStringTypeXType::default_num_derivative_interior",
            rename = "@numDerivativeInterior"
        )]
        pub num_derivative_interior: super::xs::IntegerXType,
        #[serde(default, rename = "@interpolation")]
        pub interpolation: Option<CurveInterpolationTypeXType>,
        #[serde(default, rename = "@numArc")]
        pub num_arc: Option<super::xs::IntegerXType>,
        #[serde(rename = "Content2540")]
        pub content_2540: ArcStringContent2540XType,
    }
    impl AbstractCurveSegmentXElementTrait for ArcStringTypeXType {}
    impl AbstractObjectXElementTrait for ArcStringTypeXType {}
    impl ArcStringXElementTrait for ArcStringTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArcTypeXType {
        #[serde(
            default = "ArcTypeXType::default_num_derivatives_at_start",
            rename = "@numDerivativesAtStart"
        )]
        pub num_derivatives_at_start: super::xs::IntegerXType,
        #[serde(
            default = "ArcTypeXType::default_num_derivatives_at_end",
            rename = "@numDerivativesAtEnd"
        )]
        pub num_derivatives_at_end: super::xs::IntegerXType,
        #[serde(
            default = "ArcTypeXType::default_num_derivative_interior",
            rename = "@numDerivativeInterior"
        )]
        pub num_derivative_interior: super::xs::IntegerXType,
        #[serde(default, rename = "@interpolation")]
        pub interpolation: Option<CurveInterpolationTypeXType>,
        #[serde(default, rename = "@numArc")]
        pub num_arc: Option<super::xs::IntegerXType>,
        #[serde(rename = "Content2540")]
        pub content_2540: ArcStringContent2540XType,
        #[serde(rename = "Content2544")]
        pub content_2544: ArcContent2544XType,
    }
    impl AbstractCurveSegmentXElementTrait for ArcTypeXType {}
    impl AbstractObjectXElementTrait for ArcTypeXType {}
    impl ArcXElementTrait for ArcTypeXType {}
    impl ArcStringXElementTrait for ArcTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AreaTypeXType {
        #[serde(rename = "@uom")]
        pub uom: UomIdentifierXType,
        #[serde(rename = "$text")]
        pub content: super::xs::DoubleXType,
    }
    pub type ArrayXElement = ArrayTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrayAssociationTypeXType {
        #[serde(default = "ArrayAssociationTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "AbstractObject")]
        pub abstract_object: Vec<AbstractObjectXElement>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArrayTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "members")]
        pub members: Option<MembersXElement>,
    }
    impl AbstractGmlXElementTrait for ArrayTypeXType {}
    impl AbstractObjectXElementTrait for ArrayTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AssociationRoleTypeXType {
        #[serde(default = "AssociationRoleTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
    }
    pub type AxisDirectionXType = String;
    #[derive(Debug, Serialize, Deserialize, Default)]
    pub struct AxisDirectionListXType(pub Vec<AxisDirectionXType>);
    #[derive(Debug, Serialize, Deserialize)]
    pub struct BSplineXElement(pub Box<dyn BSplineXElementTrait>);
    pub trait BSplineXElementTrait: AbstractCurveSegmentXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct BSplineTypeXType {
        #[serde(
            default = "BSplineTypeXType::default_num_derivatives_at_start",
            rename = "@numDerivativesAtStart"
        )]
        pub num_derivatives_at_start: super::xs::IntegerXType,
        #[serde(
            default = "BSplineTypeXType::default_num_derivatives_at_end",
            rename = "@numDerivativesAtEnd"
        )]
        pub num_derivatives_at_end: super::xs::IntegerXType,
        #[serde(
            default = "BSplineTypeXType::default_num_derivative_interior",
            rename = "@numDerivativeInterior"
        )]
        pub num_derivative_interior: super::xs::IntegerXType,
        #[serde(
            default = "BSplineTypeXType::default_interpolation",
            rename = "@interpolation"
        )]
        pub interpolation: CurveInterpolationTypeXType,
        #[serde(default, rename = "@isPolynomial")]
        pub is_polynomial: Option<super::xs::BooleanXType>,
        #[serde(default, rename = "@knotType")]
        pub knot_type: Option<KnotTypesTypeXType>,
        #[serde(rename = "Content2565")]
        pub content_2565: BSplineContent2565XType,
        #[serde(rename = "degree")]
        pub degree: super::xs::NonNegativeIntegerXType,
        #[serde(default, rename = "knot")]
        pub knot: Vec<KnotPropertyTypeXType>,
    }
    impl AbstractCurveSegmentXElementTrait for BSplineTypeXType {}
    impl AbstractObjectXElementTrait for BSplineTypeXType {}
    impl BSplineXElementTrait for BSplineTypeXType {}
    pub type BagXElement = BagTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct BagTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "member")]
        pub member: Vec<MemberXElement>,
        #[serde(default, rename = "members")]
        pub members: Option<MembersXElement>,
    }
    impl AbstractGmlXElementTrait for BagTypeXType {}
    impl AbstractObjectXElementTrait for BagTypeXType {}
    pub type BaseUnitXElement = BaseUnitTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct BaseUnitTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "quantityType")]
        pub quantity_type: Option<QuantityTypeXElement>,
        #[serde(default, rename = "quantityTypeReference")]
        pub quantity_type_reference: Option<QuantityTypeReferenceXElement>,
        #[serde(default, rename = "catalogSymbol")]
        pub catalog_symbol: Option<CatalogSymbolXElement>,
        #[serde(rename = "unitsSystem")]
        pub units_system: ReferenceTypeXType,
    }
    impl AbstractGmlXElementTrait for BaseUnitTypeXType {}
    impl AbstractObjectXElementTrait for BaseUnitTypeXType {}
    impl DefinitionXElementTrait for BaseUnitTypeXType {}
    impl UnitDefinitionXElementTrait for BaseUnitTypeXType {}
    pub type BezierXElement = BezierTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct BezierTypeXType {
        #[serde(
            default = "BezierTypeXType::default_num_derivatives_at_start",
            rename = "@numDerivativesAtStart"
        )]
        pub num_derivatives_at_start: super::xs::IntegerXType,
        #[serde(
            default = "BezierTypeXType::default_num_derivatives_at_end",
            rename = "@numDerivativesAtEnd"
        )]
        pub num_derivatives_at_end: super::xs::IntegerXType,
        #[serde(
            default = "BezierTypeXType::default_num_derivative_interior",
            rename = "@numDerivativeInterior"
        )]
        pub num_derivative_interior: super::xs::IntegerXType,
        #[serde(
            default = "BezierTypeXType::default_interpolation",
            rename = "@interpolation"
        )]
        pub interpolation: CurveInterpolationTypeXType,
        #[serde(default, rename = "@isPolynomial")]
        pub is_polynomial: Option<super::xs::BooleanXType>,
        #[serde(rename = "Content2565")]
        pub content_2565: BSplineContent2565XType,
        #[serde(rename = "degree")]
        pub degree: super::xs::NonNegativeIntegerXType,
        #[serde(rename = "knot")]
        pub knot: [KnotPropertyTypeXType; 2usize],
        #[serde(rename = "Content2571")]
        pub content_2571: BezierContent2571XType,
    }
    impl AbstractCurveSegmentXElementTrait for BezierTypeXType {}
    impl AbstractObjectXElementTrait for BezierTypeXType {}
    impl BSplineXElementTrait for BezierTypeXType {}
    pub type BooleanXElement = BooleanXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct BooleanXElementType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(rename = "$text")]
        pub content: super::xs::BooleanXType,
    }
    impl AbstractObjectXElementTrait for BooleanXElementType {}
    impl AbstractScalarValueXElementTrait for BooleanXElementType {}
    impl AbstractValueXElementTrait for BooleanXElementType {}
    pub type BooleanListXElement = BooleanOrNilReasonListXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct BooleanPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<BooleanPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct BooleanPropertyTypeXTypeContent {
        #[serde(rename = "Boolean")]
        pub boolean: BooleanXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct BoundedFeatureTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "Content1840")]
        pub content_1840: BoundedFeatureContent1840XType,
        #[serde(rename = "boundedBy")]
        pub bounded_by: BoundedByXElement,
        #[serde(default, rename = "location")]
        pub location: Option<LocationPropertyElement>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct BoundingShapeTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(rename = "Content2341")]
        pub content_2341: BoundingShapeContent2341XType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CrsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<CrsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CrsPropertyTypeXTypeContent {
        #[serde(rename = "AbstractCRS")]
        pub abstract_crs: AbstractCrsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CalDateXType {
        Date(super::xs::DateXType),
        GYearMonth(super::xs::GYearMonthXType),
        GYear(super::xs::GYearXType),
    }
    pub type CartesianCsXElement = CartesianCsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CartesianCsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<CartesianCsPropertyTypeXTypeContent>,
    }
    impl CartesianCsPropertyElementTrait for CartesianCsPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CartesianCsPropertyTypeXTypeContent {
        #[serde(rename = "CartesianCS")]
        pub cartesian_cs: CartesianCsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CartesianCsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "axis")]
        pub axis: Vec<AxisXElement>,
    }
    impl AbstractCoordinateSystemXElementTrait for CartesianCsTypeXType {}
    impl AbstractGmlXElementTrait for CartesianCsTypeXType {}
    impl AbstractObjectXElementTrait for CartesianCsTypeXType {}
    impl DefinitionXElementTrait for CartesianCsTypeXType {}
    pub type CategoryXElement = CategoryXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CategoryXElementType {
        #[serde(default, rename = "@codeSpace")]
        pub code_space: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(rename = "$text")]
        pub content: super::xs::StringXType,
    }
    impl AbstractObjectXElementTrait for CategoryXElementType {}
    impl AbstractScalarValueXElementTrait for CategoryXElementType {}
    impl AbstractValueXElementTrait for CategoryXElementType {}
    pub type CategoryExtentXElement = CategoryExtentTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CategoryExtentTypeXType {
        #[serde(default, rename = "@codeSpace")]
        pub code_space: Option<super::xs::AnyUriXType>,
        #[serde(rename = "$text")]
        pub content: NameOrNilReasonListXType,
    }
    impl AbstractObjectXElementTrait for CategoryExtentTypeXType {}
    impl AbstractValueXElementTrait for CategoryExtentTypeXType {}
    pub type CategoryListXElement = CodeOrNilReasonListTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CategoryPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<CategoryPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CategoryPropertyTypeXTypeContent {
        #[serde(rename = "Category")]
        pub category: CategoryXElement,
    }
    pub type CircleXElement = CircleTypeXType;
    pub type CircleByCenterPointXElement = CircleByCenterPointTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CircleByCenterPointTypeXType {
        #[serde(
            default = "CircleByCenterPointTypeXType::default_num_derivatives_at_start",
            rename = "@numDerivativesAtStart"
        )]
        pub num_derivatives_at_start: super::xs::IntegerXType,
        #[serde(
            default = "CircleByCenterPointTypeXType::default_num_derivatives_at_end",
            rename = "@numDerivativesAtEnd"
        )]
        pub num_derivatives_at_end: super::xs::IntegerXType,
        #[serde(
            default = "CircleByCenterPointTypeXType::default_num_derivative_interior",
            rename = "@numDerivativeInterior"
        )]
        pub num_derivative_interior: super::xs::IntegerXType,
        #[serde(default, rename = "@interpolation")]
        pub interpolation: Option<CurveInterpolationTypeXType>,
        #[serde(rename = "@numArc")]
        pub num_arc: super::xs::IntegerXType,
        #[serde(rename = "Content2555")]
        pub content_2555: ArcByCenterPointContent2555XType,
        #[serde(rename = "radius")]
        pub radius: LengthTypeXType,
        #[serde(rename = "Content2559")]
        pub content_2559: CircleByCenterPointContent2559XType,
    }
    impl AbstractCurveSegmentXElementTrait for CircleByCenterPointTypeXType {}
    impl AbstractObjectXElementTrait for CircleByCenterPointTypeXType {}
    impl ArcByCenterPointXElementTrait for CircleByCenterPointTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CircleTypeXType {
        #[serde(
            default = "CircleTypeXType::default_num_derivatives_at_start",
            rename = "@numDerivativesAtStart"
        )]
        pub num_derivatives_at_start: super::xs::IntegerXType,
        #[serde(
            default = "CircleTypeXType::default_num_derivatives_at_end",
            rename = "@numDerivativesAtEnd"
        )]
        pub num_derivatives_at_end: super::xs::IntegerXType,
        #[serde(
            default = "CircleTypeXType::default_num_derivative_interior",
            rename = "@numDerivativeInterior"
        )]
        pub num_derivative_interior: super::xs::IntegerXType,
        #[serde(default, rename = "@interpolation")]
        pub interpolation: Option<CurveInterpolationTypeXType>,
        #[serde(default, rename = "@numArc")]
        pub num_arc: Option<super::xs::IntegerXType>,
        #[serde(rename = "Content2540")]
        pub content_2540: ArcStringContent2540XType,
        #[serde(rename = "Content2544")]
        pub content_2544: ArcContent2544XType,
    }
    impl AbstractCurveSegmentXElementTrait for CircleTypeXType {}
    impl AbstractObjectXElementTrait for CircleTypeXType {}
    impl ArcXElementTrait for CircleTypeXType {}
    impl ArcStringXElementTrait for CircleTypeXType {}
    pub type ClothoidXElement = ClothoidTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ClothoidTypeXType {
        #[serde(
            default = "ClothoidTypeXType::default_num_derivatives_at_start",
            rename = "@numDerivativesAtStart"
        )]
        pub num_derivatives_at_start: super::xs::IntegerXType,
        #[serde(
            default = "ClothoidTypeXType::default_num_derivatives_at_end",
            rename = "@numDerivativesAtEnd"
        )]
        pub num_derivatives_at_end: super::xs::IntegerXType,
        #[serde(
            default = "ClothoidTypeXType::default_num_derivative_interior",
            rename = "@numDerivativeInterior"
        )]
        pub num_derivative_interior: super::xs::IntegerXType,
        #[serde(default, rename = "@interpolation")]
        pub interpolation: Option<CurveInterpolationTypeXType>,
        #[serde(rename = "refLocation")]
        pub ref_location: ClothoidTypeRefLocationXElement,
        #[serde(rename = "scaleFactor")]
        pub scale_factor: super::xs::DecimalXType,
        #[serde(rename = "startParameter")]
        pub start_parameter: super::xs::DoubleXType,
        #[serde(rename = "endParameter")]
        pub end_parameter: super::xs::DoubleXType,
    }
    impl AbstractCurveSegmentXElementTrait for ClothoidTypeXType {}
    impl AbstractObjectXElementTrait for ClothoidTypeXType {}
    pub type ClothoidTypeRefLocationXElement = ClothoidTypeRefLocationXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ClothoidTypeRefLocationXElementType {
        #[serde(rename = "AffinePlacement")]
        pub affine_placement: AffinePlacementXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeListTypeXType {
        #[serde(default, rename = "@codeSpace")]
        pub code_space: Option<super::xs::AnyUriXType>,
        #[serde(rename = "$text")]
        pub content: NameListXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeOrNilReasonListTypeXType {
        #[serde(default, rename = "@codeSpace")]
        pub code_space: Option<super::xs::AnyUriXType>,
        #[serde(rename = "$text")]
        pub content: NameOrNilReasonListXType,
    }
    impl AbstractObjectXElementTrait for CodeOrNilReasonListTypeXType {}
    impl AbstractScalarValueListXElementTrait for CodeOrNilReasonListTypeXType {}
    impl AbstractValueXElementTrait for CodeOrNilReasonListTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeTypeXType {
        #[serde(default, rename = "@codeSpace")]
        pub code_space: Option<super::xs::AnyUriXType>,
        #[serde(rename = "$text")]
        pub content: super::xs::StringXType,
    }
    impl AnchorDefinitionXElementTrait for CodeTypeXType {}
    impl FormulaXElementTrait for CodeTypeXType {}
    impl super::gco::AbstractGenericNameXElementTrait for CodeTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CodeWithAuthorityTypeXType {
        #[serde(rename = "@codeSpace")]
        pub code_space: super::xs::AnyUriXType,
        #[serde(rename = "$text")]
        pub content: super::xs::StringXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CompassPointEnumerationXType {
        #[serde(rename = "N")]
        N,
        #[serde(rename = "NNE")]
        Nne,
        #[serde(rename = "NE")]
        Ne,
        #[serde(rename = "ENE")]
        Ene,
        #[serde(rename = "E")]
        E,
        #[serde(rename = "ESE")]
        Ese,
        #[serde(rename = "SE")]
        Se,
        #[serde(rename = "SSE")]
        Sse,
        #[serde(rename = "S")]
        S,
        #[serde(rename = "SSW")]
        Ssw,
        #[serde(rename = "SW")]
        Sw,
        #[serde(rename = "WSW")]
        Wsw,
        #[serde(rename = "W")]
        W,
        #[serde(rename = "WNW")]
        Wnw,
        #[serde(rename = "NW")]
        Nw,
        #[serde(rename = "NNW")]
        Nnw,
    }
    pub type CompositeCurveXElement = CompositeCurveTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CompositeCurveTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "curveMember")]
        pub curve_member: Vec<CurveMemberXElement>,
    }
    impl AbstractCurveXElementTrait for CompositeCurveTypeXType {}
    impl AbstractGmlXElementTrait for CompositeCurveTypeXType {}
    impl AbstractGeometricPrimitiveXElementTrait for CompositeCurveTypeXType {}
    impl AbstractGeometryXElementTrait for CompositeCurveTypeXType {}
    impl AbstractObjectXElementTrait for CompositeCurveTypeXType {}
    pub type CompositeSolidXElement = CompositeSolidTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CompositeSolidTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "solidMember")]
        pub solid_member: Vec<SolidMemberXElement>,
    }
    impl AbstractGmlXElementTrait for CompositeSolidTypeXType {}
    impl AbstractGeometricPrimitiveXElementTrait for CompositeSolidTypeXType {}
    impl AbstractGeometryXElementTrait for CompositeSolidTypeXType {}
    impl AbstractObjectXElementTrait for CompositeSolidTypeXType {}
    impl AbstractSolidXElementTrait for CompositeSolidTypeXType {}
    pub type CompositeSurfaceXElement = CompositeSurfaceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CompositeSurfaceTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "surfaceMember")]
        pub surface_member: Vec<SurfaceMemberXElement>,
    }
    impl AbstractGmlXElementTrait for CompositeSurfaceTypeXType {}
    impl AbstractGeometricPrimitiveXElementTrait for CompositeSurfaceTypeXType {}
    impl AbstractGeometryXElementTrait for CompositeSurfaceTypeXType {}
    impl AbstractObjectXElementTrait for CompositeSurfaceTypeXType {}
    impl AbstractSurfaceXElementTrait for CompositeSurfaceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CompositeValueXElement(pub Box<dyn CompositeValueXElementTrait>);
    pub trait CompositeValueXElementTrait: AbstractValueXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CompositeValueTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "valueComponent")]
        pub value_component: Vec<ValueComponentXElement>,
        #[serde(default, rename = "valueComponents")]
        pub value_components: Option<ValueComponentsXElement>,
    }
    impl AbstractObjectXElementTrait for CompositeValueTypeXType {}
    impl AbstractValueXElementTrait for CompositeValueTypeXType {}
    impl CompositeValueXElementTrait for CompositeValueTypeXType {}
    pub type CompoundCrsXElement = CompoundCrsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CompoundCrsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<CompoundCrsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CompoundCrsPropertyTypeXTypeContent {
        #[serde(rename = "CompoundCRS")]
        pub compound_crs: CompoundCrsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CompoundCrsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Vec<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(default, rename = "componentReferenceSystem")]
        pub component_reference_system: Vec<ComponentReferenceSystemXElement>,
    }
    impl AbstractCrsXElementTrait for CompoundCrsTypeXType {}
    impl AbstractGmlXElementTrait for CompoundCrsTypeXType {}
    impl AbstractObjectXElementTrait for CompoundCrsTypeXType {}
    impl DefinitionXElementTrait for CompoundCrsTypeXType {}
    pub type ConcatenatedOperationXElement = ConcatenatedOperationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ConcatenatedOperationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<ConcatenatedOperationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ConcatenatedOperationPropertyTypeXTypeContent {
        #[serde(rename = "ConcatenatedOperation")]
        pub concatenated_operation: ConcatenatedOperationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ConcatenatedOperationTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Option<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(default, rename = "operationVersion")]
        pub operation_version: Option<OperationVersionXElement>,
        #[serde(default, rename = "coordinateOperationAccuracy")]
        pub coordinate_operation_accuracy: Vec<CoordinateOperationAccuracyXElement>,
        #[serde(default, rename = "sourceCRS")]
        pub source_crs: Option<SourceCrsXElement>,
        #[serde(default, rename = "targetCRS")]
        pub target_crs: Option<TargetCrsXElement>,
        #[serde(default, rename = "coordOperation")]
        pub coord_operation: Vec<CoordOperationXElement>,
    }
    impl AbstractCoordinateOperationXElementTrait for ConcatenatedOperationTypeXType {}
    impl AbstractGmlXElementTrait for ConcatenatedOperationTypeXType {}
    impl AbstractObjectXElementTrait for ConcatenatedOperationTypeXType {}
    impl DefinitionXElementTrait for ConcatenatedOperationTypeXType {}
    pub type ConeXElement = ConeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ConeTypeXType {
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(default, rename = "@rows")]
        pub rows: Option<super::xs::IntegerXType>,
        #[serde(default, rename = "@columns")]
        pub columns: Option<super::xs::IntegerXType>,
        #[serde(default, rename = "@horizontalCurveType")]
        pub horizontal_curve_type: Option<CurveInterpolationTypeXType>,
        #[serde(default, rename = "@verticalCurveType")]
        pub vertical_curve_type: Option<CurveInterpolationTypeXType>,
        #[serde(rename = "Content2592")]
        pub content_2592: AbstractGriddedSurfaceContent2592XType,
    }
    impl AbstractGriddedSurfaceXElementTrait for ConeTypeXType {}
    impl AbstractParametricCurveSurfaceXElementTrait for ConeTypeXType {}
    impl AbstractSurfacePatchXElementTrait for ConeTypeXType {}
    pub type ConventionalUnitXElement = ConventionalUnitTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ConventionalUnitTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "quantityType")]
        pub quantity_type: Option<QuantityTypeXElement>,
        #[serde(default, rename = "quantityTypeReference")]
        pub quantity_type_reference: Option<QuantityTypeReferenceXElement>,
        #[serde(default, rename = "catalogSymbol")]
        pub catalog_symbol: Option<CatalogSymbolXElement>,
        #[serde(rename = "Content2654")]
        pub content_2654: ConventionalUnitContent2654XType,
        #[serde(default, rename = "derivationUnitTerm")]
        pub derivation_unit_term: Vec<DerivationUnitTermXElement>,
    }
    impl AbstractGmlXElementTrait for ConventionalUnitTypeXType {}
    impl AbstractObjectXElementTrait for ConventionalUnitTypeXType {}
    impl DefinitionXElementTrait for ConventionalUnitTypeXType {}
    impl UnitDefinitionXElementTrait for ConventionalUnitTypeXType {}
    pub type ConversionXElement = ConversionTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ConversionPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<ConversionPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ConversionPropertyTypeXTypeContent {
        #[serde(rename = "Conversion")]
        pub conversion: ConversionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ConversionToPreferredUnitTypeXType {
        #[serde(rename = "@uom")]
        pub uom: UomIdentifierXType,
        #[serde(rename = "$value")]
        pub content: ConversionToPreferredUnitTypeXTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ConversionToPreferredUnitTypeXTypeContent {
        #[serde(rename = "factor")]
        Factor(super::xs::DoubleXType),
        #[serde(rename = "formula")]
        Formula(FormulaTypeXType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ConversionTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Option<DomainOfValidityXElement>,
        #[serde(default, rename = "coordinateOperationAccuracy")]
        pub coordinate_operation_accuracy: Vec<CoordinateOperationAccuracyXElement>,
        #[serde(rename = "method")]
        pub method: MethodXElement,
        #[serde(default, rename = "parameterValue")]
        pub parameter_value: Vec<ParameterValueProperty>,
    }
    impl AbstractCoordinateOperationXElementTrait for ConversionTypeXType {}
    impl AbstractGmlXElementTrait for ConversionTypeXType {}
    impl AbstractGeneralConversionXElementTrait for ConversionTypeXType {}
    impl AbstractObjectXElementTrait for ConversionTypeXType {}
    impl AbstractOperationXElementTrait for ConversionTypeXType {}
    impl AbstractSingleOperationXElementTrait for ConversionTypeXType {}
    impl DefinitionXElementTrait for ConversionTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CoordinateOperationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<CoordinateOperationPropertyTypeXTypeContent>,
    }
    impl CoordOperationXElementTrait for CoordinateOperationPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CoordinateOperationPropertyTypeXTypeContent {
        #[serde(rename = "AbstractCoordinateOperation")]
        pub abstract_coordinate_operation: AbstractCoordinateOperationXElement,
    }
    pub type CoordinateSystemAxisXElement = CoordinateSystemAxisTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CoordinateSystemAxisPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<CoordinateSystemAxisPropertyTypeXTypeContent>,
    }
    impl AxisXElementTrait for CoordinateSystemAxisPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CoordinateSystemAxisPropertyTypeXTypeContent {
        #[serde(rename = "CoordinateSystemAxis")]
        pub coordinate_system_axis: CoordinateSystemAxisXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CoordinateSystemAxisTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "@uom")]
        pub uom: UomIdentifierXType,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(rename = "axisAbbrev")]
        pub axis_abbrev: AxisAbbrevXElement,
        #[serde(rename = "axisDirection")]
        pub axis_direction: AxisDirectionXElement,
        #[serde(default, rename = "minimumValue")]
        pub minimum_value: Option<MinimumValueXElement>,
        #[serde(default, rename = "maximumValue")]
        pub maximum_value: Option<MaximumValueXElement>,
        #[serde(default, rename = "rangeMeaning")]
        pub range_meaning: Option<RangeMeaningXElement>,
    }
    impl AbstractGmlXElementTrait for CoordinateSystemAxisTypeXType {}
    impl AbstractObjectXElementTrait for CoordinateSystemAxisTypeXType {}
    impl DefinitionXElementTrait for CoordinateSystemAxisTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CoordinateSystemPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<CoordinateSystemPropertyTypeXTypeContent>,
    }
    impl CoordinateSystemPropertyElementTrait for CoordinateSystemPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CoordinateSystemPropertyTypeXTypeContent {
        #[serde(rename = "AbstractCoordinateSystem")]
        pub abstract_coordinate_system: AbstractCoordinateSystemXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CoordinatesTypeXType {
        #[serde(default = "CoordinatesTypeXType::default_decimal", rename = "@decimal")]
        pub decimal: super::xs::StringXType,
        #[serde(default = "CoordinatesTypeXType::default_cs", rename = "@cs")]
        pub cs: super::xs::StringXType,
        #[serde(default = "CoordinatesTypeXType::default_ts", rename = "@ts")]
        pub ts: super::xs::StringXType,
        #[serde(rename = "$text")]
        pub content: super::xs::StringXType,
    }
    pub type CountXElement = CountXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CountXElementType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(rename = "$text")]
        pub content: super::xs::IntegerXType,
    }
    impl AbstractObjectXElementTrait for CountXElementType {}
    impl AbstractScalarValueXElementTrait for CountXElementType {}
    impl AbstractValueXElementTrait for CountXElementType {}
    pub type CountExtentXElement = CountExtentTypeXType;
    #[derive(Debug, Serialize, Deserialize, Default)]
    pub struct CountExtentTypeXType(pub Vec<IntegerOrNilReasonXType>);
    impl AbstractObjectXElementTrait for CountExtentTypeXType {}
    impl AbstractValueXElementTrait for CountExtentTypeXType {}
    pub type CountListXElement = IntegerOrNilReasonListXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CountPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<CountPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CountPropertyTypeXTypeContent {
        #[serde(rename = "Count")]
        pub count: CountXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CoverageFunctionTypeXType {
        #[serde(rename = "MappingRule")]
        MappingRule(MappingRuleXElement),
        #[serde(rename = "CoverageMappingRule")]
        CoverageMappingRule(CoverageMappingRuleXElement),
        #[serde(rename = "GridFunction")]
        GridFunction(GridFunctionXElement),
    }
    impl AbstractObjectXElementTrait for CoverageFunctionTypeXType {}
    pub type CoverageMappingRuleXElement = MappingRuleTypeXType;
    pub type CubicSplineXElement = CubicSplineTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CubicSplineTypeXType {
        #[serde(
            default = "CubicSplineTypeXType::default_num_derivatives_at_start",
            rename = "@numDerivativesAtStart"
        )]
        pub num_derivatives_at_start: super::xs::IntegerXType,
        #[serde(
            default = "CubicSplineTypeXType::default_num_derivatives_at_end",
            rename = "@numDerivativesAtEnd"
        )]
        pub num_derivatives_at_end: super::xs::IntegerXType,
        #[serde(
            default = "CubicSplineTypeXType::default_num_derivative_interior",
            rename = "@numDerivativeInterior"
        )]
        pub num_derivative_interior: super::xs::IntegerXType,
        #[serde(default, rename = "@interpolation")]
        pub interpolation: Option<CurveInterpolationTypeXType>,
        #[serde(default, rename = "@degree")]
        pub degree: Option<super::xs::IntegerXType>,
        #[serde(rename = "Content2562")]
        pub content_2562: CubicSplineContent2562XType,
        #[serde(rename = "vectorAtStart")]
        pub vector_at_start: VectorTypeXType,
        #[serde(rename = "vectorAtEnd")]
        pub vector_at_end: VectorTypeXType,
    }
    impl AbstractCurveSegmentXElementTrait for CubicSplineTypeXType {}
    impl AbstractObjectXElementTrait for CubicSplineTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CurveXElement(pub Box<dyn CurveXElementTrait>);
    pub trait CurveXElementTrait: AbstractCurveXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CurveArrayPropertyTypeXType {
        #[serde(
            default = "CurveArrayPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Vec<CurveArrayPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CurveArrayPropertyTypeXTypeContent {
        #[serde(rename = "AbstractCurve")]
        pub abstract_curve: AbstractCurveXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CurveInterpolationTypeXType {
        #[serde(rename = "linear")]
        Linear,
        #[serde(rename = "geodesic")]
        Geodesic,
        #[serde(rename = "circularArc3Points")]
        CircularArc3Points,
        #[serde(rename = "circularArc2PointWithBulge")]
        CircularArc2PointWithBulge,
        #[serde(rename = "circularArcCenterPointWithRadius")]
        CircularArcCenterPointWithRadius,
        #[serde(rename = "elliptical")]
        Elliptical,
        #[serde(rename = "clothoid")]
        Clothoid,
        #[serde(rename = "conic")]
        Conic,
        #[serde(rename = "polynomialSpline")]
        PolynomialSpline,
        #[serde(rename = "cubicSpline")]
        CubicSpline,
        #[serde(rename = "rationalSpline")]
        RationalSpline,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CurvePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default = "CurvePropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<CurvePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CurvePropertyTypeXTypeContent {
        #[serde(rename = "AbstractCurve")]
        pub abstract_curve: AbstractCurveXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CurveSegmentArrayPropertyTypeXType {
        #[serde(default, rename = "$value")]
        pub content: Vec<CurveSegmentArrayPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CurveSegmentArrayPropertyTypeXTypeContent {
        #[serde(rename = "AbstractCurveSegment")]
        pub abstract_curve_segment: AbstractCurveSegmentXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CurveTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "segments")]
        pub segments: SegmentsXElement,
    }
    impl AbstractCurveXElementTrait for CurveTypeXType {}
    impl AbstractGmlXElementTrait for CurveTypeXType {}
    impl AbstractGeometricPrimitiveXElementTrait for CurveTypeXType {}
    impl AbstractGeometryXElementTrait for CurveTypeXType {}
    impl AbstractObjectXElementTrait for CurveTypeXType {}
    impl CurveXElementTrait for CurveTypeXType {}
    pub type CylinderXElement = CylinderTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CylinderTypeXType {
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(default, rename = "@rows")]
        pub rows: Option<super::xs::IntegerXType>,
        #[serde(default, rename = "@columns")]
        pub columns: Option<super::xs::IntegerXType>,
        #[serde(default, rename = "@horizontalCurveType")]
        pub horizontal_curve_type: Option<CurveInterpolationTypeXType>,
        #[serde(default, rename = "@verticalCurveType")]
        pub vertical_curve_type: Option<CurveInterpolationTypeXType>,
        #[serde(rename = "Content2592")]
        pub content_2592: AbstractGriddedSurfaceContent2592XType,
    }
    impl AbstractGriddedSurfaceXElementTrait for CylinderTypeXType {}
    impl AbstractParametricCurveSurfaceXElementTrait for CylinderTypeXType {}
    impl AbstractSurfacePatchXElementTrait for CylinderTypeXType {}
    pub type CylindricalCsXElement = CylindricalCsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CylindricalCsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<CylindricalCsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CylindricalCsPropertyTypeXTypeContent {
        #[serde(rename = "CylindricalCS")]
        pub cylindrical_cs: CylindricalCsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CylindricalCsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "axis")]
        pub axis: Vec<AxisXElement>,
    }
    impl AbstractCoordinateSystemXElementTrait for CylindricalCsTypeXType {}
    impl AbstractGmlXElementTrait for CylindricalCsTypeXType {}
    impl AbstractObjectXElementTrait for CylindricalCsTypeXType {}
    impl DefinitionXElementTrait for CylindricalCsTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DmsAngleTypeXType {
        #[serde(rename = "degrees")]
        pub degrees: DegreesXElement,
        #[serde(default, rename = "Content1823")]
        pub content_1823: Option<DmsAngleContent1823XType>,
    }
    pub type DataBlockXElement = DataBlockTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DataBlockTypeXType {
        #[serde(rename = "rangeParameters")]
        pub range_parameters: RangeParametersXElement,
        #[serde(rename = "Content1735")]
        pub content_1735: DataBlockContent1735XType,
    }
    impl AbstractObjectXElementTrait for DataBlockTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DatumPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<DatumPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DatumPropertyTypeXTypeContent {
        #[serde(rename = "AbstractDatum")]
        pub abstract_datum: AbstractDatumXElement,
    }
    pub type DecimalMinutesTypeXType = f64;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DefinitionXElement(pub Box<dyn DefinitionXElementTrait>);
    pub trait DefinitionXElementTrait: AbstractGmlXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DefinitionBaseTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
    }
    pub type DefinitionCollectionXElement = DictionaryTypeXType;
    pub type DefinitionProxyXElement = DefinitionProxyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DefinitionProxyTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(rename = "definitionRef")]
        pub definition_ref: DefinitionRefXElement,
    }
    impl AbstractGmlXElementTrait for DefinitionProxyTypeXType {}
    impl AbstractObjectXElementTrait for DefinitionProxyTypeXType {}
    impl DefinitionXElementTrait for DefinitionProxyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DefinitionTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
    }
    impl AbstractGmlXElementTrait for DefinitionTypeXType {}
    impl AbstractObjectXElementTrait for DefinitionTypeXType {}
    impl DefinitionXElementTrait for DefinitionTypeXType {}
    pub type DegreeValueTypeXType = usize;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DegreesTypeXType {
        #[serde(default, rename = "@direction")]
        pub direction: Option<DegreesTypedirectionXType>,
        #[serde(rename = "$text")]
        pub content: DegreeValueTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DegreesTypedirectionXType {
        #[serde(rename = "N")]
        N,
        #[serde(rename = "E")]
        E,
        #[serde(rename = "S")]
        S,
        #[serde(rename = "W")]
        W,
        #[serde(rename = "+")]
        Plus,
        #[serde(rename = "-")]
        Minus,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DerivationUnitTermTypeXType {
        #[serde(rename = "@uom")]
        pub uom: UomIdentifierXType,
        #[serde(default, rename = "@exponent")]
        pub exponent: Option<super::xs::IntegerXType>,
    }
    pub type DerivedCrsXElement = DerivedCrsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DerivedCrsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<DerivedCrsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DerivedCrsPropertyTypeXTypeContent {
        #[serde(rename = "DerivedCRS")]
        pub derived_crs: DerivedCrsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DerivedCrsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Vec<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(rename = "conversion")]
        pub conversion: ConversionProperty,
        #[serde(rename = "baseCRS")]
        pub base_crs: BaseCrsXElement,
        #[serde(rename = "derivedCRSType")]
        pub derived_crs_type: DerivedCrsTypeXElement,
        #[serde(rename = "coordinateSystem")]
        pub coordinate_system: CoordinateSystemPropertyElement,
    }
    impl AbstractCrsXElementTrait for DerivedCrsTypeXType {}
    impl AbstractGmlXElementTrait for DerivedCrsTypeXType {}
    impl AbstractGeneralDerivedCrsXElementTrait for DerivedCrsTypeXType {}
    impl AbstractObjectXElementTrait for DerivedCrsTypeXType {}
    impl AbstractSingleCrsXElementTrait for DerivedCrsTypeXType {}
    impl DefinitionXElementTrait for DerivedCrsTypeXType {}
    pub type DerivedUnitXElement = DerivedUnitTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DerivedUnitTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "quantityType")]
        pub quantity_type: Option<QuantityTypeXElement>,
        #[serde(default, rename = "quantityTypeReference")]
        pub quantity_type_reference: Option<QuantityTypeReferenceXElement>,
        #[serde(default, rename = "catalogSymbol")]
        pub catalog_symbol: Option<CatalogSymbolXElement>,
        #[serde(default, rename = "derivationUnitTerm")]
        pub derivation_unit_term: Vec<DerivationUnitTermXElement>,
    }
    impl AbstractGmlXElementTrait for DerivedUnitTypeXType {}
    impl AbstractObjectXElementTrait for DerivedUnitTypeXType {}
    impl DefinitionXElementTrait for DerivedUnitTypeXType {}
    impl UnitDefinitionXElementTrait for DerivedUnitTypeXType {}
    pub type DictionaryXElement = DictionaryTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DictionaryEntryTypeXType {
        #[serde(default = "DictionaryEntryTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<DictionaryEntryTypeXTypeContent>,
    }
    impl DictionaryEntryXElementTrait for DictionaryEntryTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DictionaryEntryTypeXTypeContent {
        #[serde(rename = "Definition")]
        pub definition: DefinitionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DictionaryTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "Content2504")]
        pub content_2504: Vec<DictionaryContent2504XType>,
    }
    impl AbstractGmlXElementTrait for DictionaryTypeXType {}
    impl AbstractObjectXElementTrait for DictionaryTypeXType {}
    impl DefinitionXElementTrait for DictionaryTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectPositionListTypeXType {
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@count")]
        pub count: Option<super::xs::PositiveIntegerXType>,
        #[serde(rename = "$text")]
        pub content: DoubleListXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectPositionTypeXType {
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(rename = "$text")]
        pub content: DoubleListXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectedEdgePropertyTypeXType {
        #[serde(
            default = "DirectedEdgePropertyTypeXType::default_orientation",
            rename = "@orientation"
        )]
        pub orientation: SignTypeXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(
            default = "DirectedEdgePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<DirectedEdgePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectedEdgePropertyTypeXTypeContent {
        #[serde(rename = "Edge")]
        pub edge: EdgeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectedFacePropertyTypeXType {
        #[serde(
            default = "DirectedFacePropertyTypeXType::default_orientation",
            rename = "@orientation"
        )]
        pub orientation: SignTypeXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(
            default = "DirectedFacePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<DirectedFacePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectedFacePropertyTypeXTypeContent {
        #[serde(rename = "Face")]
        pub face: FaceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectedNodePropertyTypeXType {
        #[serde(
            default = "DirectedNodePropertyTypeXType::default_orientation",
            rename = "@orientation"
        )]
        pub orientation: SignTypeXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(
            default = "DirectedNodePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<DirectedNodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectedNodePropertyTypeXTypeContent {
        #[serde(rename = "Node")]
        pub node: NodeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectedObservationXElement(pub Box<dyn DirectedObservationXElementTrait>);
    pub trait DirectedObservationXElementTrait: ObservationXElementTrait {}
    pub type DirectedObservationAtDistanceXElement = DirectedObservationAtDistanceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectedObservationAtDistanceTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "boundedBy")]
        pub bounded_by: Option<BoundedByXElement>,
        #[serde(default, rename = "location")]
        pub location: Option<LocationPropertyElement>,
        #[serde(rename = "validTime")]
        pub valid_time: ValidTimeXElement,
        #[serde(default, rename = "using")]
        pub using: Option<UsingXElement>,
        #[serde(default, rename = "target")]
        pub target: Option<TargetPropertyElement>,
        #[serde(rename = "resultOf")]
        pub result_of: ResultOfXElement,
        #[serde(rename = "direction")]
        pub direction: DirectionPropertyElement,
        #[serde(rename = "distance")]
        pub distance: MeasureTypeXType,
    }
    impl AbstractFeatureXElementTrait for DirectedObservationAtDistanceTypeXType {}
    impl AbstractGmlXElementTrait for DirectedObservationAtDistanceTypeXType {}
    impl AbstractObjectXElementTrait for DirectedObservationAtDistanceTypeXType {}
    impl DirectedObservationXElementTrait for DirectedObservationAtDistanceTypeXType {}
    impl ObservationXElementTrait for DirectedObservationAtDistanceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectedObservationTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "boundedBy")]
        pub bounded_by: Option<BoundedByXElement>,
        #[serde(default, rename = "location")]
        pub location: Option<LocationPropertyElement>,
        #[serde(rename = "validTime")]
        pub valid_time: ValidTimeXElement,
        #[serde(default, rename = "using")]
        pub using: Option<UsingXElement>,
        #[serde(default, rename = "target")]
        pub target: Option<TargetPropertyElement>,
        #[serde(rename = "resultOf")]
        pub result_of: ResultOfXElement,
        #[serde(rename = "direction")]
        pub direction: DirectionPropertyElement,
    }
    impl AbstractFeatureXElementTrait for DirectedObservationTypeXType {}
    impl AbstractGmlXElementTrait for DirectedObservationTypeXType {}
    impl AbstractObjectXElementTrait for DirectedObservationTypeXType {}
    impl DirectedObservationXElementTrait for DirectedObservationTypeXType {}
    impl ObservationXElementTrait for DirectedObservationTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectedTopoSolidPropertyTypeXType {
        #[serde(
            default = "DirectedTopoSolidPropertyTypeXType::default_orientation",
            rename = "@orientation"
        )]
        pub orientation: SignTypeXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(
            default = "DirectedTopoSolidPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<DirectedTopoSolidPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectedTopoSolidPropertyTypeXTypeContent {
        #[serde(rename = "TopoSolid")]
        pub topo_solid: TopoSolidXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DirectionDescriptionTypeXType {
        #[serde(rename = "compassPoint")]
        CompassPoint(CompassPointEnumerationXType),
        #[serde(rename = "keyword")]
        Keyword(CodeTypeXType),
        #[serde(rename = "description")]
        Description(super::xs::StringXType),
        #[serde(rename = "reference")]
        Reference(ReferenceTypeXType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectionPropertyTypeXType {
        #[serde(default = "DirectionPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<DirectionPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DirectionPropertyTypeXTypeContent {
        #[serde(rename = "DirectionVector")]
        DirectionVector(DirectionVectorTypeXType),
        #[serde(rename = "DirectionDescription")]
        DirectionDescription(DirectionDescriptionTypeXType),
        #[serde(rename = "CompassPoint")]
        CompassPoint(CompassPointEnumerationXType),
        #[serde(rename = "DirectionKeyword")]
        DirectionKeyword(CodeTypeXType),
        #[serde(rename = "DirectionString")]
        DirectionString(StringOrRefTypeXType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DirectionVectorTypeXType {
        #[serde(rename = "vector")]
        Vector(VectorXElement),
        #[serde(rename = "Content2348")]
        Content2348(DirectionVectorContent2348XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DiscreteCoverageTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "boundedBy")]
        pub bounded_by: Option<BoundedByXElement>,
        #[serde(default, rename = "location")]
        pub location: Option<LocationPropertyElement>,
        #[serde(rename = "domainSet")]
        pub domain_set: DomainSetXElement,
        #[serde(rename = "rangeSet")]
        pub range_set: RangeSetXElement,
        #[serde(default, rename = "coverageFunction")]
        pub coverage_function: Option<CoverageFunctionXElement>,
    }
    impl AbstractCoverageXElementTrait for DiscreteCoverageTypeXType {}
    impl AbstractDiscreteCoverageXElementTrait for DiscreteCoverageTypeXType {}
    impl AbstractFeatureXElementTrait for DiscreteCoverageTypeXType {}
    impl AbstractGmlXElementTrait for DiscreteCoverageTypeXType {}
    impl AbstractObjectXElementTrait for DiscreteCoverageTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DomainSetTypeXType {
        #[serde(default = "DomainSetTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<DomainSetTypeXTypeContent>,
    }
    impl DomainSetXElementTrait for DomainSetTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DomainSetTypeXTypeContent {
        #[serde(rename = "Content1732")]
        pub content_1732: DomainSetContent1732XType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DynamicFeatureXElement(pub Box<dyn DynamicFeatureXElementTrait>);
    pub trait DynamicFeatureXElementTrait: AbstractFeatureXElementTrait {}
    pub type DynamicFeatureCollectionXElement = DynamicFeatureCollectionTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DynamicFeatureCollectionTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "boundedBy")]
        pub bounded_by: Option<BoundedByXElement>,
        #[serde(default, rename = "location")]
        pub location: Option<LocationPropertyElement>,
        #[serde(default, rename = "validTime")]
        pub valid_time: Option<ValidTimeXElement>,
        #[serde(default, rename = "history")]
        pub history: Option<HistoryPropertyElement>,
        #[serde(default, rename = "dataSource")]
        pub data_source: Option<DataSourceXElement>,
        #[serde(default, rename = "dataSourceReference")]
        pub data_source_reference: Option<DataSourceReferenceXElement>,
        #[serde(rename = "dynamicMembers")]
        pub dynamic_members: DynamicMembersXElement,
    }
    impl AbstractFeatureXElementTrait for DynamicFeatureCollectionTypeXType {}
    impl AbstractGmlXElementTrait for DynamicFeatureCollectionTypeXType {}
    impl AbstractObjectXElementTrait for DynamicFeatureCollectionTypeXType {}
    impl DynamicFeatureXElementTrait for DynamicFeatureCollectionTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DynamicFeatureMemberTypeXType {
        #[serde(
            default = "DynamicFeatureMemberTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "DynamicFeature")]
        pub dynamic_feature: Vec<DynamicFeatureXElement>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DynamicFeatureTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "boundedBy")]
        pub bounded_by: Option<BoundedByXElement>,
        #[serde(default, rename = "location")]
        pub location: Option<LocationPropertyElement>,
        #[serde(default, rename = "validTime")]
        pub valid_time: Option<ValidTimeXElement>,
        #[serde(default, rename = "history")]
        pub history: Option<HistoryPropertyElement>,
        #[serde(default, rename = "dataSource")]
        pub data_source: Option<DataSourceXElement>,
        #[serde(default, rename = "dataSourceReference")]
        pub data_source_reference: Option<DataSourceReferenceXElement>,
    }
    impl AbstractFeatureXElementTrait for DynamicFeatureTypeXType {}
    impl AbstractGmlXElementTrait for DynamicFeatureTypeXType {}
    impl AbstractObjectXElementTrait for DynamicFeatureTypeXType {}
    impl DynamicFeatureXElementTrait for DynamicFeatureTypeXType {}
    pub type EdgeXElement = EdgeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EdgeTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "container")]
        pub container: Option<TopoSolidPropertyTypeXType>,
        #[serde(rename = "directedNode")]
        pub directed_node: [DirectedNodePropertyElement; 2usize],
        #[serde(default, rename = "directedFace")]
        pub directed_face: Vec<DirectedFacePropertyElement>,
        #[serde(default, rename = "curveProperty")]
        pub curve_property: Option<CurvePropertyXElement>,
    }
    impl AbstractGmlXElementTrait for EdgeTypeXType {}
    impl AbstractObjectXElementTrait for EdgeTypeXType {}
    impl AbstractTopoPrimitiveXElementTrait for EdgeTypeXType {}
    impl AbstractTopologyXElementTrait for EdgeTypeXType {}
    pub type EllipsoidXElement = EllipsoidTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EllipsoidPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<EllipsoidPropertyTypeXTypeContent>,
    }
    impl EllipsoidPropertyElementTrait for EllipsoidPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EllipsoidPropertyTypeXTypeContent {
        #[serde(rename = "Ellipsoid")]
        pub ellipsoid: EllipsoidXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EllipsoidTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(rename = "semiMajorAxis")]
        pub semi_major_axis: SemiMajorAxisXElement,
        #[serde(rename = "secondDefiningParameter")]
        pub second_defining_parameter: SecondDefiningParameterProperty,
    }
    impl AbstractGmlXElementTrait for EllipsoidTypeXType {}
    impl AbstractObjectXElementTrait for EllipsoidTypeXType {}
    impl DefinitionXElementTrait for EllipsoidTypeXType {}
    pub type EllipsoidalCsXElement = EllipsoidalCsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EllipsoidalCsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<EllipsoidalCsPropertyTypeXTypeContent>,
    }
    impl EllipsoidalCsPropertyElementTrait for EllipsoidalCsPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EllipsoidalCsPropertyTypeXTypeContent {
        #[serde(rename = "EllipsoidalCS")]
        pub ellipsoidal_cs: EllipsoidalCsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EllipsoidalCsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "axis")]
        pub axis: Vec<AxisXElement>,
    }
    impl AbstractCoordinateSystemXElementTrait for EllipsoidalCsTypeXType {}
    impl AbstractGmlXElementTrait for EllipsoidalCsTypeXType {}
    impl AbstractObjectXElementTrait for EllipsoidalCsTypeXType {}
    impl DefinitionXElementTrait for EllipsoidalCsTypeXType {}
    pub type EngineeringCrsXElement = EngineeringCrsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EngineeringCrsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<EngineeringCrsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EngineeringCrsPropertyTypeXTypeContent {
        #[serde(rename = "EngineeringCRS")]
        pub engineering_crs: EngineeringCrsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EngineeringCrsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Vec<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(rename = "Content1770")]
        pub content_1770: EngineeringCrsContent1770XType,
        #[serde(rename = "engineeringDatum")]
        pub engineering_datum: EngineeringDatumPropertyElement,
    }
    impl AbstractCrsXElementTrait for EngineeringCrsTypeXType {}
    impl AbstractGmlXElementTrait for EngineeringCrsTypeXType {}
    impl AbstractObjectXElementTrait for EngineeringCrsTypeXType {}
    impl AbstractSingleCrsXElementTrait for EngineeringCrsTypeXType {}
    impl DefinitionXElementTrait for EngineeringCrsTypeXType {}
    pub type EngineeringDatumXElement = EngineeringDatumTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EngineeringDatumPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<EngineeringDatumPropertyTypeXTypeContent>,
    }
    impl EngineeringDatumPropertyElementTrait for EngineeringDatumPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EngineeringDatumPropertyTypeXTypeContent {
        #[serde(rename = "EngineeringDatum")]
        pub engineering_datum: EngineeringDatumXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EngineeringDatumTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Option<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(default, rename = "anchorDefinition")]
        pub anchor_definition: Option<AnchorDefinitionXElement>,
        #[serde(default, rename = "realizationEpoch")]
        pub realization_epoch: Option<RealizationEpochXElement>,
    }
    impl AbstractDatumXElementTrait for EngineeringDatumTypeXType {}
    impl AbstractGmlXElementTrait for EngineeringDatumTypeXType {}
    impl AbstractObjectXElementTrait for EngineeringDatumTypeXType {}
    impl DefinitionXElementTrait for EngineeringDatumTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EnvelopeXElement(pub Box<dyn EnvelopeXElementTrait>);
    pub trait EnvelopeXElementTrait: AbstractObjectXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EnvelopeTypeXType {
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(rename = "$value")]
        pub content: EnvelopeTypeXTypeContent,
    }
    impl AbstractObjectXElementTrait for EnvelopeTypeXType {}
    impl EnvelopeXElementTrait for EnvelopeTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub enum EnvelopeTypeXTypeContent {
        #[serde(rename = "Content2343")]
        Content2343(EnvelopeContent2343XType),
        #[serde(rename = "pos")]
        Pos([PosXElement; 2usize]),
        #[serde(rename = "coordinates")]
        Coordinates(CoordinatesXElement),
    }
    pub type EnvelopeWithTimePeriodXElement = EnvelopeWithTimePeriodTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EnvelopeWithTimePeriodTypeXType {
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(
            default = "EnvelopeWithTimePeriodTypeXType::default_frame",
            rename = "@frame"
        )]
        pub frame: super::xs::AnyUriXType,
        #[serde(rename = "$value")]
        pub content: EnvelopeWithTimePeriodTypeXTypeContent,
    }
    impl AbstractObjectXElementTrait for EnvelopeWithTimePeriodTypeXType {}
    impl EnvelopeXElementTrait for EnvelopeWithTimePeriodTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub enum EnvelopeWithTimePeriodTypeXTypeContent {
        #[serde(rename = "Content2343")]
        Content2343(EnvelopeContent2343XType),
        #[serde(rename = "pos")]
        Pos([PosXElement; 2usize]),
        #[serde(rename = "coordinates")]
        Coordinates(CoordinatesXElement),
        #[serde(rename = "Content2345")]
        Content2345(EnvelopeWithTimePeriodContent2345XType),
    }
    pub type FaceXElement = FaceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FaceOrTopoSolidPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(
            default = "FaceOrTopoSolidPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<FaceOrTopoSolidPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum FaceOrTopoSolidPropertyTypeXTypeContent {
        #[serde(rename = "Face")]
        Face(FaceXElement),
        #[serde(rename = "TopoSolid")]
        TopoSolid(TopoSolidXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FaceTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(default = "FaceTypeXType::default_universal", rename = "@universal")]
        pub universal: super::xs::BooleanXType,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "isolated")]
        pub isolated: Vec<NodePropertyTypeXType>,
        #[serde(default, rename = "directedEdge")]
        pub directed_edge: Vec<DirectedEdgePropertyElement>,
        #[serde(default, rename = "directedTopoSolid")]
        pub directed_topo_solid: Vec<DirectedTopoSolidPropertyElement>,
        #[serde(default, rename = "surfaceProperty")]
        pub surface_property: Option<SurfacePropertyXElement>,
    }
    impl AbstractGmlXElementTrait for FaceTypeXType {}
    impl AbstractObjectXElementTrait for FaceTypeXType {}
    impl AbstractTopoPrimitiveXElementTrait for FaceTypeXType {}
    impl AbstractTopologyXElementTrait for FaceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FeatureArrayPropertyTypeXType {
        #[serde(default, rename = "$value")]
        pub content: Vec<FeatureArrayPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FeatureArrayPropertyTypeXTypeContent {
        #[serde(rename = "AbstractFeature")]
        pub abstract_feature: AbstractFeatureXElement,
    }
    pub type FeatureCollectionXElement = FeatureCollectionTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FeatureCollectionTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "boundedBy")]
        pub bounded_by: Option<BoundedByXElement>,
        #[serde(default, rename = "location")]
        pub location: Option<LocationPropertyElement>,
        #[serde(default, rename = "featureMember")]
        pub feature_member: Vec<FeatureMemberXElement>,
        #[serde(default, rename = "featureMembers")]
        pub feature_members: Option<FeatureMembersXElement>,
    }
    impl AbstractFeatureXElementTrait for FeatureCollectionTypeXType {}
    impl AbstractGmlXElementTrait for FeatureCollectionTypeXType {}
    impl AbstractObjectXElementTrait for FeatureCollectionTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FeaturePropertyTypeXType {
        #[serde(default = "FeaturePropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<FeaturePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FeaturePropertyTypeXTypeContent {
        #[serde(rename = "AbstractFeature")]
        pub abstract_feature: AbstractFeatureXElement,
    }
    pub type FileXElement = FileTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FileTypeXType {
        #[serde(rename = "rangeParameters")]
        pub range_parameters: RangeParametersXElement,
        #[serde(rename = "Content1737")]
        pub content_1737: FileContent1737XType,
        #[serde(rename = "fileStructure")]
        pub file_structure: CodeTypeXType,
        #[serde(default, rename = "mimeType")]
        pub mime_type: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "compression")]
        pub compression: Option<super::xs::AnyUriXType>,
    }
    impl AbstractObjectXElementTrait for FileTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FormulaTypeXType {
        #[serde(default, rename = "a")]
        pub a: Option<super::xs::DoubleXType>,
        #[serde(rename = "b")]
        pub b: super::xs::DoubleXType,
        #[serde(rename = "c")]
        pub c: super::xs::DoubleXType,
        #[serde(default, rename = "d")]
        pub d: Option<super::xs::DoubleXType>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeneralConversionPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<GeneralConversionPropertyTypeXTypeContent>,
    }
    impl ConversionPropertyTrait for GeneralConversionPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeneralConversionPropertyTypeXTypeContent {
        #[serde(rename = "AbstractGeneralConversion")]
        pub abstract_general_conversion: AbstractGeneralConversionXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeneralTransformationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<GeneralTransformationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeneralTransformationPropertyTypeXTypeContent {
        #[serde(rename = "AbstractGeneralTransformation")]
        pub abstract_general_transformation: AbstractGeneralTransformationXElement,
    }
    pub type GenericMetaDataXElement = GenericMetaDataTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GenericMetaDataTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
    }
    impl AbstractMetaDataXElementTrait for GenericMetaDataTypeXType {}
    impl AbstractObjectXElementTrait for GenericMetaDataTypeXType {}
    pub type GeocentricCrsXElement = GeocentricCrsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeocentricCrsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<GeocentricCrsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeocentricCrsPropertyTypeXTypeContent {
        #[serde(rename = "GeocentricCRS")]
        pub geocentric_crs: GeocentricCrsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeocentricCrsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Vec<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(rename = "Content1820")]
        pub content_1820: GeocentricCrsContent1820XType,
        #[serde(rename = "usesGeodeticDatum")]
        pub uses_geodetic_datum: UsesGeodeticDatumXElement,
    }
    impl AbstractCrsXElementTrait for GeocentricCrsTypeXType {}
    impl AbstractGmlXElementTrait for GeocentricCrsTypeXType {}
    impl AbstractObjectXElementTrait for GeocentricCrsTypeXType {}
    impl AbstractSingleCrsXElementTrait for GeocentricCrsTypeXType {}
    impl DefinitionXElementTrait for GeocentricCrsTypeXType {}
    pub type GeodesicXElement = GeodesicTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeodesicStringXElement(pub Box<dyn GeodesicStringXElementTrait>);
    pub trait GeodesicStringXElementTrait: AbstractCurveSegmentXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeodesicStringTypeXType {
        #[serde(
            default = "GeodesicStringTypeXType::default_num_derivatives_at_start",
            rename = "@numDerivativesAtStart"
        )]
        pub num_derivatives_at_start: super::xs::IntegerXType,
        #[serde(
            default = "GeodesicStringTypeXType::default_num_derivatives_at_end",
            rename = "@numDerivativesAtEnd"
        )]
        pub num_derivatives_at_end: super::xs::IntegerXType,
        #[serde(
            default = "GeodesicStringTypeXType::default_num_derivative_interior",
            rename = "@numDerivativeInterior"
        )]
        pub num_derivative_interior: super::xs::IntegerXType,
        #[serde(default, rename = "@interpolation")]
        pub interpolation: Option<CurveInterpolationTypeXType>,
        #[serde(rename = "$value")]
        pub content: GeodesicStringTypeXTypeContent,
    }
    impl AbstractCurveSegmentXElementTrait for GeodesicStringTypeXType {}
    impl AbstractObjectXElementTrait for GeodesicStringTypeXType {}
    impl GeodesicStringXElementTrait for GeodesicStringTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub enum GeodesicStringTypeXTypeContent {
        #[serde(rename = "posList")]
        PosList(PosListXElement),
        #[serde(rename = "Content2578")]
        Content2578(Vec<GeodesicStringContent2578XType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeodesicTypeXType {
        #[serde(
            default = "GeodesicTypeXType::default_num_derivatives_at_start",
            rename = "@numDerivativesAtStart"
        )]
        pub num_derivatives_at_start: super::xs::IntegerXType,
        #[serde(
            default = "GeodesicTypeXType::default_num_derivatives_at_end",
            rename = "@numDerivativesAtEnd"
        )]
        pub num_derivatives_at_end: super::xs::IntegerXType,
        #[serde(
            default = "GeodesicTypeXType::default_num_derivative_interior",
            rename = "@numDerivativeInterior"
        )]
        pub num_derivative_interior: super::xs::IntegerXType,
        #[serde(default, rename = "@interpolation")]
        pub interpolation: Option<CurveInterpolationTypeXType>,
        #[serde(rename = "$value")]
        pub content: GeodesicTypeXTypeContent,
    }
    impl AbstractCurveSegmentXElementTrait for GeodesicTypeXType {}
    impl AbstractObjectXElementTrait for GeodesicTypeXType {}
    impl GeodesicStringXElementTrait for GeodesicTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub enum GeodesicTypeXTypeContent {
        #[serde(rename = "posList")]
        PosList(PosListXElement),
        #[serde(rename = "Content2578")]
        Content2578(Vec<GeodesicStringContent2578XType>),
    }
    pub type GeodeticCrsXElement = GeodeticCrsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeodeticCrsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<GeodeticCrsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeodeticCrsPropertyTypeXTypeContent {
        #[serde(rename = "GeodeticCRS")]
        pub geodetic_crs: GeodeticCrsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeodeticCrsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Vec<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(rename = "Content1756")]
        pub content_1756: GeodeticCrsContent1756XType,
        #[serde(rename = "geodeticDatum")]
        pub geodetic_datum: GeodeticDatumPropertyElement,
    }
    impl AbstractCrsXElementTrait for GeodeticCrsTypeXType {}
    impl AbstractGmlXElementTrait for GeodeticCrsTypeXType {}
    impl AbstractObjectXElementTrait for GeodeticCrsTypeXType {}
    impl AbstractSingleCrsXElementTrait for GeodeticCrsTypeXType {}
    impl DefinitionXElementTrait for GeodeticCrsTypeXType {}
    pub type GeodeticDatumXElement = GeodeticDatumTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeodeticDatumPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<GeodeticDatumPropertyTypeXTypeContent>,
    }
    impl GeodeticDatumPropertyElementTrait for GeodeticDatumPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeodeticDatumPropertyTypeXTypeContent {
        #[serde(rename = "GeodeticDatum")]
        pub geodetic_datum: GeodeticDatumXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeodeticDatumTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Option<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(default, rename = "anchorDefinition")]
        pub anchor_definition: Option<AnchorDefinitionXElement>,
        #[serde(default, rename = "realizationEpoch")]
        pub realization_epoch: Option<RealizationEpochXElement>,
        #[serde(rename = "primeMeridian")]
        pub prime_meridian: PrimeMeridianPropertyElement,
        #[serde(rename = "ellipsoid")]
        pub ellipsoid: EllipsoidPropertyElement,
    }
    impl AbstractDatumXElementTrait for GeodeticDatumTypeXType {}
    impl AbstractGmlXElementTrait for GeodeticDatumTypeXType {}
    impl AbstractObjectXElementTrait for GeodeticDatumTypeXType {}
    impl DefinitionXElementTrait for GeodeticDatumTypeXType {}
    pub type GeographicCrsXElement = GeographicCrsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeographicCrsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<GeographicCrsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeographicCrsPropertyTypeXTypeContent {
        #[serde(rename = "GeographicCRS")]
        pub geographic_crs: GeographicCrsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeographicCrsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Vec<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(rename = "usesEllipsoidalCS")]
        pub uses_ellipsoidal_cs: UsesEllipsoidalCsXElement,
        #[serde(rename = "usesGeodeticDatum")]
        pub uses_geodetic_datum: UsesGeodeticDatumXElement,
    }
    impl AbstractCrsXElementTrait for GeographicCrsTypeXType {}
    impl AbstractGmlXElementTrait for GeographicCrsTypeXType {}
    impl AbstractObjectXElementTrait for GeographicCrsTypeXType {}
    impl AbstractSingleCrsXElementTrait for GeographicCrsTypeXType {}
    impl DefinitionXElementTrait for GeographicCrsTypeXType {}
    pub type GeometricComplexXElement = GeometricComplexTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeometricComplexPropertyTypeXType {
        #[serde(
            default = "GeometricComplexPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<GeometricComplexPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeometricComplexPropertyTypeXTypeContent {
        #[serde(rename = "Content2353")]
        pub content_2353: GeometricComplexPropertyContent2353XType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeometricComplexTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "element")]
        pub element: Vec<GeometricPrimitivePropertyTypeXType>,
    }
    impl AbstractGmlXElementTrait for GeometricComplexTypeXType {}
    impl AbstractGeometryXElementTrait for GeometricComplexTypeXType {}
    impl AbstractObjectXElementTrait for GeometricComplexTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeometricPrimitivePropertyTypeXType {
        #[serde(
            default = "GeometricPrimitivePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<GeometricPrimitivePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeometricPrimitivePropertyTypeXTypeContent {
        #[serde(rename = "AbstractGeometricPrimitive")]
        pub abstract_geometric_primitive: AbstractGeometricPrimitiveXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeometryArrayPropertyTypeXType {
        #[serde(
            default = "GeometryArrayPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Vec<GeometryArrayPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeometryArrayPropertyTypeXTypeContent {
        #[serde(rename = "AbstractGeometry")]
        pub abstract_geometry: AbstractGeometryXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeometryPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default = "GeometryPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<GeometryPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeometryPropertyTypeXTypeContent {
        #[serde(rename = "AbstractGeometry")]
        pub abstract_geometry: AbstractGeometryXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GridXElement(pub Box<dyn GridXElementTrait>);
    pub trait GridXElementTrait: AbstractImplicitGeometryXElementTrait {}
    pub type GridCoverageXElement = DiscreteCoverageTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GridEnvelopeTypeXType {
        #[serde(rename = "low")]
        pub low: IntegerListXType,
        #[serde(rename = "high")]
        pub high: IntegerListXType,
    }
    pub type GridFunctionXElement = GridFunctionTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GridFunctionTypeXType {
        #[serde(default, rename = "sequenceRule")]
        pub sequence_rule: Option<SequenceRuleTypeXType>,
        #[serde(default, rename = "startPoint")]
        pub start_point: Option<IntegerListXType>,
    }
    impl AbstractObjectXElementTrait for GridFunctionTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GridLengthTypeXType {
        #[serde(rename = "@uom")]
        pub uom: UomIdentifierXType,
        #[serde(rename = "$text")]
        pub content: super::xs::DoubleXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GridLimitsTypeXType {
        #[serde(rename = "GridEnvelope")]
        pub grid_envelope: GridEnvelopeTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GridTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(rename = "@dimension")]
        pub dimension: super::xs::PositiveIntegerXType,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "limits")]
        pub limits: GridLimitsTypeXType,
        #[serde(rename = "Content2374")]
        pub content_2374: GridContent2374XType,
    }
    impl AbstractGmlXElementTrait for GridTypeXType {}
    impl AbstractGeometryXElementTrait for GridTypeXType {}
    impl AbstractImplicitGeometryXElementTrait for GridTypeXType {}
    impl AbstractObjectXElementTrait for GridTypeXType {}
    impl GridXElementTrait for GridTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HistoryPropertyTypeXType {
        #[serde(default = "HistoryPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "AbstractTimeSlice")]
        pub abstract_time_slice: Vec<AbstractTimeSliceXElement>,
    }
    impl HistoryPropertyElementTrait for HistoryPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct IdentifiedObjectTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
    }
    pub type ImageCrsXElement = ImageCrsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ImageCrsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<ImageCrsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ImageCrsPropertyTypeXTypeContent {
        #[serde(rename = "ImageCRS")]
        pub image_crs: ImageCrsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ImageCrsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Vec<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(rename = "Content1774")]
        pub content_1774: ImageCrsContent1774XType,
        #[serde(rename = "imageDatum")]
        pub image_datum: ImageDatumPropertyElement,
    }
    impl AbstractCrsXElementTrait for ImageCrsTypeXType {}
    impl AbstractGmlXElementTrait for ImageCrsTypeXType {}
    impl AbstractObjectXElementTrait for ImageCrsTypeXType {}
    impl AbstractSingleCrsXElementTrait for ImageCrsTypeXType {}
    impl DefinitionXElementTrait for ImageCrsTypeXType {}
    pub type ImageDatumXElement = ImageDatumTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ImageDatumPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<ImageDatumPropertyTypeXTypeContent>,
    }
    impl ImageDatumPropertyElementTrait for ImageDatumPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ImageDatumPropertyTypeXTypeContent {
        #[serde(rename = "ImageDatum")]
        pub image_datum: ImageDatumXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ImageDatumTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Option<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(default, rename = "anchorDefinition")]
        pub anchor_definition: Option<AnchorDefinitionXElement>,
        #[serde(default, rename = "realizationEpoch")]
        pub realization_epoch: Option<RealizationEpochXElement>,
        #[serde(rename = "pixelInCell")]
        pub pixel_in_cell: PixelInCellXElement,
    }
    impl AbstractDatumXElementTrait for ImageDatumTypeXType {}
    impl AbstractGmlXElementTrait for ImageDatumTypeXType {}
    impl AbstractObjectXElementTrait for ImageDatumTypeXType {}
    impl DefinitionXElementTrait for ImageDatumTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub enum IncrementOrderXType {
        #[serde(rename = "+x+y")]
        PlusXPlusY,
        #[serde(rename = "+y+x")]
        PlusYPlusX,
        #[serde(rename = "+x-y")]
        PlusXMinusY,
        #[serde(rename = "-x-y")]
        MinusXMinusY,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct IndirectEntryTypeXType {
        #[serde(rename = "DefinitionProxy")]
        pub definition_proxy: DefinitionProxyXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct InlinePropertyTypeXType {
        #[serde(default = "InlinePropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct KnotPropertyTypeXType {
        #[serde(rename = "Knot")]
        pub knot: KnotTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct KnotTypeXType {
        #[serde(rename = "value")]
        pub value: super::xs::DoubleXType,
        #[serde(rename = "multiplicity")]
        pub multiplicity: super::xs::NonNegativeIntegerXType,
        #[serde(rename = "weight")]
        pub weight: super::xs::DoubleXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum KnotTypesTypeXType {
        #[serde(rename = "uniform")]
        Uniform,
        #[serde(rename = "quasiUniform")]
        QuasiUniform,
        #[serde(rename = "piecewiseBezier")]
        PiecewiseBezier,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LengthTypeXType {
        #[serde(rename = "@uom")]
        pub uom: UomIdentifierXType,
        #[serde(rename = "$text")]
        pub content: super::xs::DoubleXType,
    }
    impl super::gco::LengthXElementTrait for LengthTypeXType {}
    impl super::gco::MeasureXElementTrait for LengthTypeXType {}
    pub type LineStringXElement = LineStringTypeXType;
    pub type LineStringSegmentXElement = LineStringSegmentTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LineStringSegmentArrayPropertyTypeXType {
        #[serde(default, rename = "$value")]
        pub content: Vec<LineStringSegmentArrayPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LineStringSegmentArrayPropertyTypeXTypeContent {
        #[serde(rename = "LineStringSegment")]
        pub line_string_segment: LineStringSegmentXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LineStringSegmentTypeXType {
        #[serde(
            default = "LineStringSegmentTypeXType::default_num_derivatives_at_start",
            rename = "@numDerivativesAtStart"
        )]
        pub num_derivatives_at_start: super::xs::IntegerXType,
        #[serde(
            default = "LineStringSegmentTypeXType::default_num_derivatives_at_end",
            rename = "@numDerivativesAtEnd"
        )]
        pub num_derivatives_at_end: super::xs::IntegerXType,
        #[serde(
            default = "LineStringSegmentTypeXType::default_num_derivative_interior",
            rename = "@numDerivativeInterior"
        )]
        pub num_derivative_interior: super::xs::IntegerXType,
        #[serde(default, rename = "@interpolation")]
        pub interpolation: Option<CurveInterpolationTypeXType>,
        #[serde(rename = "Content2537")]
        pub content_2537: LineStringSegmentContent2537XType,
    }
    impl AbstractCurveSegmentXElementTrait for LineStringSegmentTypeXType {}
    impl AbstractObjectXElementTrait for LineStringSegmentTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LineStringTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "Content2531")]
        pub content_2531: LineStringContent2531XType,
    }
    impl AbstractCurveXElementTrait for LineStringTypeXType {}
    impl AbstractGmlXElementTrait for LineStringTypeXType {}
    impl AbstractGeometricPrimitiveXElementTrait for LineStringTypeXType {}
    impl AbstractGeometryXElementTrait for LineStringTypeXType {}
    impl AbstractObjectXElementTrait for LineStringTypeXType {}
    pub type LinearCsXElement = LinearCsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LinearCsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<LinearCsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LinearCsPropertyTypeXTypeContent {
        #[serde(rename = "LinearCS")]
        pub linear_cs: LinearCsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LinearCsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "axis")]
        pub axis: Vec<AxisXElement>,
    }
    impl AbstractCoordinateSystemXElementTrait for LinearCsTypeXType {}
    impl AbstractGmlXElementTrait for LinearCsTypeXType {}
    impl AbstractObjectXElementTrait for LinearCsTypeXType {}
    impl DefinitionXElementTrait for LinearCsTypeXType {}
    pub type LinearRingXElement = LinearRingTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LinearRingPropertyTypeXType {
        #[serde(rename = "LinearRing")]
        pub linear_ring: LinearRingXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LinearRingTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "Content2642")]
        pub content_2642: LinearRingContent2642XType,
    }
    impl AbstractCurveXElementTrait for LinearRingTypeXType {}
    impl AbstractGmlXElementTrait for LinearRingTypeXType {}
    impl AbstractGeometricPrimitiveXElementTrait for LinearRingTypeXType {}
    impl AbstractGeometryXElementTrait for LinearRingTypeXType {}
    impl AbstractObjectXElementTrait for LinearRingTypeXType {}
    impl AbstractRingXElementTrait for LinearRingTypeXType {}
    pub type LocationKeyWordXElement = CodeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LocationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(rename = "Content1835")]
        pub content_1835: LocationPropertyContent1835XType,
    }
    impl LocationPropertyElementTrait for LocationPropertyTypeXType {}
    pub type LocationStringXElement = StringOrRefTypeXType;
    pub type MappingRuleXElement = StringOrRefTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum MappingRuleTypeXType {
        #[serde(rename = "ruleDefinition")]
        RuleDefinition(super::xs::StringXType),
        #[serde(rename = "ruleReference")]
        RuleReference(ReferenceTypeXType),
    }
    impl AbstractObjectXElementTrait for MappingRuleTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MeasureListTypeXType {
        #[serde(rename = "@uom")]
        pub uom: UomIdentifierXType,
        #[serde(rename = "$text")]
        pub content: DoubleListXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MeasureOrNilReasonListTypeXType {
        #[serde(rename = "@uom")]
        pub uom: UomIdentifierXType,
        #[serde(rename = "$text")]
        pub content: DoubleOrNilReasonListXType,
    }
    impl AbstractObjectXElementTrait for MeasureOrNilReasonListTypeXType {}
    impl AbstractScalarValueListXElementTrait for MeasureOrNilReasonListTypeXType {}
    impl AbstractValueXElementTrait for MeasureOrNilReasonListTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MeasureTypeXType {
        #[serde(rename = "@uom")]
        pub uom: UomIdentifierXType,
        #[serde(rename = "$text")]
        pub content: super::xs::DoubleXType,
    }
    impl super::gco::MeasureXElementTrait for MeasureTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MetaDataPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "@about")]
        pub about: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "$value")]
        pub content: Option<MetaDataPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MetaDataPropertyTypeXTypeContent {
        #[serde(rename = "AbstractMetaData")]
        pub abstract_meta_data: AbstractMetaDataXElement,
    }
    pub type MovingObjectStatusXElement = MovingObjectStatusTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MovingObjectStatusTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "validTime")]
        pub valid_time: ValidTimeXElement,
        #[serde(default, rename = "dataSource")]
        pub data_source: Option<DataSourceXElement>,
        #[serde(rename = "Content1849")]
        pub content_1849: MovingObjectStatusContent1849XType,
        #[serde(default, rename = "speed")]
        pub speed: Option<MeasureTypeXType>,
        #[serde(default, rename = "bearing")]
        pub bearing: Option<DirectionPropertyTypeXType>,
        #[serde(default, rename = "acceleration")]
        pub acceleration: Option<MeasureTypeXType>,
        #[serde(default, rename = "elevation")]
        pub elevation: Option<MeasureTypeXType>,
        #[serde(default, rename = "status")]
        pub status: Option<StatusXElement>,
        #[serde(default, rename = "statusReference")]
        pub status_reference: Option<StatusReferenceXElement>,
    }
    impl AbstractGmlXElementTrait for MovingObjectStatusTypeXType {}
    impl AbstractObjectXElementTrait for MovingObjectStatusTypeXType {}
    impl AbstractTimeSliceXElementTrait for MovingObjectStatusTypeXType {}
    pub type MultiCurveXElement = MultiCurveTypeXType;
    pub type MultiCurveCoverageXElement = DiscreteCoverageTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiCurvePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(
            default = "MultiCurvePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<MultiCurvePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiCurvePropertyTypeXTypeContent {
        #[serde(rename = "MultiCurve")]
        pub multi_curve: MultiCurveXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiCurveTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "curveMember")]
        pub curve_member: Vec<CurveMemberXElement>,
        #[serde(default, rename = "curveMembers")]
        pub curve_members: Option<CurveMembersXElement>,
    }
    impl AbstractGmlXElementTrait for MultiCurveTypeXType {}
    impl AbstractGeometricAggregateXElementTrait for MultiCurveTypeXType {}
    impl AbstractGeometryXElementTrait for MultiCurveTypeXType {}
    impl AbstractObjectXElementTrait for MultiCurveTypeXType {}
    pub type MultiGeometryXElement = MultiGeometryTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiGeometryPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(
            default = "MultiGeometryPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<MultiGeometryPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiGeometryPropertyTypeXTypeContent {
        #[serde(rename = "AbstractGeometricAggregate")]
        pub abstract_geometric_aggregate: AbstractGeometricAggregateXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiGeometryTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "geometryMember")]
        pub geometry_member: Vec<GeometryMemberXElement>,
        #[serde(default, rename = "geometryMembers")]
        pub geometry_members: Option<GeometryMembersXElement>,
    }
    impl AbstractGmlXElementTrait for MultiGeometryTypeXType {}
    impl AbstractGeometricAggregateXElementTrait for MultiGeometryTypeXType {}
    impl AbstractGeometryXElementTrait for MultiGeometryTypeXType {}
    impl AbstractObjectXElementTrait for MultiGeometryTypeXType {}
    pub type MultiPointXElement = MultiPointTypeXType;
    pub type MultiPointCoverageXElement = DiscreteCoverageTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiPointPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(
            default = "MultiPointPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<MultiPointPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiPointPropertyTypeXTypeContent {
        #[serde(rename = "MultiPoint")]
        pub multi_point: MultiPointXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiPointTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "pointMember")]
        pub point_member: Vec<PointMemberXElement>,
        #[serde(default, rename = "pointMembers")]
        pub point_members: Option<PointMembersXElement>,
    }
    impl AbstractGmlXElementTrait for MultiPointTypeXType {}
    impl AbstractGeometricAggregateXElementTrait for MultiPointTypeXType {}
    impl AbstractGeometryXElementTrait for MultiPointTypeXType {}
    impl AbstractObjectXElementTrait for MultiPointTypeXType {}
    pub type MultiSolidXElement = MultiSolidTypeXType;
    pub type MultiSolidCoverageXElement = DiscreteCoverageTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiSolidPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(
            default = "MultiSolidPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<MultiSolidPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiSolidPropertyTypeXTypeContent {
        #[serde(rename = "MultiSolid")]
        pub multi_solid: MultiSolidXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiSolidTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "solidMember")]
        pub solid_member: Vec<SolidMemberXElement>,
        #[serde(default, rename = "solidMembers")]
        pub solid_members: Option<SolidMembersXElement>,
    }
    impl AbstractGmlXElementTrait for MultiSolidTypeXType {}
    impl AbstractGeometricAggregateXElementTrait for MultiSolidTypeXType {}
    impl AbstractGeometryXElementTrait for MultiSolidTypeXType {}
    impl AbstractObjectXElementTrait for MultiSolidTypeXType {}
    pub type MultiSurfaceXElement = MultiSurfaceTypeXType;
    pub type MultiSurfaceCoverageXElement = DiscreteCoverageTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiSurfacePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(
            default = "MultiSurfacePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<MultiSurfacePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiSurfacePropertyTypeXTypeContent {
        #[serde(rename = "MultiSurface")]
        pub multi_surface: MultiSurfaceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MultiSurfaceTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "surfaceMember")]
        pub surface_member: Vec<SurfaceMemberXElement>,
        #[serde(default, rename = "surfaceMembers")]
        pub surface_members: Option<SurfaceMembersXElement>,
    }
    impl AbstractGmlXElementTrait for MultiSurfaceTypeXType {}
    impl AbstractGeometricAggregateXElementTrait for MultiSurfaceTypeXType {}
    impl AbstractGeometryXElementTrait for MultiSurfaceTypeXType {}
    impl AbstractObjectXElementTrait for MultiSurfaceTypeXType {}
    #[derive(Debug, Serialize, Deserialize, Default)]
    pub struct NcNameListXType(pub Vec<super::xs::NcNameXType>);
    #[derive(Debug, Serialize, Deserialize, Default)]
    pub struct NameListXType(pub Vec<super::xs::NameXType>);
    #[derive(Debug, Serialize, Deserialize)]
    pub enum NameOrNilReasonXType {
        NilReasonEnumeration(NilReasonEnumerationXType),
        Name(super::xs::NameXType),
        AnyUri(super::xs::AnyUriXType),
    }
    #[derive(Debug, Serialize, Deserialize, Default)]
    pub struct NameOrNilReasonListXType(pub Vec<NameOrNilReasonXType>);
    #[derive(Debug, Serialize, Deserialize)]
    pub enum NilReasonEnumerationXType {
        NilReasonEnumeration2657(NilReasonEnumeration2657XType),
        NilReasonEnumeration2658(NilReasonEnumeration2658XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum NilReasonEnumeration2657XType {
        #[serde(rename = "inapplicable")]
        Inapplicable,
        #[serde(rename = "missing")]
        Missing,
        #[serde(rename = "template")]
        Template,
        #[serde(rename = "unknown")]
        Unknown,
        #[serde(rename = "withheld")]
        Withheld,
    }
    pub type NilReasonEnumeration2658XType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum NilReasonTypeXType {
        NilReasonEnumeration(NilReasonEnumerationXType),
        AnyUri(super::xs::AnyUriXType),
    }
    pub type NodeXElement = NodeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NodeOrEdgePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(
            default = "NodeOrEdgePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<NodeOrEdgePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum NodeOrEdgePropertyTypeXTypeContent {
        #[serde(rename = "Node")]
        Node(NodeXElement),
        #[serde(rename = "Edge")]
        Edge(EdgeXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NodePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default = "NodePropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<NodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum NodePropertyTypeXTypeContent {
        #[serde(rename = "Node")]
        Node(NodeXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct NodeTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "container")]
        pub container: Option<FaceOrTopoSolidPropertyTypeXType>,
        #[serde(default, rename = "directedEdge")]
        pub directed_edge: Vec<DirectedEdgePropertyElement>,
        #[serde(default, rename = "pointProperty")]
        pub point_property: Option<PointPropertyXElement>,
    }
    impl AbstractGmlXElementTrait for NodeTypeXType {}
    impl AbstractObjectXElementTrait for NodeTypeXType {}
    impl AbstractTopoPrimitiveXElementTrait for NodeTypeXType {}
    impl AbstractTopologyXElementTrait for NodeTypeXType {}
    pub type NullXElement = NilReasonTypeXType;
    pub type ObliqueCartesianCsXElement = ObliqueCartesianCsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObliqueCartesianCsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<ObliqueCartesianCsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObliqueCartesianCsPropertyTypeXTypeContent {
        #[serde(rename = "ObliqueCartesianCS")]
        pub oblique_cartesian_cs: ObliqueCartesianCsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObliqueCartesianCsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "axis")]
        pub axis: Vec<AxisXElement>,
    }
    impl AbstractCoordinateSystemXElementTrait for ObliqueCartesianCsTypeXType {}
    impl AbstractGmlXElementTrait for ObliqueCartesianCsTypeXType {}
    impl AbstractObjectXElementTrait for ObliqueCartesianCsTypeXType {}
    impl DefinitionXElementTrait for ObliqueCartesianCsTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObservationXElement(pub Box<dyn ObservationXElementTrait>);
    pub trait ObservationXElementTrait: AbstractFeatureXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ObservationTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "boundedBy")]
        pub bounded_by: Option<BoundedByXElement>,
        #[serde(default, rename = "location")]
        pub location: Option<LocationPropertyElement>,
        #[serde(rename = "validTime")]
        pub valid_time: ValidTimeXElement,
        #[serde(default, rename = "using")]
        pub using: Option<UsingXElement>,
        #[serde(default, rename = "target")]
        pub target: Option<TargetPropertyElement>,
        #[serde(rename = "resultOf")]
        pub result_of: ResultOfXElement,
    }
    impl AbstractFeatureXElementTrait for ObservationTypeXType {}
    impl AbstractGmlXElementTrait for ObservationTypeXType {}
    impl AbstractObjectXElementTrait for ObservationTypeXType {}
    impl ObservationXElementTrait for ObservationTypeXType {}
    pub type OffsetCurveXElement = OffsetCurveTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OffsetCurveTypeXType {
        #[serde(
            default = "OffsetCurveTypeXType::default_num_derivatives_at_start",
            rename = "@numDerivativesAtStart"
        )]
        pub num_derivatives_at_start: super::xs::IntegerXType,
        #[serde(
            default = "OffsetCurveTypeXType::default_num_derivatives_at_end",
            rename = "@numDerivativesAtEnd"
        )]
        pub num_derivatives_at_end: super::xs::IntegerXType,
        #[serde(
            default = "OffsetCurveTypeXType::default_num_derivative_interior",
            rename = "@numDerivativeInterior"
        )]
        pub num_derivative_interior: super::xs::IntegerXType,
        #[serde(rename = "offsetBase")]
        pub offset_base: CurvePropertyTypeXType,
        #[serde(rename = "distance")]
        pub distance: LengthTypeXType,
        #[serde(default, rename = "refDirection")]
        pub ref_direction: Option<VectorTypeXType>,
    }
    impl AbstractCurveSegmentXElementTrait for OffsetCurveTypeXType {}
    impl AbstractObjectXElementTrait for OffsetCurveTypeXType {}
    pub type OperationMethodXElement = OperationMethodTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OperationMethodPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<OperationMethodPropertyTypeXTypeContent>,
    }
    impl MethodXElementTrait for OperationMethodPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OperationMethodPropertyTypeXTypeContent {
        #[serde(rename = "OperationMethod")]
        pub operation_method: OperationMethodXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OperationMethodTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(rename = "Content2475")]
        pub content_2475: OperationMethodContent2475XType,
        #[serde(default, rename = "sourceDimensions")]
        pub source_dimensions: Option<SourceDimensionsXElement>,
        #[serde(default, rename = "targetDimensions")]
        pub target_dimensions: Option<TargetDimensionsXElement>,
        #[serde(default, rename = "parameter")]
        pub parameter: Vec<ParameterXElement>,
    }
    impl AbstractGmlXElementTrait for OperationMethodTypeXType {}
    impl AbstractObjectXElementTrait for OperationMethodTypeXType {}
    impl DefinitionXElementTrait for OperationMethodTypeXType {}
    pub type OperationParameterXElement = OperationParameterTypeXType;
    pub type OperationParameterGroupXElement = OperationParameterGroupTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OperationParameterGroupPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<OperationParameterGroupPropertyTypeXTypeContent>,
    }
    impl GroupXElementTrait for OperationParameterGroupPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OperationParameterGroupPropertyTypeXTypeContent {
        #[serde(rename = "OperationParameterGroup")]
        pub operation_parameter_group: OperationParameterGroupXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OperationParameterGroupTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "minimumOccurs")]
        pub minimum_occurs: Option<MinimumOccursXElement>,
        #[serde(default, rename = "maximumOccurs")]
        pub maximum_occurs: Option<MaximumOccursXElement>,
        #[serde(default, rename = "parameter")]
        pub parameter: Vec<ParameterXElement>,
    }
    impl AbstractGmlXElementTrait for OperationParameterGroupTypeXType {}
    impl AbstractGeneralOperationParameterXElementTrait for OperationParameterGroupTypeXType {}
    impl AbstractObjectXElementTrait for OperationParameterGroupTypeXType {}
    impl DefinitionXElementTrait for OperationParameterGroupTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OperationParameterPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<OperationParameterPropertyTypeXTypeContent>,
    }
    impl OperationParameterPropertyElementTrait for OperationParameterPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OperationParameterPropertyTypeXTypeContent {
        #[serde(rename = "OperationParameter")]
        pub operation_parameter: OperationParameterXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OperationParameterTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "minimumOccurs")]
        pub minimum_occurs: Option<MinimumOccursXElement>,
    }
    impl AbstractGmlXElementTrait for OperationParameterTypeXType {}
    impl AbstractGeneralOperationParameterXElementTrait for OperationParameterTypeXType {}
    impl AbstractObjectXElementTrait for OperationParameterTypeXType {}
    impl DefinitionXElementTrait for OperationParameterTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OperationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<OperationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OperationPropertyTypeXTypeContent {
        #[serde(rename = "AbstractOperation")]
        pub abstract_operation: AbstractOperationXElement,
    }
    pub type OrientableCurveXElement = OrientableCurveTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OrientableCurveTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(
            default = "OrientableCurveTypeXType::default_orientation",
            rename = "@orientation"
        )]
        pub orientation: SignTypeXType,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "baseCurve")]
        pub base_curve: BaseCurveXElement,
    }
    impl AbstractCurveXElementTrait for OrientableCurveTypeXType {}
    impl AbstractGmlXElementTrait for OrientableCurveTypeXType {}
    impl AbstractGeometricPrimitiveXElementTrait for OrientableCurveTypeXType {}
    impl AbstractGeometryXElementTrait for OrientableCurveTypeXType {}
    impl AbstractObjectXElementTrait for OrientableCurveTypeXType {}
    pub type OrientableSurfaceXElement = OrientableSurfaceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OrientableSurfaceTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(
            default = "OrientableSurfaceTypeXType::default_orientation",
            rename = "@orientation"
        )]
        pub orientation: SignTypeXType,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "baseSurface")]
        pub base_surface: BaseSurfaceXElement,
    }
    impl AbstractGmlXElementTrait for OrientableSurfaceTypeXType {}
    impl AbstractGeometricPrimitiveXElementTrait for OrientableSurfaceTypeXType {}
    impl AbstractGeometryXElementTrait for OrientableSurfaceTypeXType {}
    impl AbstractObjectXElementTrait for OrientableSurfaceTypeXType {}
    impl AbstractSurfaceXElementTrait for OrientableSurfaceTypeXType {}
    pub type ParameterValueXElement = ParameterValueTypeXType;
    pub type ParameterValueGroupXElement = ParameterValueGroupTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ParameterValueGroupTypeXType {
        #[serde(default, rename = "parameterValue")]
        pub parameter_value: Vec<ParameterValueProperty>,
        #[serde(rename = "group")]
        pub group: GroupXElement,
    }
    impl AbstractGeneralParameterValueXElementTrait for ParameterValueGroupTypeXType {}
    impl AbstractObjectXElementTrait for ParameterValueGroupTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ParameterValueTypeXType {
        #[serde(rename = "Content2471")]
        pub content_2471: ParameterValueContent2471XType,
        #[serde(rename = "operationParameter")]
        pub operation_parameter: OperationParameterPropertyElement,
    }
    impl AbstractGeneralParameterValueXElementTrait for ParameterValueTypeXType {}
    impl AbstractObjectXElementTrait for ParameterValueTypeXType {}
    pub type PassThroughOperationXElement = PassThroughOperationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PassThroughOperationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<PassThroughOperationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PassThroughOperationPropertyTypeXTypeContent {
        #[serde(rename = "PassThroughOperation")]
        pub pass_through_operation: PassThroughOperationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PassThroughOperationTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Option<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(default, rename = "operationVersion")]
        pub operation_version: Option<OperationVersionXElement>,
        #[serde(default, rename = "coordinateOperationAccuracy")]
        pub coordinate_operation_accuracy: Vec<CoordinateOperationAccuracyXElement>,
        #[serde(default, rename = "sourceCRS")]
        pub source_crs: Option<SourceCrsXElement>,
        #[serde(default, rename = "targetCRS")]
        pub target_crs: Option<TargetCrsXElement>,
        #[serde(default, rename = "modifiedCoordinate")]
        pub modified_coordinate: Vec<ModifiedCoordinateXElement>,
        #[serde(rename = "coordOperation")]
        pub coord_operation: CoordOperationXElement,
    }
    impl AbstractCoordinateOperationXElementTrait for PassThroughOperationTypeXType {}
    impl AbstractGmlXElementTrait for PassThroughOperationTypeXType {}
    impl AbstractObjectXElementTrait for PassThroughOperationTypeXType {}
    impl AbstractSingleOperationXElementTrait for PassThroughOperationTypeXType {}
    impl DefinitionXElementTrait for PassThroughOperationTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PointXElement(pub Box<dyn PointXElementTrait>);
    pub trait PointXElementTrait: AbstractGeometricPrimitiveXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PointArrayPropertyTypeXType {
        #[serde(
            default = "PointArrayPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Vec<PointArrayPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PointArrayPropertyTypeXTypeContent {
        #[serde(rename = "Point")]
        pub point: PointXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PointPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default = "PointPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<PointPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PointPropertyTypeXTypeContent {
        #[serde(rename = "Point")]
        pub point: PointXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PointTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "Content658")]
        pub content_658: PointContent658XType,
    }
    impl AbstractGmlXElementTrait for PointTypeXType {}
    impl AbstractGeometricPrimitiveXElementTrait for PointTypeXType {}
    impl AbstractGeometryXElementTrait for PointTypeXType {}
    impl AbstractObjectXElementTrait for PointTypeXType {}
    impl PointXElementTrait for PointTypeXType {}
    pub type PolarCsXElement = PolarCsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PolarCsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<PolarCsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PolarCsPropertyTypeXTypeContent {
        #[serde(rename = "PolarCS")]
        pub polar_cs: PolarCsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PolarCsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "axis")]
        pub axis: Vec<AxisXElement>,
    }
    impl AbstractCoordinateSystemXElementTrait for PolarCsTypeXType {}
    impl AbstractGmlXElementTrait for PolarCsTypeXType {}
    impl AbstractObjectXElementTrait for PolarCsTypeXType {}
    impl DefinitionXElementTrait for PolarCsTypeXType {}
    pub type PolygonXElement = PolygonTypeXType;
    pub type PolygonPatchXElement = PolygonPatchTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PolygonPatchTypeXType {
        #[serde(default, rename = "@interpolation")]
        pub interpolation: Option<SurfaceInterpolationTypeXType>,
        #[serde(default, rename = "exterior")]
        pub exterior: Option<ExteriorXElement>,
        #[serde(default, rename = "interior")]
        pub interior: Vec<InteriorXElement>,
    }
    impl AbstractSurfacePatchXElementTrait for PolygonPatchTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PolygonTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "exterior")]
        pub exterior: Option<ExteriorXElement>,
        #[serde(default, rename = "interior")]
        pub interior: Vec<InteriorXElement>,
    }
    impl AbstractGmlXElementTrait for PolygonTypeXType {}
    impl AbstractGeometricPrimitiveXElementTrait for PolygonTypeXType {}
    impl AbstractGeometryXElementTrait for PolygonTypeXType {}
    impl AbstractObjectXElementTrait for PolygonTypeXType {}
    impl AbstractSurfaceXElementTrait for PolygonTypeXType {}
    pub type PolyhedralSurfaceXElement = SurfaceTypeXType;
    pub type PrimeMeridianXElement = PrimeMeridianTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrimeMeridianPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<PrimeMeridianPropertyTypeXTypeContent>,
    }
    impl PrimeMeridianPropertyElementTrait for PrimeMeridianPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrimeMeridianPropertyTypeXTypeContent {
        #[serde(rename = "PrimeMeridian")]
        pub prime_meridian: PrimeMeridianXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrimeMeridianTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(rename = "greenwichLongitude")]
        pub greenwich_longitude: GreenwichLongitudeXElement,
    }
    impl AbstractGmlXElementTrait for PrimeMeridianTypeXType {}
    impl AbstractObjectXElementTrait for PrimeMeridianTypeXType {}
    impl DefinitionXElementTrait for PrimeMeridianTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PriorityLocationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "@priority")]
        pub priority: Option<super::xs::StringXType>,
        #[serde(rename = "Content1835")]
        pub content_1835: LocationPropertyContent1835XType,
    }
    impl LocationPropertyElementTrait for PriorityLocationPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedurePropertyTypeXType {
        #[serde(default = "ProcedurePropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<ProcedurePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProcedurePropertyTypeXTypeContent {
        #[serde(rename = "AbstractFeature")]
        pub abstract_feature: AbstractFeatureXElement,
    }
    pub type ProjectedCrsXElement = ProjectedCrsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProjectedCrsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<ProjectedCrsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProjectedCrsPropertyTypeXTypeContent {
        #[serde(rename = "ProjectedCRS")]
        pub projected_crs: ProjectedCrsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ProjectedCrsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Vec<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(rename = "conversion")]
        pub conversion: ConversionProperty,
        #[serde(rename = "Content1763")]
        pub content_1763: ProjectedCrsContent1763XType,
        #[serde(rename = "cartesianCS")]
        pub cartesian_cs: CartesianCsPropertyElement,
    }
    impl AbstractCrsXElementTrait for ProjectedCrsTypeXType {}
    impl AbstractGmlXElementTrait for ProjectedCrsTypeXType {}
    impl AbstractGeneralDerivedCrsXElementTrait for ProjectedCrsTypeXType {}
    impl AbstractObjectXElementTrait for ProjectedCrsTypeXType {}
    impl AbstractSingleCrsXElementTrait for ProjectedCrsTypeXType {}
    impl DefinitionXElementTrait for ProjectedCrsTypeXType {}
    #[derive(Debug, Serialize, Deserialize, Default)]
    pub struct QNameListXType(pub Vec<super::xs::QNameXType>);
    pub type QuantityXElement = QuantityXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct QuantityXElementType {
        #[serde(rename = "@uom")]
        pub uom: UomIdentifierXType,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(rename = "$text")]
        pub content: super::xs::DoubleXType,
    }
    impl AbstractObjectXElementTrait for QuantityXElementType {}
    impl AbstractScalarValueXElementTrait for QuantityXElementType {}
    impl AbstractValueXElementTrait for QuantityXElementType {}
    pub type QuantityExtentXElement = QuantityExtentTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct QuantityExtentTypeXType {
        #[serde(rename = "@uom")]
        pub uom: UomIdentifierXType,
        #[serde(rename = "$text")]
        pub content: DoubleOrNilReasonListXType,
    }
    impl AbstractObjectXElementTrait for QuantityExtentTypeXType {}
    impl AbstractValueXElementTrait for QuantityExtentTypeXType {}
    pub type QuantityListXElement = MeasureOrNilReasonListTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct QuantityPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<QuantityPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct QuantityPropertyTypeXTypeContent {
        #[serde(rename = "Quantity")]
        pub quantity: QuantityXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RangeSetTypeXType {
        #[serde(rename = "ValueArray")]
        ValueArray(Vec<ValueArrayXElement>),
        #[serde(rename = "AbstractScalarValueList")]
        AbstractScalarValueList(Vec<AbstractScalarValueListXElement>),
        #[serde(rename = "DataBlock")]
        DataBlock(DataBlockXElement),
        #[serde(rename = "File")]
        File(FileXElement),
    }
    pub type RectangleXElement = RectangleTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RectangleTypeXType {
        #[serde(default, rename = "@interpolation")]
        pub interpolation: Option<SurfaceInterpolationTypeXType>,
        #[serde(rename = "exterior")]
        pub exterior: ExteriorXElement,
    }
    impl AbstractSurfacePatchXElementTrait for RectangleTypeXType {}
    pub type RectifiedGridXElement = RectifiedGridTypeXType;
    pub type RectifiedGridCoverageXElement = DiscreteCoverageTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RectifiedGridTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(rename = "@dimension")]
        pub dimension: super::xs::PositiveIntegerXType,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "limits")]
        pub limits: GridLimitsTypeXType,
        #[serde(rename = "Content2374")]
        pub content_2374: GridContent2374XType,
        #[serde(rename = "origin")]
        pub origin: PointPropertyTypeXType,
        #[serde(default, rename = "offsetVector")]
        pub offset_vector: Vec<VectorTypeXType>,
    }
    impl AbstractGmlXElementTrait for RectifiedGridTypeXType {}
    impl AbstractGeometryXElementTrait for RectifiedGridTypeXType {}
    impl AbstractImplicitGeometryXElementTrait for RectifiedGridTypeXType {}
    impl AbstractObjectXElementTrait for RectifiedGridTypeXType {}
    impl GridXElementTrait for RectifiedGridTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ReferenceTypeXType {
        #[serde(default = "ReferenceTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RelatedTimeTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default = "RelatedTimeTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@relativePosition")]
        pub relative_position: Option<RelatedTimeTyperelativePositionXType>,
        #[serde(default, rename = "$value")]
        pub content: Option<RelatedTimeTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RelatedTimeTypeXTypeContent {
        #[serde(rename = "AbstractTimePrimitive")]
        pub abstract_time_primitive: AbstractTimePrimitiveXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RelatedTimeTyperelativePositionXType {
        #[serde(rename = "Before")]
        Before,
        #[serde(rename = "After")]
        After,
        #[serde(rename = "Begins")]
        Begins,
        #[serde(rename = "Ends")]
        Ends,
        #[serde(rename = "During")]
        During,
        #[serde(rename = "Equals")]
        Equals,
        #[serde(rename = "Contains")]
        Contains,
        #[serde(rename = "Overlaps")]
        Overlaps,
        #[serde(rename = "Meets")]
        Meets,
        #[serde(rename = "OverlappedBy")]
        OverlappedBy,
        #[serde(rename = "MetBy")]
        MetBy,
        #[serde(rename = "BegunBy")]
        BegunBy,
        #[serde(rename = "EndedBy")]
        EndedBy,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ResultTypeXType {
        #[serde(default = "ResultTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
    }
    pub type RingXElement = RingTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RingPropertyTypeXType {
        #[serde(rename = "Ring")]
        pub ring: RingXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RingTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "curveMember")]
        pub curve_member: Vec<CurveMemberXElement>,
    }
    impl AbstractCurveXElementTrait for RingTypeXType {}
    impl AbstractGmlXElementTrait for RingTypeXType {}
    impl AbstractGeometricPrimitiveXElementTrait for RingTypeXType {}
    impl AbstractGeometryXElementTrait for RingTypeXType {}
    impl AbstractObjectXElementTrait for RingTypeXType {}
    impl AbstractRingXElementTrait for RingTypeXType {}
    pub type RowsXElement = RowsXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct RowsXElementType {
        #[serde(default, rename = "Row")]
        pub row: Vec<RowsRowXElement>,
    }
    pub type RowsRowXElement = RowsRowXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RowsRowXElementType {
        #[serde(rename = "posList")]
        PosList(PosListXElement),
        #[serde(rename = "Content2595")]
        Content2595(Vec<RowsRowContent2595XType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ScaleTypeXType {
        #[serde(rename = "@uom")]
        pub uom: UomIdentifierXType,
        #[serde(rename = "$text")]
        pub content: super::xs::DoubleXType,
    }
    impl super::gco::MeasureXElementTrait for ScaleTypeXType {}
    pub type SecondDefiningParameterXElement = SecondDefiningParameterXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum SecondDefiningParameterXElementType {
        #[serde(rename = "inverseFlattening")]
        InverseFlattening(MeasureTypeXType),
        #[serde(rename = "semiMinorAxis")]
        SemiMinorAxis(LengthTypeXType),
        #[serde(rename = "isSphere")]
        IsSphere(super::xs::BooleanXType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum SequenceRuleEnumerationXType {
        #[serde(rename = "Linear")]
        Linear,
        #[serde(rename = "Boustrophedonic")]
        Boustrophedonic,
        #[serde(rename = "Cantor-diagonal")]
        CantorDiagonal,
        #[serde(rename = "Spiral")]
        Spiral,
        #[serde(rename = "Morton")]
        Morton,
        #[serde(rename = "Hilbert")]
        Hilbert,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SequenceRuleTypeXType {
        #[serde(default, rename = "@order")]
        pub order: Option<IncrementOrderXType>,
        #[serde(default, rename = "@axisOrder")]
        pub axis_order: Option<AxisDirectionListXType>,
        #[serde(rename = "$text")]
        pub content: SequenceRuleEnumerationXType,
    }
    pub type ShellXElement = ShellTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ShellPropertyTypeXType {
        #[serde(rename = "Shell")]
        pub shell: ShellXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ShellTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "surfaceMember")]
        pub surface_member: Vec<SurfaceMemberXElement>,
    }
    impl AbstractGmlXElementTrait for ShellTypeXType {}
    impl AbstractGeometricPrimitiveXElementTrait for ShellTypeXType {}
    impl AbstractGeometryXElementTrait for ShellTypeXType {}
    impl AbstractObjectXElementTrait for ShellTypeXType {}
    impl AbstractSurfaceXElementTrait for ShellTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub enum SignTypeXType {
        #[serde(rename = "-")]
        Minus,
        #[serde(rename = "+")]
        Plus,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SingleCrsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<SingleCrsPropertyTypeXTypeContent>,
    }
    impl ComponentReferenceSystemXElementTrait for SingleCrsPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SingleCrsPropertyTypeXTypeContent {
        #[serde(rename = "AbstractSingleCRS")]
        pub abstract_single_crs: AbstractSingleCrsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SingleOperationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<SingleOperationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SingleOperationPropertyTypeXTypeContent {
        #[serde(rename = "AbstractSingleOperation")]
        pub abstract_single_operation: AbstractSingleOperationXElement,
    }
    pub type SolidXElement = SolidTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SolidArrayPropertyTypeXType {
        #[serde(
            default = "SolidArrayPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Vec<SolidArrayPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SolidArrayPropertyTypeXTypeContent {
        #[serde(rename = "AbstractSolid")]
        pub abstract_solid: AbstractSolidXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SolidPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default = "SolidPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<SolidPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SolidPropertyTypeXTypeContent {
        #[serde(rename = "AbstractSolid")]
        pub abstract_solid: AbstractSolidXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SolidTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "exterior")]
        pub exterior: Option<ShellPropertyTypeXType>,
        #[serde(default, rename = "interior")]
        pub interior: Vec<ShellPropertyTypeXType>,
    }
    impl AbstractGmlXElementTrait for SolidTypeXType {}
    impl AbstractGeometricPrimitiveXElementTrait for SolidTypeXType {}
    impl AbstractGeometryXElementTrait for SolidTypeXType {}
    impl AbstractObjectXElementTrait for SolidTypeXType {}
    impl AbstractSolidXElementTrait for SolidTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SpeedTypeXType {
        #[serde(rename = "@uom")]
        pub uom: UomIdentifierXType,
        #[serde(rename = "$text")]
        pub content: super::xs::DoubleXType,
    }
    pub type SphereXElement = SphereTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SphereTypeXType {
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(default, rename = "@rows")]
        pub rows: Option<super::xs::IntegerXType>,
        #[serde(default, rename = "@columns")]
        pub columns: Option<super::xs::IntegerXType>,
        #[serde(default, rename = "@horizontalCurveType")]
        pub horizontal_curve_type: Option<CurveInterpolationTypeXType>,
        #[serde(default, rename = "@verticalCurveType")]
        pub vertical_curve_type: Option<CurveInterpolationTypeXType>,
        #[serde(rename = "Content2592")]
        pub content_2592: AbstractGriddedSurfaceContent2592XType,
    }
    impl AbstractGriddedSurfaceXElementTrait for SphereTypeXType {}
    impl AbstractParametricCurveSurfaceXElementTrait for SphereTypeXType {}
    impl AbstractSurfacePatchXElementTrait for SphereTypeXType {}
    pub type SphericalCsXElement = SphericalCsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SphericalCsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<SphericalCsPropertyTypeXTypeContent>,
    }
    impl SphericalCsPropertyElementTrait for SphericalCsPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SphericalCsPropertyTypeXTypeContent {
        #[serde(rename = "SphericalCS")]
        pub spherical_cs: SphericalCsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SphericalCsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "axis")]
        pub axis: Vec<AxisXElement>,
    }
    impl AbstractCoordinateSystemXElementTrait for SphericalCsTypeXType {}
    impl AbstractGmlXElementTrait for SphericalCsTypeXType {}
    impl AbstractObjectXElementTrait for SphericalCsTypeXType {}
    impl DefinitionXElementTrait for SphericalCsTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct StringOrRefTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(rename = "$text")]
        pub content: super::xs::StringXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum SuccessionTypeXType {
        #[serde(rename = "substitution")]
        Substitution,
        #[serde(rename = "division")]
        Division,
        #[serde(rename = "fusion")]
        Fusion,
        #[serde(rename = "initiation")]
        Initiation,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfaceXElement(pub Box<dyn SurfaceXElementTrait>);
    pub trait SurfaceXElementTrait: AbstractSurfaceXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfaceArrayPropertyTypeXType {
        #[serde(
            default = "SurfaceArrayPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Vec<SurfaceArrayPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfaceArrayPropertyTypeXTypeContent {
        #[serde(rename = "AbstractSurface")]
        pub abstract_surface: AbstractSurfaceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum SurfaceInterpolationTypeXType {
        #[serde(rename = "none")]
        None,
        #[serde(rename = "planar")]
        Planar,
        #[serde(rename = "spherical")]
        Spherical,
        #[serde(rename = "elliptical")]
        Elliptical,
        #[serde(rename = "conic")]
        Conic,
        #[serde(rename = "tin")]
        Tin,
        #[serde(rename = "parametricCurve")]
        ParametricCurve,
        #[serde(rename = "polynomialSpline")]
        PolynomialSpline,
        #[serde(rename = "rationalSpline")]
        RationalSpline,
        #[serde(rename = "triangulatedSpline")]
        TriangulatedSpline,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfacePatchArrayPropertyTypeXType {
        #[serde(default, rename = "$value")]
        pub content: Vec<SurfacePatchArrayPropertyTypeXTypeContent>,
    }
    impl PatchesXElementTrait for SurfacePatchArrayPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfacePatchArrayPropertyTypeXTypeContent {
        #[serde(rename = "AbstractSurfacePatch")]
        pub abstract_surface_patch: AbstractSurfacePatchXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfacePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default = "SurfacePropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<SurfacePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfacePropertyTypeXTypeContent {
        #[serde(rename = "AbstractSurface")]
        pub abstract_surface: AbstractSurfaceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SurfaceTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "patches")]
        pub patches: PatchesXElement,
    }
    impl AbstractGmlXElementTrait for SurfaceTypeXType {}
    impl AbstractGeometricPrimitiveXElementTrait for SurfaceTypeXType {}
    impl AbstractGeometryXElementTrait for SurfaceTypeXType {}
    impl AbstractObjectXElementTrait for SurfaceTypeXType {}
    impl AbstractSurfaceXElementTrait for SurfaceTypeXType {}
    impl SurfaceXElementTrait for SurfaceTypeXType {}
    impl TriangulatedSurfaceXElementTrait for SurfaceTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TargetPropertyTypeXType {
        #[serde(default = "TargetPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<TargetPropertyTypeXTypeContent>,
    }
    impl TargetPropertyElementTrait for TargetPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TargetPropertyTypeXTypeContent {
        #[serde(rename = "AbstractFeature")]
        AbstractFeature(AbstractFeatureXElement),
        #[serde(rename = "AbstractGeometry")]
        AbstractGeometry(AbstractGeometryXElement),
    }
    pub type TemporalCrsXElement = TemporalCrsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TemporalCrsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<TemporalCrsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TemporalCrsPropertyTypeXTypeContent {
        #[serde(rename = "TemporalCRS")]
        pub temporal_crs: TemporalCrsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TemporalCrsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Vec<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(rename = "Content1778")]
        pub content_1778: TemporalCrsContent1778XType,
        #[serde(rename = "temporalDatum")]
        pub temporal_datum: TemporalDatumPropertyElement,
    }
    impl AbstractCrsXElementTrait for TemporalCrsTypeXType {}
    impl AbstractGmlXElementTrait for TemporalCrsTypeXType {}
    impl AbstractObjectXElementTrait for TemporalCrsTypeXType {}
    impl AbstractSingleCrsXElementTrait for TemporalCrsTypeXType {}
    impl DefinitionXElementTrait for TemporalCrsTypeXType {}
    pub type TemporalCsXElement = TemporalCsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TemporalCsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<TemporalCsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TemporalCsPropertyTypeXTypeContent {
        #[serde(rename = "TemporalCS")]
        pub temporal_cs: TemporalCsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TemporalCsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "axis")]
        pub axis: Vec<AxisXElement>,
    }
    impl AbstractCoordinateSystemXElementTrait for TemporalCsTypeXType {}
    impl AbstractGmlXElementTrait for TemporalCsTypeXType {}
    impl AbstractObjectXElementTrait for TemporalCsTypeXType {}
    impl DefinitionXElementTrait for TemporalCsTypeXType {}
    pub type TemporalDatumXElement = TemporalDatumTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TemporalDatumBaseTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Option<DomainOfValidityXElement>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TemporalDatumPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<TemporalDatumPropertyTypeXTypeContent>,
    }
    impl TemporalDatumPropertyElementTrait for TemporalDatumPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TemporalDatumPropertyTypeXTypeContent {
        #[serde(rename = "TemporalDatum")]
        pub temporal_datum: TemporalDatumXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TemporalDatumTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Option<DomainOfValidityXElement>,
        #[serde(rename = "origin")]
        pub origin: OriginXElement,
    }
    impl AbstractDatumXElementTrait for TemporalDatumTypeXType {}
    impl AbstractGmlXElementTrait for TemporalDatumTypeXType {}
    impl AbstractObjectXElementTrait for TemporalDatumTypeXType {}
    impl DefinitionXElementTrait for TemporalDatumTypeXType {}
    pub type TimeCsXElement = TimeCsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeCsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<TimeCsPropertyTypeXTypeContent>,
    }
    impl TimeCsPropertyElementTrait for TimeCsPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeCsPropertyTypeXTypeContent {
        #[serde(rename = "TimeCS")]
        pub time_cs: TimeCsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeCsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "axis")]
        pub axis: Vec<AxisXElement>,
    }
    impl AbstractCoordinateSystemXElementTrait for TimeCsTypeXType {}
    impl AbstractGmlXElementTrait for TimeCsTypeXType {}
    impl AbstractObjectXElementTrait for TimeCsTypeXType {}
    impl DefinitionXElementTrait for TimeCsTypeXType {}
    pub type TimeCalendarXElement = TimeCalendarTypeXType;
    pub type TimeCalendarEraXElement = TimeCalendarEraTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeCalendarEraPropertyTypeXType {
        #[serde(
            default = "TimeCalendarEraPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<TimeCalendarEraPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeCalendarEraPropertyTypeXTypeContent {
        #[serde(rename = "TimeCalendarEra")]
        pub time_calendar_era: TimeCalendarEraXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeCalendarEraTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(rename = "referenceEvent")]
        pub reference_event: StringOrRefTypeXType,
        #[serde(rename = "referenceDate")]
        pub reference_date: CalDateXType,
        #[serde(rename = "julianReference")]
        pub julian_reference: super::xs::DecimalXType,
        #[serde(rename = "epochOfUse")]
        pub epoch_of_use: TimePeriodPropertyTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeCalendarPropertyTypeXType {
        #[serde(
            default = "TimeCalendarPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<TimeCalendarPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeCalendarPropertyTypeXTypeContent {
        #[serde(rename = "TimeCalendar")]
        pub time_calendar: TimeCalendarXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeCalendarTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(rename = "domainOfValidity")]
        pub domain_of_validity: super::xs::StringXType,
        #[serde(default, rename = "referenceFrame")]
        pub reference_frame: Vec<TimeCalendarEraPropertyTypeXType>,
    }
    impl AbstractGmlXElementTrait for TimeCalendarTypeXType {}
    impl AbstractObjectXElementTrait for TimeCalendarTypeXType {}
    impl DefinitionXElementTrait for TimeCalendarTypeXType {}
    impl TimeReferenceSystemXElementTrait for TimeCalendarTypeXType {}
    pub type TimeClockXElement = TimeClockTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeClockPropertyTypeXType {
        #[serde(default = "TimeClockPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<TimeClockPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeClockPropertyTypeXTypeContent {
        #[serde(rename = "TimeClock")]
        pub time_clock: TimeClockXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeClockTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(rename = "domainOfValidity")]
        pub domain_of_validity: super::xs::StringXType,
        #[serde(rename = "referenceEvent")]
        pub reference_event: StringOrRefTypeXType,
        #[serde(rename = "referenceTime")]
        pub reference_time: super::xs::TimeXType,
        #[serde(rename = "utcReference")]
        pub utc_reference: super::xs::TimeXType,
        #[serde(default, rename = "dateBasis")]
        pub date_basis: Vec<TimeCalendarPropertyTypeXType>,
    }
    impl AbstractGmlXElementTrait for TimeClockTypeXType {}
    impl AbstractObjectXElementTrait for TimeClockTypeXType {}
    impl DefinitionXElementTrait for TimeClockTypeXType {}
    impl TimeReferenceSystemXElementTrait for TimeClockTypeXType {}
    pub type TimeCoordinateSystemXElement = TimeCoordinateSystemTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeCoordinateSystemTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(rename = "domainOfValidity")]
        pub domain_of_validity: super::xs::StringXType,
        #[serde(rename = "Content1793")]
        pub content_1793: TimeCoordinateSystemContent1793XType,
        #[serde(rename = "interval")]
        pub interval: TimeIntervalLengthTypeXType,
    }
    impl AbstractGmlXElementTrait for TimeCoordinateSystemTypeXType {}
    impl AbstractObjectXElementTrait for TimeCoordinateSystemTypeXType {}
    impl DefinitionXElementTrait for TimeCoordinateSystemTypeXType {}
    impl TimeReferenceSystemXElementTrait for TimeCoordinateSystemTypeXType {}
    pub type TimeEdgeXElement = TimeEdgeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeEdgePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default = "TimeEdgePropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<TimeEdgePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeEdgePropertyTypeXTypeContent {
        #[serde(rename = "TimeEdge")]
        pub time_edge: TimeEdgeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeEdgeTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "relatedTime")]
        pub related_time: Vec<RelatedTimeTypeXType>,
        #[serde(default, rename = "complex")]
        pub complex: Option<ReferenceTypeXType>,
        #[serde(rename = "start")]
        pub start: TimeNodePropertyTypeXType,
        #[serde(rename = "end")]
        pub end: TimeNodePropertyTypeXType,
        #[serde(default, rename = "extent")]
        pub extent: Option<TimePeriodPropertyTypeXType>,
    }
    impl AbstractGmlXElementTrait for TimeEdgeTypeXType {}
    impl AbstractObjectXElementTrait for TimeEdgeTypeXType {}
    impl AbstractTimeObjectXElementTrait for TimeEdgeTypeXType {}
    impl AbstractTimePrimitiveXElementTrait for TimeEdgeTypeXType {}
    impl AbstractTimeTopologyPrimitiveXElementTrait for TimeEdgeTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TimeIndeterminateValueTypeXType {
        #[serde(rename = "after")]
        After,
        #[serde(rename = "before")]
        Before,
        #[serde(rename = "now")]
        Now,
        #[serde(rename = "unknown")]
        Unknown,
    }
    pub type TimeInstantXElement = TimeInstantTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeInstantPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(
            default = "TimeInstantPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<TimeInstantPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeInstantPropertyTypeXTypeContent {
        #[serde(rename = "TimeInstant")]
        pub time_instant: TimeInstantXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeInstantTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default = "TimeInstantTypeXType::default_frame", rename = "@frame")]
        pub frame: super::xs::AnyUriXType,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "relatedTime")]
        pub related_time: Vec<RelatedTimeTypeXType>,
        #[serde(rename = "timePosition")]
        pub time_position: TimePositionXElement,
    }
    impl AbstractGmlXElementTrait for TimeInstantTypeXType {}
    impl AbstractObjectXElementTrait for TimeInstantTypeXType {}
    impl AbstractTimeGeometricPrimitiveXElementTrait for TimeInstantTypeXType {}
    impl AbstractTimeObjectXElementTrait for TimeInstantTypeXType {}
    impl AbstractTimePrimitiveXElementTrait for TimeInstantTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeIntervalLengthTypeXType {
        #[serde(rename = "@unit")]
        pub unit: TimeUnitTypeXType,
        #[serde(default, rename = "@radix")]
        pub radix: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@factor")]
        pub factor: Option<super::xs::IntegerXType>,
        #[serde(rename = "$text")]
        pub content: super::xs::DecimalXType,
    }
    pub type TimeNodeXElement = TimeNodeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeNodePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default = "TimeNodePropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<TimeNodePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeNodePropertyTypeXTypeContent {
        #[serde(rename = "TimeNode")]
        pub time_node: TimeNodeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeNodeTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "relatedTime")]
        pub related_time: Vec<RelatedTimeTypeXType>,
        #[serde(default, rename = "complex")]
        pub complex: Option<ReferenceTypeXType>,
        #[serde(default, rename = "previousEdge")]
        pub previous_edge: Vec<TimeEdgePropertyTypeXType>,
        #[serde(default, rename = "nextEdge")]
        pub next_edge: Vec<TimeEdgePropertyTypeXType>,
        #[serde(default, rename = "position")]
        pub position: Option<TimeInstantPropertyTypeXType>,
    }
    impl AbstractGmlXElementTrait for TimeNodeTypeXType {}
    impl AbstractObjectXElementTrait for TimeNodeTypeXType {}
    impl AbstractTimeObjectXElementTrait for TimeNodeTypeXType {}
    impl AbstractTimePrimitiveXElementTrait for TimeNodeTypeXType {}
    impl AbstractTimeTopologyPrimitiveXElementTrait for TimeNodeTypeXType {}
    pub type TimeOrdinalEraXElement = TimeOrdinalEraTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeOrdinalEraPropertyTypeXType {
        #[serde(
            default = "TimeOrdinalEraPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<TimeOrdinalEraPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeOrdinalEraPropertyTypeXTypeContent {
        #[serde(rename = "TimeOrdinalEra")]
        pub time_ordinal_era: TimeOrdinalEraXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeOrdinalEraTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "relatedTime")]
        pub related_time: Vec<RelatedTimeTypeXType>,
        #[serde(default, rename = "start")]
        pub start: Option<TimeNodePropertyTypeXType>,
        #[serde(default, rename = "end")]
        pub end: Option<TimeNodePropertyTypeXType>,
        #[serde(default, rename = "extent")]
        pub extent: Option<TimePeriodPropertyTypeXType>,
        #[serde(default, rename = "member")]
        pub member: Vec<TimeOrdinalEraPropertyTypeXType>,
        #[serde(default, rename = "group")]
        pub group: Option<ReferenceTypeXType>,
    }
    pub type TimeOrdinalReferenceSystemXElement = TimeOrdinalReferenceSystemTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeOrdinalReferenceSystemTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(rename = "domainOfValidity")]
        pub domain_of_validity: super::xs::StringXType,
        #[serde(default, rename = "component")]
        pub component: Vec<TimeOrdinalEraPropertyTypeXType>,
    }
    impl AbstractGmlXElementTrait for TimeOrdinalReferenceSystemTypeXType {}
    impl AbstractObjectXElementTrait for TimeOrdinalReferenceSystemTypeXType {}
    impl DefinitionXElementTrait for TimeOrdinalReferenceSystemTypeXType {}
    impl TimeReferenceSystemXElementTrait for TimeOrdinalReferenceSystemTypeXType {}
    pub type TimePeriodXElement = TimePeriodTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimePeriodPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(
            default = "TimePeriodPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<TimePeriodPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimePeriodPropertyTypeXTypeContent {
        #[serde(rename = "TimePeriod")]
        pub time_period: TimePeriodXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimePeriodTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default = "TimePeriodTypeXType::default_frame", rename = "@frame")]
        pub frame: super::xs::AnyUriXType,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "relatedTime")]
        pub related_time: Vec<RelatedTimeTypeXType>,
        #[serde(rename = "Content2516")]
        pub content_2516: TimePeriodContent2516XType,
        #[serde(rename = "Content2517")]
        pub content_2517: TimePeriodContent2517XType,
        #[serde(default, rename = "Content2518")]
        pub content_2518: Option<TimePeriodContent2518XType>,
    }
    impl AbstractGmlXElementTrait for TimePeriodTypeXType {}
    impl AbstractObjectXElementTrait for TimePeriodTypeXType {}
    impl AbstractTimeGeometricPrimitiveXElementTrait for TimePeriodTypeXType {}
    impl AbstractTimeObjectXElementTrait for TimePeriodTypeXType {}
    impl AbstractTimePrimitiveXElementTrait for TimePeriodTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimePositionTypeXType {
        #[serde(default = "TimePositionTypeXType::default_frame", rename = "@frame")]
        pub frame: super::xs::AnyUriXType,
        #[serde(default, rename = "@calendarEraName")]
        pub calendar_era_name: Option<super::xs::StringXType>,
        #[serde(default, rename = "@indeterminatePosition")]
        pub indeterminate_position: Option<TimeIndeterminateValueTypeXType>,
        #[serde(rename = "$text")]
        pub content: TimePositionUnionXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TimePositionUnionXType {
        CalDate(CalDateXType),
        Time(super::xs::TimeXType),
        DateTime(super::xs::DateTimeXType),
        AnyUri(super::xs::AnyUriXType),
        Decimal(super::xs::DecimalXType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimePrimitivePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(
            default = "TimePrimitivePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<TimePrimitivePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimePrimitivePropertyTypeXTypeContent {
        #[serde(rename = "AbstractTimePrimitive")]
        pub abstract_time_primitive: AbstractTimePrimitiveXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeReferenceSystemXElement(pub Box<dyn TimeReferenceSystemXElementTrait>);
    pub trait TimeReferenceSystemXElementTrait: DefinitionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeReferenceSystemTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(rename = "domainOfValidity")]
        pub domain_of_validity: super::xs::StringXType,
    }
    impl AbstractGmlXElementTrait for TimeReferenceSystemTypeXType {}
    impl AbstractObjectXElementTrait for TimeReferenceSystemTypeXType {}
    impl DefinitionXElementTrait for TimeReferenceSystemTypeXType {}
    impl TimeReferenceSystemXElementTrait for TimeReferenceSystemTypeXType {}
    pub type TimeTopologyComplexXElement = TimeTopologyComplexTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeTopologyComplexPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(
            default = "TimeTopologyComplexPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<TimeTopologyComplexPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeTopologyComplexPropertyTypeXTypeContent {
        #[serde(rename = "TimeTopologyComplex")]
        pub time_topology_complex: TimeTopologyComplexXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeTopologyComplexTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "primitive")]
        pub primitive: Vec<TimeTopologyPrimitivePropertyTypeXType>,
    }
    impl AbstractGmlXElementTrait for TimeTopologyComplexTypeXType {}
    impl AbstractObjectXElementTrait for TimeTopologyComplexTypeXType {}
    impl AbstractTimeComplexXElementTrait for TimeTopologyComplexTypeXType {}
    impl AbstractTimeObjectXElementTrait for TimeTopologyComplexTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeTopologyPrimitivePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(
            default = "TimeTopologyPrimitivePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<TimeTopologyPrimitivePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeTopologyPrimitivePropertyTypeXTypeContent {
        #[serde(rename = "AbstractTimeTopologyPrimitive")]
        pub abstract_time_topology_primitive: AbstractTimeTopologyPrimitiveXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeTypeXType {
        #[serde(rename = "@uom")]
        pub uom: UomIdentifierXType,
        #[serde(rename = "$text")]
        pub content: super::xs::DoubleXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TimeUnitTypeXType {
        TimeUnitType2520(TimeUnitType2520XType),
        TimeUnitType2521(TimeUnitType2521XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TimeUnitType2520XType {
        #[serde(rename = "year")]
        Year,
        #[serde(rename = "month")]
        Month,
        #[serde(rename = "day")]
        Day,
        #[serde(rename = "hour")]
        Hour,
        #[serde(rename = "minute")]
        Minute,
        #[serde(rename = "second")]
        Second,
    }
    pub type TimeUnitType2521XType = String;
    pub type TinXElement = TinTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TinTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "patches")]
        pub patches: PatchesXElement,
        #[serde(default, rename = "stopLines")]
        pub stop_lines: Vec<LineStringSegmentArrayPropertyTypeXType>,
        #[serde(default, rename = "breakLines")]
        pub break_lines: Vec<LineStringSegmentArrayPropertyTypeXType>,
        #[serde(rename = "maxLength")]
        pub max_length: LengthTypeXType,
        #[serde(rename = "controlPoint")]
        pub control_point: TinTypeControlPointXElement,
    }
    impl AbstractGmlXElementTrait for TinTypeXType {}
    impl AbstractGeometricPrimitiveXElementTrait for TinTypeXType {}
    impl AbstractGeometryXElementTrait for TinTypeXType {}
    impl AbstractObjectXElementTrait for TinTypeXType {}
    impl AbstractSurfaceXElementTrait for TinTypeXType {}
    impl SurfaceXElementTrait for TinTypeXType {}
    impl TriangulatedSurfaceXElementTrait for TinTypeXType {}
    pub type TinTypeControlPointXElement = TinTypeControlPointXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TinTypeControlPointXElementType {
        #[serde(rename = "posList")]
        PosList(PosListXElement),
        #[serde(rename = "Content2602")]
        Content2602(Vec<TinTypeControlPointContent2602XType>),
    }
    pub type TopoComplexXElement = TopoComplexTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TopoComplexPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<TopoComplexPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TopoComplexPropertyTypeXTypeContent {
        #[serde(rename = "TopoComplex")]
        pub topo_complex: Box<TopoComplexXElement>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TopoComplexTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(
            default = "TopoComplexTypeXType::default_is_maximal",
            rename = "@isMaximal"
        )]
        pub is_maximal: super::xs::BooleanXType,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "maximalComplex")]
        pub maximal_complex: Box<MaximalComplexXElement>,
        #[serde(default, rename = "superComplex")]
        pub super_complex: Vec<SuperComplexXElement>,
        #[serde(default, rename = "subComplex")]
        pub sub_complex: Vec<SubComplexXElement>,
        #[serde(default, rename = "topoPrimitiveMember")]
        pub topo_primitive_member: Vec<TopoPrimitiveMemberXElement>,
        #[serde(default, rename = "topoPrimitiveMembers")]
        pub topo_primitive_members: Option<TopoPrimitiveMembersXElement>,
    }
    impl AbstractGmlXElementTrait for TopoComplexTypeXType {}
    impl AbstractObjectXElementTrait for TopoComplexTypeXType {}
    impl AbstractTopologyXElementTrait for TopoComplexTypeXType {}
    pub type TopoCurveXElement = TopoCurveTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TopoCurvePropertyTypeXType {
        #[serde(default = "TopoCurvePropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "TopoCurve")]
        pub topo_curve: TopoCurveXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TopoCurveTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "directedEdge")]
        pub directed_edge: Vec<DirectedEdgePropertyElement>,
    }
    pub type TopoPointXElement = TopoPointTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TopoPointPropertyTypeXType {
        #[serde(default = "TopoPointPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "TopoPoint")]
        pub topo_point: TopoPointXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TopoPointTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "directedNode")]
        pub directed_node: DirectedNodePropertyElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TopoPrimitiveArrayAssociationTypeXType {
        #[serde(
            default = "TopoPrimitiveArrayAssociationTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Vec<TopoPrimitiveArrayAssociationTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TopoPrimitiveArrayAssociationTypeXTypeContent {
        #[serde(rename = "AbstractTopoPrimitive")]
        pub abstract_topo_primitive: AbstractTopoPrimitiveXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TopoPrimitiveMemberTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(
            default = "TopoPrimitiveMemberTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<TopoPrimitiveMemberTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TopoPrimitiveMemberTypeXTypeContent {
        #[serde(rename = "AbstractTopoPrimitive")]
        pub abstract_topo_primitive: AbstractTopoPrimitiveXElement,
    }
    pub type TopoSolidXElement = TopoSolidTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TopoSolidPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default = "TopoSolidPropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<TopoSolidPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TopoSolidPropertyTypeXTypeContent {
        #[serde(rename = "TopoSolid")]
        TopoSolid(TopoSolidXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TopoSolidTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(
            default = "TopoSolidTypeXType::default_universal",
            rename = "@universal"
        )]
        pub universal: super::xs::BooleanXType,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "isolated")]
        pub isolated: Vec<NodeOrEdgePropertyTypeXType>,
        #[serde(default, rename = "directedFace")]
        pub directed_face: Vec<DirectedFacePropertyElement>,
        #[serde(default, rename = "solidProperty")]
        pub solid_property: Option<SolidPropertyXElement>,
    }
    impl AbstractGmlXElementTrait for TopoSolidTypeXType {}
    impl AbstractObjectXElementTrait for TopoSolidTypeXType {}
    impl AbstractTopoPrimitiveXElementTrait for TopoSolidTypeXType {}
    impl AbstractTopologyXElementTrait for TopoSolidTypeXType {}
    pub type TopoSurfaceXElement = TopoSurfaceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TopoSurfacePropertyTypeXType {
        #[serde(
            default = "TopoSurfacePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "TopoSurface")]
        pub topo_surface: TopoSurfaceXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TopoSurfaceTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "directedFace")]
        pub directed_face: Vec<DirectedFacePropertyElement>,
    }
    pub type TopoVolumeXElement = TopoVolumeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TopoVolumePropertyTypeXType {
        #[serde(
            default = "TopoVolumePropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "TopoVolume")]
        pub topo_volume: TopoVolumeXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TopoVolumeTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "directedTopoSolid")]
        pub directed_topo_solid: Vec<DirectedTopoSolidPropertyElement>,
    }
    pub type TransformationXElement = TransformationTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TransformationPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<TransformationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TransformationPropertyTypeXTypeContent {
        #[serde(rename = "Transformation")]
        pub transformation: TransformationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TransformationTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Option<DomainOfValidityXElement>,
        #[serde(rename = "operationVersion")]
        pub operation_version: OperationVersionXElement,
        #[serde(default, rename = "coordinateOperationAccuracy")]
        pub coordinate_operation_accuracy: Vec<CoordinateOperationAccuracyXElement>,
        #[serde(rename = "sourceCRS")]
        pub source_crs: SourceCrsXElement,
        #[serde(rename = "targetCRS")]
        pub target_crs: TargetCrsXElement,
        #[serde(rename = "method")]
        pub method: MethodXElement,
        #[serde(default, rename = "parameterValue")]
        pub parameter_value: Vec<ParameterValueProperty>,
    }
    impl AbstractCoordinateOperationXElementTrait for TransformationTypeXType {}
    impl AbstractGmlXElementTrait for TransformationTypeXType {}
    impl AbstractGeneralTransformationXElementTrait for TransformationTypeXType {}
    impl AbstractObjectXElementTrait for TransformationTypeXType {}
    impl AbstractOperationXElementTrait for TransformationTypeXType {}
    impl AbstractSingleOperationXElementTrait for TransformationTypeXType {}
    impl DefinitionXElementTrait for TransformationTypeXType {}
    pub type TriangleXElement = TriangleTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TriangleTypeXType {
        #[serde(default, rename = "@interpolation")]
        pub interpolation: Option<SurfaceInterpolationTypeXType>,
        #[serde(rename = "exterior")]
        pub exterior: ExteriorXElement,
    }
    impl AbstractSurfacePatchXElementTrait for TriangleTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TriangulatedSurfaceXElement(pub Box<dyn TriangulatedSurfaceXElementTrait>);
    pub trait TriangulatedSurfaceXElementTrait: SurfaceXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitDefinitionXElement(pub Box<dyn UnitDefinitionXElementTrait>);
    pub trait UnitDefinitionXElementTrait: DefinitionXElementTrait {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitDefinitionTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "quantityType")]
        pub quantity_type: Option<QuantityTypeXElement>,
        #[serde(default, rename = "quantityTypeReference")]
        pub quantity_type_reference: Option<QuantityTypeReferenceXElement>,
        #[serde(default, rename = "catalogSymbol")]
        pub catalog_symbol: Option<CatalogSymbolXElement>,
    }
    impl AbstractGmlXElementTrait for UnitDefinitionTypeXType {}
    impl AbstractObjectXElementTrait for UnitDefinitionTypeXType {}
    impl DefinitionXElementTrait for UnitDefinitionTypeXType {}
    impl UnitDefinitionXElementTrait for UnitDefinitionTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UnitOfMeasureTypeXType {
        #[serde(rename = "@uom")]
        pub uom: UomIdentifierXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum UomIdentifierXType {
        UomSymbol(UomSymbolXType),
        UomUri(UomUriXType),
    }
    pub type UomSymbolXType = String;
    pub type UomUriXType = String;
    pub type UserDefinedCsXElement = UserDefinedCsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UserDefinedCsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<UserDefinedCsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UserDefinedCsPropertyTypeXTypeContent {
        #[serde(rename = "UserDefinedCS")]
        pub user_defined_cs: UserDefinedCsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct UserDefinedCsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "axis")]
        pub axis: Vec<AxisXElement>,
    }
    impl AbstractCoordinateSystemXElementTrait for UserDefinedCsTypeXType {}
    impl AbstractGmlXElementTrait for UserDefinedCsTypeXType {}
    impl AbstractObjectXElementTrait for UserDefinedCsTypeXType {}
    impl DefinitionXElementTrait for UserDefinedCsTypeXType {}
    pub type ValueArrayXElement = ValueArrayTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValueArrayPropertyTypeXType {
        #[serde(
            default = "ValueArrayPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(rename = "$value")]
        pub content: Vec<ValueArrayPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValueArrayPropertyTypeXTypeContent {
        #[serde(rename = "Content2364")]
        pub content_2364: ValueArrayPropertyContent2364XType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValueArrayTypeXType {
        #[serde(default, rename = "@id")]
        pub id: Option<Id>,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(default, rename = "@codeSpace")]
        pub code_space: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@uom")]
        pub uom: Option<UomIdentifierXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "valueComponent")]
        pub value_component: Vec<ValueComponentXElement>,
        #[serde(default, rename = "valueComponents")]
        pub value_components: Option<ValueComponentsXElement>,
    }
    impl AbstractObjectXElementTrait for ValueArrayTypeXType {}
    impl AbstractValueXElementTrait for ValueArrayTypeXType {}
    impl CompositeValueXElementTrait for ValueArrayTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValuePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default = "ValuePropertyTypeXType::default_owns", rename = "@owns")]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "$value")]
        pub content: Option<ValuePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ValuePropertyTypeXTypeContent {
        #[serde(rename = "Content2362")]
        pub content_2362: ValuePropertyContent2362XType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VectorTypeXType {
        #[serde(default, rename = "@srsName")]
        pub srs_name: Option<super::xs::AnyUriXType>,
        #[serde(default, rename = "@srsDimension")]
        pub srs_dimension: Option<super::xs::PositiveIntegerXType>,
        #[serde(default, rename = "@axisLabels")]
        pub axis_labels: Option<NcNameListXType>,
        #[serde(default, rename = "@uomLabels")]
        pub uom_labels: Option<NcNameListXType>,
        #[serde(rename = "$text")]
        pub content: DoubleListXType,
    }
    pub type VerticalCrsXElement = VerticalCrsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalCrsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<VerticalCrsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalCrsPropertyTypeXTypeContent {
        #[serde(rename = "VerticalCRS")]
        pub vertical_crs: VerticalCrsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalCrsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Vec<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(rename = "verticalCS")]
        pub vertical_cs: VerticalCsPropertyElement,
        #[serde(rename = "verticalDatum")]
        pub vertical_datum: VerticalDatumPropertyElement,
    }
    impl AbstractCrsXElementTrait for VerticalCrsTypeXType {}
    impl AbstractGmlXElementTrait for VerticalCrsTypeXType {}
    impl AbstractObjectXElementTrait for VerticalCrsTypeXType {}
    impl AbstractSingleCrsXElementTrait for VerticalCrsTypeXType {}
    impl DefinitionXElementTrait for VerticalCrsTypeXType {}
    pub type VerticalCsXElement = VerticalCsTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalCsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<VerticalCsPropertyTypeXTypeContent>,
    }
    impl VerticalCsPropertyElementTrait for VerticalCsPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalCsPropertyTypeXTypeContent {
        #[serde(rename = "VerticalCS")]
        pub vertical_cs: VerticalCsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalCsTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "axis")]
        pub axis: Vec<AxisXElement>,
    }
    impl AbstractCoordinateSystemXElementTrait for VerticalCsTypeXType {}
    impl AbstractGmlXElementTrait for VerticalCsTypeXType {}
    impl AbstractObjectXElementTrait for VerticalCsTypeXType {}
    impl DefinitionXElementTrait for VerticalCsTypeXType {}
    pub type VerticalDatumXElement = VerticalDatumTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalDatumPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<VerticalDatumPropertyTypeXTypeContent>,
    }
    impl VerticalDatumPropertyElementTrait for VerticalDatumPropertyTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalDatumPropertyTypeXTypeContent {
        #[serde(rename = "VerticalDatum")]
        pub vertical_datum: VerticalDatumXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalDatumTypeXType {
        #[serde(rename = "@id")]
        pub id: Id,
        #[serde(rename = "Content2")]
        pub content_2: AbstractGmlContent2XType,
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(rename = "identifier")]
        pub identifier: IdentifierXElement,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
        #[serde(default, rename = "remarks")]
        pub remarks: Option<RemarksXElement>,
        #[serde(default, rename = "domainOfValidity")]
        pub domain_of_validity: Option<DomainOfValidityXElement>,
        #[serde(default, rename = "scope")]
        pub scope: Vec<ScopeXElement>,
        #[serde(default, rename = "anchorDefinition")]
        pub anchor_definition: Option<AnchorDefinitionXElement>,
        #[serde(default, rename = "realizationEpoch")]
        pub realization_epoch: Option<RealizationEpochXElement>,
    }
    impl AbstractDatumXElementTrait for VerticalDatumTypeXType {}
    impl AbstractGmlXElementTrait for VerticalDatumTypeXType {}
    impl AbstractObjectXElementTrait for VerticalDatumTypeXType {}
    impl DefinitionXElementTrait for VerticalDatumTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VolumeTypeXType {
        #[serde(rename = "@uom")]
        pub uom: UomIdentifierXType,
        #[serde(rename = "$text")]
        pub content: super::xs::DoubleXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractAssociationRoleXElement(pub Box<dyn AbstractAssociationRoleXElementTrait>);
    pub trait AbstractAssociationRoleXElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    pub type AbstractGeneralOperationParameterRefXElement =
        AbstractGeneralOperationParameterPropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractInlinePropertyXElement(pub Box<dyn AbstractInlinePropertyXElementTrait>);
    pub trait AbstractInlinePropertyXElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractReferenceXElement(pub Box<dyn AbstractReferenceXElementTrait>);
    pub trait AbstractReferenceXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractStrictAssociationRoleXElement(
        pub Box<dyn AbstractStrictAssociationRoleXElementTrait>,
    );
    pub trait AbstractStrictAssociationRoleXElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AffineCsPropertyElement(pub Box<dyn AffineCsPropertyElementTrait>);
    pub trait AffineCsPropertyElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AnchorDefinitionXElement(pub Box<dyn AnchorDefinitionXElementTrait>);
    pub trait AnchorDefinitionXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    pub type AnchorPointXElement = CodeTypeXType;
    pub type AngleXElement = AngleTypeXType;
    pub type AssociationNameXElement = super::xs::StringXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AxisXElement(pub Box<dyn AxisXElementTrait>);
    pub trait AxisXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    pub type AxisAbbrevXElement = CodeTypeXType;
    pub type AxisDirectionXElement = CodeWithAuthorityTypeXType;
    pub type BaseCrsXElement = SingleCrsPropertyTypeXType;
    pub type BaseCurveXElement = CurvePropertyTypeXType;
    pub type BaseGeodeticCrsXElement = GeodeticCrsPropertyTypeXType;
    pub type BaseGeographicCrsXElement = GeographicCrsPropertyTypeXType;
    pub type BaseSurfaceXElement = SurfacePropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize, Default)]
    pub struct BooleanListXType(pub Vec<super::xs::BooleanXType>);
    #[derive(Debug, Serialize, Deserialize)]
    pub enum BooleanOrNilReasonXType {
        NilReasonEnumeration(NilReasonEnumerationXType),
        Boolean(super::xs::BooleanXType),
        AnyUri(super::xs::AnyUriXType),
    }
    #[derive(Debug, Serialize, Deserialize, Default)]
    pub struct BooleanOrNilReasonListXType(pub Vec<BooleanOrNilReasonXType>);
    impl AbstractObjectXElementTrait for BooleanOrNilReasonListXType {}
    impl AbstractScalarValueListXElementTrait for BooleanOrNilReasonListXType {}
    impl AbstractValueXElementTrait for BooleanOrNilReasonListXType {}
    pub type BooleanValueXElement = super::xs::BooleanXType;
    pub type BoundedByXElement = BoundingShapeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CartesianCsPropertyElement(pub Box<dyn CartesianCsPropertyElementTrait>);
    pub trait CartesianCsPropertyElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    pub type CartesianCsRefXElement = CartesianCsPropertyTypeXType;
    pub type CatalogSymbolXElement = CodeTypeXType;
    pub type CenterLineOfXElement = CurvePropertyTypeXType;
    pub type CenterOfXElement = PointPropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ComponentReferenceSystemXElement(pub Box<dyn ComponentReferenceSystemXElementTrait>);
    pub trait ComponentReferenceSystemXElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    pub type CompoundCrsRefXElement = CompoundCrsPropertyTypeXType;
    pub type ConcatenatedOperationRefXElement = ConcatenatedOperationPropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ConversionProperty(pub Box<dyn ConversionPropertyTrait>);
    pub trait ConversionPropertyTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    pub type ConversionRefXElement = ConversionPropertyTypeXType;
    pub type ConversionToPreferredUnitXElement = ConversionToPreferredUnitTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CoordOperationXElement(pub Box<dyn CoordOperationXElementTrait>);
    pub trait CoordOperationXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    pub type CoordinateOperationAccuracyXElement = CoordinateOperationAccuracyXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CoordinateOperationAccuracyXElementType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<CoordinateOperationAccuracyXElementTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CoordinateOperationAccuracyXElementTypeContent {
        #[serde(rename = "AbstractDQ_PositionalAccuracy")]
        pub abstract_dq_positional_accuracy: super::gmd::AbstractDqPositionalAccuracyXElement,
    }
    pub type CoordinateOperationRefXElement = CoordinateOperationPropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct CoordinateSystemPropertyElement(pub Box<dyn CoordinateSystemPropertyElementTrait>);
    pub trait CoordinateSystemPropertyElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    pub type CoordinateSystemAxisRefXElement = CoordinateSystemAxisPropertyTypeXType;
    pub type CoordinateSystemRefXElement = CoordinateSystemPropertyTypeXType;
    pub type CoordinatesXElement = CoordinatesTypeXType;
    pub type CoverageFunctionXElement = CoverageFunctionTypeXType;
    pub type CrsRefXElement = CrsPropertyTypeXType;
    pub type CurveArrayPropertyXElement = CurveArrayPropertyTypeXType;
    pub type CurveMemberXElement = CurvePropertyTypeXType;
    pub type CurveMembersXElement = CurveArrayPropertyTypeXType;
    pub type CurvePropertyXElement = CurvePropertyTypeXType;
    pub type CylindricalCsPropertyElement = CylindricalCsPropertyTypeXType;
    pub type CylindricalCsRefXElement = CylindricalCsPropertyTypeXType;
    pub type DataSourceXElement = StringOrRefTypeXType;
    pub type DataSourceReferenceXElement = ReferenceTypeXType;
    pub type DatumRefXElement = DatumPropertyTypeXType;
    pub type DecimalMinutesXElement = DecimalMinutesTypeXType;
    pub type DefaultCodeSpaceXElement = super::xs::AnyUriXType;
    pub type DefinedByConversionXElement = GeneralConversionPropertyTypeXType;
    pub type DefinitionMemberXElement = DictionaryEntryTypeXType;
    pub type DefinitionRefXElement = ReferenceTypeXType;
    pub type DegreesXElement = DegreesTypeXType;
    pub type DerivationUnitTermXElement = DerivationUnitTermTypeXType;
    pub type DerivedCrsRefXElement = DerivedCrsPropertyTypeXType;
    pub type DerivedCrsTypeXElement = CodeWithAuthorityTypeXType;
    pub type DescriptionXElement = StringOrRefTypeXType;
    pub type DescriptionReferenceXElement = ReferenceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DictionaryEntryXElement(pub Box<dyn DictionaryEntryXElementTrait>);
    pub trait DictionaryEntryXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    pub type DirectedEdgePropertyElement = DirectedEdgePropertyTypeXType;
    pub type DirectedFacePropertyElement = DirectedFacePropertyTypeXType;
    pub type DirectedNodePropertyElement = DirectedNodePropertyTypeXType;
    pub type DirectedTopoSolidPropertyElement = DirectedTopoSolidPropertyTypeXType;
    pub type DirectionPropertyElement = DirectionPropertyTypeXType;
    pub type DmsAngleXElement = DmsAngleTypeXType;
    pub type DmsAngleValueXElement = DmsAngleTypeXType;
    pub type DomainOfValidityXElement = DomainOfValidityXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DomainOfValidityXElementType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<DomainOfValidityXElementTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DomainOfValidityXElementTypeContent {
        #[serde(rename = "EX_Extent")]
        pub ex_extent: super::gmd::ExExtentXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DomainSetXElement(pub Box<dyn DomainSetXElementTrait>);
    pub trait DomainSetXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    #[derive(Debug, Serialize, Deserialize, Default)]
    pub struct DoubleListXType(pub Vec<super::xs::DoubleXType>);
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DoubleOrNilReasonXType {
        NilReasonEnumeration(NilReasonEnumerationXType),
        Double(super::xs::DoubleXType),
        AnyUri(super::xs::AnyUriXType),
    }
    #[derive(Debug, Serialize, Deserialize, Default)]
    pub struct DoubleOrNilReasonListXType(pub Vec<DoubleOrNilReasonXType>);
    pub type DoubleOrNilReasonTupleListXElement = DoubleOrNilReasonListXType;
    pub type DurationXElement = super::xs::DurationXType;
    pub type DynamicMembersXElement = DynamicFeatureMemberTypeXType;
    pub type EdgeOfXElement = CurvePropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EllipsoidPropertyElement(pub Box<dyn EllipsoidPropertyElementTrait>);
    pub trait EllipsoidPropertyElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    pub type EllipsoidRefXElement = EllipsoidPropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EllipsoidalCsPropertyElement(pub Box<dyn EllipsoidalCsPropertyElementTrait>);
    pub trait EllipsoidalCsPropertyElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    pub type EllipsoidalCsRefXElement = EllipsoidalCsPropertyTypeXType;
    pub type EngineeringCrsRefXElement = EngineeringCrsPropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EngineeringDatumPropertyElement(pub Box<dyn EngineeringDatumPropertyElementTrait>);
    pub trait EngineeringDatumPropertyElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    pub type EngineeringDatumRefXElement = EngineeringDatumPropertyTypeXType;
    pub type ExtentOfXElement = SurfacePropertyTypeXType;
    pub type ExteriorXElement = AbstractRingPropertyTypeXType;
    pub type FeatureMemberXElement = FeaturePropertyTypeXType;
    pub type FeatureMembersXElement = FeatureArrayPropertyTypeXType;
    pub type FeaturePropertyXElement = FeaturePropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FormulaXElement(pub Box<dyn FormulaXElementTrait>);
    pub trait FormulaXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    pub type FormulaCitationXElement = FormulaCitationXElementType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FormulaCitationXElementType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<RemoteSchema>,
        #[serde(default, rename = "$value")]
        pub content: Option<FormulaCitationXElementTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct FormulaCitationXElementTypeContent {
        #[serde(rename = "CI_Citation")]
        pub ci_citation: super::gmd::CiCitationXElement,
    }
    pub type GeneralConversionRefXElement = GeneralConversionPropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeneralOperationParameterXElement(
        pub Box<dyn GeneralOperationParameterXElementTrait>,
    );
    pub trait GeneralOperationParameterXElementTrait: ParameterXElementTrait {}
    pub type GeneralTransformationRefXElement = GeneralTransformationPropertyTypeXType;
    pub type GeocentricCrsRefXElement = GeocentricCrsPropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GeodeticDatumPropertyElement(pub Box<dyn GeodeticDatumPropertyElementTrait>);
    pub trait GeodeticDatumPropertyElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    pub type GeodeticDatumRefXElement = GeodeticDatumPropertyTypeXType;
    pub type GeographicCrsRefXElement = GeographicCrsPropertyTypeXType;
    pub type GeometryMemberXElement = GeometryPropertyTypeXType;
    pub type GeometryMembersXElement = GeometryArrayPropertyTypeXType;
    pub type GmlProfileSchemaXElement = super::xs::AnyUriXType;
    pub type GreenwichLongitudeXElement = AngleTypeXType;
    pub type GridDomainXElement = DomainSetTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GroupXElement(pub Box<dyn GroupXElementTrait>);
    pub trait GroupXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct HistoryPropertyElement(pub Box<dyn HistoryPropertyElementTrait>);
    pub trait HistoryPropertyElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    pub type Id = super::xs::IdXType;
    pub type IdentifierXElement = CodeWithAuthorityTypeXType;
    pub type ImageCrsRefXElement = ImageCrsPropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ImageDatumPropertyElement(pub Box<dyn ImageDatumPropertyElementTrait>);
    pub trait ImageDatumPropertyElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    pub type ImageDatumRefXElement = ImageDatumPropertyTypeXType;
    pub type IncludesParameterXElement = AbstractGeneralOperationParameterPropertyTypeXType;
    pub type IncludesSingleCrsXElement = SingleCrsPropertyTypeXType;
    pub type IncludesValueXElement = AbstractGeneralParameterValuePropertyTypeXType;
    pub type IndirectEntryXElement = IndirectEntryTypeXType;
    #[derive(Debug, Serialize, Deserialize, Default)]
    pub struct IntegerListXType(pub Vec<super::xs::IntegerXType>);
    #[derive(Debug, Serialize, Deserialize)]
    pub enum IntegerOrNilReasonXType {
        NilReasonEnumeration(NilReasonEnumerationXType),
        Integer(super::xs::IntegerXType),
        AnyUri(super::xs::AnyUriXType),
    }
    #[derive(Debug, Serialize, Deserialize, Default)]
    pub struct IntegerOrNilReasonListXType(pub Vec<IntegerOrNilReasonXType>);
    impl AbstractObjectXElementTrait for IntegerOrNilReasonListXType {}
    impl AbstractScalarValueListXElementTrait for IntegerOrNilReasonListXType {}
    impl AbstractValueXElementTrait for IntegerOrNilReasonListXType {}
    pub type IntegerValueXElement = super::xs::PositiveIntegerXType;
    pub type IntegerValueListXElement = IntegerListXType;
    pub type InteriorXElement = AbstractRingPropertyTypeXType;
    pub type LinearCsPropertyElement = LinearCsPropertyTypeXType;
    pub type LinearCsRefXElement = LinearCsPropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LocationPropertyElement(pub Box<dyn LocationPropertyElementTrait>);
    pub trait LocationPropertyElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    pub type LocationNameXElement = CodeTypeXType;
    pub type LocationReferenceXElement = ReferenceTypeXType;
    pub type MaximalComplexXElement = TopoComplexPropertyTypeXType;
    pub type MaximumOccursXElement = super::xs::PositiveIntegerXType;
    pub type MaximumValueXElement = super::xs::DoubleXType;
    pub type MeasureXElement = MeasureTypeXType;
    pub type MemberXElement = AssociationRoleTypeXType;
    pub type MembersXElement = ArrayAssociationTypeXType;
    pub type MetaDataPropertyXElement = MetaDataPropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct MethodXElement(pub Box<dyn MethodXElementTrait>);
    pub trait MethodXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    pub type MethodFormulaXElement = CodeTypeXType;
    pub type MinimumOccursXElement = super::xs::NonNegativeIntegerXType;
    pub type MinimumValueXElement = super::xs::DoubleXType;
    pub type MinutesXElement = ArcMinutesTypeXType;
    pub type ModifiedCoordinateXElement = super::xs::PositiveIntegerXType;
    pub type MultiCenterLineOfXElement = MultiCurvePropertyTypeXType;
    pub type MultiCenterOfXElement = MultiPointPropertyTypeXType;
    pub type MultiCoverageXElement = MultiSurfacePropertyTypeXType;
    pub type MultiCurveDomainXElement = DomainSetTypeXType;
    pub type MultiCurvePropertyXElement = MultiCurvePropertyTypeXType;
    pub type MultiEdgeOfXElement = MultiCurvePropertyTypeXType;
    pub type MultiExtentOfXElement = MultiSurfacePropertyTypeXType;
    pub type MultiGeometryPropertyXElement = MultiGeometryPropertyTypeXType;
    pub type MultiLocationXElement = MultiPointPropertyTypeXType;
    pub type MultiPointDomainXElement = DomainSetTypeXType;
    pub type MultiPointPropertyXElement = MultiPointPropertyTypeXType;
    pub type MultiPositionXElement = MultiPointPropertyTypeXType;
    pub type MultiSolidDomainXElement = DomainSetTypeXType;
    pub type MultiSolidPropertyXElement = MultiSolidPropertyTypeXType;
    pub type MultiSurfaceDomainXElement = DomainSetTypeXType;
    pub type MultiSurfacePropertyXElement = MultiSurfacePropertyTypeXType;
    pub type NameXElement = CodeTypeXType;
    pub type ObliqueCartesianCsRefXElement = ObliqueCartesianCsPropertyTypeXType;
    pub type OperationMethodRefXElement = OperationMethodPropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct OperationParameterPropertyElement(
        pub Box<dyn OperationParameterPropertyElementTrait>,
    );
    pub trait OperationParameterPropertyElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    pub type OperationParameterGroupRefXElement = OperationParameterPropertyTypeXType;
    pub type OperationParameterRefXElement = OperationParameterPropertyTypeXType;
    pub type OperationRefXElement = OperationPropertyTypeXType;
    pub type OperationVersionXElement = super::xs::StringXType;
    pub type OriginXElement = super::xs::DateTimeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ParameterXElement(pub Box<dyn ParameterXElementTrait>);
    pub trait ParameterXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ParameterValueProperty(pub Box<dyn ParameterValuePropertyTrait>);
    pub trait ParameterValuePropertyTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    pub type PassThroughOperationRefXElement = PassThroughOperationPropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PatchesXElement(pub Box<dyn PatchesXElementTrait>);
    pub trait PatchesXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    pub type PixelInCellXElement = CodeWithAuthorityTypeXType;
    pub type PointArrayPropertyXElement = PointArrayPropertyTypeXType;
    pub type PointMemberXElement = PointPropertyTypeXType;
    pub type PointMembersXElement = PointArrayPropertyTypeXType;
    pub type PointPropertyXElement = PointPropertyTypeXType;
    pub type PointRepXElement = PointPropertyTypeXType;
    pub type PolarCsPropertyElement = PolarCsPropertyTypeXType;
    pub type PolarCsRefXElement = PolarCsPropertyTypeXType;
    pub type PolygonPatchesXElement = SurfacePatchArrayPropertyTypeXType;
    pub type PosXElement = DirectPositionTypeXType;
    pub type PosListXElement = DirectPositionListTypeXType;
    pub type PositionXElement = PointPropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct PrimeMeridianPropertyElement(pub Box<dyn PrimeMeridianPropertyElementTrait>);
    pub trait PrimeMeridianPropertyElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    pub type PrimeMeridianRefXElement = PrimeMeridianPropertyTypeXType;
    pub type PriorityLocationPropertyElement = PriorityLocationPropertyTypeXType;
    pub type ProjectedCrsRefXElement = ProjectedCrsPropertyTypeXType;
    pub type QuantityTypeXElement = StringOrRefTypeXType;
    pub type QuantityTypeReferenceXElement = ReferenceTypeXType;
    pub type RangeMeaningXElement = CodeWithAuthorityTypeXType;
    pub type RangeParametersXElement = AssociationRoleTypeXType;
    pub type RangeSetXElement = RangeSetTypeXType;
    pub type RealizationEpochXElement = super::xs::DateXType;
    pub type RectifiedGridDomainXElement = DomainSetTypeXType;
    pub type ReferenceSystemRefXElement = CrsPropertyTypeXType;
    pub type RemarksXElement = super::xs::StringXType;
    pub type RemoteSchema = super::xs::AnyUriXType;
    pub type ResultOfXElement = ResultTypeXType;
    pub type ReversePropertyNameXElement = super::xs::StringXType;
    pub type RoughConversionToPreferredUnitXElement = ConversionToPreferredUnitTypeXType;
    pub type ScopeXElement = super::xs::StringXType;
    pub type SecondDefiningParameterProperty = SecondDefiningParameterPropertyType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SecondDefiningParameterPropertyType {
        #[serde(rename = "SecondDefiningParameter")]
        pub second_defining_parameter: SecondDefiningParameterXElement,
    }
    pub type SecondsXElement = ArcSecondsTypeXType;
    pub type SegmentsXElement = CurveSegmentArrayPropertyTypeXType;
    pub type SemiMajorAxisXElement = MeasureTypeXType;
    pub type SingleCrsRefXElement = SingleCrsPropertyTypeXType;
    pub type SingleOperationRefXElement = SingleOperationPropertyTypeXType;
    pub type SolidArrayPropertyXElement = SolidArrayPropertyTypeXType;
    pub type SolidMemberXElement = SolidPropertyTypeXType;
    pub type SolidMembersXElement = SolidArrayPropertyTypeXType;
    pub type SolidPropertyXElement = SolidPropertyTypeXType;
    pub type SourceCrsXElement = CrsPropertyTypeXType;
    pub type SourceDimensionsXElement = super::xs::PositiveIntegerXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SphericalCsPropertyElement(pub Box<dyn SphericalCsPropertyElementTrait>);
    pub trait SphericalCsPropertyElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    pub type SphericalCsRefXElement = SphericalCsPropertyTypeXType;
    pub type StatusXElement = StringOrRefTypeXType;
    pub type StatusReferenceXElement = ReferenceTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum StringOrNilReasonXType {
        NilReasonEnumeration(NilReasonEnumerationXType),
        String(super::xs::StringXType),
        AnyUri(super::xs::AnyUriXType),
    }
    pub type StringValueXElement = super::xs::StringXType;
    pub type SubComplexXElement = TopoComplexPropertyTypeXType;
    pub type SubjectXElement = TargetPropertyTypeXType;
    pub type SuperComplexXElement = TopoComplexPropertyTypeXType;
    pub type SurfaceArrayPropertyXElement = SurfaceArrayPropertyTypeXType;
    pub type SurfaceMemberXElement = SurfacePropertyTypeXType;
    pub type SurfaceMembersXElement = SurfaceArrayPropertyTypeXType;
    pub type SurfacePropertyXElement = SurfacePropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TargetPropertyElement(pub Box<dyn TargetPropertyElementTrait>);
    pub trait TargetPropertyElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    pub type TargetCrsXElement = CrsPropertyTypeXType;
    pub type TargetDimensionsXElement = super::xs::PositiveIntegerXType;
    pub type TargetElementXElement = super::xs::StringXType;
    pub type TemporalCrsRefXElement = TemporalCrsPropertyTypeXType;
    pub type TemporalCsRefXElement = TemporalCsPropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TemporalDatumPropertyElement(pub Box<dyn TemporalDatumPropertyElementTrait>);
    pub trait TemporalDatumPropertyElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    pub type TemporalDatumRefXElement = TemporalDatumPropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TimeCsPropertyElement(pub Box<dyn TimeCsPropertyElementTrait>);
    pub trait TimeCsPropertyElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    pub type TimeIntervalXElement = TimeIntervalLengthTypeXType;
    pub type TimePositionXElement = TimePositionTypeXType;
    pub type TopoComplexPropertyXElement = TopoComplexPropertyTypeXType;
    pub type TopoCurvePropertyXElement = TopoCurvePropertyTypeXType;
    pub type TopoPointPropertyXElement = TopoPointPropertyTypeXType;
    pub type TopoPrimitiveMemberXElement = TopoPrimitiveMemberTypeXType;
    pub type TopoPrimitiveMembersXElement = TopoPrimitiveArrayAssociationTypeXType;
    pub type TopoSurfacePropertyXElement = TopoSurfacePropertyTypeXType;
    pub type TopoVolumePropertyXElement = TopoVolumePropertyTypeXType;
    pub type TrackXElement = HistoryPropertyTypeXType;
    pub type TransformationRefXElement = TransformationPropertyTypeXType;
    pub type TrianglePatchesXElement = SurfacePatchArrayPropertyTypeXType;
    pub type TupleListXElement = CoordinatesTypeXType;
    pub type UnitOfMeasureXElement = UnitOfMeasureTypeXType;
    pub type Uom = super::xs::AnyUriXType;
    pub type UserDefinedCsPropertyElement = UserDefinedCsPropertyTypeXType;
    pub type UserDefinedCsRefXElement = UserDefinedCsPropertyTypeXType;
    pub type UsesAffineCsXElement = AffineCsPropertyTypeXType;
    pub type UsesAxisXElement = CoordinateSystemAxisPropertyTypeXType;
    pub type UsesCsXElement = CoordinateSystemPropertyTypeXType;
    pub type UsesCartesianCsXElement = CartesianCsPropertyTypeXType;
    pub type UsesEllipsoidXElement = EllipsoidPropertyTypeXType;
    pub type UsesEllipsoidalCsXElement = EllipsoidalCsPropertyTypeXType;
    pub type UsesEngineeringDatumXElement = EngineeringDatumPropertyTypeXType;
    pub type UsesGeodeticDatumXElement = GeodeticDatumPropertyTypeXType;
    pub type UsesImageDatumXElement = ImageDatumPropertyTypeXType;
    pub type UsesMethodXElement = OperationMethodPropertyTypeXType;
    pub type UsesObliqueCartesianCsXElement = ObliqueCartesianCsPropertyTypeXType;
    pub type UsesOperationXElement = CoordinateOperationPropertyTypeXType;
    pub type UsesParameterXElement = AbstractGeneralOperationParameterPropertyTypeXType;
    pub type UsesPrimeMeridianXElement = PrimeMeridianPropertyTypeXType;
    pub type UsesSingleOperationXElement = CoordinateOperationPropertyTypeXType;
    pub type UsesSphericalCsXElement = SphericalCsPropertyTypeXType;
    pub type UsesTemporalCsXElement = TemporalCsPropertyTypeXType;
    pub type UsesTemporalDatumXElement = TemporalDatumPropertyTypeXType;
    pub type UsesTimeCsXElement = TimeCsPropertyTypeXType;
    pub type UsesValueXElement = AbstractGeneralParameterValuePropertyTypeXType;
    pub type UsesVerticalCsXElement = VerticalCsPropertyTypeXType;
    pub type UsesVerticalDatumXElement = VerticalDatumPropertyTypeXType;
    pub type UsingXElement = ProcedurePropertyTypeXType;
    pub type ValidTimeXElement = TimePrimitivePropertyTypeXType;
    pub type ValueXElement = MeasureTypeXType;
    pub type ValueComponentXElement = ValuePropertyTypeXType;
    pub type ValueComponentsXElement = ValueArrayPropertyTypeXType;
    pub type ValueFileXElement = super::xs::AnyUriXType;
    pub type ValueListXElement = MeasureListTypeXType;
    pub type ValueOfParameterXElement = OperationParameterPropertyTypeXType;
    pub type ValuePropertyXElement = ValuePropertyTypeXType;
    pub type ValuesOfGroupXElement = OperationParameterGroupPropertyTypeXType;
    pub type VectorXElement = VectorTypeXType;
    pub type VerticalCrsRefXElement = VerticalCrsPropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalCsPropertyElement(pub Box<dyn VerticalCsPropertyElementTrait>);
    pub trait VerticalCsPropertyElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    pub type VerticalCsRefXElement = VerticalCsPropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct VerticalDatumPropertyElement(pub Box<dyn VerticalDatumPropertyElementTrait>);
    pub trait VerticalDatumPropertyElementTrait:
        Debug + Serialize + DeserializeOwned + AsAny
    {
    }
    pub type VerticalDatumRefXElement = VerticalDatumPropertyTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGmlContent2XType {
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(default, rename = "identifier")]
        pub identifier: Option<IdentifierXElement>,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AbstractGriddedSurfaceContent2592XType {
        #[serde(rename = "rows")]
        pub rows: RowsXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ArcStringByBulgeContent2548XType {
        #[serde(rename = "Content2549")]
        Content2549(Vec<ArcStringByBulgeContent2549XType>),
        #[serde(rename = "posList")]
        PosList(PosListXElement),
        #[serde(rename = "coordinates")]
        Coordinates(CoordinatesXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ArcByBulgeContent2552XType {
        #[serde(rename = "Content2553")]
        Content2553(Vec<ArcByBulgeContent2553XType>),
        #[serde(rename = "posList")]
        PosList(PosListXElement),
        #[serde(rename = "coordinates")]
        Coordinates(CoordinatesXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ArcByCenterPointContent2555XType {
        #[serde(rename = "Content2556")]
        Content2556(ArcByCenterPointContent2556XType),
        #[serde(rename = "posList")]
        PosList(PosListXElement),
        #[serde(rename = "coordinates")]
        Coordinates(CoordinatesXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ArcStringContent2540XType {
        #[serde(rename = "Content2541")]
        Content2541(Vec<ArcStringContent2541XType>),
        #[serde(rename = "posList")]
        PosList(PosListXElement),
        #[serde(rename = "coordinates")]
        Coordinates(CoordinatesXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ArcContent2544XType {
        #[serde(rename = "Content2545")]
        Content2545(Vec<ArcContent2545XType>),
        #[serde(rename = "posList")]
        PosList(PosListXElement),
        #[serde(rename = "coordinates")]
        Coordinates(CoordinatesXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum BSplineContent2565XType {
        #[serde(rename = "Content2566")]
        Content2566(Vec<BSplineContent2566XType>),
        #[serde(rename = "posList")]
        PosList(PosListXElement),
        #[serde(rename = "coordinates")]
        Coordinates(CoordinatesXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum BezierContent2571XType {
        #[serde(rename = "Content2572")]
        Content2572(Vec<BezierContent2572XType>),
        #[serde(rename = "posList")]
        PosList(PosListXElement),
        #[serde(rename = "coordinates")]
        Coordinates(CoordinatesXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct BoundedFeatureContent1840XType {
        #[serde(default, rename = "metaDataProperty")]
        pub meta_data_property: Vec<MetaDataPropertyXElement>,
        #[serde(default, rename = "description")]
        pub description: Option<DescriptionXElement>,
        #[serde(default, rename = "descriptionReference")]
        pub description_reference: Option<DescriptionReferenceXElement>,
        #[serde(default, rename = "identifier")]
        pub identifier: Option<IdentifierXElement>,
        #[serde(default, rename = "name")]
        pub name: Vec<NameXElement>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum BoundingShapeContent2341XType {
        #[serde(rename = "Envelope")]
        Envelope(EnvelopeXElement),
        #[serde(rename = "Null")]
        Null(NullXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CircleByCenterPointContent2559XType {
        #[serde(rename = "Content2560")]
        Content2560(CircleByCenterPointContent2560XType),
        #[serde(rename = "posList")]
        PosList(PosListXElement),
        #[serde(rename = "coordinates")]
        Coordinates(CoordinatesXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ConventionalUnitContent2654XType {
        #[serde(rename = "conversionToPreferredUnit")]
        ConversionToPreferredUnit(ConversionToPreferredUnitXElement),
        #[serde(rename = "roughConversionToPreferredUnit")]
        RoughConversionToPreferredUnit(RoughConversionToPreferredUnitXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CubicSplineContent2562XType {
        #[serde(rename = "Content2563")]
        Content2563(Vec<CubicSplineContent2563XType>),
        #[serde(rename = "posList")]
        PosList(PosListXElement),
        #[serde(rename = "coordinates")]
        Coordinates(CoordinatesXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DmsAngleContent1823XType {
        #[serde(rename = "decimalMinutes")]
        DecimalMinutes(DecimalMinutesXElement),
        #[serde(rename = "Content1824")]
        Content1824(DmsAngleContent1824XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DataBlockContent1735XType {
        #[serde(rename = "tupleList")]
        TupleList(TupleListXElement),
        #[serde(rename = "doubleOrNilReasonTupleList")]
        DoubleOrNilReasonTupleList(DoubleOrNilReasonTupleListXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DictionaryContent2504XType {
        #[serde(rename = "dictionaryEntry")]
        DictionaryEntry(DictionaryEntryXElement),
        #[serde(rename = "indirectEntry")]
        IndirectEntry(IndirectEntryXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DirectionVectorContent2348XType {
        #[serde(rename = "horizontalAngle")]
        pub horizontal_angle: AngleTypeXType,
        #[serde(rename = "verticalAngle")]
        pub vertical_angle: AngleTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum DomainSetContent1732XType {
        #[serde(rename = "AbstractGeometry")]
        AbstractGeometry(AbstractGeometryXElement),
        #[serde(rename = "AbstractTimeObject")]
        AbstractTimeObject(AbstractTimeObjectXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum EngineeringCrsContent1770XType {
        #[serde(rename = "affineCS")]
        AffineCs(AffineCsPropertyElement),
        #[serde(rename = "cartesianCS")]
        CartesianCs(CartesianCsPropertyElement),
        #[serde(rename = "cylindricalCS")]
        CylindricalCs(CylindricalCsPropertyElement),
        #[serde(rename = "linearCS")]
        LinearCs(LinearCsPropertyElement),
        #[serde(rename = "polarCS")]
        PolarCs(PolarCsPropertyElement),
        #[serde(rename = "sphericalCS")]
        SphericalCs(SphericalCsPropertyElement),
        #[serde(rename = "userDefinedCS")]
        UserDefinedCs(UserDefinedCsPropertyElement),
        #[serde(rename = "coordinateSystem")]
        CoordinateSystem(CoordinateSystemPropertyElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EnvelopeContent2343XType {
        #[serde(rename = "lowerCorner")]
        pub lower_corner: DirectPositionTypeXType,
        #[serde(rename = "upperCorner")]
        pub upper_corner: DirectPositionTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct EnvelopeWithTimePeriodContent2345XType {
        #[serde(rename = "beginPosition")]
        pub begin_position: TimePositionTypeXType,
        #[serde(rename = "endPosition")]
        pub end_position: TimePositionTypeXType,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum FileContent1737XType {
        #[serde(rename = "fileName")]
        FileName(super::xs::AnyUriXType),
        #[serde(rename = "fileReference")]
        FileReference(super::xs::AnyUriXType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum GeocentricCrsContent1820XType {
        #[serde(rename = "usesCartesianCS")]
        UsesCartesianCs(UsesCartesianCsXElement),
        #[serde(rename = "usesSphericalCS")]
        UsesSphericalCs(UsesSphericalCsXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum GeodesicStringContent2578XType {
        #[serde(rename = "pos")]
        Pos(PosXElement),
        #[serde(rename = "pointProperty")]
        PointProperty(PointPropertyXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum GeodeticCrsContent1756XType {
        #[serde(rename = "ellipsoidalCS")]
        EllipsoidalCs(EllipsoidalCsPropertyElement),
        #[serde(rename = "cartesianCS")]
        CartesianCs(CartesianCsPropertyElement),
        #[serde(rename = "sphericalCS")]
        SphericalCs(SphericalCsPropertyElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum GeometricComplexPropertyContent2353XType {
        #[serde(rename = "GeometricComplex")]
        GeometricComplex(GeometricComplexXElement),
        #[serde(rename = "CompositeCurve")]
        CompositeCurve(CompositeCurveXElement),
        #[serde(rename = "CompositeSurface")]
        CompositeSurface(CompositeSurfaceXElement),
        #[serde(rename = "CompositeSolid")]
        CompositeSolid(CompositeSolidXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum GridContent2374XType {
        #[serde(rename = "axisLabels")]
        AxisLabels(NcNameListXType),
        #[serde(rename = "axisName")]
        AxisName(Vec<super::xs::StringXType>),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ImageCrsContent1774XType {
        #[serde(rename = "cartesianCS")]
        CartesianCs(CartesianCsPropertyElement),
        #[serde(rename = "affineCS")]
        AffineCs(AffineCsPropertyElement),
        #[serde(rename = "usesObliqueCartesianCS")]
        UsesObliqueCartesianCs(UsesObliqueCartesianCsXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum LineStringSegmentContent2537XType {
        #[serde(rename = "Content2538")]
        Content2538(Vec<LineStringSegmentContent2538XType>),
        #[serde(rename = "posList")]
        PosList(PosListXElement),
        #[serde(rename = "coordinates")]
        Coordinates(CoordinatesXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum LineStringContent2531XType {
        #[serde(rename = "Content2532")]
        Content2532(Vec<LineStringContent2532XType>),
        #[serde(rename = "posList")]
        PosList(PosListXElement),
        #[serde(rename = "coordinates")]
        Coordinates(CoordinatesXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum LinearRingContent2642XType {
        #[serde(rename = "Content2643")]
        Content2643(Vec<LinearRingContent2643XType>),
        #[serde(rename = "posList")]
        PosList(PosListXElement),
        #[serde(rename = "coordinates")]
        Coordinates(CoordinatesXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum LocationPropertyContent1835XType {
        #[serde(rename = "AbstractGeometry")]
        AbstractGeometry(AbstractGeometryXElement),
        #[serde(rename = "LocationKeyWord")]
        LocationKeyWord(LocationKeyWordXElement),
        #[serde(rename = "LocationString")]
        LocationString(LocationStringXElement),
        #[serde(rename = "Null")]
        Null(NullXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum MovingObjectStatusContent1849XType {
        #[serde(rename = "position")]
        Position(GeometryPropertyTypeXType),
        #[serde(rename = "pos")]
        Pos(PosXElement),
        #[serde(rename = "locationName")]
        LocationName(LocationNameXElement),
        #[serde(rename = "locationReference")]
        LocationReference(LocationReferenceXElement),
        #[serde(rename = "location")]
        Location(LocationPropertyElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum OperationMethodContent2475XType {
        #[serde(rename = "formulaCitation")]
        FormulaCitation(FormulaCitationXElement),
        #[serde(rename = "formula")]
        Formula(FormulaXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ParameterValueContent2471XType {
        #[serde(rename = "value")]
        Value(ValueXElement),
        #[serde(rename = "dmsAngleValue")]
        DmsAngleValue(DmsAngleValueXElement),
        #[serde(rename = "stringValue")]
        StringValue(StringValueXElement),
        #[serde(rename = "integerValue")]
        IntegerValue(IntegerValueXElement),
        #[serde(rename = "booleanValue")]
        BooleanValue(BooleanValueXElement),
        #[serde(rename = "valueList")]
        ValueList(ValueListXElement),
        #[serde(rename = "integerValueList")]
        IntegerValueList(IntegerValueListXElement),
        #[serde(rename = "valueFile")]
        ValueFile(ValueFileXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum PointContent658XType {
        #[serde(rename = "pos")]
        Pos(PosXElement),
        #[serde(rename = "coordinates")]
        Coordinates(CoordinatesXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ProjectedCrsContent1763XType {
        #[serde(rename = "baseGeodeticCRS")]
        BaseGeodeticCrs(BaseGeodeticCrsXElement),
        #[serde(rename = "baseGeographicCRS")]
        BaseGeographicCrs(BaseGeographicCrsXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum RowsRowContent2595XType {
        #[serde(rename = "pos")]
        Pos(PosXElement),
        #[serde(rename = "pointProperty")]
        PointProperty(PointPropertyXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TemporalCrsContent1778XType {
        #[serde(rename = "timeCS")]
        TimeCs(TimeCsPropertyElement),
        #[serde(rename = "usesTemporalCS")]
        UsesTemporalCs(UsesTemporalCsXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TimeCoordinateSystemContent1793XType {
        #[serde(rename = "originPosition")]
        OriginPosition(TimePositionTypeXType),
        #[serde(rename = "origin")]
        Origin(TimeInstantPropertyTypeXType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TimePeriodContent2516XType {
        #[serde(rename = "beginPosition")]
        BeginPosition(TimePositionTypeXType),
        #[serde(rename = "begin")]
        Begin(TimeInstantPropertyTypeXType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TimePeriodContent2517XType {
        #[serde(rename = "endPosition")]
        EndPosition(TimePositionTypeXType),
        #[serde(rename = "end")]
        End(TimeInstantPropertyTypeXType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TimePeriodContent2518XType {
        #[serde(rename = "duration")]
        Duration(DurationXElement),
        #[serde(rename = "timeInterval")]
        TimeInterval(TimeIntervalXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TinTypeControlPointContent2602XType {
        #[serde(rename = "pos")]
        Pos(PosXElement),
        #[serde(rename = "pointProperty")]
        PointProperty(PointPropertyXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ValueArrayPropertyContent2364XType {
        #[serde(rename = "AbstractValue")]
        AbstractValue(AbstractValueXElement),
        #[serde(rename = "AbstractGeometry")]
        AbstractGeometry(AbstractGeometryXElement),
        #[serde(rename = "AbstractTimeObject")]
        AbstractTimeObject(AbstractTimeObjectXElement),
        #[serde(rename = "Null")]
        Null(NullXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ValuePropertyContent2362XType {
        #[serde(rename = "AbstractValue")]
        AbstractValue(AbstractValueXElement),
        #[serde(rename = "AbstractGeometry")]
        AbstractGeometry(AbstractGeometryXElement),
        #[serde(rename = "AbstractTimeObject")]
        AbstractTimeObject(AbstractTimeObjectXElement),
        #[serde(rename = "Null")]
        Null(NullXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ArcStringByBulgeContent2549XType {
        #[serde(rename = "pos")]
        Pos(PosXElement),
        #[serde(rename = "pointProperty")]
        PointProperty(PointPropertyXElement),
        #[serde(rename = "pointRep")]
        PointRep(PointRepXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ArcByBulgeContent2553XType {
        #[serde(rename = "pos")]
        Pos(PosXElement),
        #[serde(rename = "pointProperty")]
        PointProperty(PointPropertyXElement),
        #[serde(rename = "pointRep")]
        PointRep(PointRepXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ArcByCenterPointContent2556XType {
        #[serde(rename = "pos")]
        Pos(PosXElement),
        #[serde(rename = "pointProperty")]
        PointProperty(PointPropertyXElement),
        #[serde(rename = "pointRep")]
        PointRep(PointRepXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ArcStringContent2541XType {
        #[serde(rename = "pos")]
        Pos(PosXElement),
        #[serde(rename = "pointProperty")]
        PointProperty(PointPropertyXElement),
        #[serde(rename = "pointRep")]
        PointRep(PointRepXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ArcContent2545XType {
        #[serde(rename = "pos")]
        Pos(PosXElement),
        #[serde(rename = "pointProperty")]
        PointProperty(PointPropertyXElement),
        #[serde(rename = "pointRep")]
        PointRep(PointRepXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum BSplineContent2566XType {
        #[serde(rename = "pos")]
        Pos(PosXElement),
        #[serde(rename = "pointProperty")]
        PointProperty(PointPropertyXElement),
        #[serde(rename = "pointRep")]
        PointRep(PointRepXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum BezierContent2572XType {
        #[serde(rename = "pos")]
        Pos(PosXElement),
        #[serde(rename = "pointProperty")]
        PointProperty(PointPropertyXElement),
        #[serde(rename = "pointRep")]
        PointRep(PointRepXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CircleByCenterPointContent2560XType {
        #[serde(rename = "pos")]
        Pos(PosXElement),
        #[serde(rename = "pointProperty")]
        PointProperty(PointPropertyXElement),
        #[serde(rename = "pointRep")]
        PointRep(PointRepXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum CubicSplineContent2563XType {
        #[serde(rename = "pos")]
        Pos(PosXElement),
        #[serde(rename = "pointProperty")]
        PointProperty(PointPropertyXElement),
        #[serde(rename = "pointRep")]
        PointRep(PointRepXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct DmsAngleContent1824XType {
        #[serde(rename = "minutes")]
        pub minutes: MinutesXElement,
        #[serde(default, rename = "seconds")]
        pub seconds: Option<SecondsXElement>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum LineStringSegmentContent2538XType {
        #[serde(rename = "pos")]
        Pos(PosXElement),
        #[serde(rename = "pointProperty")]
        PointProperty(PointPropertyXElement),
        #[serde(rename = "pointRep")]
        PointRep(PointRepXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum LineStringContent2532XType {
        #[serde(rename = "pos")]
        Pos(PosXElement),
        #[serde(rename = "pointProperty")]
        PointProperty(PointPropertyXElement),
        #[serde(rename = "pointRep")]
        PointRep(PointRepXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum LinearRingContent2643XType {
        #[serde(rename = "pos")]
        Pos(PosXElement),
        #[serde(rename = "pointProperty")]
        PointProperty(PointPropertyXElement),
        #[serde(rename = "pointRep")]
        PointRep(PointRepXElement),
    }
}
pub mod gsr {
    use serde::{Deserialize, Serialize};
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ScCrsPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<ScCrsPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ScCrsPropertyTypeXTypeContent {
        #[serde(rename = "AbstractCRS")]
        pub abstract_crs: super::gml::AbstractCrsXElement,
    }
}
pub mod gss {
    use serde::{Deserialize, Serialize};
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GmObjectPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<GmObjectPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GmObjectPropertyTypeXTypeContent {
        #[serde(rename = "AbstractGeometry")]
        pub abstract_geometry: super::gml::AbstractGeometryXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GmPointPropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<GmPointPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct GmPointPropertyTypeXTypeContent {
        #[serde(rename = "Point")]
        pub point: super::gml::PointXElement,
    }
}
pub mod gts {
    use serde::{Deserialize, Serialize};
    pub type TmPeriodDurationXElement = super::xs::DurationXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TmPeriodDurationPropertyTypeXType {
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<TmPeriodDurationPropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TmPeriodDurationPropertyTypeXTypeContent {
        #[serde(rename = "TM_PeriodDuration")]
        pub tm_period_duration: TmPeriodDurationXElement,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TmPrimitivePropertyTypeXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@uuidref")]
        pub uuidref: Option<super::xs::StringXType>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gco::NilReason>,
        #[serde(default, rename = "$value")]
        pub content: Option<TmPrimitivePropertyTypeXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TmPrimitivePropertyTypeXTypeContent {
        #[serde(rename = "AbstractTimePrimitive")]
        pub abstract_time_primitive: super::gml::AbstractTimePrimitiveXElement,
    }
}
pub mod message {
    use serde::{Deserialize, Serialize};
    pub type AixmBasicMessageXElement = AixmBasicMessageTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AixmBasicMessageTypeXType {
        #[serde(rename = "@id")]
        pub id: super::gml::Id,
        #[serde(default, rename = "@aggregationType")]
        pub aggregation_type: Option<super::gml::AggregationTypeXType>,
        #[serde(rename = "Content2")]
        pub content_2: super::gml::AbstractGmlContent2XType,
        #[serde(rename = "Content9")]
        pub content_9: super::aixm::AbstractAixmFeatureBaseContent9XType,
        #[serde(rename = "Content11")]
        pub content_11: super::aixm::AbstractAixmFeatureBaseContent11XType,
        #[serde(default, rename = "sequenceNumber")]
        pub sequence_number: Option<super::aixm::SequenceNumberXElement>,
        #[serde(default, rename = "messageMetadata")]
        pub message_metadata: Option<super::aixm::MessageMetadataPropertyTypeXType>,
        #[serde(rename = "Content17")]
        pub content_17: AixmBasicMessageContent17XType,
    }
    impl super::gml::AbstractFeatureXElementTrait for AixmBasicMessageTypeXType {}
    impl super::gml::AbstractGmlXElementTrait for AixmBasicMessageTypeXType {}
    impl super::gml::AbstractObjectXElementTrait for AixmBasicMessageTypeXType {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct BasicMessageMemberAixmPropertyTypeXType {
        #[serde(
            default = "BasicMessageMemberAixmPropertyTypeXType::default_owns",
            rename = "@owns"
        )]
        pub owns: super::xs::BooleanXType,
        #[serde(default, rename = "@type")]
        pub type_: Option<super::xlink::Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<super::xlink::Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<super::xlink::Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<super::xlink::Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<super::xlink::Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<super::xlink::Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<super::xlink::Actuate>,
        #[serde(default, rename = "@nilReason")]
        pub nil_reason: Option<super::gml::NilReasonTypeXType>,
        #[serde(default, rename = "@remoteSchema")]
        pub remote_schema: Option<super::gml::RemoteSchema>,
        #[serde(rename = "$value")]
        pub content: BasicMessageMemberAixmPropertyTypeXTypeContent,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum BasicMessageMemberAixmPropertyTypeXTypeContent {
        #[serde(rename = "AbstractAIXMFeature")]
        AbstractAixmFeature(super::aixm::AbstractAixmFeatureXElement),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AixmBasicMessageContent17XType {
        #[serde(default, rename = "hasMember")]
        pub has_member: Vec<BasicMessageMemberAixmPropertyTypeXType>,
    }
}
pub mod xlink {
    use core::fmt::Debug;
    use serde::{de::DeserializeOwned, Deserialize, Serialize};
    use xsd_parser::AsAny;
    pub type Actuate = ActuateTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ActuateTypeXType {
        #[serde(rename = "onLoad")]
        OnLoad,
        #[serde(rename = "onRequest")]
        OnRequest,
        #[serde(rename = "other")]
        Other,
        #[serde(rename = "none")]
        None,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArcXElement(pub Box<dyn ArcXElementTrait>);
    pub trait ArcXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ArcTypeXType {
        #[serde(rename = "@type")]
        pub type_: Type,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<Actuate>,
        #[serde(default, rename = "@from")]
        pub from: Option<From>,
        #[serde(default, rename = "@to")]
        pub to: Option<To>,
        #[serde(default, rename = "title")]
        pub title: Vec<TitleXElement>,
    }
    pub type Arcrole = ArcroleTypeXType;
    pub type ArcroleTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ExtendedXType {
        #[serde(rename = "@type")]
        pub type_: Type,
        #[serde(default, rename = "@role")]
        pub role: Option<Role>,
        #[serde(default, rename = "@title")]
        pub title: Option<Title>,
        #[serde(default, rename = "$value")]
        pub content: Vec<ExtendedXTypeContent>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ExtendedXTypeContent {
        #[serde(rename = "title")]
        Title(TitleXElement),
        #[serde(rename = "resource")]
        Resource(ResourceXElement),
        #[serde(rename = "locator")]
        Locator(LocatorXElement),
        #[serde(rename = "arc")]
        Arc(ArcXElement),
    }
    pub type From = FromTypeXType;
    pub type FromTypeXType = String;
    pub type Href = HrefTypeXType;
    pub type HrefTypeXType = String;
    pub type Label = LabelTypeXType;
    pub type LabelTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LocatorXElement(pub Box<dyn LocatorXElementTrait>);
    pub trait LocatorXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct LocatorTypeXType {
        #[serde(rename = "@type")]
        pub type_: Type,
        #[serde(rename = "@href")]
        pub href: Href,
        #[serde(default, rename = "@role")]
        pub role: Option<Role>,
        #[serde(default, rename = "@title")]
        pub title: Option<Title>,
        #[serde(default, rename = "@label")]
        pub label: Option<Label>,
        #[serde(default, rename = "title")]
        pub title: Vec<TitleXElement>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ResourceXElement(pub Box<dyn ResourceXElementTrait>);
    pub trait ResourceXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    #[derive(Debug, Serialize, Deserialize)]
    pub struct ResourceTypeXType {
        #[serde(rename = "@type")]
        pub type_: Type,
        #[serde(default, rename = "@role")]
        pub role: Option<Role>,
        #[serde(default, rename = "@title")]
        pub title: Option<Title>,
        #[serde(default, rename = "@label")]
        pub label: Option<Label>,
    }
    pub type Role = RoleTypeXType;
    pub type RoleTypeXType = String;
    pub type Show = ShowTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum ShowTypeXType {
        #[serde(rename = "new")]
        New,
        #[serde(rename = "replace")]
        Replace,
        #[serde(rename = "embed")]
        Embed,
        #[serde(rename = "other")]
        Other,
        #[serde(rename = "none")]
        None,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct SimpleXType {
        #[serde(default, rename = "@type")]
        pub type_: Option<Type>,
        #[serde(default, rename = "@href")]
        pub href: Option<Href>,
        #[serde(default, rename = "@role")]
        pub role: Option<Role>,
        #[serde(default, rename = "@arcrole")]
        pub arcrole: Option<Arcrole>,
        #[serde(default, rename = "@title")]
        pub title: Option<Title>,
        #[serde(default, rename = "@show")]
        pub show: Option<Show>,
        #[serde(default, rename = "@actuate")]
        pub actuate: Option<Actuate>,
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TitleXElement(pub Box<dyn TitleXElementTrait>);
    pub trait TitleXElementTrait: Debug + Serialize + DeserializeOwned + AsAny {}
    pub type Title = TitleAttrTypeXType;
    pub type TitleAttrTypeXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct TitleEltTypeXType {
        #[serde(rename = "@type")]
        pub type_: Type,
        #[serde(default, rename = "@lang")]
        pub lang: Option<super::xml::Lang>,
    }
    pub type To = ToTypeXType;
    pub type ToTypeXType = String;
    pub type Type = TypeTypeXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum TypeTypeXType {
        #[serde(rename = "simple")]
        Simple,
        #[serde(rename = "extended")]
        Extended,
        #[serde(rename = "title")]
        Title,
        #[serde(rename = "resource")]
        Resource,
        #[serde(rename = "locator")]
        Locator,
        #[serde(rename = "arc")]
        Arc,
    }
}
pub mod xml {
    use serde::{Deserialize, Serialize};
    #[derive(Debug, Serialize, Deserialize)]
    pub enum Lang2507XType {
        #[serde(rename = "")]
        Unknown1,
    }
    pub type Base = super::xs::AnyUriXType;
    pub type Id = super::xs::IdXType;
    #[derive(Debug, Serialize, Deserialize)]
    pub enum Lang {
        Language(super::xs::LanguageXType),
        Lang2507(Lang2507XType),
    }
    #[derive(Debug, Serialize, Deserialize)]
    pub enum Space {
        #[serde(rename = "default")]
        Default,
        #[serde(rename = "preserve")]
        Preserve,
    }
}
pub mod xs {
    use serde::{Deserialize, Serialize};
    #[derive(Debug, Serialize, Deserialize, Default)]
    pub struct EntitiesXType(pub Vec<String>);
    #[derive(Debug, Serialize, Deserialize, Default)]
    pub struct EntityXType(pub Vec<String>);
    pub type IdXType = String;
    pub type IdrefXType = String;
    #[derive(Debug, Serialize, Deserialize, Default)]
    pub struct IdrefsXType(pub Vec<String>);
    pub type NcNameXType = String;
    pub type NmtokenXType = String;
    #[derive(Debug, Serialize, Deserialize, Default)]
    pub struct NmtokensXType(pub Vec<String>);
    pub type NotationXType = String;
    pub type NameXType = String;
    pub type QNameXType = String;
    #[derive(Debug, Serialize, Deserialize)]
    pub struct AnyTypeXType;
    impl super::gml::AbstractObjectXElementTrait for AnyTypeXType {}
    impl super::gml::AbstractValueXElementTrait for AnyTypeXType {}
    pub type AnyUriXType = String;
    pub type Base64BinaryXType = String;
    pub type BooleanXType = bool;
    pub type ByteXType = i8;
    pub type DateXType = String;
    pub type DateTimeXType = String;
    pub type DecimalXType = f64;
    pub type DoubleXType = f64;
    pub type DurationXType = String;
    pub type FloatXType = f32;
    pub type GDayXType = String;
    pub type GMonthXType = String;
    pub type GMonthDayXType = String;
    pub type GYearXType = String;
    pub type GYearMonthXType = String;
    pub type HexBinaryXType = String;
    pub type IntXType = i32;
    pub type IntegerXType = i32;
    pub type LanguageXType = String;
    pub type LongXType = i64;
    pub type NegativeIntegerXType = isize;
    pub type NonNegativeIntegerXType = usize;
    pub type NonPositiveIntegerXType = isize;
    pub type NormalizedStringXType = String;
    pub type PositiveIntegerXType = usize;
    pub type ShortXType = i16;
    pub type StringXType = String;
    pub type TimeXType = String;
    pub type TokenXType = String;
    pub type UnsignedByteXType = u8;
    pub type UnsignedIntXType = u32;
    pub type UnsignedLongXType = u64;
    pub type UnsignedShortXType = u16;
}
